[
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 167
    },
    "digest": "f8cc4b331a19ff4df8e4a490f906ee69",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_cat/health?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 251
    },
    "digest": "311c4b632a29b9ead63b02d01f10096b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /customer/_doc/1\n{\n  \"name\": \"John Doe\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/customer/_doc/1",
        "query": null,
        "body": {
          "name": "John Doe"
        },
        "params": {
          "index": "customer",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 266
    },
    "digest": "2f3590ba3141cbe0c766bd6e7c1bf5f1",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"customer\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"result\" : \"created\",\n  \"_shards\" : {\n    \"total\" : 2,\n    \"successful\" : 2,\n    \"failed\" : 0\n  },\n  \"_seq_no\" : 26,\n  \"_primary_term\" : 4\n}"
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 290
    },
    "digest": "3f3b3e207f79303ce6f86e03e928e062",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /customer/_doc/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/customer/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "customer",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 299
    },
    "digest": "6e62b5dec4c82e5dfb37df8473c84998",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"customer\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"_seq_no\" : 26,\n  \"_primary_term\" : 4,\n  \"found\" : true,\n  \"_source\" : {\n    \"name\": \"John Doe\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 392
    },
    "digest": "506844befdc5691d835771bcbb1c1a60",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": { \"match_all\": {} },\n  \"sort\": [\n    { \"account_number\": \"asc\" }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "sort": [
            {
              "account_number": "asc"
            }
          ]
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 407
    },
    "digest": "d12b87347bfd1270258ed9bafb232842",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 63,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 5,\n    \"successful\" : 5,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 1000,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : null,\n    \"hits\" : [ {\n      \"_index\" : \"bank\",\n      \"_id\" : \"0\",\n      \"sort\": [0],\n      \"_score\" : null,\n      \"_source\" : {\"account_number\":0,\"balance\":16623,\"firstname\":\"Bradshaw\",\"lastname\":\"Mckenzie\",\"age\":29,\"gender\":\"F\",\"address\":\"244 Columbus Place\",\"employer\":\"Euron\",\"email\":\"bradshawmckenzie@euron.com\",\"city\":\"Hobucken\",\"state\":\"CO\"}\n    }, {\n      \"_index\" : \"bank\",\n      \"_id\" : \"1\",\n      \"sort\": [1],\n      \"_score\" : null,\n      \"_source\" : {\"account_number\":1,\"balance\":39225,\"firstname\":\"Amber\",\"lastname\":\"Duke\",\"age\":32,\"gender\":\"M\",\"address\":\"880 Holmes Lane\",\"employer\":\"Pyrami\",\"email\":\"amberduke@pyrami.com\",\"city\":\"Brogan\",\"state\":\"IL\"}\n    }, ...\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 461
    },
    "digest": "4b90feb9d5d3dbfce424dac0341320b7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": { \"match_all\": {} },\n  \"sort\": [\n    { \"account_number\": \"asc\" }\n  ],\n  \"from\": 10,\n  \"size\": 10\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "sort": [
            {
              "account_number": "asc"
            }
          ],
          "from": 10,
          "size": 10
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 482
    },
    "digest": "cd247f267968aa0927bfdad56852f8f5",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": { \"match\": { \"address\": \"mill lane\" } }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "address": "mill lane"
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 495
    },
    "digest": "231aa0bb39c35fe199d28fe0e4a62b2e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": { \"match_phrase\": { \"address\": \"mill lane\" } }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "address": "mill lane"
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 512
    },
    "digest": "47bb632c6091ad0cd94bc660bdd309a5",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"age\": \"40\" } }\n      ],\n      \"must_not\": [\n        { \"match\": { \"state\": \"ID\" } }\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": [
                {
                  "match": {
                    "age": "40"
                  }
                }
              ],
              "must_not": [
                {
                  "match": {
                    "state": "ID"
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 544
    },
    "digest": "251ea12c1248385ab409906ac64d9ee9",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": { \"match_all\": {} },\n      \"filter\": {\n        \"range\": {\n          \"balance\": {\n            \"gte\": 20000,\n            \"lte\": 30000\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "range": {
                  "balance": {
                    "gte": 20000,
                    "lte": 30000
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 578
    },
    "digest": "feefeb68144002fd1fff57b77b95b85e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"group_by_state\": {\n      \"terms\": {\n        \"field\": \"state.keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "group_by_state": {
              "terms": {
                "field": "state.keyword"
              }
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 599
    },
    "digest": "741af8f842967afbb493f133e34a3b0d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 29,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 5,\n    \"successful\": 5,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\" : {\n     \"total\" : {\n        \"value\": 1000,\n        \"relation\": \"eq\"\n     },\n    \"max_score\" : null,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"group_by_state\" : {\n      \"doc_count_error_upper_bound\": 20,\n      \"sum_other_doc_count\": 770,\n      \"buckets\" : [ {\n        \"key\" : \"ID\",\n        \"doc_count\" : 27\n      }, {\n        \"key\" : \"TX\",\n        \"doc_count\" : 27\n      }, {\n        \"key\" : \"AL\",\n        \"doc_count\" : 25\n      }, {\n        \"key\" : \"MD\",\n        \"doc_count\" : 25\n      }, {\n        \"key\" : \"TN\",\n        \"doc_count\" : 23\n      }, {\n        \"key\" : \"MA\",\n        \"doc_count\" : 21\n      }, {\n        \"key\" : \"NC\",\n        \"doc_count\" : 21\n      }, {\n        \"key\" : \"ND\",\n        \"doc_count\" : 21\n      }, {\n        \"key\" : \"ME\",\n        \"doc_count\" : 20\n      }, {\n        \"key\" : \"MO\",\n        \"doc_count\" : 20\n      } ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 665
    },
    "digest": "cfbaea6f0df045c5d940bbb6a9c69cd8",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"group_by_state\": {\n      \"terms\": {\n        \"field\": \"state.keyword\"\n      },\n      \"aggs\": {\n        \"average_balance\": {\n          \"avg\": {\n            \"field\": \"balance\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "group_by_state": {
              "terms": {
                "field": "state.keyword"
              },
              "aggs": {
                "average_balance": {
                  "avg": {
                    "field": "balance"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "getting-started.asciidoc",
      "line": 691
    },
    "digest": "645796e8047967ca4a7635a22a876f4c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /bank/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"group_by_state\": {\n      \"terms\": {\n        \"field\": \"state.keyword\",\n        \"order\": {\n          \"average_balance\": \"desc\"\n        }\n      },\n      \"aggs\": {\n        \"average_balance\": {\n          \"avg\": {\n            \"field\": \"balance\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bank/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "group_by_state": {
              "terms": {
                "field": "state.keyword",
                "order": {
                  "average_balance": "desc"
                }
              },
              "aggs": {
                "average_balance": {
                  "avg": {
                    "field": "balance"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "bank"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/install/check-running.asciidoc",
      "line": 7
    },
    "digest": "3d1ff6097e2359f927c88c2ccdb36252",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "GET /",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/",
        "query": null,
        "body": null,
        "params": null,
        "api": "info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/install/check-running.asciidoc",
      "line": 7
    },
    "digest": "3d1ff6097e2359f927c88c2ccdb36252",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "GET /",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/",
        "query": null,
        "body": null,
        "params": null,
        "api": "info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/install/check-running.asciidoc",
      "line": 7
    },
    "digest": "3d1ff6097e2359f927c88c2ccdb36252",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "GET /",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/",
        "query": null,
        "body": null,
        "params": null,
        "api": "info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/install/check-running.asciidoc",
      "line": 7
    },
    "digest": "3d1ff6097e2359f927c88c2ccdb36252",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "GET /",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/",
        "query": null,
        "body": null,
        "params": null,
        "api": "info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/install/check-running.asciidoc",
      "line": 7
    },
    "digest": "3d1ff6097e2359f927c88c2ccdb36252",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "GET /",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/",
        "query": null,
        "body": null,
        "params": null,
        "api": "info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/secure-settings.asciidoc",
      "line": 35
    },
    "digest": "eb7e3aaed0c8f3f8e3462bf3df9a7a5c",
    "lang": "console",
    "found": [],
    "source": "POST _nodes/reload_secure_settings\n{\n  \"secure_settings_password\": \"s3cr3t\" <1>\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_nodes/reload_secure_settings",
        "query": null,
        "body": {
          "secure_settings_password": "s3cr3t"
        },
        "params": null,
        "api": "nodes.reload_secure_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/logging-config.asciidoc",
      "line": 155
    },
    "digest": "8e6bfb4441ffa15c86d5dc20fa083571",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT /_cluster/settings\n{\n  \"transient\": {\n    \"logger.org.elasticsearch.transport\": \"trace\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "logger.org.elasticsearch.transport": "trace"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 47
    },
    "digest": "00629ea43db6ee1704183170df085495",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy,elasticsearch/_cache/clear?request=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy,elasticsearch/_cache/clear",
        "query": {
          "request": "true"
        },
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 59
    },
    "digest": "adebfecf7485326e9f7fae9de9169abc",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"index.requests.cache.enable\": false\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index.requests.cache.enable": false
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 72
    },
    "digest": "f22e069bc0c6f9dae57e084c662a86fd",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index/_settings\n{ \"index.requests.cache.enable\": true }",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_settings",
        "query": null,
        "body": {
          "index.requests.cache.enable": true
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 86
    },
    "digest": "13e9c7cdd43161f1336c94fd70a0db0c",
    "lang": "console",
    "found": [],
    "source": "GET /my_index/_search?request_cache=true\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"popular_colors\": {\n      \"terms\": {\n        \"field\": \"colors\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "request_cache": "true"
        },
        "body": {
          "size": 0,
          "aggs": {
            "popular_colors": {
              "terms": {
                "field": "colors"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 139
    },
    "digest": "36da9668fef56910370f16bfb772cc40",
    "lang": "console",
    "found": [],
    "source": "GET /_stats/request_cache?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_stats/request_cache",
        "query": {
          "human": true
        },
        "body": null,
        "params": {
          "metric": "request_cache"
        },
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/indices/request_cache.asciidoc",
      "line": 146
    },
    "digest": "90631797c7fbda43902abf2cc0ea8304",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/stats/indices/request_cache?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/request_cache",
        "query": {
          "human": true
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "request_cache"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/sysconfig/swap.asciidoc",
      "line": 71
    },
    "digest": "ed250b74bc77c15bb794f55a12d762c3",
    "lang": "console",
    "found": [],
    "source": "GET _nodes?filter_path=**.mlockall",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes",
        "query": {
          "filter_path": "**.mlockall"
        },
        "body": null,
        "params": null,
        "api": "nodes.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/sysconfig/file-descriptors.asciidoc",
      "line": 29
    },
    "digest": "c5bc577ff92f889225b0d2617adcb48c",
    "lang": "console",
    "found": [],
    "source": "GET _nodes/stats/process?filter_path=**.max_file_descriptors",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/process",
        "query": {
          "filter_path": "**.max_file_descriptors"
        },
        "body": null,
        "params": {
          "metric": "process"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 30
    },
    "digest": "1cd3b9d65576a9212eef898eb3105758",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": \"primaries\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": "primaries"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 30
    },
    "digest": "f27c28ddbf4c266b5f42d14da837b8de",
    "lang": "console",
    "found": [],
    "source": "POST /_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_flush",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 50
    },
    "digest": "a21a7bf052b41f5b996dc58f7b69770f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "true"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 89
    },
    "digest": "c0a4b0c1c6eff14da8b152ceb19c1c31",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/health\n\nGET _cat/nodes",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.health"
      },
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 123
    },
    "digest": "45ef5156dbd2d3fd4fd22b8d99f7aad4",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": null\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 143
    },
    "digest": "2d9b30acd6b5683f39d53494c0dd779c",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/health\n\nGET _cat/recovery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.health"
      },
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 158
    },
    "digest": "3c5d5a5c34a62724942329658c688f5e",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=false",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "false"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 30
    },
    "digest": "1cd3b9d65576a9212eef898eb3105758",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": \"primaries\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": "primaries"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 30
    },
    "digest": "f27c28ddbf4c266b5f42d14da837b8de",
    "lang": "console",
    "found": [],
    "source": "POST /_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_flush",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 50
    },
    "digest": "a21a7bf052b41f5b996dc58f7b69770f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "true"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 204
    },
    "digest": "7e49705769c42895fb7b1e2ca028ff47",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/nodes",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 218
    },
    "digest": "45ef5156dbd2d3fd4fd22b8d99f7aad4",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": null\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "setup/restart-cluster.asciidoc",
      "line": 158
    },
    "digest": "3c5d5a5c34a62724942329658c688f5e",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=false",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "false"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/remote-clusters.asciidoc",
      "line": 133
    },
    "digest": "318d8096ad47c1c939776c2ce12758f9",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_one\": {\n          \"seeds\": [\n            \"127.0.0.1:9300\"\n          ],\n          \"transport.ping_schedule\": \"30s\"\n        },\n        \"cluster_two\": {\n          \"mode\": \"sniff\",\n          \"seeds\": [\n            \"127.0.0.1:9301\"\n          ],\n          \"transport.compress\": true,\n          \"skip_unavailable\": true\n        },\n        \"cluster_three\": {\n          \"mode\": \"proxy\",\n          \"proxy_address\": \"127.0.0.1:9302\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "cluster_one": {
                  "seeds": [
                    "127.0.0.1:9300"
                  ],
                  "transport.ping_schedule": "30s"
                },
                "cluster_two": {
                  "mode": "sniff",
                  "seeds": [
                    "127.0.0.1:9301"
                  ],
                  "transport.compress": true,
                  "skip_unavailable": true
                },
                "cluster_three": {
                  "mode": "proxy",
                  "proxy_address": "127.0.0.1:9302"
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/remote-clusters.asciidoc",
      "line": 170
    },
    "digest": "0b1aad9e990ae831f392f816dfbd4528",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_one\": {\n          \"seeds\": [\n            \"127.0.0.1:9300\"\n          ],\n          \"transport.ping_schedule\": \"60s\"\n        },\n        \"cluster_two\": {\n          \"mode\": \"sniff\",\n          \"seeds\": [\n            \"127.0.0.1:9301\"\n          ],\n          \"transport.compress\": false\n        },\n        \"cluster_three\": {\n          \"mode\": \"proxy\",\n          \"proxy_address\": \"127.0.0.1:9302\",\n          \"transport.compress\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "cluster_one": {
                  "seeds": [
                    "127.0.0.1:9300"
                  ],
                  "transport.ping_schedule": "60s"
                },
                "cluster_two": {
                  "mode": "sniff",
                  "seeds": [
                    "127.0.0.1:9301"
                  ],
                  "transport.compress": false
                },
                "cluster_three": {
                  "mode": "proxy",
                  "proxy_address": "127.0.0.1:9302",
                  "transport.compress": true
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/remote-clusters.asciidoc",
      "line": 208
    },
    "digest": "466bb2bc027f33a611e32fd7a9540eef",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_two\": { <1>\n          \"mode\": null,\n          \"seeds\": null,\n          \"skip_unavailable\": null,\n          \"transport\": {\n            \"compress\": null\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "cluster_two": {
                  "mode": null,
                  "seeds": null,
                  "skip_unavailable": null,
                  "transport": {
                    "compress": null
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 65
    },
    "digest": "1cd3b9d65576a9212eef898eb3105758",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": \"primaries\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": "primaries"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 66
    },
    "digest": "f27c28ddbf4c266b5f42d14da837b8de",
    "lang": "console",
    "found": [],
    "source": "POST /_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_flush",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 101
    },
    "digest": "a21a7bf052b41f5b996dc58f7b69770f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "true"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 116
    },
    "digest": "7e49705769c42895fb7b1e2ca028ff47",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/nodes",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 129
    },
    "digest": "45ef5156dbd2d3fd4fd22b8d99f7aad4",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": null\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 147
    },
    "digest": "5c53944aec2ce3e55854e315f0482029",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/health?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 177
    },
    "digest": "6b74ff6df5d7583add837b34a6c80a43",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/recovery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 194
    },
    "digest": "f8cc4b331a19ff4df8e4a490f906ee69",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_cat/health?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 201
    },
    "digest": "c4270d3851c76898fc8b112c6c597444",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodes?h=ip,name,version&v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": {
          "h": "ip,name,version",
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/rolling_upgrade.asciidoc",
      "line": 216
    },
    "digest": "3c5d5a5c34a62724942329658c688f5e",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=false",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "false"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 32
    },
    "digest": "1cd3b9d65576a9212eef898eb3105758",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": \"primaries\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": "primaries"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 31
    },
    "digest": "f27c28ddbf4c266b5f42d14da837b8de",
    "lang": "console",
    "found": [],
    "source": "POST /_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_flush",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 66
    },
    "digest": "a21a7bf052b41f5b996dc58f7b69770f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "true"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 91
    },
    "digest": "c0a4b0c1c6eff14da8b152ceb19c1c31",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/health\n\nGET _cat/nodes",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.health"
      },
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 124
    },
    "digest": "45ef5156dbd2d3fd4fd22b8d99f7aad4",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.routing.allocation.enable\": null\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.routing.allocation.enable": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 143
    },
    "digest": "2d9b30acd6b5683f39d53494c0dd779c",
    "lang": "console",
    "found": [
      "ruby"
    ],
    "source": "GET _cat/health\n\nGET _cat/recovery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.health"
      },
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/cluster_restart.asciidoc",
      "line": 159
    },
    "digest": "3c5d5a5c34a62724942329658c688f5e",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=false",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "false"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "upgrade/reindex_upgrade.asciidoc",
      "line": 160
    },
    "digest": "acd65c045139fef38ef5cd20c8c1cfc1",
    "lang": "console",
    "found": [],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://oldhost:9200\",\n      \"username\": \"user\",\n      \"password\": \"pass\"\n    },\n    \"index\": \"source\",\n    \"query\": {\n      \"match\": {\n        \"test\": \"data\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"dest\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "remote": {
              "host": "http://oldhost:9200",
              "username": "user",
              "password": "pass"
            },
            "index": "source",
            "query": {
              "match": {
                "test": "data"
              }
            }
          },
          "dest": {
            "index": "dest"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 10
    },
    "digest": "d9d28e9e9d7021a72c983f8e79aa8c6c",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"avg_grade\" : { \"avg\" : { \"field\" : \"grade\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "avg_grade": {
              "avg": {
                "field": "grade"
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 23
    },
    "digest": "aeb4454d959a0dc33d71380075657346",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"avg_grade\": {\n            \"value\": 75.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 42
    },
    "digest": "d05bbafb8c88850879b5990119a96f5e",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"avg_grade\" : {\n            \"avg\" : {\n                \"script\" : {\n                    \"source\" : \"doc.grade.value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "avg_grade": {
              "avg": {
                "script": {
                  "source": "doc.grade.value"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 61
    },
    "digest": "c04f4a48d0cb550a879fdc93454852de",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"avg_grade\" : {\n            \"avg\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"grade\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "avg_grade": {
              "avg": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "grade"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 85
    },
    "digest": "91994d98e766230911b3e659b3e51f17",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"avg_corrected_grade\" : {\n            \"avg\" : {\n                \"field\" : \"grade\",\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"_value * params.correction\",\n                    \"params\" : {\n                        \"correction\" : 1.2\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "avg_corrected_grade": {
              "avg": {
                "field": "grade",
                "script": {
                  "lang": "painless",
                  "source": "_value * params.correction",
                  "params": {
                    "correction": 1.2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/avg-aggregation.asciidoc",
      "line": 113
    },
    "digest": "2ec33e09d6080723ee2013bad694f35a",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grade_avg\" : {\n            \"avg\" : {\n                \"field\" : \"grade\",\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grade_avg": {
              "avg": {
                "field": "grade",
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 55
    },
    "digest": "c15dead46d351f62cfc066f1ca1a24eb",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"weighted_grade\": {\n            \"weighted_avg\": {\n                \"value\": {\n                    \"field\": \"grade\"\n                },\n                \"weight\": {\n                    \"field\": \"weight\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "weighted_grade": {
              "weighted_avg": {
                "value": {
                  "field": "grade"
                },
                "weight": {
                  "field": "weight"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 78
    },
    "digest": "476e06fa321ef1237e40aaaec3b3d642",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"weighted_grade\": {\n            \"value\": 70.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 101
    },
    "digest": "4c15a4b054c7d0aaaa17deaff853bb28",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_doc?refresh\n{\n    \"grade\": [1, 2, 3],\n    \"weight\": 2\n}\n\nPOST /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"weighted_grade\": {\n            \"weighted_avg\": {\n                \"value\": {\n                    \"field\": \"grade\"\n                },\n                \"weight\": {\n                    \"field\": \"weight\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "grade": [
            1,
            2,
            3
          ],
          "weight": 2
        },
        "params": {
          "index": "exams"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "weighted_grade": {
              "weighted_avg": {
                "value": {
                  "field": "grade"
                },
                "weight": {
                  "field": "weight"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 130
    },
    "digest": "d1823ccb5a2e9d8699555b94a5b32093",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"weighted_grade\": {\n            \"value\": 2.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 151
    },
    "digest": "e88e8c78ed50936c8b7436c90b988ddf",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"weighted_grade\": {\n            \"weighted_avg\": {\n                \"value\": {\n                    \"script\": \"doc.grade.value + 1\"\n                },\n                \"weight\": {\n                    \"script\": \"doc.weight.value + 1\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "weighted_grade": {
              "weighted_avg": {
                "value": {
                  "script": "doc.grade.value + 1"
                },
                "weight": {
                  "script": "doc.weight.value + 1"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/weighted-avg-aggregation.asciidoc",
      "line": 183
    },
    "digest": "cebfe0fed62091eb38b6348c89643f89",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"weighted_grade\": {\n            \"weighted_avg\": {\n                \"value\": {\n                    \"field\": \"grade\",\n                    \"missing\": 2\n                },\n                \"weight\": {\n                    \"field\": \"weight\",\n                    \"missing\": 3\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "weighted_grade": {
              "weighted_avg": {
                "value": {
                  "field": "grade",
                  "missing": 2
                },
                "weight": {
                  "field": "weight",
                  "missing": 3
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 11
    },
    "digest": "826140cdd3d5fe9a728239605c6dc71a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"type_count\" : {\n            \"cardinality\" : {\n                \"field\" : \"type\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "type_count": {
              "cardinality": {
                "field": "type"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 28
    },
    "digest": "ea974de430642c6289d33f750583a1cf",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"type_count\" : {\n            \"value\" : 3\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 45
    },
    "digest": "edbd54e71e56f3a5617aa012b100aa0f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"type_count\" : {\n            \"cardinality\" : {\n                \"field\" : \"type\",\n                \"precision_threshold\": 100 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "type_count": {
              "cardinality": {
                "field": "type",
                "precision_threshold": 100
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 185
    },
    "digest": "ef3a3e292e9e74d42703555178ed5fb6",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"type_promoted_count\" : {\n            \"cardinality\" : {\n                \"script\": {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['type'].value + ' ' + doc['promoted'].value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "type_promoted_count": {
              "cardinality": {
                "script": {
                  "lang": "painless",
                  "source": "doc['type'].value + ' ' + doc['promoted'].value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 205
    },
    "digest": "6969b29883eefa552475ae1837dc5f96",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"type_promoted_count\" : {\n            \"cardinality\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"type_field\": \"type\",\n                        \"promoted_field\": \"promoted\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "type_promoted_count": {
              "cardinality": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "type_field": "type",
                    "promoted_field": "promoted"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/cardinality-aggregation.asciidoc",
      "line": 232
    },
    "digest": "7d86ff090cbd87f144edb72e949470b3",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"tag_cardinality\" : {\n            \"cardinality\" : {\n                \"field\" : \"tag\",\n                \"missing\": \"N/A\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "tag_cardinality": {
              "cardinality": {
                "field": "tag",
                "missing": "N/A"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 11
    },
    "digest": "b1c3e5c4a1a22ac329bbdec4d0de1082",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : { \"extended_stats\" : { \"field\" : \"grade\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "field": "grade"
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 26
    },
    "digest": "ba29123e4866e81ee18631a7c94df4f7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"grades_stats\": {\n           \"count\": 2,\n           \"min\": 50.0,\n           \"max\": 100.0,\n           \"avg\": 75.0,\n           \"sum\": 150.0,\n           \"sum_of_squares\": 12500.0,\n           \"variance\": 625.0,\n           \"std_deviation\": 25.0,\n           \"std_deviation_bounds\": {\n            \"upper\": 125.0,\n            \"lower\": 25.0\n           }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 58
    },
    "digest": "eb8df98231df40c61f5feef4946b1a92",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"extended_stats\" : {\n                \"field\" : \"grade\",\n                \"sigma\" : 3 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "field": "grade",
                "sigma": 3
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 91
    },
    "digest": "83476d04b393850da0697e1bfae58b4a",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"extended_stats\" : {\n                \"script\" : {\n                    \"source\" : \"doc['grade'].value\",\n                    \"lang\" : \"painless\"\n                 }\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "script": {
                  "source": "doc['grade'].value",
                  "lang": "painless"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 112
    },
    "digest": "2cf036d054901b5d7b4a84780c320f2d",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"extended_stats\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"grade\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "grade"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 137
    },
    "digest": "533b447e1ca8c575e38ecd9b1917c17c",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"extended_stats\" : {\n                \"field\" : \"grade\",\n                \"script\" : {\n                    \"lang\" : \"painless\",\n                    \"source\": \"_value * params.correction\",\n                    \"params\" : {\n                        \"correction\" : 1.2\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "field": "grade",
                "script": {
                  "lang": "painless",
                  "source": "_value * params.correction",
                  "params": {
                    "correction": 1.2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/extendedstats-aggregation.asciidoc",
      "line": 166
    },
    "digest": "44a7cf8482bdc3d1c11f4b3b35683b99",
    "lang": "console",
    "found": [],
    "source": "GET /exams/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"extended_stats\" : {\n                \"field\" : \"grade\",\n                \"missing\": 0 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/exams/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grades_stats": {
              "extended_stats": {
                "field": "grade",
                "missing": 0
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geobounds-aggregation.asciidoc",
      "line": 10
    },
    "digest": "34cabdecfe9c2cb8dd929853882564eb",
    "lang": "console",
    "found": [],
    "source": "PUT /museums\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_point\"\n            }\n        }\n    }\n}\n\nPOST /museums/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"location\": \"52.374081,4.912350\", \"name\": \"NEMO Science Museum\"}\n{\"index\":{\"_id\":2}}\n{\"location\": \"52.369219,4.901618\", \"name\": \"Museum Het Rembrandthuis\"}\n{\"index\":{\"_id\":3}}\n{\"location\": \"52.371667,4.914722\", \"name\": \"Nederlands Scheepvaartmuseum\"}\n{\"index\":{\"_id\":4}}\n{\"location\": \"51.222900,4.405200\", \"name\": \"Letterenhuis\"}\n{\"index\":{\"_id\":5}}\n{\"location\": \"48.861111,2.336389\", \"name\": \"Musée du Louvre\"}\n{\"index\":{\"_id\":6}}\n{\"location\": \"48.860000,2.327000\", \"name\": \"Musée d'Orsay\"}\n\nPOST /museums/_search?size=0\n{\n    \"query\" : {\n        \"match\" : { \"name\" : \"musée\" }\n    },\n    \"aggs\" : {\n        \"viewport\" : {\n            \"geo_bounds\" : {\n                \"field\" : \"location\", <1>\n                \"wrap_longitude\" : true <2>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/museums",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/museums/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "location": "52.374081,4.912350",
            "name": "NEMO Science Museum"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "location": "52.369219,4.901618",
            "name": "Museum Het Rembrandthuis"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "location": "52.371667,4.914722",
            "name": "Nederlands Scheepvaartmuseum"
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "location": "51.222900,4.405200",
            "name": "Letterenhuis"
          },
          {
            "index": {
              "_id": 5
            }
          },
          {
            "location": "48.861111,2.336389",
            "name": "Musée du Louvre"
          },
          {
            "index": {
              "_id": 6
            }
          },
          {
            "location": "48.860000,2.327000",
            "name": "Musée d'Orsay"
          }
        ],
        "params": {
          "index": "museums"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "match": {
              "name": "musée"
            }
          },
          "aggs": {
            "viewport": {
              "geo_bounds": {
                "field": "location",
                "wrap_longitude": true
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geobounds-aggregation.asciidoc",
      "line": 60
    },
    "digest": "bd82ab8462b3dcd1bef1892e75277e67",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"viewport\": {\n            \"bounds\": {\n                \"top_left\": {\n                    \"lat\": 48.86111099738628,\n                    \"lon\": 2.3269999679178\n                },\n                \"bottom_right\": {\n                    \"lat\": 48.85999997612089,\n                    \"lon\": 2.3363889567553997\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geocentroid-aggregation.asciidoc",
      "line": 9
    },
    "digest": "d0cf6057bc87042819a7ac961d1b2273",
    "lang": "console",
    "found": [],
    "source": "PUT /museums\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_point\"\n            }\n        }\n    }\n}\n\nPOST /museums/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"location\": \"52.374081,4.912350\", \"city\": \"Amsterdam\", \"name\": \"NEMO Science Museum\"}\n{\"index\":{\"_id\":2}}\n{\"location\": \"52.369219,4.901618\", \"city\": \"Amsterdam\", \"name\": \"Museum Het Rembrandthuis\"}\n{\"index\":{\"_id\":3}}\n{\"location\": \"52.371667,4.914722\", \"city\": \"Amsterdam\", \"name\": \"Nederlands Scheepvaartmuseum\"}\n{\"index\":{\"_id\":4}}\n{\"location\": \"51.222900,4.405200\", \"city\": \"Antwerp\", \"name\": \"Letterenhuis\"}\n{\"index\":{\"_id\":5}}\n{\"location\": \"48.861111,2.336389\", \"city\": \"Paris\", \"name\": \"Musée du Louvre\"}\n{\"index\":{\"_id\":6}}\n{\"location\": \"48.860000,2.327000\", \"city\": \"Paris\", \"name\": \"Musée d'Orsay\"}\n\nPOST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"centroid\" : {\n            \"geo_centroid\" : {\n                \"field\" : \"location\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/museums",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/museums/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "location": "52.374081,4.912350",
            "city": "Amsterdam",
            "name": "NEMO Science Museum"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "location": "52.369219,4.901618",
            "city": "Amsterdam",
            "name": "Museum Het Rembrandthuis"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "location": "52.371667,4.914722",
            "city": "Amsterdam",
            "name": "Nederlands Scheepvaartmuseum"
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "location": "51.222900,4.405200",
            "city": "Antwerp",
            "name": "Letterenhuis"
          },
          {
            "index": {
              "_id": 5
            }
          },
          {
            "location": "48.861111,2.336389",
            "city": "Paris",
            "name": "Musée du Louvre"
          },
          {
            "index": {
              "_id": 6
            }
          },
          {
            "location": "48.860000,2.327000",
            "city": "Paris",
            "name": "Musée d'Orsay"
          }
        ],
        "params": {
          "index": "museums"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "centroid": {
              "geo_centroid": {
                "field": "location"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geocentroid-aggregation.asciidoc",
      "line": 54
    },
    "digest": "85da750740194c53e24eb140564f22b6",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"centroid\": {\n            \"location\": {\n                \"lat\": 51.00982965203002,\n                \"lon\": 3.9662131341174245\n            },\n            \"count\": 6\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geocentroid-aggregation.asciidoc",
      "line": 75
    },
    "digest": "6dec421bf327ecaf189109d9aaa35919",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"cities\" : {\n            \"terms\" : { \"field\" : \"city.keyword\" },\n            \"aggs\" : {\n                \"centroid\" : {\n                    \"geo_centroid\" : { \"field\" : \"location\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "cities": {
              "terms": {
                "field": "city.keyword"
              },
              "aggs": {
                "centroid": {
                  "geo_centroid": {
                    "field": "location"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/geocentroid-aggregation.asciidoc",
      "line": 99
    },
    "digest": "abd50e099fcc1119a285e9b83c66d1e0",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"cities\": {\n            \"sum_other_doc_count\": 0,\n            \"doc_count_error_upper_bound\": 0,\n            \"buckets\": [\n               {\n                   \"key\": \"Amsterdam\",\n                   \"doc_count\": 3,\n                   \"centroid\": {\n                      \"location\": {\n                         \"lat\": 52.371655656024814,\n                         \"lon\": 4.909563297405839\n                      },\n                      \"count\": 3\n                   }\n               },\n               {\n                   \"key\": \"Paris\",\n                   \"doc_count\": 2,\n                   \"centroid\": {\n                      \"location\": {\n                         \"lat\": 48.86055548675358,\n                         \"lon\": 2.3316944623366\n                      },\n                      \"count\": 2\n                   }\n                },\n                {\n                    \"key\": \"Antwerp\",\n                    \"doc_count\": 1,\n                    \"centroid\": {\n                       \"location\": {\n                          \"lat\": 51.22289997059852,\n                          \"lon\": 4.40519998781383\n                       },\n                       \"count\": 1\n                    }\n                 }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 16
    },
    "digest": "9498a707be49e14dad801db6b6824e34",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"max_price\" : { \"max\" : { \"field\" : \"price\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "max_price": {
              "max": {
                "field": "price"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 29
    },
    "digest": "389b810e5524c81eaa863d850635492e",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"max_price\": {\n            \"value\": 200.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 51
    },
    "digest": "736fc5448b66962ceef1e6d5948ef691",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"max_price\" : {\n            \"max\" : {\n                \"script\" : {\n                    \"source\" : \"doc.price.value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "max_price": {
              "max": {
                "script": {
                  "source": "doc.price.value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 71
    },
    "digest": "b5e782e309a2a10db272414e8483d8dc",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"max_price\" : {\n            \"max\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "max_price": {
              "max": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 98
    },
    "digest": "23fdba37454d6d7abf6bfbb4fd01692f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"max_price_in_euros\" : {\n            \"max\" : {\n                \"field\" : \"price\",\n                \"script\" : {\n                    \"source\" : \"_value * params.conversion_rate\",\n                    \"params\" : {\n                        \"conversion_rate\" : 1.2\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "max_price_in_euros": {
              "max": {
                "field": "price",
                "script": {
                  "source": "_value * params.conversion_rate",
                  "params": {
                    "conversion_rate": 1.2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/max-aggregation.asciidoc",
      "line": 125
    },
    "digest": "41518c094db4a5b03cca3b21497f79cf",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"grade_max\" : {\n            \"max\" : {\n                \"field\" : \"grade\",\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "grade_max": {
              "max": {
                "field": "grade",
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 16
    },
    "digest": "bbd52c02b078e650f1a871f7fe7ff343",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"min_price\" : { \"min\" : { \"field\" : \"price\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "min_price": {
              "min": {
                "field": "price"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 29
    },
    "digest": "8eb0082e9853f7e8ba01313e9345307c",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"min_price\": {\n            \"value\": 10.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 52
    },
    "digest": "27cf2556b606f91d1fe3db3d7b6fd21a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"min_price\" : {\n            \"min\" : {\n                \"script\" : {\n                    \"source\" : \"doc.price.value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "min_price": {
              "min": {
                "script": {
                  "source": "doc.price.value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 72
    },
    "digest": "f76eb7821cb7855339ffcaab3460d934",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"min_price\" : {\n            \"min\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "min_price": {
              "min": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 99
    },
    "digest": "57ec3af2f4b3ce90722de51efc9d2cf1",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"min_price_in_euros\" : {\n            \"min\" : {\n                \"field\" : \"price\",\n                \"script\" : {\n                    \"source\" : \"_value * params.conversion_rate\",\n                    \"params\" : {\n                        \"conversion_rate\" : 1.2\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "min_price_in_euros": {
              "min": {
                "field": "price",
                "script": {
                  "source": "_value * params.conversion_rate",
                  "params": {
                    "conversion_rate": 1.2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/min-aggregation.asciidoc",
      "line": 126
    },
    "digest": "05161bf816a98dd2a57b8cd2a3d39db4",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"aggs\" : {\n        \"grade_min\" : {\n            \"min\" : {\n                \"field\" : \"grade\",\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "grade_min": {
              "min": {
                "field": "grade",
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 28
    },
    "digest": "9baaa0c37e787738507aceee7626c88b",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"field\" : \"load_time\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "field": "load_time"
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 48
    },
    "digest": "f05a6a8b26e79c9903efe57b7c6408f1",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n   \"aggregations\": {\n      \"load_time_outlier\": {\n         \"values\" : {\n            \"1.0\": 5.0,\n            \"5.0\": 25.0,\n            \"25.0\": 165.0,\n            \"50.0\": 445.0,\n            \"75.0\": 725.0,\n            \"95.0\": 945.0,\n            \"99.0\": 985.0\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 79
    },
    "digest": "4273ecf0448faf65b16952ada3d48a30",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"field\" : \"load_time\",\n                \"percents\" : [95, 99, 99.9] <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "field": "load_time",
                "percents": [
                  95,
                  99,
                  99.9
                ]
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 101
    },
    "digest": "e6f49e5325fe0e9b816a837bd3e65a7c",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"load_time_outlier\": {\n            \"percentiles\": {\n                \"field\": \"load_time\",\n                \"keyed\": false\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "field": "load_time",
                "keyed": false
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 120
    },
    "digest": "b1f54ec2ea685f82d1f0cfe35f8bd141",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"load_time_outlier\": {\n            \"values\": [\n                {\n                    \"key\": 1.0,\n                    \"value\": 5.0\n                },\n                {\n                    \"key\": 5.0,\n                    \"value\": 25.0\n                },\n                {\n                    \"key\": 25.0,\n                    \"value\": 165.0\n                },\n                {\n                    \"key\": 50.0,\n                    \"value\": 445.0\n                },\n                {\n                    \"key\": 75.0,\n                    \"value\": 725.0\n                },\n                {\n                    \"key\": 95.0,\n                    \"value\": 945.0\n                },\n                {\n                    \"key\": 99.0,\n                    \"value\": 985.0\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 169
    },
    "digest": "823b97820ce96abcc3a9292d14292849",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['load_time'].value / params.timeUnit\", <1>\n                    \"params\" : {\n                        \"timeUnit\" : 1000   <2>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "script": {
                  "lang": "painless",
                  "source": "doc['load_time'].value / params.timeUnit",
                  "params": {
                    "timeUnit": 1000
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 197
    },
    "digest": "dae483a5a412dcf4c20161fea25a87ba",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"load_time\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "load_time"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 268
    },
    "digest": "829d345e5e15e371aeb820f4d62a1b2a",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"field\" : \"load_time\",\n                \"tdigest\": {\n                  \"compression\" : 200 <1>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "field": "load_time",
                "tdigest": {
                  "compression": 200
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 320
    },
    "digest": "db17a10cf64c84bd2fc4ebb073e59cec",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_outlier\" : {\n            \"percentiles\" : {\n                \"field\" : \"load_time\",\n                \"percents\" : [95, 99, 99.9],\n                \"hdr\": { <1>\n                  \"number_of_significant_value_digits\" : 3 <2>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_outlier": {
              "percentiles": {
                "field": "load_time",
                "percents": [
                  95,
                  99,
                  99.9
                ],
                "hdr": {
                  "number_of_significant_value_digits": 3
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-aggregation.asciidoc",
      "line": 352
    },
    "digest": "e557ce02e192939944ebc6bae87e98a6",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grade_percentiles\" : {\n            \"percentiles\" : {\n                \"field\" : \"grade\",\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grade_percentiles": {
              "percentiles": {
                "field": "grade",
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 26
    },
    "digest": "daaa9e0df859d764ca0a4a4ebcfbdb26",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_ranks\" : {\n            \"percentile_ranks\" : {\n                \"field\" : \"load_time\", <1>\n                \"values\" : [500, 600]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "field": "load_time",
                "values": [
                  500,
                  600
                ]
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 47
    },
    "digest": "dc82882f7f4bbb70b175c0ad758f8521",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n   \"aggregations\": {\n      \"load_time_ranks\": {\n         \"values\" : {\n            \"500.0\": 90.01,\n            \"600.0\": 100.0\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 73
    },
    "digest": "156dd311073c8c825e608becf63ae7fe",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"load_time_ranks\": {\n            \"percentile_ranks\": {\n                \"field\": \"load_time\",\n                \"values\": [500, 600],\n                \"keyed\": false\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "field": "load_time",
                "values": [
                  500,
                  600
                ],
                "keyed": false
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 93
    },
    "digest": "526fc4a2b6bbff6d2026ee68ac52bff5",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"load_time_ranks\": {\n            \"values\": [\n                {\n                    \"key\": 500.0,\n                    \"value\": 90.01\n                },\n                {\n                    \"key\": 600.0,\n                    \"value\": 100.0\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 125
    },
    "digest": "c9ea558335446fc64006724cb72684e1",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_ranks\" : {\n            \"percentile_ranks\" : {\n                \"values\" : [500, 600],\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['load_time'].value / params.timeUnit\", <1>\n                    \"params\" : {\n                        \"timeUnit\" : 1000   <2>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "values": [
                  500,
                  600
                ],
                "script": {
                  "lang": "painless",
                  "source": "doc['load_time'].value / params.timeUnit",
                  "params": {
                    "timeUnit": 1000
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 154
    },
    "digest": "59bcc5d1ed0aac1aa949f84d80a4fa1d",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_ranks\" : {\n            \"percentile_ranks\" : {\n                \"values\" : [500, 600],\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"load_time\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "values": [
                  500,
                  600
                ],
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "load_time"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 189
    },
    "digest": "214d704d18485ab75ef53aa9c0524590",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_ranks\" : {\n            \"percentile_ranks\" : {\n                \"field\" : \"load_time\",\n                \"values\" : [500, 600],\n                \"hdr\": { <1>\n                  \"number_of_significant_value_digits\" : 3 <2>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "field": "load_time",
                "values": [
                  500,
                  600
                ],
                "hdr": {
                  "number_of_significant_value_digits": 3
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/percentile-rank-aggregation.asciidoc",
      "line": 221
    },
    "digest": "77f575b0cc37dd7a2415cbf6417d3148",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_ranks\" : {\n            \"percentile_ranks\" : {\n                \"field\" : \"load_time\",\n                \"values\" : [500, 600],\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_ranks": {
              "percentile_ranks": {
                "field": "load_time",
                "values": [
                  500,
                  600
                ],
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/scripted-metric-aggregation.asciidoc",
      "line": 9
    },
    "digest": "20600097aa51aa3386536bdc681e92b6",
    "lang": "console",
    "found": [],
    "source": "POST ledger/_search?size=0\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"aggs\": {\n        \"profit\": {\n            \"scripted_metric\": {\n                \"init_script\" : \"state.transactions = []\", <1>\n                \"map_script\" : \"state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)\",\n                \"combine_script\" : \"double profit = 0; for (t in state.transactions) { profit += t } return profit\",\n                \"reduce_script\" : \"double profit = 0; for (a in states) { profit += a } return profit\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/ledger/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "match_all": {}
          },
          "aggs": {
            "profit": {
              "scripted_metric": {
                "init_script": "state.transactions = []",
                "map_script": "state.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)",
                "combine_script": "double profit = 0; for (t in state.transactions) { profit += t } return profit",
                "reduce_script": "double profit = 0; for (a in states) { profit += a } return profit"
              }
            }
          }
        },
        "params": {
          "index": "ledger"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/scripted-metric-aggregation.asciidoc",
      "line": 36
    },
    "digest": "644df9962eb12424fc93ad42f1d939cd",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"took\": 218,\n    ...\n    \"aggregations\": {\n        \"profit\": {\n            \"value\": 240.0\n        }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/scripted-metric-aggregation.asciidoc",
      "line": 53
    },
    "digest": "129ce418d8dd1f71087678725a0df19f",
    "lang": "console",
    "found": [],
    "source": "POST ledger/_search?size=0\n{\n    \"aggs\": {\n        \"profit\": {\n            \"scripted_metric\": {\n                \"init_script\" : {\n                    \"id\": \"my_init_script\"\n                },\n                \"map_script\" : {\n                    \"id\": \"my_map_script\"\n                },\n                \"combine_script\" : {\n                    \"id\": \"my_combine_script\"\n                },\n                \"params\": {\n                    \"field\": \"amount\" <1>\n                },\n                \"reduce_script\" : {\n                    \"id\": \"my_reduce_script\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/ledger/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "profit": {
              "scripted_metric": {
                "init_script": {
                  "id": "my_init_script"
                },
                "map_script": {
                  "id": "my_map_script"
                },
                "combine_script": {
                  "id": "my_combine_script"
                },
                "params": {
                  "field": "amount"
                },
                "reduce_script": {
                  "id": "my_reduce_script"
                }
              }
            }
          }
        },
        "params": {
          "index": "ledger"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/scripted-metric-aggregation.asciidoc",
      "line": 150
    },
    "digest": "75e360d03fb416f0a65ca37c662c2e9c",
    "lang": "console",
    "found": [],
    "source": "PUT /transactions/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"type\": \"sale\",\"amount\": 80}\n{\"index\":{\"_id\":2}}\n{\"type\": \"cost\",\"amount\": 10}\n{\"index\":{\"_id\":3}}\n{\"type\": \"cost\",\"amount\": 30}\n{\"index\":{\"_id\":4}}\n{\"type\": \"sale\",\"amount\": 130}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/transactions/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "type": "sale",
            "amount": 80
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "type": "cost",
            "amount": 10
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "type": "cost",
            "amount": 30
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "type": "sale",
            "amount": 130
          }
        ],
        "params": {
          "index": "transactions"
        },
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 11
    },
    "digest": "6f04f3c1afe94e03d26ff5966fd4b98d",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grades_stats\" : { \"stats\" : { \"field\" : \"grade\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grades_stats": {
              "stats": {
                "field": "grade"
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 25
    },
    "digest": "b34f77613fdfc280bcd958a542d438a1",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"grades_stats\": {\n            \"count\": 2,\n            \"min\": 50.0,\n            \"max\": 100.0,\n            \"avg\": 75.0,\n            \"sum\": 150.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 49
    },
    "digest": "9ed80262680e67c629a08f6754a7c5c9",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grades_stats\" : {\n             \"stats\" : {\n                 \"script\" : {\n                     \"lang\": \"painless\",\n                     \"source\": \"doc['grade'].value\"\n                 }\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grades_stats": {
              "stats": {
                "script": {
                  "lang": "painless",
                  "source": "doc['grade'].value"
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 69
    },
    "digest": "2ba8575100b37b85d0052d46a00ce4cd",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"stats\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\" : {\n                        \"field\" : \"grade\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grades_stats": {
              "stats": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "grade"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 93
    },
    "digest": "1341888a2677cf6e1db11e6cab2dd8ce",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"stats\" : {\n                \"field\" : \"grade\",\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"_value * params.correction\",\n                    \"params\" : {\n                        \"correction\" : 1.2\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grades_stats": {
              "stats": {
                "field": "grade",
                "script": {
                  "lang": "painless",
                  "source": "_value * params.correction",
                  "params": {
                    "correction": 1.2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/stats-aggregation.asciidoc",
      "line": 121
    },
    "digest": "7371dcfe4adb43996f4c26684318302b",
    "lang": "console",
    "found": [],
    "source": "POST /exams/_search?size=0\n{\n    \"aggs\" : {\n        \"grades_stats\" : {\n            \"stats\" : {\n                \"field\" : \"grade\",\n                \"missing\": 0 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/exams/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "grades_stats": {
              "stats": {
                "field": "grade",
                "missing": 0
              }
            }
          }
        },
        "params": {
          "index": "exams"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 22
    },
    "digest": "5507b01f713674781996a07718785444",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : { \"string_stats\" : { \"field\" : \"message.keyword\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "field": "message.keyword"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 37
    },
    "digest": "5f196374e1b1e008eca06b7d35ad496b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"message_stats\" : {\n            \"count\" : 5,\n            \"min_length\" : 24,\n            \"max_length\" : 30,\n            \"avg_length\" : 28.8,\n            \"entropy\" : 3.94617750050791\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 63
    },
    "digest": "a1d02ab1549dbd3f1874f6a2fd48ec48",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : {\n            \"string_stats\" : {\n                \"field\" : \"message.keyword\",\n                \"show_distribution\": true  <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "field": "message.keyword",
                "show_distribution": true
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 81
    },
    "digest": "947b84333fcecc39a23f10a8d6b16751",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"message_stats\" : {\n            \"count\" : 5,\n            \"min_length\" : 24,\n            \"max_length\" : 30,\n            \"avg_length\" : 28.8,\n            \"entropy\" : 3.94617750050791,\n            \"distribution\" : {\n                \" \" : 0.1527777777777778,\n                \"e\" : 0.14583333333333334,\n                \"s\" : 0.09722222222222222,\n                \"m\" : 0.08333333333333333,\n                \"t\" : 0.0763888888888889,\n                \"h\" : 0.0625,\n                \"a\" : 0.041666666666666664,\n                \"i\" : 0.041666666666666664,\n                \"r\" : 0.041666666666666664,\n                \"g\" : 0.034722222222222224,\n                \"n\" : 0.034722222222222224,\n                \"o\" : 0.034722222222222224,\n                \"u\" : 0.034722222222222224,\n                \"b\" : 0.027777777777777776,\n                \"w\" : 0.027777777777777776,\n                \"c\" : 0.013888888888888888,\n                \"E\" : 0.006944444444444444,\n                \"l\" : 0.006944444444444444,\n                \"1\" : 0.006944444444444444,\n                \"2\" : 0.006944444444444444,\n                \"3\" : 0.006944444444444444,\n                \"4\" : 0.006944444444444444,\n                \"y\" : 0.006944444444444444\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 130
    },
    "digest": "24b22f8b83e9b199964036a170e4299e",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : {\n             \"string_stats\" : {\n                 \"script\" : {\n                     \"lang\": \"painless\",\n                     \"source\": \"doc['message.keyword'].value\"\n                 }\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "script": {
                  "lang": "painless",
                  "source": "doc['message.keyword'].value"
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 151
    },
    "digest": "a89a22d4f41ee3538bbfec8ac9e7ac74",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : {\n            \"string_stats\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\" : {\n                        \"field\" : \"message.keyword\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "message.keyword"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 175
    },
    "digest": "46078bde3789b5e7e83ab458857bc9c9",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : {\n            \"string_stats\" : {\n                \"field\" : \"message.keyword\",\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"params.prefix + _value\",\n                    \"params\" : {\n                        \"prefix\" : \"Message: \"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "field": "message.keyword",
                "script": {
                  "lang": "painless",
                  "source": "params.prefix + _value",
                  "params": {
                    "prefix": "Message: "
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/string-stats-aggregation.asciidoc",
      "line": 202
    },
    "digest": "437f4009a93d46b6b76e7db366b34ce6",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=0\n{\n    \"aggs\" : {\n        \"message_stats\" : {\n            \"string_stats\" : {\n                \"field\" : \"message.keyword\",\n                \"missing\": \"[empty message]\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "message_stats": {
              "string_stats": {
                "field": "message.keyword",
                "missing": "[empty message]"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 10
    },
    "digest": "43159621ffaa30dbfd60459a5e7b8e54",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"match\" : { \"type\" : \"hat\" }\n            }\n        }\n    },\n    \"aggs\" : {\n        \"hat_prices\" : { \"sum\" : { \"field\" : \"price\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "match": {
                  "type": "hat"
                }
              }
            }
          },
          "aggs": {
            "hat_prices": {
              "sum": {
                "field": "price"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 30
    },
    "digest": "e3fe09a765f8ddad554e74a8256c8b78",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"hat_prices\": {\n           \"value\": 450.0\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 49
    },
    "digest": "4b5f2bd0db1a94614f4d2e46a5159bd2",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"match\" : { \"type\" : \"hat\" }\n            }\n        }\n    },\n    \"aggs\" : {\n        \"hat_prices\" : {\n            \"sum\" : {\n                \"script\" : {\n                   \"source\": \"doc.price.value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "match": {
                  "type": "hat"
                }
              }
            }
          },
          "aggs": {
            "hat_prices": {
              "sum": {
                "script": {
                  "source": "doc.price.value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 75
    },
    "digest": "49a4032ac0cbc413b47660bcf998ef5f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"match\" : { \"type\" : \"hat\" }\n            }\n        }\n    },\n    \"aggs\" : {\n        \"hat_prices\" : {\n            \"sum\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\" : {\n                        \"field\" : \"price\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "match": {
                  "type": "hat"
                }
              }
            }
          },
          "aggs": {
            "hat_prices": {
              "sum": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 107
    },
    "digest": "82a2031f77972b713f75ed05c4bd9815",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"match\" : { \"type\" : \"hat\" }\n            }\n        }\n    },\n    \"aggs\" : {\n        \"square_hats\" : {\n            \"sum\" : {\n                \"field\" : \"price\",\n                \"script\" : {\n                    \"source\": \"_value * _value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "match": {
                  "type": "hat"
                }
              }
            }
          },
          "aggs": {
            "square_hats": {
              "sum": {
                "field": "price",
                "script": {
                  "source": "_value * _value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/sum-aggregation.asciidoc",
      "line": 139
    },
    "digest": "a78c3f4389502fe2dbd1cd10a017d1ed",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"match\" : { \"type\" : \"hat\" }\n            }\n        }\n    },\n    \"aggs\" : {\n        \"hat_prices\" : {\n            \"sum\" : {\n                \"field\" : \"price\",\n                \"missing\": 100 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "match": {
                  "type": "hat"
                }
              }
            }
          },
          "aggs": {
            "hat_prices": {
              "sum": {
                "field": "price",
                "missing": 100
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 39
    },
    "digest": "12b4b34f9958ed157ac2d812d612cda6",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\": {\n        \"top_tags\": {\n            \"terms\": {\n                \"field\": \"type\",\n                \"size\": 3\n            },\n            \"aggs\": {\n                \"top_sales_hits\": {\n                    \"top_hits\": {\n                        \"sort\": [\n                            {\n                                \"date\": {\n                                    \"order\": \"desc\"\n                                }\n                            }\n                        ],\n                        \"_source\": {\n                            \"includes\": [ \"date\", \"price\" ]\n                        },\n                        \"size\" : 1\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "top_tags": {
              "terms": {
                "field": "type",
                "size": 3
              },
              "aggs": {
                "top_sales_hits": {
                  "top_hits": {
                    "sort": [
                      {
                        "date": {
                          "order": "desc"
                        }
                      }
                    ],
                    "_source": {
                      "includes": [
                        "date",
                        "price"
                      ]
                    },
                    "size": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 74
    },
    "digest": "ac5c534e77684388b5126e2960db0d3f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"top_tags\": {\n       \"doc_count_error_upper_bound\": 0,\n       \"sum_other_doc_count\": 0,\n       \"buckets\": [\n          {\n             \"key\": \"hat\",\n             \"doc_count\": 3,\n             \"top_sales_hits\": {\n                \"hits\": {\n                   \"total\" : {\n                       \"value\": 3,\n                       \"relation\": \"eq\"\n                   },\n                   \"max_score\": null,\n                   \"hits\": [\n                      {\n                         \"_index\": \"sales\",\n                         \"_id\": \"AVnNBmauCQpcRyxw6ChK\",\n                         \"_source\": {\n                            \"date\": \"2015/03/01 00:00:00\",\n                            \"price\": 200\n                         },\n                         \"sort\": [\n                            1425168000000\n                         ],\n                         \"_score\": null\n                      }\n                   ]\n                }\n             }\n          },\n          {\n             \"key\": \"t-shirt\",\n             \"doc_count\": 3,\n             \"top_sales_hits\": {\n                \"hits\": {\n                   \"total\" : {\n                       \"value\": 3,\n                       \"relation\": \"eq\"\n                   },\n                   \"max_score\": null,\n                   \"hits\": [\n                      {\n                         \"_index\": \"sales\",\n                         \"_id\": \"AVnNBmauCQpcRyxw6ChL\",\n                         \"_source\": {\n                            \"date\": \"2015/03/01 00:00:00\",\n                            \"price\": 175\n                         },\n                         \"sort\": [\n                            1425168000000\n                         ],\n                         \"_score\": null\n                      }\n                   ]\n                }\n             }\n          },\n          {\n             \"key\": \"bag\",\n             \"doc_count\": 1,\n             \"top_sales_hits\": {\n                \"hits\": {\n                   \"total\" : {\n                       \"value\": 1,\n                       \"relation\": \"eq\"\n                   },\n                   \"max_score\": null,\n                   \"hits\": [\n                      {\n                         \"_index\": \"sales\",\n                         \"_id\": \"AVnNBmatCQpcRyxw6ChH\",\n                         \"_source\": {\n                            \"date\": \"2015/01/01 00:00:00\",\n                            \"price\": 150\n                         },\n                         \"sort\": [\n                            1420070400000\n                         ],\n                         \"_score\": null\n                      }\n                   ]\n                }\n             }\n          }\n       ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 188
    },
    "digest": "30db2702dd0071c72a090b8311d0db09",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n  \"query\": {\n    \"match\": {\n      \"body\": \"elections\"\n    }\n  },\n  \"aggs\": {\n    \"top_sites\": {\n      \"terms\": {\n        \"field\": \"domain\",\n        \"order\": {\n          \"top_hit\": \"desc\"\n        }\n      },\n      \"aggs\": {\n        \"top_tags_hits\": {\n          \"top_hits\": {}\n        },\n        \"top_hit\" : {\n          \"max\": {\n            \"script\": {\n              \"source\": \"_score\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "body": "elections"
            }
          },
          "aggs": {
            "top_sites": {
              "terms": {
                "field": "domain",
                "order": {
                  "top_hit": "desc"
                }
              },
              "aggs": {
                "top_tags_hits": {
                  "top_hits": {}
                },
                "top_hit": {
                  "max": {
                    "script": {
                      "source": "_score"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 241
    },
    "digest": "2720c5e463876c415419c426697d15e4",
    "lang": "console",
    "found": [],
    "source": "PUT /sales\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"tags\" : { \"type\" : \"keyword\" },\n            \"comments\" : { <1>\n                \"type\" : \"nested\",\n                \"properties\" : {\n                    \"username\" : { \"type\" : \"keyword\" },\n                    \"comment\" : { \"type\" : \"text\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/sales",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "tags": {
                "type": "keyword"
              },
              "comments": {
                "type": "nested",
                "properties": {
                  "username": {
                    "type": "keyword"
                  },
                  "comment": {
                    "type": "text"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 264
    },
    "digest": "6ac67f7e30219d85fcc68b99459a39a4",
    "lang": "console",
    "found": [],
    "source": "PUT /sales/_doc/1?refresh\n{\n    \"tags\": [\"car\", \"auto\"],\n    \"comments\": [\n        {\"username\": \"baddriver007\", \"comment\": \"This car could have better brakes\"},\n        {\"username\": \"dr_who\", \"comment\": \"Where's the autopilot? Can't find it\"},\n        {\"username\": \"ilovemotorbikes\", \"comment\": \"This car has two extra wheels\"}\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/sales/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "tags": [
            "car",
            "auto"
          ],
          "comments": [
            {
              "username": "baddriver007",
              "comment": "This car could have better brakes"
            },
            {
              "username": "dr_who",
              "comment": "Where's the autopilot? Can't find it"
            },
            {
              "username": "ilovemotorbikes",
              "comment": "This car has two extra wheels"
            }
          ]
        },
        "params": {
          "index": "sales",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 280
    },
    "digest": "f1b8612151a660264fb62dc6c74b19be",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"query\": {\n        \"term\": { \"tags\": \"car\" }\n    },\n    \"aggs\": {\n        \"by_sale\": {\n            \"nested\" : {\n                \"path\" : \"comments\"\n            },\n            \"aggs\": {\n                \"by_user\": {\n                    \"terms\": {\n                        \"field\": \"comments.username\",\n                        \"size\": 1\n                    },\n                    \"aggs\": {\n                        \"by_nested\": {\n                            \"top_hits\":{}\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "tags": "car"
            }
          },
          "aggs": {
            "by_sale": {
              "nested": {
                "path": "comments"
              },
              "aggs": {
                "by_user": {
                  "terms": {
                    "field": "comments.username",
                    "size": 1
                  },
                  "aggs": {
                    "by_nested": {
                      "top_hits": {}
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/tophits-aggregation.asciidoc",
      "line": 314
    },
    "digest": "7360e36c8ba3511fa133472ec101fff3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_sale\": {\n      \"by_user\": {\n        \"buckets\": [\n          {\n            \"key\": \"baddriver007\",\n            \"doc_count\": 1,\n            \"by_nested\": {\n              \"hits\": {\n                \"total\" : {\n                   \"value\": 1,\n                   \"relation\": \"eq\"\n                },\n                \"max_score\": 0.3616575,\n                \"hits\": [\n                  {\n                    \"_index\": \"sales\",\n                    \"_id\": \"1\",\n                    \"_nested\": {\n                      \"field\": \"comments\",  <1>\n                      \"offset\": 0 <2>\n                    },\n                    \"_score\": 0.3616575,\n                    \"_source\": {\n                      \"comment\": \"This car could have better brakes\", <3>\n                      \"username\": \"baddriver007\"\n                    }\n                  }\n                ]\n              }\n            }\n          }\n          ...\n        ]\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 10
    },
    "digest": "9d1fb129ac783355a20097effded1845",
    "lang": "console",
    "found": [],
    "source": "POST /test/_bulk?refresh\n{\"index\": {}}\n{\"s\": 1, \"m\": 3.1415}\n{\"index\": {}}\n{\"s\": 2, \"m\": 1.0}\n{\"index\": {}}\n{\"s\": 3, \"m\": 2.71828}\nPOST /test/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": {\"field\": \"m\"},\n        \"sort\": {\"s\": \"desc\"}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {}
          },
          {
            "s": 1,
            "m": 3.1415
          },
          {
            "index": {}
          },
          {
            "s": 2,
            "m": 1
          },
          {
            "index": {}
          },
          {
            "s": 3,
            "m": 2.71828
          }
        ],
        "params": {
          "index": "test"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "tm": {
              "top_metrics": {
                "metrics": {
                  "field": "m"
                },
                "sort": {
                  "s": "desc"
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 74
    },
    "digest": "73882fb729426f186221b5ebbd8f571f",
    "lang": "console",
    "found": [],
    "source": "PUT /test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"d\": {\"type\": \"date\"}\n    }\n  }\n}\nPOST /test/_bulk?refresh\n{\"index\": {}}\n{\"s\": 1, \"m\": 3.1415, \"i\": 1, \"d\": \"2020-01-01T00:12:12Z\"}\n{\"index\": {}}\n{\"s\": 2, \"m\": 1.0, \"i\": 6, \"d\": \"2020-01-02T00:12:12Z\"}\n{\"index\": {}}\n{\"s\": 3, \"m\": 2.71828, \"i\": -12, \"d\": \"2019-12-31T00:12:12Z\"}\nPOST /test/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": [\n          {\"field\": \"m\"},\n          {\"field\": \"i\"},\n          {\"field\": \"d\"}\n        ],\n        \"sort\": {\"s\": \"desc\"}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "d": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/test/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {}
          },
          {
            "s": 1,
            "m": 3.1415,
            "i": 1,
            "d": "2020-01-01T00:12:12Z"
          },
          {
            "index": {}
          },
          {
            "s": 2,
            "m": 1,
            "i": 6,
            "d": "2020-01-02T00:12:12Z"
          },
          {
            "index": {}
          },
          {
            "s": 3,
            "m": 2.71828,
            "i": -12,
            "d": "2019-12-31T00:12:12Z"
          }
        ],
        "params": {
          "index": "test"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "tm": {
              "top_metrics": {
                "metrics": [
                  {
                    "field": "m"
                  },
                  {
                    "field": "i"
                  },
                  {
                    "field": "d"
                  }
                ],
                "sort": {
                  "s": "desc"
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 133
    },
    "digest": "6013ed65d2058da5ce704b47a504b60a",
    "lang": "console",
    "found": [],
    "source": "POST /test/_bulk?refresh\n{\"index\": {}}\n{\"s\": 1, \"m\": 3.1415}\n{\"index\": {}}\n{\"s\": 2, \"m\": 1.0}\n{\"index\": {}}\n{\"s\": 3, \"m\": 2.71828}\nPOST /test/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": {\"field\": \"m\"},\n        \"sort\": {\"s\": \"desc\"},\n        \"size\": 3\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {}
          },
          {
            "s": 1,
            "m": 3.1415
          },
          {
            "index": {}
          },
          {
            "s": 2,
            "m": 1
          },
          {
            "index": {}
          },
          {
            "s": 3,
            "m": 2.71828
          }
        ],
        "params": {
          "index": "test"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "tm": {
              "top_metrics": {
                "metrics": {
                  "field": "m"
                },
                "sort": {
                  "s": "desc"
                },
                "size": 3
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 183
    },
    "digest": "b63ce79ce4fa1bb9b99a789f4dcfef4e",
    "lang": "console",
    "found": [],
    "source": "PUT /test/_settings\n{\n  \"top_metrics_max_size\": 100\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_settings",
        "query": null,
        "body": {
          "top_metrics_max_size": 100
        },
        "params": {
          "index": "test"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 202
    },
    "digest": "5b3384992c398ea8a3064d2e08725e2b",
    "lang": "console",
    "found": [],
    "source": "PUT /node\n{\n  \"mappings\": {\n    \"properties\": {\n      \"ip\": {\"type\": \"ip\"},\n      \"date\": {\"type\": \"date\"}\n    }\n  }\n}\nPOST /node/_bulk?refresh\n{\"index\": {}}\n{\"ip\": \"192.168.0.1\", \"date\": \"2020-01-01T01:01:01\", \"m\": 1}\n{\"index\": {}}\n{\"ip\": \"192.168.0.1\", \"date\": \"2020-01-01T02:01:01\", \"m\": 2}\n{\"index\": {}}\n{\"ip\": \"192.168.0.2\", \"date\": \"2020-01-01T02:01:01\", \"m\": 3}\nPOST /node/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"ip\": {\n      \"terms\": {\n        \"field\": \"ip\"\n      },\n      \"aggs\": {\n        \"tm\": {\n          \"top_metrics\": {\n            \"metrics\": {\"field\": \"m\"},\n            \"sort\": {\"date\": \"desc\"}\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/node",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "ip": {
                "type": "ip"
              },
              "date": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "node"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/node/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {}
          },
          {
            "ip": "192.168.0.1",
            "date": "2020-01-01T01:01:01",
            "m": 1
          },
          {
            "index": {}
          },
          {
            "ip": "192.168.0.1",
            "date": "2020-01-01T02:01:01",
            "m": 2
          },
          {
            "index": {}
          },
          {
            "ip": "192.168.0.2",
            "date": "2020-01-01T02:01:01",
            "m": 3
          }
        ],
        "params": {
          "index": "node"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/node/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "ip": {
              "terms": {
                "field": "ip"
              },
              "aggs": {
                "tm": {
                  "top_metrics": {
                    "metrics": {
                      "field": "m"
                    },
                    "sort": {
                      "date": "desc"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "node"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 273
    },
    "digest": "4af15c4f26ddefb9c350e7a246a66a15",
    "lang": "console",
    "found": [],
    "source": "POST /node/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"ip\": {\n      \"terms\": {\n        \"field\": \"ip\",\n        \"order\": {\"tm.m\": \"desc\"}\n      },\n      \"aggs\": {\n        \"tm\": {\n          \"top_metrics\": {\n            \"metrics\": {\"field\": \"m\"},\n            \"sort\": {\"date\": \"desc\"}\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/node/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "ip": {
              "terms": {
                "field": "ip",
                "order": {
                  "tm.m": "desc"
                }
              },
              "aggs": {
                "tm": {
                  "top_metrics": {
                    "metrics": {
                      "field": "m"
                    },
                    "sort": {
                      "date": "desc"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "node"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 334
    },
    "digest": "2d2f5ec97aa34ff7822a6a1ed08ef335",
    "lang": "console",
    "found": [],
    "source": "POST /test/_bulk?refresh\n{\"index\": {\"_index\": \"test1\"}}\n{\"s\": 1, \"m\": 3.1415}\n{\"index\": {\"_index\": \"test1\"}}\n{\"s\": 2, \"m\": 1}\n{\"index\": {\"_index\": \"test2\"}}\n{\"s\": 3.1, \"m\": 2.71828}\nPOST /test*/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": {\"field\": \"m\"},\n        \"sort\": {\"s\": \"asc\"}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_index": "test1"
            }
          },
          {
            "s": 1,
            "m": 3.1415
          },
          {
            "index": {
              "_index": "test1"
            }
          },
          {
            "s": 2,
            "m": 1
          },
          {
            "index": {
              "_index": "test2"
            }
          },
          {
            "s": 3.1,
            "m": 2.71828
          }
        ],
        "params": {
          "index": "test"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/test*/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "tm": {
              "top_metrics": {
                "metrics": {
                  "field": "m"
                },
                "sort": {
                  "s": "asc"
                }
              }
            }
          }
        },
        "params": {
          "index": "test*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/top-metrics-aggregation.asciidoc",
      "line": 374
    },
    "digest": "56da9c55774f4c2e8eadde0579bdc60c",
    "lang": "console",
    "found": [],
    "source": "POST /test*/_search?filter_path=aggregations\n{\n  \"aggs\": {\n    \"tm\": {\n      \"top_metrics\": {\n        \"metrics\": {\"field\": \"m\"},\n        \"sort\": {\"s\": {\"order\": \"asc\", \"numeric_type\": \"double\"}}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test*/_search",
        "query": {
          "filter_path": "aggregations"
        },
        "body": {
          "aggs": {
            "tm": {
              "top_metrics": {
                "metrics": {
                  "field": "m"
                },
                "sort": {
                  "s": {
                    "order": "asc",
                    "numeric_type": "double"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/valuecount-aggregation.asciidoc",
      "line": 13
    },
    "digest": "5dd695679b5141d9142d3d30ba8d300a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"types_count\" : { \"value_count\" : { \"field\" : \"type\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "types_count": {
              "value_count": {
                "field": "type"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/valuecount-aggregation.asciidoc",
      "line": 26
    },
    "digest": "73900a92a107ce4fe9cd10942ff494d7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"types_count\": {\n            \"value\": 7\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/valuecount-aggregation.asciidoc",
      "line": 46
    },
    "digest": "3722cb3705b6bc7f486969deace3dd83",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"type_count\" : {\n            \"value_count\" : {\n                \"script\" : {\n                    \"source\" : \"doc['type'].value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "type_count": {
              "value_count": {
                "script": {
                  "source": "doc['type'].value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/valuecount-aggregation.asciidoc",
      "line": 65
    },
    "digest": "213ab768f1b6a895e09403a0880e259a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"types_count\" : {\n            \"value_count\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\" : {\n                        \"field\" : \"type\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "types_count": {
              "value_count": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "type"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 28
    },
    "digest": "25ed47fcb890fcf8d8518ae067362d18",
    "lang": "console",
    "found": [],
    "source": "GET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_average\": {\n      \"avg\": {\n        \"field\": \"rating\"\n      }\n    },\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\" <1>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/reviews/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "review_average": {
              "avg": {
                "field": "rating"
              }
            },
            "review_variability": {
              "median_absolute_deviation": {
                "field": "rating"
              }
            }
          }
        },
        "params": {
          "index": "reviews"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 54
    },
    "digest": "9fce71dbeb1f002696732ec60ccd2e6e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"review_average\": {\n      \"value\": 3.0\n    },\n    \"review_variability\": {\n      \"value\": 2.0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 87
    },
    "digest": "9d662fc9f943c287b7144f5e4e2ae358",
    "lang": "console",
    "found": [],
    "source": "GET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\",\n        \"compression\": 100\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/reviews/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "review_variability": {
              "median_absolute_deviation": {
                "field": "rating",
                "compression": 100
              }
            }
          }
        },
        "params": {
          "index": "reviews"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 116
    },
    "digest": "bb964122f7d31b2f17c299d47ab3bdf3",
    "lang": "console",
    "found": [],
    "source": "GET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"script\": {\n          \"lang\": \"painless\",\n          \"source\": \"doc['rating'].value * params.scaleFactor\",\n          \"params\": {\n            \"scaleFactor\": 2\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/reviews/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "review_variability": {
              "median_absolute_deviation": {
                "script": {
                  "lang": "painless",
                  "source": "doc['rating'].value * params.scaleFactor",
                  "params": {
                    "scaleFactor": 2
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "reviews"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 140
    },
    "digest": "920362adc347f4268b29751d638b2e87",
    "lang": "console",
    "found": [],
    "source": "GET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"script\": {\n          \"id\": \"my_script\",\n          \"params\": {\n            \"field\": \"rating\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/reviews/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "review_variability": {
              "median_absolute_deviation": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "rating"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "reviews"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/median-absolute-deviation-aggregation.asciidoc",
      "line": 170
    },
    "digest": "87f854393d715aabf4d45e90a8eb74ce",
    "lang": "console",
    "found": [],
    "source": "GET reviews/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"review_variability\": {\n      \"median_absolute_deviation\": {\n        \"field\": \"rating\",\n        \"missing\": 5\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/reviews/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "review_variability": {
              "median_absolute_deviation": {
                "field": "rating",
                "missing": 5
              }
            }
          }
        },
        "params": {
          "index": "reviews"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 30
    },
    "digest": "2203588f4793e0e99ccd9240b5afdff7",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_boxplot\" : {\n            \"boxplot\" : {\n                \"field\" : \"load_time\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_boxplot": {
              "boxplot": {
                "field": "load_time"
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 49
    },
    "digest": "4a44dd3daabcf9f3624dfdb7d26e1c72",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n   \"aggregations\": {\n      \"load_time_boxplot\": {\n         \"min\": 0.0,\n         \"max\": 990.0,\n         \"q1\": 165.0,\n         \"q2\": 445.0,\n         \"q3\": 725.0\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 73
    },
    "digest": "c2d1756ceca8fdc40a2b97ea275de676",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_boxplot\" : {\n            \"boxplot\" : {\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['load_time'].value / params.timeUnit\", <1>\n                    \"params\" : {\n                        \"timeUnit\" : 1000   <2>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_boxplot": {
              "boxplot": {
                "script": {
                  "lang": "painless",
                  "source": "doc['load_time'].value / params.timeUnit",
                  "params": {
                    "timeUnit": 1000
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 102
    },
    "digest": "ae2331b7e35af4bbc4df7b98f2527c7f",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_boxplot\" : {\n            \"boxplot\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"load_time\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_boxplot": {
              "boxplot": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "load_time"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 143
    },
    "digest": "195af3fda6cb2811d40e22fc54cd3286",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"load_time_boxplot\" : {\n            \"boxplot\" : {\n                \"field\" : \"load_time\",\n                \"compression\" : 200 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "load_time_boxplot": {
              "boxplot": {
                "field": "load_time",
                "compression": 200
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/boxplot-aggregation.asciidoc",
      "line": 170
    },
    "digest": "71387a61dd965479b767c8dcea1478a9",
    "lang": "console",
    "found": [],
    "source": "GET latency/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"grade_boxplot\" : {\n            \"boxplot\" : {\n                \"field\" : \"grade\",\n                \"missing\": 10 <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/latency/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "grade_boxplot": {
              "boxplot": {
                "field": "grade",
                "missing": 10
              }
            }
          }
        },
        "params": {
          "index": "latency"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/t-test-aggregation.asciidoc",
      "line": 30
    },
    "digest": "9c071245643d02289b05d8163f207f74",
    "lang": "console",
    "found": [],
    "source": "GET node_upgrade/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"startup_time_ttest\" : {\n            \"t_test\" : {\n                \"a\" : {\"field\": \"startup_time_before\"}, <1>\n                \"b\" : {\"field\": \"startup_time_after\"}, <2>\n                \"type\": \"paired\" <3>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/node_upgrade/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "startup_time_ttest": {
              "t_test": {
                "a": {
                  "field": "startup_time_before"
                },
                "b": {
                  "field": "startup_time_after"
                },
                "type": "paired"
              }
            }
          }
        },
        "params": {
          "index": "node_upgrade"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/t-test-aggregation.asciidoc",
      "line": 55
    },
    "digest": "078cb254d96e2f6114aa0d39357c18b7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n   \"aggregations\": {\n      \"startup_time_ttest\": {\n         \"value\":  0.1914368843365979 <1>\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/t-test-aggregation.asciidoc",
      "line": 84
    },
    "digest": "a170b4aa968b32e40e288a97088cfc50",
    "lang": "console",
    "found": [],
    "source": "GET node_upgrade/_search\n{\n    \"size\" : 0,\n    \"aggs\" : {\n        \"startup_time_ttest\" : {\n            \"t_test\" : {\n                \"a\" : {\n                    \"field\" : \"startup_time_before\", <1>\n                    \"filter\" : {\n                        \"term\" : {\n                            \"group\" : \"A\"  <2>\n                        }\n                    }\n                },\n                \"b\" : {\n                    \"field\" : \"startup_time_before\", <3>\n                    \"filter\" : {\n                        \"term\" : {\n                            \"group\" : \"B\" <4>\n                        }\n                    }\n                },\n                \"type\" : \"heteroscedastic\" <5>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/node_upgrade/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "startup_time_ttest": {
              "t_test": {
                "a": {
                  "field": "startup_time_before",
                  "filter": {
                    "term": {
                      "group": "A"
                    }
                  }
                },
                "b": {
                  "field": "startup_time_before",
                  "filter": {
                    "term": {
                      "group": "B"
                    }
                  }
                },
                "type": "heteroscedastic"
              }
            }
          }
        },
        "params": {
          "index": "node_upgrade"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/metrics/t-test-aggregation.asciidoc",
      "line": 122
    },
    "digest": "677f00a0cce46b0ffb65f73d7a8cc410",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n   \"aggregations\": {\n      \"startup_time_ttest\": {\n         \"value\":  0.2981858007281437 <1>\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/metrics/t-test-aggregation.asciidoc",
      "line": 146
    },
    "digest": "f114ff40e67771a24f796f458ab10838",
    "lang": "console",
    "found": [],
    "source": "GET node_upgrade/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"startup_time_ttest\" : {\n            \"t_test\" : {\n                \"a\": {\n                    \"script\" : {\n                        \"lang\": \"painless\",\n                        \"source\": \"doc['startup_time_before'].value - params.adjustment\", <1>\n                        \"params\" : {\n                            \"adjustment\" : 10   <2>\n                        }\n                    }\n                },\n                \"b\": {\n                    \"field\": \"startup_time_after\" <3>\n                },\n                \"type\": \"paired\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/node_upgrade/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "startup_time_ttest": {
              "t_test": {
                "a": {
                  "script": {
                    "lang": "painless",
                    "source": "doc['startup_time_before'].value - params.adjustment",
                    "params": {
                      "adjustment": 10
                    }
                  }
                },
                "b": {
                  "field": "startup_time_after"
                },
                "type": "paired"
              }
            }
          }
        },
        "params": {
          "index": "node_upgrade"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/adjacency-matrix-aggregation.asciidoc",
      "line": 32
    },
    "digest": "f88cdb3a962bb6f305f4a7ccc07bc0b0",
    "lang": "console",
    "found": [],
    "source": "PUT /emails/_bulk?refresh\n{ \"index\" : { \"_id\" : 1 } }\n{ \"accounts\" : [\"hillary\", \"sidney\"]}\n{ \"index\" : { \"_id\" : 2 } }\n{ \"accounts\" : [\"hillary\", \"donald\"]}\n{ \"index\" : { \"_id\" : 3 } }\n{ \"accounts\" : [\"vladimir\", \"donald\"]}\n\nGET emails/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"interactions\" : {\n      \"adjacency_matrix\" : {\n        \"filters\" : {\n          \"grpA\" : { \"terms\" : { \"accounts\" : [\"hillary\", \"sidney\"] }},\n          \"grpB\" : { \"terms\" : { \"accounts\" : [\"donald\", \"mitt\"] }},\n          \"grpC\" : { \"terms\" : { \"accounts\" : [\"vladimir\", \"nigel\"] }}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/emails/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "accounts": [
              "hillary",
              "sidney"
            ]
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "accounts": [
              "hillary",
              "donald"
            ]
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "accounts": [
              "vladimir",
              "donald"
            ]
          }
        ],
        "params": {
          "index": "emails"
        },
        "api": "bulk"
      },
      {
        "method": "GET",
        "url": "/emails/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "interactions": {
              "adjacency_matrix": {
                "filters": {
                  "grpA": {
                    "terms": {
                      "accounts": [
                        "hillary",
                        "sidney"
                      ]
                    }
                  },
                  "grpB": {
                    "terms": {
                      "accounts": [
                        "donald",
                        "mitt"
                      ]
                    }
                  },
                  "grpC": {
                    "terms": {
                      "accounts": [
                        "vladimir",
                        "nigel"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "emails"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/adjacency-matrix-aggregation.asciidoc",
      "line": 66
    },
    "digest": "c1f8e4dbfebddcfa68163f094929ff74",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 9,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"interactions\": {\n      \"buckets\": [\n        {\n          \"key\":\"grpA\",\n          \"doc_count\": 2\n        },\n        {\n          \"key\":\"grpA&grpB\",\n          \"doc_count\": 1\n        },\n        {\n          \"key\":\"grpB\",\n          \"doc_count\": 2\n        },\n        {\n          \"key\":\"grpB&grpC\",\n          \"doc_count\": 1\n        },\n        {\n          \"key\":\"grpC\",\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 14
    },
    "digest": "9f9123f67baff22429bca73f7cf48622",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"auto_date_histogram\" : {\n                \"field\" : \"date\",\n                \"buckets\" : 10\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 10
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 40
    },
    "digest": "941466b290eaa9a2685bbe32c73e887a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"auto_date_histogram\" : {\n                \"field\" : \"date\",\n                \"buckets\" : 5,\n                \"format\" : \"yyyy-MM-dd\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 5,
                "format": "yyyy-MM-dd"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 61
    },
    "digest": "6681cbb3757f4c51006cae44b6c6e06a",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"sales_over_time\": {\n            \"buckets\": [\n                {\n                    \"key_as_string\": \"2015-01-01\",\n                    \"key\": 1420070400000,\n                    \"doc_count\": 3\n                },\n                {\n                    \"key_as_string\": \"2015-02-01\",\n                    \"key\": 1422748800000,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key_as_string\": \"2015-03-01\",\n                    \"key\": 1425168000000,\n                    \"doc_count\": 2\n                }\n            ],\n            \"interval\": \"1M\"\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 121
    },
    "digest": "06cd928a050b75f2bb207a548ac43d40",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"date\": \"2015-10-01T00:30:00Z\"\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"date\": \"2015-10-01T01:30:00Z\"\n}\n\nPUT my_index/_doc/3?refresh\n{\n  \"date\": \"2015-10-01T02:30:00Z\"\n}\n\nGET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"by_day\": {\n      \"auto_date_histogram\": {\n        \"field\":     \"date\",\n        \"buckets\" : 3\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T00:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T01:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T02:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "by_day": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 3
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 154
    },
    "digest": "861de90753e4d31aaba4aa57fc95400a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_day\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-10-01T00:00:00.000Z\",\n          \"key\": 1443657600000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T01:00:00.000Z\",\n          \"key\": 1443661200000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T02:00:00.000Z\",\n          \"key\": 1443664800000,\n          \"doc_count\": 1\n        }\n      ],\n      \"interval\": \"1h\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 187
    },
    "digest": "e16449c0f4eadb394761e9c2aff50fe6",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"by_day\": {\n      \"auto_date_histogram\": {\n        \"field\":     \"date\",\n        \"buckets\" : 3,\n        \"time_zone\": \"-01:00\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "by_day": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 3,
                "time_zone": "-01:00"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 209
    },
    "digest": "7a23b07f42ed52868b374883e4be1348",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_day\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-09-30T23:00:00.000-01:00\", <1>\n          \"key\": 1443657600000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T00:00:00.000-01:00\",\n          \"key\": 1443661200000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T01:00:00.000-01:00\",\n          \"key\": 1443664800000,\n          \"doc_count\": 1\n        }\n      ],\n      \"interval\": \"1h\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 273
    },
    "digest": "00abcf63bffec42e5d2c15011e989b37",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sale_date\" : {\n             \"auto_date_histogram\" : {\n                 \"field\" : \"date\",\n                 \"buckets\": 10,\n                 \"minimum_interval\": \"minute\"\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sale_date": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 10,
                "minimum_interval": "minute"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/autodatehistogram-aggregation.asciidoc",
      "line": 296
    },
    "digest": "89fe7b404791770a2075f2870fd65c3e",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sale_date\" : {\n             \"auto_date_histogram\" : {\n                 \"field\" : \"date\",\n                 \"buckets\": 10,\n                 \"missing\": \"2000/01/01\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sale_date": {
              "auto_date_histogram": {
                "field": "date",
                "buckets": 10,
                "missing": "2000/01/01"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/children-aggregation.asciidoc",
      "line": 13
    },
    "digest": "9399cbbd133ec2b7aad2820fa617ae3a",
    "lang": "console",
    "found": [],
    "source": "PUT child_example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"join\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"question\": \"answer\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/child_example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "join": {
                "type": "join",
                "relations": {
                  "question": "answer"
                }
              }
            }
          }
        },
        "params": {
          "index": "child_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/children-aggregation.asciidoc",
      "line": 36
    },
    "digest": "dfdf82b8d99436582f150117695190b3",
    "lang": "console",
    "found": [],
    "source": "PUT child_example/_doc/1\n{\n  \"join\": {\n    \"name\": \"question\"\n  },\n  \"body\": \"<p>I have Windows 2003 server and i bought a new Windows 2008 server...\",\n  \"title\": \"Whats the best way to file transfer my site from server to a newer one?\",\n  \"tags\": [\n    \"windows-server-2003\",\n    \"windows-server-2008\",\n    \"file-transfer\"\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/child_example/_doc/1",
        "query": null,
        "body": {
          "join": {
            "name": "question"
          },
          "body": "I have Windows 2003 server and i bought a new Windows 2008 server...",
          "title": "Whats the best way to file transfer my site from server to a newer one?",
          "tags": [
            "windows-server-2003",
            "windows-server-2008",
            "file-transfer"
          ]
        },
        "params": {
          "index": "child_example",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/children-aggregation.asciidoc",
      "line": 56
    },
    "digest": "e9fe3b53b5b6e1ff9566b5237c0fa513",
    "lang": "console",
    "found": [],
    "source": "PUT child_example/_doc/2?routing=1\n{\n  \"join\": {\n    \"name\": \"answer\",\n    \"parent\": \"1\"\n  },\n  \"owner\": {\n    \"location\": \"Norfolk, United Kingdom\",\n    \"display_name\": \"Sam\",\n    \"id\": 48\n  },\n  \"body\": \"<p>Unfortunately you're pretty much limited to FTP...\",\n  \"creation_date\": \"2009-05-04T13:45:37.030\"\n}\n\nPUT child_example/_doc/3?routing=1&refresh\n{\n  \"join\": {\n    \"name\": \"answer\",\n    \"parent\": \"1\"\n  },\n  \"owner\": {\n    \"location\": \"Norfolk, United Kingdom\",\n    \"display_name\": \"Troll\",\n    \"id\": 49\n  },\n  \"body\": \"<p>Use Linux...\",\n  \"creation_date\": \"2009-05-05T13:45:37.030\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/child_example/_doc/2",
        "query": {
          "routing": "1"
        },
        "body": {
          "join": {
            "name": "answer",
            "parent": "1"
          },
          "owner": {
            "location": "Norfolk, United Kingdom",
            "display_name": "Sam",
            "id": 48
          },
          "body": "Unfortunately you're pretty much limited to FTP...",
          "creation_date": "2009-05-04T13:45:37.030"
        },
        "params": {
          "index": "child_example",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/child_example/_doc/3",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "join": {
            "name": "answer",
            "parent": "1"
          },
          "owner": {
            "location": "Norfolk, United Kingdom",
            "display_name": "Troll",
            "id": 49
          },
          "body": "Use Linux...",
          "creation_date": "2009-05-05T13:45:37.030"
        },
        "params": {
          "index": "child_example",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/children-aggregation.asciidoc",
      "line": 92
    },
    "digest": "d5132d34ae922fa8e898889b627a1405",
    "lang": "console",
    "found": [],
    "source": "POST child_example/_search?size=0\n{\n  \"aggs\": {\n    \"top-tags\": {\n      \"terms\": {\n        \"field\": \"tags.keyword\",\n        \"size\": 10\n      },\n      \"aggs\": {\n        \"to-answers\": {\n          \"children\": {\n            \"type\" : \"answer\" <1>\n          },\n          \"aggs\": {\n            \"top-names\": {\n              \"terms\": {\n                \"field\": \"owner.display_name.keyword\",\n                \"size\": 10\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/child_example/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "top-tags": {
              "terms": {
                "field": "tags.keyword",
                "size": 10
              },
              "aggs": {
                "to-answers": {
                  "children": {
                    "type": "answer"
                  },
                  "aggs": {
                    "top-names": {
                      "terms": {
                        "field": "owner.display_name.keyword",
                        "size": 10
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "child_example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/children-aggregation.asciidoc",
      "line": 129
    },
    "digest": "31a7e249ea2a328e8eccc76800219af0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 25,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n      \"value\": 3,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": []\n  },\n  \"aggregations\": {\n    \"top-tags\": {\n      \"doc_count_error_upper_bound\": 0,\n      \"sum_other_doc_count\": 0,\n      \"buckets\": [\n        {\n          \"key\": \"file-transfer\",\n          \"doc_count\": 1, <1>\n          \"to-answers\": {\n            \"doc_count\": 2, <2>\n            \"top-names\": {\n              \"doc_count_error_upper_bound\": 0,\n              \"sum_other_doc_count\": 0,\n              \"buckets\": [\n                {\n                  \"key\": \"Sam\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"Troll\",\n                  \"doc_count\": 1\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"key\": \"windows-server-2003\",\n          \"doc_count\": 1, <1>\n          \"to-answers\": {\n            \"doc_count\": 2, <2>\n            \"top-names\": {\n              \"doc_count_error_upper_bound\": 0,\n              \"sum_other_doc_count\": 0,\n              \"buckets\": [\n                {\n                  \"key\": \"Sam\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"Troll\",\n                  \"doc_count\": 1\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"key\": \"windows-server-2008\",\n          \"doc_count\": 1, <1>\n          \"to-answers\": {\n            \"doc_count\": 2, <2>\n            \"top-names\": {\n              \"doc_count_error_upper_bound\": 0,\n              \"sum_other_doc_count\": 0,\n              \"buckets\": [\n                {\n                  \"key\": \"Sam\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"Troll\",\n                  \"doc_count\": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 117
    },
    "digest": "b0d7068cff901f2b91f8387628e3c2c0",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"product\": { \"terms\" : { \"field\": \"product\" } } }\n                ]\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "product": {
                      "terms": {
                        "field": "product"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 136
    },
    "digest": "47f1e01d131fd50304dd35f1c459d222",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    {\n                        \"product\": {\n                            \"terms\" : {\n                                \"script\" : {\n                                    \"source\": \"doc['product'].value\",\n                                    \"lang\": \"painless\"\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "product": {
                      "terms": {
                        "script": {
                          "source": "doc['product'].value",
                          "lang": "painless"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 172
    },
    "digest": "426eb07a1fc499df8ea30d8593a0d989",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"histo\": { \"histogram\" : { \"field\": \"price\", \"interval\": 5 } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "histo": {
                      "histogram": {
                        "field": "price",
                        "interval": 5
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 191
    },
    "digest": "d4c5e4123e53daa39775def537365376",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    {\n                        \"histo\": {\n                            \"histogram\" : {\n                                \"interval\": 5,\n                                \"script\" : {\n                                    \"source\": \"doc['price'].value\",\n                                    \"lang\": \"painless\"\n                                }\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "histo": {
                      "histogram": {
                        "interval": 5,
                        "script": {
                          "source": "doc['price'].value",
                          "lang": "painless"
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 224
    },
    "digest": "4997db4f41283835e5a6250c454bec92",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"date\": { \"date_histogram\" : { \"field\": \"timestamp\", \"calendar_interval\": \"1d\" } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 254
    },
    "digest": "1c42bc684745178a587494809ab6ae57",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    {\n                        \"date\": {\n                            \"date_histogram\" : {\n                                \"field\": \"timestamp\",\n                                \"calendar_interval\": \"1d\",\n                                \"format\": \"yyyy-MM-dd\" <1>\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "format": "yyyy-MM-dd"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 295
    },
    "digest": "038bef10c90916a9addab866fc73dcca",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"date\": \"2015-10-01T05:30:00Z\"\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"date\": \"2015-10-01T06:30:00Z\"\n}\n\nGET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"my_buckets\": {\n      \"composite\" : {\n        \"sources\" : [\n          {\n            \"date\": {\n              \"date_histogram\" : {\n                \"field\": \"date\",\n                \"calendar_interval\": \"day\",\n                \"offset\": \"+6h\",\n                \"format\": \"iso8601\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T05:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T06:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "date",
                        "calendar_interval": "day",
                        "offset": "+6h",
                        "format": "iso8601"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 332
    },
    "digest": "6577459aef49b998e80e45ec34277965",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"my_buckets\": {\n      \"after_key\": { \"date\": \"2015-10-01T06:00:00.000Z\" },\n      \"buckets\": [\n        {\n          \"key\": { \"date\": \"2015-09-30T06:00:00.000Z\" },\n          \"doc_count\": 1\n        },\n        {\n          \"key\": { \"date\": \"2015-10-01T06:00:00.000Z\" },\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 363
    },
    "digest": "7df600a962ddb9e75462cab1017ab710",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\" } } },\n                    { \"product\": { \"terms\": {\"field\": \"product\" } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 386
    },
    "digest": "1559d896ef715c8997e773e8f26ded49",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"shop\": { \"terms\": {\"field\": \"shop\" } } },\n                    { \"product\": { \"terms\": { \"field\": \"product\" } } },\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\" } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "shop": {
                      "terms": {
                        "field": "shop"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product"
                      }
                    }
                  },
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 416
    },
    "digest": "1111d70f0ae3044b0a86c82b2ded5f74",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\", \"order\": \"desc\" } } },\n                    { \"product\": { \"terms\": {\"field\": \"product\", \"order\": \"asc\" } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "order": "desc"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product",
                        "order": "asc"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 443
    },
    "digest": "441e1052c59a3d9182fd608c08e11169",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"product_name\": { \"terms\" : { \"field\": \"product\", \"missing_bucket\": true } } }\n                ]\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "product_name": {
                      "terms": {
                        "field": "product",
                        "missing_bucket": true
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 483
    },
    "digest": "a84493b3b31741c9e1f998b59b40db82",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"size\": 2,\n                \"sources\" : [\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\" } } },\n                    { \"product\": { \"terms\": {\"field\": \"product\" } } }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "size": 2,
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 505
    },
    "digest": "cfd54d514967ff5692371513c98f2511",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"my_buckets\": {\n            \"after_key\": {\n                \"date\": 1494288000000,\n                \"product\": \"mad max\"\n            },\n            \"buckets\": [\n                {\n                    \"key\": {\n                        \"date\": 1494201600000,\n                        \"product\": \"rocky\"\n                    },\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": {\n                        \"date\": 1494288000000,\n                        \"product\": \"mad max\"\n                    },\n                    \"doc_count\": 2\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 541
    },
    "digest": "eac8d98e2bd0eb75e8428212e9f4e4a7",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"size\": 2,\n                 \"sources\" : [\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\", \"order\": \"desc\" } } },\n                    { \"product\": { \"terms\": {\"field\": \"product\", \"order\": \"asc\" } } }\n                ],\n                \"after\": { \"date\": 1494288000000, \"product\": \"mad max\" } <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "size": 2,
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "order": "desc"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product",
                        "order": "asc"
                      }
                    }
                  }
                ],
                "after": {
                  "date": 1494288000000,
                  "product": "mad max"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 573
    },
    "digest": "1d1186dc28cb5b11c19a8341ec1c0558",
    "lang": "console",
    "found": [],
    "source": "PUT twitter\n{\n    \"settings\" : {\n        \"index\" : {\n            \"sort.field\" : [\"username\", \"timestamp\"],   <1>\n            \"sort.order\" : [\"asc\", \"desc\"]              <2>\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"username\": {\n                \"type\": \"keyword\",\n                \"doc_values\": true\n            },\n            \"timestamp\": {\n                \"type\": \"date\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "sort.field": [
                "username",
                "timestamp"
              ],
              "sort.order": [
                "asc",
                "desc"
              ]
            }
          },
          "mappings": {
            "properties": {
              "username": {
                "type": "keyword",
                "doc_values": true
              },
              "timestamp": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 602
    },
    "digest": "ca3c86d8bb26a8a9422b4b628de03dc4",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"user_name\": { \"terms\" : { \"field\": \"user_name\" } } }     <1>\n                ]\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "user_name": {
                      "terms": {
                        "field": "user_name"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 621
    },
    "digest": "c98edce2074791ebad716b9a5b03215f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"user_name\": { \"terms\" : { \"field\": \"user_name\" } } }, <1>\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\", \"order\": \"desc\" } } } <2>\n                ]\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "user_name": {
                      "terms": {
                        "field": "user_name"
                      }
                    }
                  },
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "order": "desc"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 646
    },
    "digest": "b2d0d2f519a37b93b93889be7979ee5d",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"track_total_hits\": false,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                \"sources\" : [\n                    { \"user_name\": { \"terms\" : { \"field\": \"user_name\" } } },\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\", \"order\": \"desc\" } } }\n                ]\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "track_total_hits": false,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "user_name": {
                      "terms": {
                        "field": "user_name"
                      }
                    }
                  },
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "order": "desc"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 685
    },
    "digest": "4a37d7d228d9cba63ebe7b9870dce531",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"my_buckets\": {\n            \"composite\" : {\n                 \"sources\" : [\n                    { \"date\": { \"date_histogram\": { \"field\": \"timestamp\", \"calendar_interval\": \"1d\", \"order\": \"desc\" } } },\n                    { \"product\": { \"terms\": {\"field\": \"product\" } } }\n                ]\n            },\n            \"aggregations\": {\n                \"the_avg\": {\n                    \"avg\": { \"field\": \"price\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_buckets": {
              "composite": {
                "sources": [
                  {
                    "date": {
                      "date_histogram": {
                        "field": "timestamp",
                        "calendar_interval": "1d",
                        "order": "desc"
                      }
                    }
                  },
                  {
                    "product": {
                      "terms": {
                        "field": "product"
                      }
                    }
                  }
                ]
              },
              "aggregations": {
                "the_avg": {
                  "avg": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/composite-aggregation.asciidoc",
      "line": 711
    },
    "digest": "b296d732aaf10cb37209b37062a35760",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"my_buckets\": {\n            \"after_key\": {\n                \"date\": 1494201600000,\n                \"product\": \"rocky\"\n            },\n            \"buckets\": [\n                {\n                    \"key\": {\n                        \"date\": 1494460800000,\n                        \"product\": \"apocalypse now\"\n                    },\n                    \"doc_count\": 1,\n                    \"the_avg\": {\n                        \"value\": 10.0\n                    }\n                },\n                {\n                    \"key\": {\n                        \"date\": 1494374400000,\n                        \"product\": \"mad max\"\n                    },\n                    \"doc_count\": 1,\n                    \"the_avg\": {\n                        \"value\": 27.0\n                    }\n                },\n                {\n                    \"key\": {\n                        \"date\": 1494288000000,\n                        \"product\" : \"mad max\"\n                    },\n                    \"doc_count\": 2,\n                    \"the_avg\": {\n                        \"value\": 22.5\n                    }\n                },\n                {\n                    \"key\": {\n                        \"date\": 1494201600000,\n                        \"product\": \"rocky\"\n                    },\n                    \"doc_count\": 1,\n                    \"the_avg\": {\n                        \"value\": 10.0\n                    }\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 110
    },
    "digest": "b789292f9cf63ce912e058c46d90ce20",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 129
    },
    "digest": "73e5c88ad1488b213fb278ee1cb42289",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"2d\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "2d"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 206
    },
    "digest": "09ecba5814d71e4c44468575eada9878",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"fixed_interval\" : \"30d\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "fixed_interval": "30d"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 224
    },
    "digest": "2bb2339ac055337abf753bddb7771659",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"fixed_interval\" : \"2w\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "fixed_interval": "2w"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 295
    },
    "digest": "8a355eb25d2a01ba62dc1a22dd46f46f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"1M\",\n                \"format\" : \"yyyy-MM-dd\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M",
                "format": "yyyy-MM-dd"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 316
    },
    "digest": "4b68a9a9a6e78ef609adf1c3067e5fea",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"sales_over_time\": {\n            \"buckets\": [\n                {\n                    \"key_as_string\": \"2015-01-01\",\n                    \"key\": 1420070400000,\n                    \"doc_count\": 3\n                },\n                {\n                    \"key_as_string\": \"2015-02-01\",\n                    \"key\": 1422748800000,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key_as_string\": \"2015-03-01\",\n                    \"key\": 1425168000000,\n                    \"doc_count\": 2\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 357
    },
    "digest": "70f0aa5853697e265ef3b1df72940951",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"date\": \"2015-10-01T00:30:00Z\"\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"date\": \"2015-10-01T01:30:00Z\"\n}\n\nGET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"by_day\": {\n      \"date_histogram\": {\n        \"field\":     \"date\",\n        \"calendar_interval\":  \"day\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T00:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T01:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "by_day": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "day"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 386
    },
    "digest": "c58f9b02f68576dc466750382a93a10e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_day\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-10-01T00:00:00.000Z\",\n          \"key\":           1443657600000,\n          \"doc_count\":     2\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 408
    },
    "digest": "8de3206f80e18185a5ad6481f4c2ee07",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"by_day\": {\n      \"date_histogram\": {\n        \"field\":     \"date\",\n        \"calendar_interval\":  \"day\",\n        \"time_zone\": \"-01:00\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "by_day": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "day",
                "time_zone": "-01:00"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 428
    },
    "digest": "7505fd151b95c187a78278008393156b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_day\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-09-30T00:00:00.000-01:00\", <1>\n          \"key\": 1443574800000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T00:00:00.000-01:00\", <1>\n          \"key\": 1443661200000,\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 479
    },
    "digest": "aa6bfe54e2436eb668091fe31c2fbf4d",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"date\": \"2015-10-01T05:30:00Z\"\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"date\": \"2015-10-01T06:30:00Z\"\n}\n\nGET my_index/_search?size=0\n{\n  \"aggs\": {\n    \"by_day\": {\n      \"date_histogram\": {\n        \"field\":     \"date\",\n        \"calendar_interval\":  \"day\",\n        \"offset\":    \"+6h\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T05:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "date": "2015-10-01T06:30:00Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "by_day": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "day",
                "offset": "+6h"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 510
    },
    "digest": "c53ad8df37e9f98b893b66fd3abbc6e7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"by_day\": {\n      \"buckets\": [\n        {\n          \"key_as_string\": \"2015-09-30T06:00:00.000Z\",\n          \"key\": 1443592800000,\n          \"doc_count\": 1\n        },\n        {\n          \"key_as_string\": \"2015-10-01T06:00:00.000Z\",\n          \"key\": 1443679200000,\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 544
    },
    "digest": "9524a9b7373fa4eb2905183b0e806962",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sales_over_time\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"1M\",\n                \"format\" : \"yyyy-MM-dd\",\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sales_over_time": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M",
                "format": "yyyy-MM-dd",
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 564
    },
    "digest": "63aa34a2f3e6b7a27bfe950a639cc026",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"sales_over_time\": {\n            \"buckets\": {\n                \"2015-01-01\": {\n                    \"key_as_string\": \"2015-01-01\",\n                    \"key\": 1420070400000,\n                    \"doc_count\": 3\n                },\n                \"2015-02-01\": {\n                    \"key_as_string\": \"2015-02-01\",\n                    \"key\": 1422748800000,\n                    \"doc_count\": 2\n                },\n                \"2015-03-01\": {\n                    \"key_as_string\": \"2015-03-01\",\n                    \"key\": 1425168000000,\n                    \"doc_count\": 2\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 613
    },
    "digest": "39a6a038c4b551022afe83de0523634e",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"sale_date\" : {\n             \"date_histogram\" : {\n                 \"field\" : \"date\",\n                 \"calendar_interval\": \"year\",\n                 \"missing\": \"2000/01/01\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "sale_date": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "year",
                "missing": "2000/01/01"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 646
    },
    "digest": "6faf10a73f7d5fffbcb037bdb2cbaff8",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\": {\n        \"dayOfWeek\": {\n            \"terms\": {\n                \"script\": {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['date'].value.dayOfWeekEnum.value\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "dayOfWeek": {
              "terms": {
                "script": {
                  "lang": "painless",
                  "source": "doc['date'].value.dayOfWeekEnum.value"
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/datehistogram-aggregation.asciidoc",
      "line": 666
    },
    "digest": "6bd571871fdea8a323c86bea18188120",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"dayOfWeek\": {\n      \"doc_count_error_upper_bound\": 0,\n      \"sum_other_doc_count\": 0,\n      \"buckets\": [\n        {\n          \"key\": \"7\",\n          \"doc_count\": 4\n        },\n        {\n          \"key\": \"4\",\n          \"doc_count\": 3\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 16
    },
    "digest": "a27c42ae4897ee6d2f6be3ddf80a8b3e",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\": {\n        \"range\": {\n            \"date_range\": {\n                \"field\": \"date\",\n                \"format\": \"MM-yyyy\",\n                \"ranges\": [\n                    { \"to\": \"now-10M/M\" }, <1>\n                    { \"from\": \"now-10M/M\" } <2>\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range": {
              "date_range": {
                "field": "date",
                "format": "MM-yyyy",
                "ranges": [
                  {
                    "to": "now-10M/M"
                  },
                  {
                    "from": "now-10M/M"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 45
    },
    "digest": "26e6779741c2e4970eceb02ced279041",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"range\": {\n            \"buckets\": [\n                {\n                    \"to\": 1.4436576E12,\n                    \"to_as_string\": \"10-2015\",\n                    \"doc_count\": 7,\n                    \"key\": \"*-10-2015\"\n                },\n                {\n                    \"from\": 1.4436576E12,\n                    \"from_as_string\": \"10-2015\",\n                    \"doc_count\": 0,\n                    \"key\": \"10-2015-*\"\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 78
    },
    "digest": "a6ef8cd8c8218d547727ffc5485bfbd7",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n   \"aggs\": {\n       \"range\": {\n           \"date_range\": {\n               \"field\": \"date\",\n               \"missing\": \"1976/11/30\",\n               \"ranges\": [\n                  {\n                    \"key\": \"Older\",\n                    \"to\": \"2016/02/01\"\n                  }, <1>\n                  {\n                    \"key\": \"Newer\",\n                    \"from\": \"2016/02/01\",\n                    \"to\" : \"now/d\"\n                  }\n              ]\n          }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range": {
              "date_range": {
                "field": "date",
                "missing": "1976/11/30",
                "ranges": [
                  {
                    "key": "Older",
                    "to": "2016/02/01"
                  },
                  {
                    "key": "Newer",
                    "from": "2016/02/01",
                    "to": "now/d"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 269
    },
    "digest": "901d66919e584515717bf78ab5ca2cbb",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n   \"aggs\": {\n       \"range\": {\n           \"date_range\": {\n               \"field\": \"date\",\n               \"time_zone\": \"CET\",\n               \"ranges\": [\n                  { \"to\": \"2016/02/01\" }, <1>\n                  { \"from\": \"2016/02/01\", \"to\" : \"now/d\" }, <2>\n                  { \"from\": \"now/d\" }\n              ]\n          }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range": {
              "date_range": {
                "field": "date",
                "time_zone": "CET",
                "ranges": [
                  {
                    "to": "2016/02/01"
                  },
                  {
                    "from": "2016/02/01",
                    "to": "now/d"
                  },
                  {
                    "from": "now/d"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 298
    },
    "digest": "83721157085b4e5a8a5ed3ede88b3690",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\": {\n        \"range\": {\n            \"date_range\": {\n                \"field\": \"date\",\n                \"format\": \"MM-yyy\",\n                \"ranges\": [\n                    { \"to\": \"now-10M/M\" },\n                    { \"from\": \"now-10M/M\" }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range": {
              "date_range": {
                "field": "date",
                "format": "MM-yyy",
                "ranges": [
                  {
                    "to": "now-10M/M"
                  },
                  {
                    "from": "now-10M/M"
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 321
    },
    "digest": "060755fcdff99fcc18a565619df3499b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"range\": {\n            \"buckets\": {\n                \"*-10-2015\": {\n                    \"to\": 1.4436576E12,\n                    \"to_as_string\": \"10-2015\",\n                    \"doc_count\": 7\n                },\n                \"10-2015-*\": {\n                    \"from\": 1.4436576E12,\n                    \"from_as_string\": \"10-2015\",\n                    \"doc_count\": 0\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 347
    },
    "digest": "2d1c675b3cb93119219a13db93262c1e",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\": {\n        \"range\": {\n            \"date_range\": {\n                \"field\": \"date\",\n                \"format\": \"MM-yyy\",\n                \"ranges\": [\n                    { \"from\": \"01-2015\",  \"to\": \"03-2015\", \"key\": \"quarter_01\" },\n                    { \"from\": \"03-2015\", \"to\": \"06-2015\", \"key\": \"quarter_02\" }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range": {
              "date_range": {
                "field": "date",
                "format": "MM-yyy",
                "ranges": [
                  {
                    "from": "01-2015",
                    "to": "03-2015",
                    "key": "quarter_01"
                  },
                  {
                    "from": "03-2015",
                    "to": "06-2015",
                    "key": "quarter_02"
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/daterange-aggregation.asciidoc",
      "line": 370
    },
    "digest": "04f37bb8f2d45e3ccf0ea89abfab9c67",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"range\": {\n            \"buckets\": {\n                \"quarter_01\": {\n                    \"from\": 1.4200704E12,\n                    \"from_as_string\": \"01-2015\",\n                    \"to\": 1.425168E12,\n                    \"to_as_string\": \"03-2015\",\n                    \"doc_count\": 5\n                },\n                \"quarter_02\": {\n                    \"from\": 1.425168E12,\n                    \"from_as_string\": \"03-2015\",\n                    \"to\": 1.4331168E12,\n                    \"to_as_string\": \"06-2015\",\n                    \"doc_count\": 2\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/diversified-sampler-aggregation.asciidoc",
      "line": 30
    },
    "digest": "3344c3478f1e8bbbef683757638a34f4",
    "lang": "console",
    "found": [],
    "source": "POST /stackoverflow/_search?size=0\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"tags:elasticsearch\"\n        }\n    },\n    \"aggs\": {\n        \"my_unbiased_sample\": {\n            \"diversified_sampler\": {\n                \"shard_size\": 200,\n                \"field\" : \"author\"\n            },\n            \"aggs\": {\n                \"keywords\": {\n                    \"significant_terms\": {\n                        \"field\": \"tags\",\n                        \"exclude\": [\"elasticsearch\"]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/stackoverflow/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "tags:elasticsearch"
            }
          },
          "aggs": {
            "my_unbiased_sample": {
              "diversified_sampler": {
                "shard_size": 200,
                "field": "author"
              },
              "aggs": {
                "keywords": {
                  "significant_terms": {
                    "field": "tags",
                    "exclude": [
                      "elasticsearch"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "stackoverflow"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/diversified-sampler-aggregation.asciidoc",
      "line": 61
    },
    "digest": "d1753ad4ec54b1c45d807263bad697cb",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"my_unbiased_sample\": {\n            \"doc_count\": 151,<1>\n            \"keywords\": {<2>\n                \"doc_count\": 151,\n                \"bg_count\": 650,\n                \"buckets\": [\n                    {\n                        \"key\": \"kibana\",\n                        \"doc_count\": 150,\n                        \"score\": 2.213,\n                        \"bg_count\": 200\n                    }\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/diversified-sampler-aggregation.asciidoc",
      "line": 95
    },
    "digest": "07afce825c09de17a3d73a02b17a0a97",
    "lang": "console",
    "found": [],
    "source": "POST /stackoverflow/_search?size=0\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"tags:kibana\"\n        }\n    },\n    \"aggs\": {\n        \"my_unbiased_sample\": {\n            \"diversified_sampler\": {\n                \"shard_size\": 200,\n                \"max_docs_per_value\" : 3,\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['tags'].hashCode()\"\n                }\n            },\n            \"aggs\": {\n                \"keywords\": {\n                    \"significant_terms\": {\n                        \"field\": \"tags\",\n                        \"exclude\": [\"kibana\"]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/stackoverflow/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "tags:kibana"
            }
          },
          "aggs": {
            "my_unbiased_sample": {
              "diversified_sampler": {
                "shard_size": 200,
                "max_docs_per_value": 3,
                "script": {
                  "lang": "painless",
                  "source": "doc['tags'].hashCode()"
                }
              },
              "aggs": {
                "keywords": {
                  "significant_terms": {
                    "field": "tags",
                    "exclude": [
                      "kibana"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "stackoverflow"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/diversified-sampler-aggregation.asciidoc",
      "line": 130
    },
    "digest": "c7ebd0dfce616a0f566d57b6a5f88f7c",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"my_unbiased_sample\": {\n            \"doc_count\": 6,\n            \"keywords\": {\n                \"doc_count\": 6,\n                \"bg_count\": 650,\n                \"buckets\": [\n                    {\n                        \"key\": \"logstash\",\n                        \"doc_count\": 3,\n                        \"score\": 2.213,\n                        \"bg_count\": 50\n                    },\n                    {\n                        \"key\": \"elasticsearch\",\n                        \"doc_count\": 3,\n                        \"score\": 1.34,\n                        \"bg_count\": 200\n                    }\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filter-aggregation.asciidoc",
      "line": 9
    },
    "digest": "b93ed4ef309819734f0eeea82e8b0f1f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"t_shirts\" : {\n            \"filter\" : { \"term\": { \"type\": \"t-shirt\" } },\n            \"aggs\" : {\n                \"avg_price\" : { \"avg\" : { \"field\" : \"price\" } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "t_shirts": {
              "filter": {
                "term": {
                  "type": "t-shirt"
                }
              },
              "aggs": {
                "avg_price": {
                  "avg": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filter-aggregation.asciidoc",
      "line": 29
    },
    "digest": "cc5ee999726a7b866098e8e312191766",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"t_shirts\" : {\n            \"doc_count\" : 3,\n            \"avg_price\" : { \"value\" : 128.33333333333334 }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 11
    },
    "digest": "188e6208cccb13027a5c1c95440841ee",
    "lang": "console",
    "found": [],
    "source": "PUT /logs/_bulk?refresh\n{ \"index\" : { \"_id\" : 1 } }\n{ \"body\" : \"warning: page could not be rendered\" }\n{ \"index\" : { \"_id\" : 2 } }\n{ \"body\" : \"authentication error\" }\n{ \"index\" : { \"_id\" : 3 } }\n{ \"body\" : \"warning: connection timed out\" }\n\nGET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"filters\" : {\n          \"errors\" :   { \"match\" : { \"body\" : \"error\"   }},\n          \"warnings\" : { \"match\" : { \"body\" : \"warning\" }}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "body": "warning: page could not be rendered"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "body": "authentication error"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "body": "warning: connection timed out"
          }
        ],
        "params": {
          "index": "logs"
        },
        "api": "bulk"
      },
      {
        "method": "GET",
        "url": "/logs/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "messages": {
              "filters": {
                "filters": {
                  "errors": {
                    "match": {
                      "body": "error"
                    }
                  },
                  "warnings": {
                    "match": {
                      "body": "warning"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "logs"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 43
    },
    "digest": "9024c429b700eef896a8f12aa96b1dd3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 9,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": {\n        \"errors\": {\n          \"doc_count\": 1\n        },\n        \"warnings\": {\n          \"doc_count\": 2\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 73
    },
    "digest": "3cd2f7f9096a8e8180f27b6c30e71840",
    "lang": "console",
    "found": [],
    "source": "GET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"filters\" : [\n          { \"match\" : { \"body\" : \"error\"   }},\n          { \"match\" : { \"body\" : \"warning\" }}\n        ]\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/logs/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "messages": {
              "filters": {
                "filters": [
                  {
                    "match": {
                      "body": "error"
                    }
                  },
                  {
                    "match": {
                      "body": "warning"
                    }
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "logs"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 95
    },
    "digest": "be0d6421c3fa5bed737f55c6f44ca5d5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 4,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": [\n        {\n          \"doc_count\": 1\n        },\n        {\n          \"doc_count\": 2\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 135
    },
    "digest": "21bb03ca9123de3237c1c76934f9f172",
    "lang": "console",
    "found": [],
    "source": "PUT logs/_doc/4?refresh\n{\n  \"body\": \"info: user Bob logged out\"\n}\n\nGET logs/_search\n{\n  \"size\": 0,\n  \"aggs\" : {\n    \"messages\" : {\n      \"filters\" : {\n        \"other_bucket_key\": \"other_messages\",\n        \"filters\" : {\n          \"errors\" :   { \"match\" : { \"body\" : \"error\"   }},\n          \"warnings\" : { \"match\" : { \"body\" : \"warning\" }}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs/_doc/4",
        "query": {
          "refresh": true
        },
        "body": {
          "body": "info: user Bob logged out"
        },
        "params": {
          "index": "logs",
          "id": "4"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/logs/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "messages": {
              "filters": {
                "other_bucket_key": "other_messages",
                "filters": {
                  "errors": {
                    "match": {
                      "body": "error"
                    }
                  },
                  "warnings": {
                    "match": {
                      "body": "warning"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "logs"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/filters-aggregation.asciidoc",
      "line": 162
    },
    "digest": "8f7dede7e1320bde1a4ebbf22da9a9a8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n  \"aggregations\": {\n    \"messages\": {\n      \"buckets\": {\n        \"errors\": {\n          \"doc_count\": 1\n        },\n        \"warnings\": {\n          \"doc_count\": 2\n        },\n        \"other_messages\": {\n          \"doc_count\": 1\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 7
    },
    "digest": "9bf956f9d3f27bb7b4e5a03af84d5da5",
    "lang": "console",
    "found": [],
    "source": "PUT /museums\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_point\"\n            }\n        }\n    }\n}\n\nPOST /museums/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"location\": \"52.374081,4.912350\", \"name\": \"NEMO Science Museum\"}\n{\"index\":{\"_id\":2}}\n{\"location\": \"52.369219,4.901618\", \"name\": \"Museum Het Rembrandthuis\"}\n{\"index\":{\"_id\":3}}\n{\"location\": \"52.371667,4.914722\", \"name\": \"Nederlands Scheepvaartmuseum\"}\n{\"index\":{\"_id\":4}}\n{\"location\": \"51.222900,4.405200\", \"name\": \"Letterenhuis\"}\n{\"index\":{\"_id\":5}}\n{\"location\": \"48.861111,2.336389\", \"name\": \"Musée du Louvre\"}\n{\"index\":{\"_id\":6}}\n{\"location\": \"48.860000,2.327000\", \"name\": \"Musée d'Orsay\"}\n\nPOST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"rings_around_amsterdam\" : {\n            \"geo_distance\" : {\n                \"field\" : \"location\",\n                \"origin\" : \"52.3760, 4.894\",\n                \"ranges\" : [\n                    { \"to\" : 100000 },\n                    { \"from\" : 100000, \"to\" : 300000 },\n                    { \"from\" : 300000 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/museums",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/museums/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "location": "52.374081,4.912350",
            "name": "NEMO Science Museum"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "location": "52.369219,4.901618",
            "name": "Museum Het Rembrandthuis"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "location": "52.371667,4.914722",
            "name": "Nederlands Scheepvaartmuseum"
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "location": "51.222900,4.405200",
            "name": "Letterenhuis"
          },
          {
            "index": {
              "_id": 5
            }
          },
          {
            "location": "48.861111,2.336389",
            "name": "Musée du Louvre"
          },
          {
            "index": {
              "_id": 6
            }
          },
          {
            "location": "48.860000,2.327000",
            "name": "Musée d'Orsay"
          }
        ],
        "params": {
          "index": "museums"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "rings_around_amsterdam": {
              "geo_distance": {
                "field": "location",
                "origin": "52.3760, 4.894",
                "ranges": [
                  {
                    "to": 100000
                  },
                  {
                    "from": 100000,
                    "to": 300000
                  },
                  {
                    "from": 300000
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 54
    },
    "digest": "a3bd9eb63ad4bd236a2c0feed0607960",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"rings_around_amsterdam\" : {\n            \"buckets\": [\n                {\n                    \"key\": \"*-100000.0\",\n                    \"from\": 0.0,\n                    \"to\": 100000.0,\n                    \"doc_count\": 3\n                },\n                {\n                    \"key\": \"100000.0-300000.0\",\n                    \"from\": 100000.0,\n                    \"to\": 300000.0,\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": \"300000.0-*\",\n                    \"from\": 300000.0,\n                    \"doc_count\": 2\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 93
    },
    "digest": "c78b80d080a58090583228421ac1553d",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"rings\" : {\n            \"geo_distance\" : {\n                \"field\" : \"location\",\n                \"origin\" : \"52.3760, 4.894\",\n                \"unit\" : \"km\", <1>\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 300 },\n                    { \"from\" : 300 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "rings": {
              "geo_distance": {
                "field": "location",
                "origin": "52.3760, 4.894",
                "unit": "km",
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 300
                  },
                  {
                    "from": 300
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 119
    },
    "digest": "a5736ad3638c238e3b15c9fdaa1f29f7",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"rings\" : {\n            \"geo_distance\" : {\n                \"field\" : \"location\",\n                \"origin\" : \"52.3760, 4.894\",\n                \"unit\" : \"km\",\n                \"distance_type\" : \"plane\",\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 300 },\n                    { \"from\" : 300 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "rings": {
              "geo_distance": {
                "field": "location",
                "origin": "52.3760, 4.894",
                "unit": "km",
                "distance_type": "plane",
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 300
                  },
                  {
                    "from": 300
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 146
    },
    "digest": "6b31f435607617d96b1dff3bf10c9d8c",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"rings_around_amsterdam\" : {\n            \"geo_distance\" : {\n                \"field\" : \"location\",\n                \"origin\" : \"52.3760, 4.894\",\n                \"ranges\" : [\n                    { \"to\" : 100000 },\n                    { \"from\" : 100000, \"to\" : 300000 },\n                    { \"from\" : 300000 }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "rings_around_amsterdam": {
              "geo_distance": {
                "field": "location",
                "origin": "52.3760, 4.894",
                "ranges": [
                  {
                    "to": 100000
                  },
                  {
                    "from": 100000,
                    "to": 300000
                  },
                  {
                    "from": 300000
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 170
    },
    "digest": "cf73842533f37413f9044e734bf03220",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"rings_around_amsterdam\" : {\n            \"buckets\": {\n                \"*-100000.0\": {\n                    \"from\": 0.0,\n                    \"to\": 100000.0,\n                    \"doc_count\": 3\n                },\n                \"100000.0-300000.0\": {\n                    \"from\": 100000.0,\n                    \"to\": 300000.0,\n                    \"doc_count\": 1\n                },\n                \"300000.0-*\": {\n                    \"from\": 300000.0,\n                    \"doc_count\": 2\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 200
    },
    "digest": "c5afc3d716fdf8c0eefa4732e8a4b3ee",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggs\" : {\n        \"rings_around_amsterdam\" : {\n            \"geo_distance\" : {\n                \"field\" : \"location\",\n                \"origin\" : \"52.3760, 4.894\",\n                \"ranges\" : [\n                    { \"to\" : 100000, \"key\": \"first_ring\" },\n                    { \"from\" : 100000, \"to\" : 300000, \"key\": \"second_ring\" },\n                    { \"from\" : 300000, \"key\": \"third_ring\" }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "rings_around_amsterdam": {
              "geo_distance": {
                "field": "location",
                "origin": "52.3760, 4.894",
                "ranges": [
                  {
                    "to": 100000,
                    "key": "first_ring"
                  },
                  {
                    "from": 100000,
                    "to": 300000,
                    "key": "second_ring"
                  },
                  {
                    "from": 300000,
                    "key": "third_ring"
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geodistance-aggregation.asciidoc",
      "line": 224
    },
    "digest": "7511aeeb2878c0b3e01b3557027ce575",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"rings_around_amsterdam\" : {\n            \"buckets\": {\n                \"first_ring\": {\n                    \"from\": 0.0,\n                    \"to\": 100000.0,\n                    \"doc_count\": 3\n                },\n                \"second_ring\": {\n                    \"from\": 100000.0,\n                    \"to\": 300000.0,\n                    \"doc_count\": 1\n                },\n                \"third_ring\": {\n                    \"from\": 300000.0,\n                    \"doc_count\": 2\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 21
    },
    "digest": "71af0fec59d37477c850d47730d3f286",
    "lang": "console",
    "found": [],
    "source": "PUT /museums\n{\n    \"mappings\": {\n          \"properties\": {\n              \"location\": {\n                  \"type\": \"geo_point\"\n              }\n          }\n    }\n}\n\nPOST /museums/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"location\": \"52.374081,4.912350\", \"name\": \"NEMO Science Museum\"}\n{\"index\":{\"_id\":2}}\n{\"location\": \"52.369219,4.901618\", \"name\": \"Museum Het Rembrandthuis\"}\n{\"index\":{\"_id\":3}}\n{\"location\": \"52.371667,4.914722\", \"name\": \"Nederlands Scheepvaartmuseum\"}\n{\"index\":{\"_id\":4}}\n{\"location\": \"51.222900,4.405200\", \"name\": \"Letterenhuis\"}\n{\"index\":{\"_id\":5}}\n{\"location\": \"48.861111,2.336389\", \"name\": \"Musée du Louvre\"}\n{\"index\":{\"_id\":6}}\n{\"location\": \"48.860000,2.327000\", \"name\": \"Musée d'Orsay\"}\n\nPOST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"large-grid\" : {\n            \"geohash_grid\" : {\n                \"field\" : \"location\",\n                \"precision\" : 3\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/museums",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/museums/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "location": "52.374081,4.912350",
            "name": "NEMO Science Museum"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "location": "52.369219,4.901618",
            "name": "Museum Het Rembrandthuis"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "location": "52.371667,4.914722",
            "name": "Nederlands Scheepvaartmuseum"
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "location": "51.222900,4.405200",
            "name": "Letterenhuis"
          },
          {
            "index": {
              "_id": 5
            }
          },
          {
            "location": "48.861111,2.336389",
            "name": "Musée du Louvre"
          },
          {
            "index": {
              "_id": 6
            }
          },
          {
            "location": "48.860000,2.327000",
            "name": "Musée d'Orsay"
          }
        ],
        "params": {
          "index": "museums"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "large-grid": {
              "geohash_grid": {
                "field": "location",
                "precision": 3
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 63
    },
    "digest": "3d844e84b3d980d735c327d4f4602b2b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"large-grid\": {\n            \"buckets\": [\n                {\n                    \"key\": \"u17\",\n                    \"doc_count\": 3\n                },\n                {\n                    \"key\": \"u09\",\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": \"u15\",\n                    \"doc_count\": 1\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 93
    },
    "digest": "9f0c6a8c6381bb0cb81a3070dd2bf2f2",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"zoomed-in\" : {\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"location\" : {\n                        \"top_left\" : \"52.4, 4.9\",\n                        \"bottom_right\" : \"52.3, 5.0\"\n                    }\n                }\n            },\n            \"aggregations\":{\n                \"zoom1\":{\n                    \"geohash_grid\" : {\n                        \"field\": \"location\",\n                        \"precision\": 8\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "zoomed-in": {
              "filter": {
                "geo_bounding_box": {
                  "location": {
                    "top_left": "52.4, 4.9",
                    "bottom_right": "52.3, 5.0"
                  }
                }
              },
              "aggregations": {
                "zoom1": {
                  "geohash_grid": {
                    "field": "location",
                    "precision": 8
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 124
    },
    "digest": "36f61e038014f92466cd83d7b007e16b",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"zoomed-in\" : {\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"location\" : {\n                        \"top_left\" : \"u17\",\n                        \"bottom_right\" : \"u17\"\n                    }\n                }\n            },\n            \"aggregations\":{\n                \"zoom1\":{\n                    \"geohash_grid\" : {\n                        \"field\": \"location\",\n                        \"precision\": 8\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "zoomed-in": {
              "filter": {
                "geo_bounding_box": {
                  "location": {
                    "top_left": "u17",
                    "bottom_right": "u17"
                  }
                }
              },
              "aggregations": {
                "zoom1": {
                  "geohash_grid": {
                    "field": "location",
                    "precision": 8
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 152
    },
    "digest": "0846b119686525270f2065832720df34",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"zoomed-in\" : {\n            \"doc_count\" : 3,\n            \"zoom1\" : {\n                \"buckets\" : [\n                    {\n                        \"key\" : \"u173zy3j\",\n                        \"doc_count\" : 1\n                    },\n                    {\n                        \"key\" : \"u173zvfz\",\n                        \"doc_count\" : 1\n                    },\n                    {\n                        \"key\" : \"u173zt90\",\n                        \"doc_count\" : 1\n                    }\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 206
    },
    "digest": "850c30e63e2237776a7ed299f0262316",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"tiles-in-bounds\" : {\n            \"geohash_grid\" : {\n                \"field\" : \"location\",\n                \"precision\" : 8,\n                \"bounds\": {\n                  \"top_left\" : \"53.4375, 4.21875\",\n                  \"bottom_right\" : \"52.03125, 5.625\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "tiles-in-bounds": {
              "geohash_grid": {
                "field": "location",
                "precision": 8,
                "bounds": {
                  "top_left": "53.4375, 4.21875",
                  "bottom_right": "52.03125, 5.625"
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geohashgrid-aggregation.asciidoc",
      "line": 226
    },
    "digest": "28025af4e9cc45d29040b5ff8078530e",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"tiles-in-bounds\" : {\n           \"buckets\" : [\n               {\n                 \"key\" : \"u173zy3j\",\n                 \"doc_count\" : 1\n               },\n               {\n                 \"key\" : \"u173zvfz\",\n                 \"doc_count\" : 1\n               },\n               {\n                 \"key\" : \"u173zt90\",\n                 \"doc_count\" : 1\n               }\n           ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 34
    },
    "digest": "86f1e66bc101b3f22dc84d2aa172fd75",
    "lang": "console",
    "found": [],
    "source": "PUT /museums\n{\n    \"mappings\": {\n          \"properties\": {\n              \"location\": {\n                  \"type\": \"geo_point\"\n              }\n          }\n    }\n}\n\nPOST /museums/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"location\": \"52.374081,4.912350\", \"name\": \"NEMO Science Museum\"}\n{\"index\":{\"_id\":2}}\n{\"location\": \"52.369219,4.901618\", \"name\": \"Museum Het Rembrandthuis\"}\n{\"index\":{\"_id\":3}}\n{\"location\": \"52.371667,4.914722\", \"name\": \"Nederlands Scheepvaartmuseum\"}\n{\"index\":{\"_id\":4}}\n{\"location\": \"51.222900,4.405200\", \"name\": \"Letterenhuis\"}\n{\"index\":{\"_id\":5}}\n{\"location\": \"48.861111,2.336389\", \"name\": \"Musée du Louvre\"}\n{\"index\":{\"_id\":6}}\n{\"location\": \"48.860000,2.327000\", \"name\": \"Musée d'Orsay\"}\n\nPOST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"large-grid\" : {\n            \"geotile_grid\" : {\n                \"field\" : \"location\",\n                \"precision\" : 8\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/museums",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/museums/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "location": "52.374081,4.912350",
            "name": "NEMO Science Museum"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "location": "52.369219,4.901618",
            "name": "Museum Het Rembrandthuis"
          },
          {
            "index": {
              "_id": 3
            }
          },
          {
            "location": "52.371667,4.914722",
            "name": "Nederlands Scheepvaartmuseum"
          },
          {
            "index": {
              "_id": 4
            }
          },
          {
            "location": "51.222900,4.405200",
            "name": "Letterenhuis"
          },
          {
            "index": {
              "_id": 5
            }
          },
          {
            "location": "48.861111,2.336389",
            "name": "Musée du Louvre"
          },
          {
            "index": {
              "_id": 6
            }
          },
          {
            "location": "48.860000,2.327000",
            "name": "Musée d'Orsay"
          }
        ],
        "params": {
          "index": "museums"
        },
        "api": "bulk"
      },
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "large-grid": {
              "geotile_grid": {
                "field": "location",
                "precision": 8
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 76
    },
    "digest": "c62e00cc03f0c034220d321408c4cfb7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"large-grid\": {\n            \"buckets\": [\n                {\n                  \"key\" : \"8/131/84\",\n                  \"doc_count\" : 3\n                },\n                {\n                  \"key\" : \"8/129/88\",\n                  \"doc_count\" : 2\n                },\n                {\n                  \"key\" : \"8/131/85\",\n                  \"doc_count\" : 1\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 109
    },
    "digest": "57705815ad6bd50d91e58153ae75d3ca",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"zoomed-in\" : {\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"location\" : {\n                        \"top_left\" : \"52.4, 4.9\",\n                        \"bottom_right\" : \"52.3, 5.0\"\n                    }\n                }\n            },\n            \"aggregations\":{\n                \"zoom1\":{\n                    \"geotile_grid\" : {\n                        \"field\": \"location\",\n                        \"precision\": 22\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "zoomed-in": {
              "filter": {
                "geo_bounding_box": {
                  "location": {
                    "top_left": "52.4, 4.9",
                    "bottom_right": "52.3, 5.0"
                  }
                }
              },
              "aggregations": {
                "zoom1": {
                  "geotile_grid": {
                    "field": "location",
                    "precision": 22
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 137
    },
    "digest": "f39887c8b62da4c01c78aba943b3bf61",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"zoomed-in\" : {\n            \"doc_count\" : 3,\n            \"zoom1\" : {\n                \"buckets\" : [\n                    {\n                      \"key\" : \"22/2154412/1378379\",\n                      \"doc_count\" : 1\n                    },\n                    {\n                      \"key\" : \"22/2154385/1378332\",\n                      \"doc_count\" : 1\n                    },\n                    {\n                      \"key\" : \"22/2154259/1378425\",\n                      \"doc_count\" : 1\n                    }\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 177
    },
    "digest": "473bc08acc95689e256c7160fec07c0c",
    "lang": "console",
    "found": [],
    "source": "POST /museums/_search?size=0\n{\n    \"aggregations\" : {\n        \"tiles-in-bounds\" : {\n            \"geotile_grid\" : {\n                \"field\" : \"location\",\n                \"precision\" : 22,\n                \"bounds\": {\n                  \"top_left\" : \"52.4, 4.9\",\n                  \"bottom_right\" : \"52.3, 5.0\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/museums/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggregations": {
            "tiles-in-bounds": {
              "geotile_grid": {
                "field": "location",
                "precision": 22,
                "bounds": {
                  "top_left": "52.4, 4.9",
                  "bottom_right": "52.3, 5.0"
                }
              }
            }
          }
        },
        "params": {
          "index": "museums"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/geotilegrid-aggregation.asciidoc",
      "line": 197
    },
    "digest": "dee2fe5d2073aec109f87c1e279e4405",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"tiles-in-bounds\" : {\n           \"buckets\" : [\n               {\n                 \"key\" : \"22/2154412/1378379\",\n                 \"doc_count\" : 1\n               },\n               {\n                 \"key\" : \"22/2154385/1378332\",\n                 \"doc_count\" : 1\n               },\n               {\n                 \"key\" : \"22/2154259/1378425\",\n                 \"doc_count\" : 1\n               }\n           ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/global-aggregation.asciidoc",
      "line": 15
    },
    "digest": "d209f2447584a37e7f1480912b40a52d",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"match\" : { \"type\" : \"t-shirt\" }\n    },\n    \"aggs\" : {\n        \"all_products\" : {\n            \"global\" : {}, <1>\n            \"aggs\" : { <2>\n                \"avg_price\" : { \"avg\" : { \"field\" : \"price\" } }\n            }\n        },\n        \"t_shirts\": { \"avg\" : { \"field\" : \"price\" } }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "match": {
              "type": "t-shirt"
            }
          },
          "aggs": {
            "all_products": {
              "global": {},
              "aggs": {
                "avg_price": {
                  "avg": {
                    "field": "price"
                  }
                }
              }
            },
            "t_shirts": {
              "avg": {
                "field": "price"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/global-aggregation.asciidoc",
      "line": 45
    },
    "digest": "59969f7a7748a0370af34cf0611335eb",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"all_products\" : {\n            \"doc_count\" : 7, <1>\n            \"avg_price\" : {\n                \"value\" : 140.71428571428572 <2>\n            }\n        },\n        \"t_shirts\": {\n            \"value\" : 128.33333333333334 <3>\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 28
    },
    "digest": "322e1a8842fc5924b972a9a32c29c17a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"prices\" : {\n            \"histogram\" : {\n                \"field\" : \"price\",\n                \"interval\" : 50\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "prices": {
              "histogram": {
                "field": "price",
                "interval": 50
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 46
    },
    "digest": "686a2a1139ff717e0b088f017af0b51b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"prices\" : {\n            \"buckets\": [\n                {\n                    \"key\": 0.0,\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": 50.0,\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": 100.0,\n                    \"doc_count\": 0\n                },\n                {\n                    \"key\": 150.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": 200.0,\n                    \"doc_count\": 3\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 86
    },
    "digest": "0003e4064d004a341c193ddd5d82a07f",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"prices\" : {\n            \"histogram\" : {\n                \"field\" : \"price\",\n                \"interval\" : 50,\n                \"min_doc_count\" : 1\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "prices": {
              "histogram": {
                "field": "price",
                "interval": 50,
                "min_doc_count": 1
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 105
    },
    "digest": "ef9ab5c482c12f73a296a99504417fb1",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"prices\" : {\n            \"buckets\": [\n                {\n                    \"key\": 0.0,\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": 50.0,\n                    \"doc_count\": 1\n                },\n                {\n                    \"key\": 150.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": 200.0,\n                    \"doc_count\": 3\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 161
    },
    "digest": "c72bd866a7e21907fa71f1067371db55",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"query\" : {\n        \"constant_score\" : { \"filter\": { \"range\" : { \"price\" : { \"to\" : \"500\" } } } }\n    },\n    \"aggs\" : {\n        \"prices\" : {\n            \"histogram\" : {\n                \"field\" : \"price\",\n                \"interval\" : 50,\n                \"extended_bounds\" : {\n                    \"min\" : 0,\n                    \"max\" : 500\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "range": {
                  "price": {
                    "to": "500"
                  }
                }
              }
            }
          },
          "aggs": {
            "prices": {
              "histogram": {
                "field": "price",
                "interval": 50,
                "extended_bounds": {
                  "min": 0,
                  "max": 500
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 213
    },
    "digest": "e0bba0f00a589933499493390a9a0517",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"prices\" : {\n            \"histogram\" : {\n                \"field\" : \"price\",\n                \"interval\" : 50,\n                \"keyed\" : true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "prices": {
              "histogram": {
                "field": "price",
                "interval": 50,
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 232
    },
    "digest": "7047beff5554790b5fa4a3daadb535f6",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"prices\": {\n            \"buckets\": {\n                \"0.0\": {\n                    \"key\": 0.0,\n                    \"doc_count\": 1\n                },\n                \"50.0\": {\n                    \"key\": 50.0,\n                    \"doc_count\": 1\n                },\n                \"100.0\": {\n                    \"key\": 100.0,\n                    \"doc_count\": 0\n                },\n                \"150.0\": {\n                    \"key\": 150.0,\n                    \"doc_count\": 2\n                },\n                \"200.0\": {\n                    \"key\": 200.0,\n                    \"doc_count\": 3\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/histogram-aggregation.asciidoc",
      "line": 272
    },
    "digest": "271c55d9a421dbc794caa0ebaead95e3",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"quantity\" : {\n             \"histogram\" : {\n                 \"field\" : \"quantity\",\n                 \"interval\": 10,\n                 \"missing\": 0 <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "quantity": {
              "histogram": {
                "field": "quantity",
                "interval": 10,
                "missing": 0
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 9
    },
    "digest": "01cc705f6074ab637cfbb9f92cf44e44",
    "lang": "console",
    "found": [],
    "source": "GET /ip_addresses/_search\n{\n    \"size\": 10,\n    \"aggs\" : {\n        \"ip_ranges\" : {\n            \"ip_range\" : {\n                \"field\" : \"ip\",\n                \"ranges\" : [\n                    { \"to\" : \"10.0.0.5\" },\n                    { \"from\" : \"10.0.0.5\" }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/ip_addresses/_search",
        "query": null,
        "body": {
          "size": 10,
          "aggs": {
            "ip_ranges": {
              "ip_range": {
                "field": "ip",
                "ranges": [
                  {
                    "to": "10.0.0.5"
                  },
                  {
                    "from": "10.0.0.5"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "ip_addresses"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 31
    },
    "digest": "1ba6dc327a97366eeef7173a9fc4b250",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"ip_ranges\": {\n            \"buckets\" : [\n                {\n                    \"key\": \"*-10.0.0.5\",\n                    \"to\": \"10.0.0.5\",\n                    \"doc_count\": 10\n                },\n                {\n                    \"key\": \"10.0.0.5-*\",\n                    \"from\": \"10.0.0.5\",\n                    \"doc_count\": 260\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 58
    },
    "digest": "9f4ba6565d80e0964e177eaac9fb0614",
    "lang": "console",
    "found": [],
    "source": "GET /ip_addresses/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"ip_ranges\" : {\n            \"ip_range\" : {\n                \"field\" : \"ip\",\n                \"ranges\" : [\n                    { \"mask\" : \"10.0.0.0/25\" },\n                    { \"mask\" : \"10.0.0.127/25\" }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/ip_addresses/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "ip_ranges": {
              "ip_range": {
                "field": "ip",
                "ranges": [
                  {
                    "mask": "10.0.0.0/25"
                  },
                  {
                    "mask": "10.0.0.127/25"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "ip_addresses"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 80
    },
    "digest": "a60f7bec5b654207d2c1b7459b55eb95",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"ip_ranges\": {\n            \"buckets\": [\n                {\n                    \"key\": \"10.0.0.0/25\",\n                    \"from\": \"10.0.0.0\",\n                    \"to\": \"10.0.0.128\",\n                    \"doc_count\": 128\n                },\n                {\n                    \"key\": \"10.0.0.127/25\",\n                    \"from\": \"10.0.0.0\",\n                    \"to\": \"10.0.0.128\",\n                    \"doc_count\": 128\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 111
    },
    "digest": "c4db73a276175d57c6a9a0387e728028",
    "lang": "console",
    "found": [],
    "source": "GET /ip_addresses/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"ip_ranges\": {\n            \"ip_range\": {\n                \"field\": \"ip\",\n                \"ranges\": [\n                    { \"to\" : \"10.0.0.5\" },\n                    { \"from\" : \"10.0.0.5\" }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/ip_addresses/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "ip_ranges": {
              "ip_range": {
                "field": "ip",
                "ranges": [
                  {
                    "to": "10.0.0.5"
                  },
                  {
                    "from": "10.0.0.5"
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "ip_addresses"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 134
    },
    "digest": "d5be17fc0678dad0a2ba0e7c65c8d5b1",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"ip_ranges\": {\n            \"buckets\": {\n                \"*-10.0.0.5\": {\n                    \"to\": \"10.0.0.5\",\n                    \"doc_count\": 10\n                },\n                \"10.0.0.5-*\": {\n                    \"from\": \"10.0.0.5\",\n                    \"doc_count\": 260\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 159
    },
    "digest": "fa8ee2094af36e7ec02233a4c7b008bc",
    "lang": "console",
    "found": [],
    "source": "GET /ip_addresses/_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"ip_ranges\": {\n            \"ip_range\": {\n                \"field\": \"ip\",\n                \"ranges\": [\n                    { \"key\": \"infinity\", \"to\" : \"10.0.0.5\" },\n                    { \"key\": \"and-beyond\", \"from\" : \"10.0.0.5\" }\n                ],\n                \"keyed\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/ip_addresses/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "ip_ranges": {
              "ip_range": {
                "field": "ip",
                "ranges": [
                  {
                    "key": "infinity",
                    "to": "10.0.0.5"
                  },
                  {
                    "key": "and-beyond",
                    "from": "10.0.0.5"
                  }
                ],
                "keyed": true
              }
            }
          }
        },
        "params": {
          "index": "ip_addresses"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/iprange-aggregation.asciidoc",
      "line": 182
    },
    "digest": "de137a4ba0b8a83dc41471287c52b6ae",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n\n    \"aggregations\": {\n        \"ip_ranges\": {\n            \"buckets\": {\n                \"infinity\": {\n                    \"to\": \"10.0.0.5\",\n                    \"doc_count\": 10\n                },\n                \"and-beyond\": {\n                    \"from\": \"10.0.0.5\",\n                    \"doc_count\": 260\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/missing-aggregation.asciidoc",
      "line": 9
    },
    "digest": "09dd80a4b937315d4a1aa629b22f9332",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search?size=0\n{\n    \"aggs\" : {\n        \"products_without_a_price\" : {\n            \"missing\" : { \"field\" : \"price\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "products_without_a_price": {
              "missing": {
                "field": "price"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/missing-aggregation.asciidoc",
      "line": 26
    },
    "digest": "357ba4c93cefb311862acf2ad4f86bb9",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"products_without_a_price\" : {\n            \"doc_count\" : 00\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/nested-aggregation.asciidoc",
      "line": 10
    },
    "digest": "60917d97013c4516c621c6c24c29748f",
    "lang": "console",
    "found": [],
    "source": "PUT /products\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"resellers\" : { <1>\n                \"type\" : \"nested\",\n                \"properties\" : {\n                    \"reseller\" : { \"type\" : \"text\" },\n                    \"price\" : { \"type\" : \"double\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/products",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "resellers": {
                "type": "nested",
                "properties": {
                  "reseller": {
                    "type": "text"
                  },
                  "price": {
                    "type": "double"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "products"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/nested-aggregation.asciidoc",
      "line": 31
    },
    "digest": "a1849d3cb44fc24b58323ec97c5e9c5c",
    "lang": "console",
    "found": [],
    "source": "PUT /products/_doc/0\n{\n  \"name\": \"LED TV\", <1>\n  \"resellers\": [\n    {\n      \"reseller\": \"companyA\",\n      \"price\": 350\n    },\n    {\n      \"reseller\": \"companyB\",\n      \"price\": 500\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/products/_doc/0",
        "query": null,
        "body": {
          "name": "LED TV",
          "resellers": [
            {
              "reseller": "companyA",
              "price": 350
            },
            {
              "reseller": "companyB",
              "price": 500
            }
          ]
        },
        "params": {
          "index": "products",
          "id": "0"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/nested-aggregation.asciidoc",
      "line": 55
    },
    "digest": "be91aeed1af812064943dd5192425ab2",
    "lang": "console",
    "found": [],
    "source": "GET /products/_search\n{\n    \"query\" : {\n        \"match\" : { \"name\" : \"led tv\" }\n    },\n    \"aggs\" : {\n        \"resellers\" : {\n            \"nested\" : {\n                \"path\" : \"resellers\"\n            },\n            \"aggs\" : {\n                \"min_price\" : { \"min\" : { \"field\" : \"resellers.price\" } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/products/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "name": "led tv"
            }
          },
          "aggs": {
            "resellers": {
              "nested": {
                "path": "resellers"
              },
              "aggs": {
                "min_price": {
                  "min": {
                    "field": "resellers.price"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "products"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/nested-aggregation.asciidoc",
      "line": 82
    },
    "digest": "b8c2e035130102335a58e11e60562793",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"resellers\": {\n      \"doc_count\": 2,\n      \"min_price\": {\n        \"value\": 350\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/parent-aggregation.asciidoc",
      "line": 13
    },
    "digest": "1db086021e83205b6eab3b7765911cc2",
    "lang": "console",
    "found": [],
    "source": "PUT parent_example\n{\n  \"mappings\": {\n     \"properties\": {\n       \"join\": {\n         \"type\": \"join\",\n         \"relations\": {\n           \"question\": \"answer\"\n         }\n       }\n     }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/parent_example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "join": {
                "type": "join",
                "relations": {
                  "question": "answer"
                }
              }
            }
          }
        },
        "params": {
          "index": "parent_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/parent-aggregation.asciidoc",
      "line": 36
    },
    "digest": "c9afa715021f2e6450e72ac73271960c",
    "lang": "console",
    "found": [],
    "source": "PUT parent_example/_doc/1\n{\n  \"join\": {\n    \"name\": \"question\"\n  },\n  \"body\": \"<p>I have Windows 2003 server and i bought a new Windows 2008 server...\",\n  \"title\": \"Whats the best way to file transfer my site from server to a newer one?\",\n  \"tags\": [\n    \"windows-server-2003\",\n    \"windows-server-2008\",\n    \"file-transfer\"\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/parent_example/_doc/1",
        "query": null,
        "body": {
          "join": {
            "name": "question"
          },
          "body": "I have Windows 2003 server and i bought a new Windows 2008 server...",
          "title": "Whats the best way to file transfer my site from server to a newer one?",
          "tags": [
            "windows-server-2003",
            "windows-server-2008",
            "file-transfer"
          ]
        },
        "params": {
          "index": "parent_example",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/parent-aggregation.asciidoc",
      "line": 56
    },
    "digest": "d8310e5606c61e7a6e64a90838b1a830",
    "lang": "console",
    "found": [],
    "source": "PUT parent_example/_doc/2?routing=1\n{\n  \"join\": {\n    \"name\": \"answer\",\n    \"parent\": \"1\"\n  },\n  \"owner\": {\n    \"location\": \"Norfolk, United Kingdom\",\n    \"display_name\": \"Sam\",\n    \"id\": 48\n  },\n  \"body\": \"<p>Unfortunately you're pretty much limited to FTP...\",\n  \"creation_date\": \"2009-05-04T13:45:37.030\"\n}\n\nPUT parent_example/_doc/3?routing=1&refresh\n{\n  \"join\": {\n    \"name\": \"answer\",\n    \"parent\": \"1\"\n  },\n  \"owner\": {\n    \"location\": \"Norfolk, United Kingdom\",\n    \"display_name\": \"Troll\",\n    \"id\": 49\n  },\n  \"body\": \"<p>Use Linux...\",\n  \"creation_date\": \"2009-05-05T13:45:37.030\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/parent_example/_doc/2",
        "query": {
          "routing": "1"
        },
        "body": {
          "join": {
            "name": "answer",
            "parent": "1"
          },
          "owner": {
            "location": "Norfolk, United Kingdom",
            "display_name": "Sam",
            "id": 48
          },
          "body": "Unfortunately you're pretty much limited to FTP...",
          "creation_date": "2009-05-04T13:45:37.030"
        },
        "params": {
          "index": "parent_example",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/parent_example/_doc/3",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "join": {
            "name": "answer",
            "parent": "1"
          },
          "owner": {
            "location": "Norfolk, United Kingdom",
            "display_name": "Troll",
            "id": 49
          },
          "body": "Use Linux...",
          "creation_date": "2009-05-05T13:45:37.030"
        },
        "params": {
          "index": "parent_example",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/parent-aggregation.asciidoc",
      "line": 92
    },
    "digest": "686bc640b877de845c46bef372a9866c",
    "lang": "console",
    "found": [],
    "source": "POST parent_example/_search?size=0\n{\n  \"aggs\": {\n    \"top-names\": {\n      \"terms\": {\n        \"field\": \"owner.display_name.keyword\",\n        \"size\": 10\n      },\n      \"aggs\": {\n        \"to-questions\": {\n          \"parent\": {\n            \"type\" : \"answer\" <1>\n          },\n          \"aggs\": {\n            \"top-tags\": {\n              \"terms\": {\n                \"field\": \"tags.keyword\",\n                \"size\": 10\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/parent_example/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "top-names": {
              "terms": {
                "field": "owner.display_name.keyword",
                "size": 10
              },
              "aggs": {
                "to-questions": {
                  "parent": {
                    "type": "answer"
                  },
                  "aggs": {
                    "top-tags": {
                      "terms": {
                        "field": "tags.keyword",
                        "size": 10
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "parent_example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/parent-aggregation.asciidoc",
      "line": 129
    },
    "digest": "cc544f17f55e9cce00a7b680e3129e6b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 9,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n      \"value\": 3,\n      \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": []\n  },\n  \"aggregations\": {\n    \"top-names\": {\n      \"doc_count_error_upper_bound\": 0,\n      \"sum_other_doc_count\": 0,\n      \"buckets\": [\n        {\n          \"key\": \"Sam\",\n          \"doc_count\": 1, <1>\n          \"to-questions\": {\n            \"doc_count\": 1, <2>\n            \"top-tags\": {\n              \"doc_count_error_upper_bound\": 0,\n              \"sum_other_doc_count\": 0,\n              \"buckets\": [\n                {\n                  \"key\": \"file-transfer\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"windows-server-2003\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"windows-server-2008\",\n                  \"doc_count\": 1\n                }\n              ]\n            }\n          }\n        },\n        {\n          \"key\": \"Troll\",\n          \"doc_count\": 1,\n          \"to-questions\": {\n            \"doc_count\": 1,\n            \"top-tags\": {\n              \"doc_count_error_upper_bound\": 0,\n              \"sum_other_doc_count\": 0,\n              \"buckets\": [\n                {\n                  \"key\": \"file-transfer\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"windows-server-2003\",\n                  \"doc_count\": 1\n                },\n                {\n                  \"key\": \"windows-server-2008\",\n                  \"doc_count\": 1\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 10
    },
    "digest": "e84a496049274a0fed24e319da7a864c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"ranges\" : [\n                    { \"to\" : 100.0 },\n                    { \"from\" : 100.0, \"to\" : 200.0 },\n                    { \"from\" : 200.0 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 200
                  },
                  {
                    "from": 200
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 33
    },
    "digest": "0170a04f76751c506abe44b491039445",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"price_ranges\" : {\n            \"buckets\": [\n                {\n                    \"key\": \"*-100.0\",\n                    \"to\": 100.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": \"100.0-200.0\",\n                    \"from\": 100.0,\n                    \"to\": 200.0,\n                    \"doc_count\": 2\n                },\n                {\n                    \"key\": \"200.0-*\",\n                    \"from\": 200.0,\n                    \"doc_count\": 3\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 67
    },
    "digest": "d637c754aec195a1df39cafca49cbe7e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"keyed\" : true,\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 200 },\n                    { \"from\" : 200 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "keyed": true,
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 200
                  },
                  {
                    "from": 200
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 91
    },
    "digest": "7c2e63b7e2abf60a0c56c14ed429b76b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"price_ranges\" : {\n            \"buckets\": {\n                \"*-100.0\": {\n                    \"to\": 100.0,\n                    \"doc_count\": 2\n                },\n                \"100.0-200.0\": {\n                    \"from\": 100.0,\n                    \"to\": 200.0,\n                    \"doc_count\": 2\n                },\n                \"200.0-*\": {\n                    \"from\": 200.0,\n                    \"doc_count\": 3\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 120
    },
    "digest": "4d147b4a4dabef9b0a8a13cbe8174e09",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"keyed\" : true,\n                \"ranges\" : [\n                    { \"key\" : \"cheap\", \"to\" : 100 },\n                    { \"key\" : \"average\", \"from\" : 100, \"to\" : 200 },\n                    { \"key\" : \"expensive\", \"from\" : 200 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "keyed": true,
                "ranges": [
                  {
                    "key": "cheap",
                    "to": 100
                  },
                  {
                    "key": "average",
                    "from": 100,
                    "to": 200
                  },
                  {
                    "key": "expensive",
                    "from": 200
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 144
    },
    "digest": "6ee98bc1060e69be5e539af493e197b1",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"price_ranges\" : {\n            \"buckets\": {\n                \"cheap\": {\n                    \"to\": 100.0,\n                    \"doc_count\": 2\n                },\n                \"average\": {\n                    \"from\": 100.0,\n                    \"to\": 200.0,\n                    \"doc_count\": 2\n                },\n                \"expensive\": {\n                    \"from\": 200.0,\n                    \"doc_count\": 3\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 178
    },
    "digest": "bdf31f63d0941a4183ceae1cc2342c39",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"script\" : {\n                    \"lang\": \"painless\",\n                    \"source\": \"doc['price'].value\"\n                },\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 200 },\n                    { \"from\" : 200 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "script": {
                  "lang": "painless",
                  "source": "doc['price'].value"
                },
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 200
                  },
                  {
                    "from": 200
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 202
    },
    "digest": "4c9c453c92431a05b413bfc0163104b4",
    "lang": "console",
    "found": [],
    "source": "POST /_scripts/convert_currency\n{\n  \"script\": {\n    \"lang\": \"painless\",\n    \"source\": \"doc[params.field].value * params.conversion_rate\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_scripts/convert_currency",
        "query": null,
        "body": {
          "script": {
            "lang": "painless",
            "source": "doc[params.field].value * params.conversion_rate"
          }
        },
        "params": {
          "id": "convert_currency"
        },
        "api": "put_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 216
    },
    "digest": "7a6d758654eecbc3a1a76744b4de0a23",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"script\" : {\n                    \"id\": \"convert_currency\", <1>\n                    \"params\": { <2>\n                        \"field\": \"price\",\n                        \"conversion_rate\": 0.835526591\n                    }\n                },\n                \"ranges\" : [\n                    { \"from\" : 0, \"to\" : 100 },\n                    { \"from\" : 100 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "script": {
                  "id": "convert_currency",
                  "params": {
                    "field": "price",
                    "conversion_rate": 0.835526591
                  }
                },
                "ranges": [
                  {
                    "from": 0,
                    "to": 100
                  },
                  {
                    "from": 100
                  }
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 275
    },
    "digest": "022956b81fa70e72b56c66be16d0e982",
    "lang": "console",
    "found": [],
    "source": "GET /sales/_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"script\" : {\n                    \"source\": \"_value * params.conversion_rate\",\n                    \"params\" : {\n                        \"conversion_rate\" : 0.8\n                    }\n                },\n                \"ranges\" : [\n                    { \"to\" : 35 },\n                    { \"from\" : 35, \"to\" : 70 },\n                    { \"from\" : 70 }\n                ]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "script": {
                  "source": "_value * params.conversion_rate",
                  "params": {
                    "conversion_rate": 0.8
                  }
                },
                "ranges": [
                  {
                    "to": 35
                  },
                  {
                    "from": 35,
                    "to": 70
                  },
                  {
                    "from": 70
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 305
    },
    "digest": "3b52f4f7ea4abfa6db6bf54199b15f53",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 200 },\n                    { \"from\" : 200 }\n                ]\n            },\n            \"aggs\" : {\n                \"price_stats\" : {\n                    \"stats\" : { \"field\" : \"price\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 200
                  },
                  {
                    "from": 200
                  }
                ]
              },
              "aggs": {
                "price_stats": {
                  "stats": {
                    "field": "price"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 333
    },
    "digest": "a1638e5183344dadbe748f97763d360a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\": {\n    \"price_ranges\": {\n      \"buckets\": [\n        {\n          \"key\": \"*-100.0\",\n          \"to\": 100.0,\n          \"doc_count\": 2,\n          \"price_stats\": {\n            \"count\": 2,\n            \"min\": 10.0,\n            \"max\": 50.0,\n            \"avg\": 30.0,\n            \"sum\": 60.0\n          }\n        },\n        {\n          \"key\": \"100.0-200.0\",\n          \"from\": 100.0,\n          \"to\": 200.0,\n          \"doc_count\": 2,\n          \"price_stats\": {\n            \"count\": 2,\n            \"min\": 150.0,\n            \"max\": 175.0,\n            \"avg\": 162.5,\n            \"sum\": 325.0\n          }\n        },\n        {\n          \"key\": \"200.0-*\",\n          \"from\": 200.0,\n          \"doc_count\": 3,\n          \"price_stats\": {\n            \"count\": 3,\n            \"min\": 200.0,\n            \"max\": 200.0,\n            \"avg\": 200.0,\n            \"sum\": 600.0\n          }\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-aggregation.asciidoc",
      "line": 386
    },
    "digest": "4547c455375eeda5ad9f74b40d4fa61b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"price_ranges\" : {\n            \"range\" : {\n                \"field\" : \"price\",\n                \"ranges\" : [\n                    { \"to\" : 100 },\n                    { \"from\" : 100, \"to\" : 200 },\n                    { \"from\" : 200 }\n                ]\n            },\n            \"aggs\" : {\n                \"price_stats\" : {\n                    \"stats\" : {} <1>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "ranges": [
                  {
                    "to": 100
                  },
                  {
                    "from": 100,
                    "to": 200
                  },
                  {
                    "from": 200
                  }
                ]
              },
              "aggs": {
                "price_stats": {
                  "stats": {}
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 89
    },
    "digest": "91bbb85bc6add315fc9a044d8bcfec8a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"rare_terms\" : {\n                \"field\" : \"genre\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "rare_terms": {
                "field": "genre"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 106
    },
    "digest": "26b9f1e42d3224132ae7ee3e92e1218d",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"genres\" : {\n            \"buckets\" : [\n                {\n                    \"key\" : \"swing\",\n                    \"doc_count\" : 1\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 127
    },
    "digest": "0fa84243cd275a885298602aa8b4415f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"rare_terms\" : {\n                \"field\" : \"genre\",\n                \"max_doc_count\": 2\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "rare_terms": {
                "field": "genre",
                "max_doc_count": 2
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 145
    },
    "digest": "cd1105f195e06a0dcf6b984e5b5cb7ef",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"genres\" : {\n            \"buckets\" : [\n                {\n                    \"key\" : \"swing\",\n                    \"doc_count\" : 1\n                },\n                {\n                    \"key\" : \"jazz\",\n                    \"doc_count\" : 2\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 277
    },
    "digest": "b7207f557d5481db52d5df1aa0dae982",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"rare_terms\" : {\n                \"field\" : \"genre\",\n                \"include\" : \"swi*\",\n                \"exclude\" : \"electro*\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "rare_terms": {
                "field": "genre",
                "include": "swi*",
                "exclude": "electro*"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 305
    },
    "digest": "dea7ef16acd6d148a20876630a010522",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n             \"rare_terms\" : {\n                 \"field\" : \"genre\",\n                 \"include\" : [\"swing\", \"rock\"],\n                 \"exclude\" : [\"jazz\"]\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "rare_terms": {
                "field": "genre",
                "include": [
                  "swing",
                  "rock"
                ],
                "exclude": [
                  "jazz"
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/rare-terms-aggregation.asciidoc",
      "line": 328
    },
    "digest": "2eea6157a9fbc54a8987e5c1a4f14bbe",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n             \"rare_terms\" : {\n                 \"field\" : \"genre\",\n                 \"missing\": \"N/A\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "rare_terms": {
                "field": "genre",
                "missing": "N/A"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/reverse-nested-aggregation.asciidoc",
      "line": 19
    },
    "digest": "817891bd13da04e5981a797247601145",
    "lang": "console",
    "found": [],
    "source": "PUT /issues\n{\n    \"mappings\": {\n         \"properties\" : {\n             \"tags\" : { \"type\" : \"keyword\" },\n             \"comments\" : { <1>\n                 \"type\" : \"nested\",\n                 \"properties\" : {\n                     \"username\" : { \"type\" : \"keyword\" },\n                     \"comment\" : { \"type\" : \"text\" }\n                 }\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/issues",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "tags": {
                "type": "keyword"
              },
              "comments": {
                "type": "nested",
                "properties": {
                  "username": {
                    "type": "keyword"
                  },
                  "comment": {
                    "type": "text"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "issues"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/reverse-nested-aggregation.asciidoc",
      "line": 54
    },
    "digest": "aee26dd62fbb6d614a0798f3344c0598",
    "lang": "console",
    "found": [],
    "source": "GET /issues/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"aggs\": {\n    \"comments\": {\n      \"nested\": {\n        \"path\": \"comments\"\n      },\n      \"aggs\": {\n        \"top_usernames\": {\n          \"terms\": {\n            \"field\": \"comments.username\"\n          },\n          \"aggs\": {\n            \"comment_to_issue\": {\n              \"reverse_nested\": {}, <1>\n              \"aggs\": {\n                \"top_tags_per_comment\": {\n                  \"terms\": {\n                    \"field\": \"tags\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/issues/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "aggs": {
            "comments": {
              "nested": {
                "path": "comments"
              },
              "aggs": {
                "top_usernames": {
                  "terms": {
                    "field": "comments.username"
                  },
                  "aggs": {
                    "comment_to_issue": {
                      "reverse_nested": {},
                      "aggs": {
                        "top_tags_per_comment": {
                          "terms": {
                            "field": "tags"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "issues"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/reverse-nested-aggregation.asciidoc",
      "line": 102
    },
    "digest": "0a6d93e9cde7a4b1968057176a824c33",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"aggregations\": {\n    \"comments\": {\n      \"doc_count\": 1,\n      \"top_usernames\": {\n        \"doc_count_error_upper_bound\" : 0,\n        \"sum_other_doc_count\" : 0,\n        \"buckets\": [\n          {\n            \"key\": \"username_1\",\n            \"doc_count\": 1,\n            \"comment_to_issue\": {\n              \"doc_count\": 1,\n              \"top_tags_per_comment\": {\n                \"doc_count_error_upper_bound\" : 0,\n                \"sum_other_doc_count\" : 0,\n                \"buckets\": [\n                  {\n                    \"key\": \"tag_1\",\n                    \"doc_count\": 1\n                  }\n                  ...\n                ]\n              }\n            }\n          }\n          ...\n        ]\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/sampler-aggregation.asciidoc",
      "line": 19
    },
    "digest": "28035a0e2a874f1b6739badf82a0ecc6",
    "lang": "console",
    "found": [],
    "source": "POST /stackoverflow/_search?size=0\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"tags:kibana OR tags:javascript\"\n        }\n    },\n    \"aggs\": {\n        \"sample\": {\n            \"sampler\": {\n                \"shard_size\": 200\n            },\n            \"aggs\": {\n                \"keywords\": {\n                    \"significant_terms\": {\n                        \"field\": \"tags\",\n                        \"exclude\": [\"kibana\", \"javascript\"]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/stackoverflow/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "tags:kibana OR tags:javascript"
            }
          },
          "aggs": {
            "sample": {
              "sampler": {
                "shard_size": 200
              },
              "aggs": {
                "keywords": {
                  "significant_terms": {
                    "field": "tags",
                    "exclude": [
                      "kibana",
                      "javascript"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "stackoverflow"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/sampler-aggregation.asciidoc",
      "line": 49
    },
    "digest": "5e98c5f7432fff06316e0401f9333b5a",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"sample\": {\n            \"doc_count\": 200,<1>\n            \"keywords\": {\n                \"doc_count\": 200,\n                \"bg_count\": 650,\n                \"buckets\": [\n                    {\n                        \"key\": \"elasticsearch\",\n                        \"doc_count\": 150,\n                        \"score\": 1.078125,\n                        \"bg_count\": 200\n                    },\n                    {\n                        \"key\": \"logstash\",\n                        \"doc_count\": 50,\n                        \"score\": 0.5625,\n                        \"bg_count\": 50\n                    }\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/sampler-aggregation.asciidoc",
      "line": 88
    },
    "digest": "279f7af39b62c7d278f9f10b1f107dc0",
    "lang": "console",
    "found": [],
    "source": "POST /stackoverflow/_search?size=0\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"tags:kibana OR tags:javascript\"\n        }\n    },\n    \"aggs\": {\n             \"low_quality_keywords\": {\n                \"significant_terms\": {\n                    \"field\": \"tags\",\n                    \"size\": 3,\n                    \"exclude\":[\"kibana\", \"javascript\"]\n                }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/stackoverflow/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "tags:kibana OR tags:javascript"
            }
          },
          "aggs": {
            "low_quality_keywords": {
              "significant_terms": {
                "field": "tags",
                "size": 3,
                "exclude": [
                  "kibana",
                  "javascript"
                ]
              }
            }
          }
        },
        "params": {
          "index": "stackoverflow"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/sampler-aggregation.asciidoc",
      "line": 112
    },
    "digest": "56a1852f2115cf1d0127aca4505f316f",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"low_quality_keywords\": {\n            \"doc_count\": 600,\n            \"bg_count\": 650,\n            \"buckets\": [\n                {\n                    \"key\": \"angular\",\n                    \"doc_count\": 200,\n                    \"score\": 0.02777,\n                    \"bg_count\": 200\n                },\n                {\n                    \"key\": \"jquery\",\n                    \"doc_count\": 200,\n                    \"score\": 0.02777,\n                    \"bg_count\": 200\n                },\n                {\n                    \"key\": \"logstash\",\n                    \"doc_count\": 50,\n                    \"score\": 0.0069,\n                    \"bg_count\": 50\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 67
    },
    "digest": "290b845e59368e8aa8d1a56d7379afd0",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"terms\" : {\"force\" : [ \"British Transport Police\" ]}\n    },\n    \"aggregations\" : {\n        \"significant_crime_types\" : {\n            \"significant_terms\" : { \"field\" : \"crime_type\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "terms": {
              "force": [
                "British Transport Police"
              ]
            }
          },
          "aggregations": {
            "significant_crime_types": {
              "significant_terms": {
                "field": "crime_type"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 85
    },
    "digest": "f6bdfca1c491ca5933b00981738cf54f",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"significant_crime_types\" : {\n            \"doc_count\": 47347,\n            \"bg_count\": 5064554,\n            \"buckets\" : [\n                {\n                    \"key\": \"Bicycle theft\",\n                    \"doc_count\": 3640,\n                    \"score\": 0.371235374214817,\n                    \"bg_count\": 66799\n                }\n                ...\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 127
    },
    "digest": "b2af9784f8530a363ac6e9f95b39677d",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggregations\": {\n        \"forces\": {\n            \"terms\": {\"field\": \"force\"},\n            \"aggregations\": {\n                \"significant_crime_types\": {\n                    \"significant_terms\": {\"field\": \"crime_type\"}\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggregations": {
            "forces": {
              "terms": {
                "field": "force"
              },
              "aggregations": {
                "significant_crime_types": {
                  "significant_terms": {
                    "field": "crime_type"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 147
    },
    "digest": "e084e62bff969d42d542681f4b2dc5ee",
    "lang": "console-result",
    "found": [],
    "source": "{\n ...\n \"aggregations\": {\n    \"forces\": {\n        \"doc_count_error_upper_bound\": 1375,\n        \"sum_other_doc_count\": 7879845,\n        \"buckets\": [\n            {\n                \"key\": \"Metropolitan Police Service\",\n                \"doc_count\": 894038,\n                \"significant_crime_types\": {\n                    \"doc_count\": 894038,\n                    \"bg_count\": 5064554,\n                    \"buckets\": [\n                        {\n                            \"key\": \"Robbery\",\n                            \"doc_count\": 27617,\n                            \"score\": 0.0599,\n                            \"bg_count\": 53182\n                        }\n                        ...\n                    ]\n                }\n            },\n            {\n                \"key\": \"British Transport Police\",\n                \"doc_count\": 47347,\n                \"significant_crime_types\": {\n                    \"doc_count\": 47347,\n                    \"bg_count\": 5064554,\n                    \"buckets\": [\n                        {\n                            \"key\": \"Bicycle theft\",\n                            \"doc_count\": 3640,\n                            \"score\": 0.371,\n                            \"bg_count\": 66799\n                        }\n                        ...\n                    ]\n                }\n            }\n        ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 204
    },
    "digest": "0868d8ac2fb5351e633184f897ee6866",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\": {\n        \"hotspots\": {\n            \"geohash_grid\": {\n                \"field\": \"location\",\n                \"precision\": 5\n            },\n            \"aggs\": {\n                \"significant_crime_types\": {\n                    \"significant_terms\": {\"field\": \"crime_type\"}\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "hotspots": {
              "geohash_grid": {
                "field": "location",
                "precision": 5
              },
              "aggs": {
                "significant_crime_types": {
                  "significant_terms": {
                    "field": "crime_type"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 464
    },
    "digest": "09d4a753140ee5a9ab9f4fc09047b588",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n            \"significant_terms\" : {\n                \"field\" : \"tag\",\n                \"min_doc_count\": 10\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "significant_terms": {
                "field": "tag",
                "min_doc_count": 10
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 507
    },
    "digest": "3fdaac87eb741a79f747633b5065323a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\" : {\n            \"city\" : \"madrid\"\n        }\n    },\n    \"aggs\" : {\n        \"tags\" : {\n            \"significant_terms\" : {\n                \"field\" : \"tag\",\n                \"background_filter\": {\n                \t\"term\" : { \"text\" : \"spain\"}\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "city": "madrid"
            }
          },
          "aggs": {
            "tags": {
              "significant_terms": {
                "field": "tag",
                "background_filter": {
                  "term": {
                    "text": "spain"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significantterms-aggregation.asciidoc",
      "line": 565
    },
    "digest": "11a21cd0b9d31da7eda77c9384a29208",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n             \"significant_terms\" : {\n                 \"field\" : \"tags\",\n                 \"execution_hint\": \"map\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "significant_terms": {
                "field": "tags",
                "execution_hint": "map"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 36
    },
    "digest": "68f0c7c77b65bfdded348bbd397831b7",
    "lang": "console",
    "found": [],
    "source": "GET news/_search\n{\n    \"query\" : {\n        \"match\" : {\"content\" : \"Bird flu\"}\n    },\n    \"aggregations\" : {\n        \"my_sample\" : {\n            \"sampler\" : {\n                \"shard_size\" : 100\n            },\n            \"aggregations\": {\n                \"keywords\" : {\n                    \"significant_text\" : { \"field\" : \"content\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/news/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "content": "Bird flu"
            }
          },
          "aggregations": {
            "my_sample": {
              "sampler": {
                "shard_size": 100
              },
              "aggregations": {
                "keywords": {
                  "significant_text": {
                    "field": "content"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "news"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 62
    },
    "digest": "adabe4ea803f7bed66405f1783047825",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 9,\n  \"timed_out\": false,\n  \"_shards\": ...,\n  \"hits\": ...,\n    \"aggregations\" : {\n        \"my_sample\": {\n            \"doc_count\": 100,\n            \"keywords\" : {\n                \"doc_count\": 100,\n                \"buckets\" : [\n                    {\n                        \"key\": \"h5n1\",\n                        \"doc_count\": 4,\n                        \"score\": 4.71235374214817,\n                        \"bg_count\": 5\n                    }\n                    ...\n                ]\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 150
    },
    "digest": "d44ecc69090c0b2bc08a6cbc2e3467c5",
    "lang": "console",
    "found": [],
    "source": "GET news/_search\n{\n  \"query\": {\n    \"simple_query_string\": {\n      \"query\": \"+elasticsearch  +pozmantier\"\n    }\n  },\n  \"_source\": [\n    \"title\",\n    \"source\"\n  ],\n  \"highlight\": {\n    \"fields\": {\n      \"content\": {}\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/news/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "+elasticsearch  +pozmantier"
            }
          },
          "_source": [
            "title",
            "source"
          ],
          "highlight": {
            "fields": {
              "content": {}
            }
          }
        },
        "params": {
          "index": "news"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 218
    },
    "digest": "805f5550b90e75aa5cc82b90d8c6c242",
    "lang": "console",
    "found": [],
    "source": "GET news/_search\n{\n  \"query\": {\n    \"match\": {\n      \"content\": \"elasticsearch\"\n    }\n  },\n  \"aggs\": {\n    \"sample\": {\n      \"sampler\": {\n        \"shard_size\": 100\n      },\n      \"aggs\": {\n        \"keywords\": {\n          \"significant_text\": {\n            \"field\": \"content\",\n            \"filter_duplicate_text\": true\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/news/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "content": "elasticsearch"
            }
          },
          "aggs": {
            "sample": {
              "sampler": {
                "shard_size": 100
              },
              "aggs": {
                "keywords": {
                  "significant_text": {
                    "field": "content",
                    "filter_duplicate_text": true
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "news"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 420
    },
    "digest": "5f4cab20671ebac9233812f9e35d9c8b",
    "lang": "console",
    "found": [],
    "source": "GET news/_search\n{\n    \"query\" : {\n        \"match\" : {\n            \"content\" : \"madrid\"\n        }\n    },\n    \"aggs\" : {\n        \"tags\" : {\n            \"significant_text\" : {\n                \"field\" : \"content\",\n                \"background_filter\": {\n                    \"term\" : { \"content\" : \"spain\"}\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/news/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "content": "madrid"
            }
          },
          "aggs": {
            "tags": {
              "significant_text": {
                "field": "content",
                "background_filter": {
                  "term": {
                    "content": "spain"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "news"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/significanttext-aggregation.asciidoc",
      "line": 458
    },
    "digest": "b3e6d6f7f6d65d1efb60ca7503a20b16",
    "lang": "console",
    "found": [],
    "source": "GET news/_search\n{\n    \"query\" : {\n        \"match\" : {\n            \"custom_all\" : \"elasticsearch\"\n        }\n    },\n    \"aggs\" : {\n        \"tags\" : {\n            \"significant_text\" : {\n                \"field\" : \"custom_all\",\n                \"source_fields\": [\"content\" , \"title\"]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/news/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "custom_all": "elasticsearch"
            }
          },
          "aggs": {
            "tags": {
              "significant_text": {
                "field": "custom_all",
                "source_fields": [
                  "content",
                  "title"
                ]
              }
            }
          }
        },
        "params": {
          "index": "news"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 57
    },
    "digest": "9a8995fd31351045d99c78e40444c8ea",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : { \"field\" : \"genre\" } <1>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 75
    },
    "digest": "4fb044223736e8694e364d3ccf4ffdc7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"genres\" : {\n            \"doc_count_error_upper_bound\": 0, <1>\n            \"sum_other_doc_count\": 0, <2>\n            \"buckets\" : [ <3>\n                {\n                    \"key\" : \"electronic\",\n                    \"doc_count\" : 6\n                },\n                {\n                    \"key\" : \"rock\",\n                    \"doc_count\" : 3\n                },\n                {\n                    \"key\" : \"jazz\",\n                    \"doc_count\" : 2\n                }\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 135
    },
    "digest": "d50a3835bf5795ac73e58906a3413544",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"products\" : {\n            \"terms\" : {\n                \"field\" : \"product\",\n                \"size\" : 5\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "products": {
              "terms": {
                "field": "product",
                "size": 5
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 234
    },
    "digest": "1a4020b84329edbc97af2f1a922ce82c",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"products\" : {\n            \"doc_count_error_upper_bound\" : 46,\n            \"sum_other_doc_count\" : 79,\n            \"buckets\" : [\n                {\n                    \"key\" : \"Product A\",\n                    \"doc_count\" : 100\n                },\n                {\n                    \"key\" : \"Product Z\",\n                    \"doc_count\" : 52\n                }\n                ...\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 264
    },
    "digest": "35e8da9410b8432cf4095f2541ad7b1d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"products\" : {\n            \"terms\" : {\n                \"field\" : \"product\",\n                \"size\" : 5,\n                \"show_term_doc_count_error\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "products": {
              "terms": {
                "field": "product",
                "size": 5,
                "show_term_doc_count_error": true
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 290
    },
    "digest": "e19bb86b7736ca78acd08e14451c4449",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\" : {\n        \"products\" : {\n            \"doc_count_error_upper_bound\" : 46,\n            \"sum_other_doc_count\" : 79,\n            \"buckets\" : [\n                {\n                    \"key\" : \"Product A\",\n                    \"doc_count\" : 100,\n                    \"doc_count_error_upper_bound\" : 0\n                },\n                {\n                    \"key\" : \"Product Z\",\n                    \"doc_count\" : 52,\n                    \"doc_count_error_upper_bound\" : 2\n                }\n                ...\n            ]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 341
    },
    "digest": "6a4679531e64c492fce16dc12de6dcb0",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"field\" : \"genre\",\n                \"order\" : { \"_count\" : \"asc\" }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre",
                "order": {
                  "_count": "asc"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 358
    },
    "digest": "93f1bdd72e79827dcf9a34efa02fd977",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"field\" : \"genre\",\n                \"order\" : { \"_key\" : \"asc\" }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre",
                "order": {
                  "_key": "asc"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 377
    },
    "digest": "71b5b2ba9557d0f296ff2de91727d2f6",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"field\" : \"genre\",\n                \"order\" : { \"max_play_count\" : \"desc\" }\n            },\n            \"aggs\" : {\n                \"max_play_count\" : { \"max\" : { \"field\" : \"play_count\" } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre",
                "order": {
                  "max_play_count": "desc"
                }
              },
              "aggs": {
                "max_play_count": {
                  "max": {
                    "field": "play_count"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 397
    },
    "digest": "34efeade38445b2834749ced59782e25",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"field\" : \"genre\",\n                \"order\" : { \"playback_stats.max\" : \"desc\" }\n            },\n            \"aggs\" : {\n                \"playback_stats\" : { \"stats\" : { \"field\" : \"play_count\" } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre",
                "order": {
                  "playback_stats.max": "desc"
                }
              },
              "aggs": {
                "playback_stats": {
                  "stats": {
                    "field": "play_count"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 443
    },
    "digest": "dc15e2373e5ecbe09b4ea0858eb63d47",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"countries\" : {\n            \"terms\" : {\n                \"field\" : \"artist.country\",\n                \"order\" : { \"rock>playback_stats.avg\" : \"desc\" }\n            },\n            \"aggs\" : {\n                \"rock\" : {\n                    \"filter\" : { \"term\" : { \"genre\" :  \"rock\" }},\n                    \"aggs\" : {\n                        \"playback_stats\" : { \"stats\" : { \"field\" : \"play_count\" }}\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "countries": {
              "terms": {
                "field": "artist.country",
                "order": {
                  "rock>playback_stats.avg": "desc"
                }
              },
              "aggs": {
                "rock": {
                  "filter": {
                    "term": {
                      "genre": "rock"
                    }
                  },
                  "aggs": {
                    "playback_stats": {
                      "stats": {
                        "field": "play_count"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 470
    },
    "digest": "028f6d6ac2594e20b78b8a8f8cbad49d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"countries\" : {\n            \"terms\" : {\n                \"field\" : \"artist.country\",\n                \"order\" : [ { \"rock>playback_stats.avg\" : \"desc\" }, { \"_count\" : \"desc\" } ]\n            },\n            \"aggs\" : {\n                \"rock\" : {\n                    \"filter\" : { \"term\" : { \"genre\" : \"rock\" }},\n                    \"aggs\" : {\n                        \"playback_stats\" : { \"stats\" : { \"field\" : \"play_count\" }}\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "countries": {
              "terms": {
                "field": "artist.country",
                "order": [
                  {
                    "rock>playback_stats.avg": "desc"
                  },
                  {
                    "_count": "desc"
                  }
                ]
              },
              "aggs": {
                "rock": {
                  "filter": {
                    "term": {
                      "genre": "rock"
                    }
                  },
                  "aggs": {
                    "playback_stats": {
                      "stats": {
                        "field": "play_count"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 503
    },
    "digest": "527324766814561b75aaee853ede49a7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n            \"terms\" : {\n                \"field\" : \"tags\",\n                \"min_doc_count\": 10\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "terms": {
                "field": "tags",
                "min_doc_count": 10
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 544
    },
    "digest": "033778305d52746f5ce0a2a922c8e521",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"script\" : {\n                    \"source\": \"doc['genre'].value\",\n                    \"lang\": \"painless\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "script": {
                  "source": "doc['genre'].value",
                  "lang": "painless"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 578
    },
    "digest": "4646764bf09911fee7d58630c72d3137",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"script\" : {\n                    \"id\": \"my_script\",\n                    \"params\": {\n                        \"field\": \"genre\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "script": {
                  "id": "my_script",
                  "params": {
                    "field": "genre"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 600
    },
    "digest": "a49169b4622918992411fab4ec48191b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"genres\" : {\n            \"terms\" : {\n                \"field\" : \"genre\",\n                \"script\" : {\n                    \"source\" : \"'Genre: ' +_value\",\n                    \"lang\" : \"painless\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "genres": {
              "terms": {
                "field": "genre",
                "script": {
                  "source": "'Genre: ' +_value",
                  "lang": "painless"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 626
    },
    "digest": "0afaf1cad692e6201aa574c8feb6e622",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n            \"terms\" : {\n                \"field\" : \"tags\",\n                \"include\" : \".*sport.*\",\n                \"exclude\" : \"water_.*\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "terms": {
                "field": "tags",
                "include": ".*sport.*",
                "exclude": "water_.*"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 654
    },
    "digest": "98b121bf47cebd85671a2cb519688d28",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"JapaneseCars\" : {\n             \"terms\" : {\n                 \"field\" : \"make\",\n                 \"include\" : [\"mazda\", \"honda\"]\n             }\n         },\n        \"ActiveCarManufacturers\" : {\n             \"terms\" : {\n                 \"field\" : \"make\",\n                 \"exclude\" : [\"rover\", \"jensen\"]\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "JapaneseCars": {
              "terms": {
                "field": "make",
                "include": [
                  "mazda",
                  "honda"
                ]
              }
            },
            "ActiveCarManufacturers": {
              "terms": {
                "field": "make",
                "exclude": [
                  "rover",
                  "jensen"
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 683
    },
    "digest": "5d9d7b84e2fec7ecd832145cbb951cf1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n   \"size\": 0,\n   \"aggs\": {\n      \"expired_sessions\": {\n         \"terms\": {\n            \"field\": \"account_id\",\n            \"include\": {\n               \"partition\": 0,\n               \"num_partitions\": 20\n            },\n            \"size\": 10000,\n            \"order\": {\n               \"last_access\": \"asc\"\n            }\n         },\n         \"aggs\": {\n            \"last_access\": {\n               \"max\": {\n                  \"field\": \"access_date\"\n               }\n            }\n         }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "expired_sessions": {
              "terms": {
                "field": "account_id",
                "include": {
                  "partition": 0,
                  "num_partitions": 20
                },
                "size": 10000,
                "order": {
                  "last_access": "asc"
                }
              },
              "aggs": {
                "last_access": {
                  "max": {
                    "field": "access_date"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 775
    },
    "digest": "7f28f8ae8fcdbd807dadde0b5b007a6d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"actors\" : {\n             \"terms\" : {\n                 \"field\" : \"actors\",\n                 \"size\" : 10\n             },\n            \"aggs\" : {\n                \"costars\" : {\n                     \"terms\" : {\n                         \"field\" : \"actors\",\n                         \"size\" : 5\n                     }\n                 }\n            }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "actors": {
              "terms": {
                "field": "actors",
                "size": 10
              },
              "aggs": {
                "costars": {
                  "terms": {
                    "field": "actors",
                    "size": 5
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 806
    },
    "digest": "cd5bc5bf7cd58d7b1492c9c298b345f6",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"actors\" : {\n             \"terms\" : {\n                 \"field\" : \"actors\",\n                 \"size\" : 10,\n                 \"collect_mode\" : \"breadth_first\" <1>\n             },\n            \"aggs\" : {\n                \"costars\" : {\n                     \"terms\" : {\n                         \"field\" : \"actors\",\n                         \"size\" : 5\n                     }\n                 }\n            }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "actors": {
              "terms": {
                "field": "actors",
                "size": 10,
                "collect_mode": "breadth_first"
              },
              "aggs": {
                "costars": {
                  "terms": {
                    "field": "actors",
                    "size": 5
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 857
    },
    "digest": "774d715155cd13713e6e327adf6ce328",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n             \"terms\" : {\n                 \"field\" : \"tags\",\n                 \"execution_hint\": \"map\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "terms": {
                "field": "tags",
                "execution_hint": "map"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/terms-aggregation.asciidoc",
      "line": 882
    },
    "digest": "f085fb032dae56a3b104ab874eaea2ad",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"aggs\" : {\n        \"tags\" : {\n             \"terms\" : {\n                 \"field\" : \"tags\",\n                 \"missing\": \"N/A\" <1>\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "tags": {
              "terms": {
                "field": "tags",
                "missing": "N/A"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-field-note.asciidoc",
      "line": 12
    },
    "digest": "dbcd8892dd01c43d5a60c94173574faf",
    "lang": "console",
    "found": [],
    "source": "PUT range_index\n{\n  \"settings\": {\n    \"number_of_shards\": 2\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"expected_attendees\": {\n        \"type\": \"integer_range\"\n      },\n      \"time_frame\": {\n        \"type\": \"date_range\",\n        \"format\": \"yyyy-MM-dd||epoch_millis\"\n      }\n    }\n  }\n}\n\nPUT range_index/_doc/1?refresh\n{\n  \"expected_attendees\" : {\n    \"gte\" : 10,\n    \"lte\" : 20\n  },\n  \"time_frame\" : {\n    \"gte\" : \"2019-10-28\",\n    \"lte\" : \"2019-11-04\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/range_index",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 2
          },
          "mappings": {
            "properties": {
              "expected_attendees": {
                "type": "integer_range"
              },
              "time_frame": {
                "type": "date_range",
                "format": "yyyy-MM-dd||epoch_millis"
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/range_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "expected_attendees": {
            "gte": 10,
            "lte": 20
          },
          "time_frame": {
            "gte": "2019-10-28",
            "lte": "2019-11-04"
          }
        },
        "params": {
          "index": "range_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-field-note.asciidoc",
      "line": 49
    },
    "digest": "cf1872035b9acf6a214310badae345f7",
    "lang": "console",
    "found": [],
    "source": "POST /range_index/_search?size=0\n{\n    \"aggs\" : {\n        \"range_histo\" : {\n            \"histogram\" : {\n                \"field\" : \"expected_attendees\",\n                \"interval\" : 5\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/range_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "aggs": {
            "range_histo": {
              "histogram": {
                "field": "expected_attendees",
                "interval": 5
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-field-note.asciidoc",
      "line": 67
    },
    "digest": "44f937e080bb7db49a571fea57f594cf",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\" : {\n    \"range_histo\" : {\n      \"buckets\" : [\n        {\n          \"key\" : 10.0,\n          \"doc_count\" : 1\n        },\n        {\n          \"key\" : 15.0,\n          \"doc_count\" : 1\n        },\n        {\n          \"key\" : 20.0,\n          \"doc_count\" : 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-field-note.asciidoc",
      "line": 105
    },
    "digest": "620ffff06483f13e5143dfddaa8b7b30",
    "lang": "console",
    "found": [],
    "source": "POST /range_index/_search?size=0\n{\n    \"query\": {\n      \"range\": {\n        \"time_frame\": {\n          \"gte\": \"2019-11-01\",\n          \"format\": \"yyyy-MM-dd\"\n        }\n      }\n    },\n    \"aggs\" : {\n        \"november_data\" : {\n            \"date_histogram\" : {\n                \"field\" : \"time_frame\",\n                \"calendar_interval\" : \"day\",\n                \"format\": \"yyyy-MM-dd\"\n              }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/range_index/_search",
        "query": {
          "size": "0"
        },
        "body": {
          "query": {
            "range": {
              "time_frame": {
                "gte": "2019-11-01",
                "format": "yyyy-MM-dd"
              }
            }
          },
          "aggs": {
            "november_data": {
              "date_histogram": {
                "field": "time_frame",
                "calendar_interval": "day",
                "format": "yyyy-MM-dd"
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/bucket/range-field-note.asciidoc",
      "line": 133
    },
    "digest": "e41428c2d6096287a7e8f356a18488cc",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...\n  \"aggregations\" : {\n    \"november_data\" : {\n      \"buckets\" : [\n              {\n          \"key_as_string\" : \"2019-10-28\",\n          \"key\" : 1572220800000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-10-29\",\n          \"key\" : 1572307200000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-10-30\",\n          \"key\" : 1572393600000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-10-31\",\n          \"key\" : 1572480000000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-11-01\",\n          \"key\" : 1572566400000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-11-02\",\n          \"key\" : 1572652800000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-11-03\",\n          \"key\" : 1572739200000,\n          \"doc_count\" : 1\n        },\n        {\n          \"key_as_string\" : \"2019-11-04\",\n          \"key\" : 1572825600000,\n          \"doc_count\" : 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline.asciidoc",
      "line": 54
    },
    "digest": "ec20b1c236955a545476eeeea747d9de",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"timestamp\",\n                \"calendar_interval\":\"day\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"lemmings\" } <1>\n                },\n                \"the_deriv\":{\n                    \"derivative\":{ \"buckets_path\": \"the_sum\" } <2>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "day"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "lemmings"
                  }
                },
                "the_deriv": {
                  "derivative": {
                    "buckets_path": "the_sum"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline.asciidoc",
      "line": 84
    },
    "digest": "11be7655fdafcf4c1454a0e9ad8ddf63",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"max_monthly_sales\": {\n            \"max_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "max_monthly_sales": {
              "max_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline.asciidoc",
      "line": 119
    },
    "digest": "88a6b6f721b91f0919127a34ee2fbe0e",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sale_type\": {\n                    \"terms\": {\n                        \"field\": \"type\"\n                    },\n                    \"aggs\": {\n                        \"sales\": {\n                            \"sum\": {\n                                \"field\": \"price\"\n                            }\n                        }\n                    }\n                },\n                \"hat_vs_bag_ratio\": {\n                    \"bucket_script\": {\n                        \"buckets_path\": {\n                            \"hats\": \"sale_type['hat']>sales\", <1>\n                            \"bags\": \"sale_type['bag']>sales\"  <1>\n                        },\n                        \"script\": \"params.hats / params.bags\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sale_type": {
                  "terms": {
                    "field": "type"
                  },
                  "aggs": {
                    "sales": {
                      "sum": {
                        "field": "price"
                      }
                    }
                  }
                },
                "hat_vs_bag_ratio": {
                  "bucket_script": {
                    "buckets_path": {
                      "hats": "sale_type['hat']>sales",
                      "bags": "sale_type['bag']>sales"
                    },
                    "script": "params.hats / params.bags"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline.asciidoc",
      "line": 168
    },
    "digest": "f3dd309ab027e86048b476b54f0d4ca1",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"aggs\": {\n        \"my_date_histo\": {\n            \"date_histogram\": {\n                \"field\":\"timestamp\",\n                \"calendar_interval\":\"day\"\n            },\n            \"aggs\": {\n                \"the_deriv\": {\n                    \"derivative\": { \"buckets_path\": \"_count\" } <1>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "day"
              },
              "aggs": {
                "the_deriv": {
                  "derivative": {
                    "buckets_path": "_count"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline.asciidoc",
      "line": 194
    },
    "digest": "2afc1231679898bd864d06679d9e951b",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"histo\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"day\"\n      },\n      \"aggs\": {\n        \"categories\": {\n          \"terms\": {\n            \"field\": \"category\"\n          }\n        },\n        \"min_bucket_selector\": {\n          \"bucket_selector\": {\n            \"buckets_path\": {\n              \"count\": \"categories._bucket_count\" <1>\n            },\n            \"script\": {\n              \"source\": \"params.count != 0\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "day"
              },
              "aggs": {
                "categories": {
                  "terms": {
                    "field": "category"
                  }
                },
                "min_bucket_selector": {
                  "bucket_selector": {
                    "buckets_path": {
                      "count": "categories._bucket_count"
                    },
                    "script": {
                      "source": "params.count != 0"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/avg-bucket-aggregation.asciidoc",
      "line": 37
    },
    "digest": "b3e8697874ed65ed6cb62f2568bcc55e",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"sales_per_month\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"month\"\n      },\n      \"aggs\": {\n        \"sales\": {\n          \"sum\": {\n            \"field\": \"price\"\n          }\n        }\n      }\n    },\n    \"avg_monthly_sales\": {\n      \"avg_bucket\": {\n        \"buckets_path\": \"sales_per_month>sales\" <1>\n      }\n    }\n  }\n}\n",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "avg_monthly_sales": {
              "avg_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/avg-bucket-aggregation.asciidoc",
      "line": 72
    },
    "digest": "8877745bbaa0907a8437b856217264e3",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"avg_monthly_sales\": {\n          \"value\": 328.33333333333333\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 38
    },
    "digest": "469bc2e7b9e65b3b1e38a547f63bd2f9",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"sales_deriv\": {\n                    \"derivative\": {\n                        \"buckets_path\": \"sales\" <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "sales_deriv": {
                  "derivative": {
                    "buckets_path": "sales"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 71
    },
    "digest": "4bfd88c9b9dc88bce96bc8a16c198542",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               } <1>\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               },\n               \"sales_deriv\": {\n                  \"value\": -490.0 <2>\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2, <3>\n               \"sales\": {\n                  \"value\": 375.0\n               },\n               \"sales_deriv\": {\n                  \"value\": 315.0\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 131
    },
    "digest": "d683ed8c4a72f82200bbad0c3921e427",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"sales_deriv\": {\n                    \"derivative\": {\n                        \"buckets_path\": \"sales\"\n                    }\n                },\n                \"sales_2nd_deriv\": {\n                    \"derivative\": {\n                        \"buckets_path\": \"sales_deriv\" <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "sales_deriv": {
                  "derivative": {
                    "buckets_path": "sales"
                  }
                },
                "sales_2nd_deriv": {
                  "derivative": {
                    "buckets_path": "sales_deriv"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 169
    },
    "digest": "99e2d1cad66f9e34d7069748cc24fbe3",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 50,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               } <1>\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               },\n               \"sales_deriv\": {\n                  \"value\": -490.0\n               } <1>\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               },\n               \"sales_deriv\": {\n                  \"value\": 315.0\n               },\n               \"sales_2nd_deriv\": {\n                  \"value\": 805.0\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 230
    },
    "digest": "8553b0c396e9de7d841fcc6373e017e2",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"sales_deriv\": {\n                    \"derivative\": {\n                        \"buckets_path\": \"sales\",\n                        \"unit\": \"day\" <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "sales_deriv": {
                  "derivative": {
                    "buckets_path": "sales",
                    "unit": "day"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/derivative-aggregation.asciidoc",
      "line": 263
    },
    "digest": "929c90aa5f2a6e9102d28a8ec3cfba05",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 50,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               } <1>\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               },\n               \"sales_deriv\": {\n                  \"value\": -490.0, <1>\n                  \"normalized_value\": -15.806451612903226 <2>\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               },\n               \"sales_deriv\": {\n                  \"value\": 315.0,\n                  \"normalized_value\": 11.25\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/max-bucket-aggregation.asciidoc",
      "line": 37
    },
    "digest": "ce5d556d90d0fb077ab078e055005f3a",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"max_monthly_sales\": {\n            \"max_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "max_monthly_sales": {
              "max_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/max-bucket-aggregation.asciidoc",
      "line": 71
    },
    "digest": "e0765c7c1155bc3da07dd84aa7a5033f",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"max_monthly_sales\": {\n          \"keys\": [\"2015/01/01 00:00:00\"], <1>\n          \"value\": 550.0\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/min-bucket-aggregation.asciidoc",
      "line": 37
    },
    "digest": "e668549ff72fd0b9568667d1a817fc6e",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"min_monthly_sales\": {\n            \"min_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "min_monthly_sales": {
              "min_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/min-bucket-aggregation.asciidoc",
      "line": 71
    },
    "digest": "9128fb8c19494741f8eb9906450586e5",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"min_monthly_sales\": {\n          \"keys\": [\"2015/02/01 00:00:00\"], <1>\n          \"value\": 60.0\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/sum-bucket-aggregation.asciidoc",
      "line": 36
    },
    "digest": "612a9f6a05186fc89ed1a75139d3a8b7",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"sum_monthly_sales\": {\n            \"sum_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "sum_monthly_sales": {
              "sum_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/sum-bucket-aggregation.asciidoc",
      "line": 70
    },
    "digest": "7da035d02f2d2267dd7b5de974555459",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"sum_monthly_sales\": {\n          \"value\": 985.0\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/stats-bucket-aggregation.asciidoc",
      "line": 36
    },
    "digest": "8a187c87964774530ef99f8962d83da5",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"stats_monthly_sales\": {\n            \"stats_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "stats_monthly_sales": {
              "stats_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/stats-bucket-aggregation.asciidoc",
      "line": 70
    },
    "digest": "8a40309b0e17445519ad62f962926e24",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"stats_monthly_sales\": {\n         \"count\": 3,\n         \"min\": 60.0,\n         \"max\": 550.0,\n         \"avg\": 328.3333333333333,\n         \"sum\": 985.0\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/extended-stats-bucket-aggregation.asciidoc",
      "line": 39
    },
    "digest": "b8f960415d10545f583d2eac94e07629",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"stats_monthly_sales\": {\n            \"extended_stats_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "stats_monthly_sales": {
              "extended_stats_bucket": {
                "buckets_path": "sales_per_month>sales"
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/extended-stats-bucket-aggregation.asciidoc",
      "line": 73
    },
    "digest": "bdcab84e776c6a8a0703e917a43bc362",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"stats_monthly_sales\": {\n         \"count\": 3,\n         \"min\": 60.0,\n         \"max\": 550.0,\n         \"avg\": 328.3333333333333,\n         \"sum\": 985.0,\n         \"sum_of_squares\": 446725.0,\n         \"variance\": 41105.55555555556,\n         \"std_deviation\": 202.74505063146563,\n         \"std_deviation_bounds\": {\n           \"upper\": 733.8234345962646,\n           \"lower\": -77.15676792959795\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/percentiles-bucket-aggregation.asciidoc",
      "line": 38
    },
    "digest": "cff65c0f9fbc53c26c60abe9fb7e4044",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                }\n            }\n        },\n        \"percentiles_monthly_sales\": {\n            \"percentiles_bucket\": {\n                \"buckets_path\": \"sales_per_month>sales\", <1>\n                \"percents\": [ 25.0, 50.0, 75.0 ] <2>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                }
              }
            },
            "percentiles_monthly_sales": {
              "percentiles_bucket": {
                "buckets_path": "sales_per_month>sales",
                "percents": [
                  25,
                  50,
                  75
                ]
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/percentiles-bucket-aggregation.asciidoc",
      "line": 74
    },
    "digest": "8a255d25302b6ec629381efb6dc3de4b",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               }\n            }\n         ]\n      },\n      \"percentiles_monthly_sales\": {\n        \"values\" : {\n            \"25.0\": 375.0,\n            \"50.0\": 375.0,\n            \"75.0\": 550.0\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 42
    },
    "digest": "5903a75a28cec4b60c54662457c6d405",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{                <1>\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" } <2>\n                },\n                \"the_movfn\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\", <3>\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.unweightedAvg(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movfn": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.unweightedAvg(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 82
    },
    "digest": "195ee5116e8fcff0a70fb82bbcc42b58",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"my_date_histo\": {\n         \"buckets\": [\n             {\n                 \"key_as_string\": \"2015/01/01 00:00:00\",\n                 \"key\": 1420070400000,\n                 \"doc_count\": 3,\n                 \"the_sum\": {\n                    \"value\": 550.0\n                 },\n                 \"the_movfn\": {\n                    \"value\": null\n                 }\n             },\n             {\n                 \"key_as_string\": \"2015/02/01 00:00:00\",\n                 \"key\": 1422748800000,\n                 \"doc_count\": 2,\n                 \"the_sum\": {\n                    \"value\": 60.0\n                 },\n                 \"the_movfn\": {\n                    \"value\": 550.0\n                 }\n             },\n             {\n                 \"key_as_string\": \"2015/03/01 00:00:00\",\n                 \"key\": 1425168000000,\n                 \"doc_count\": 2,\n                 \"the_sum\": {\n                    \"value\": 375.0\n                 },\n                 \"the_movfn\": {\n                    \"value\": 305.0\n                 }\n             }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 143
    },
    "digest": "93c9711ee6c0554cd775c013c3837f13",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"return values.length > 0 ? values[0] : Double.NaN\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "return values.length > 0 ? values[0] : Double.NaN"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 213
    },
    "digest": "13fd394e3e9a3398cac21ac1064fc154",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_moving_max\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.max(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_moving_max": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.max(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 255
    },
    "digest": "c8bebf3c45fc9e75e161bf4e516a957a",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_moving_min\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.min(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_moving_min": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.min(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 297
    },
    "digest": "d0897840a5702b4ec0616e6c90acfe1e",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_moving_sum\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.sum(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_moving_sum": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.sum(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 341
    },
    "digest": "46c4d95fc06cd0eb0401caa1e0bdc8f0",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_moving_sum\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.stdDev(values, MovingFunctions.unweightedAvg(values))\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_moving_sum": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.stdDev(values, MovingFunctions.unweightedAvg(values))"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 392
    },
    "digest": "beea9d59a7cbe53d5d4c4ec2a49487b2",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.unweightedAvg(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.unweightedAvg(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 437
    },
    "digest": "bbbbe980b6dcd2a77ff16cc8a081e472",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.linearWeightedAvg(values)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.linearWeightedAvg(values)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 488
    },
    "digest": "d84ea140bbe8abfb156a72c1c963ea00",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.ewma(values, 0.3)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.ewma(values, 0.3)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 545
    },
    "digest": "76fc9f5a879772ffcc4ec0c99bf74277",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"MovingFunctions.holt(values, 0.3, 0.1)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "MovingFunctions.holt(values, 0.3, 0.1)"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/movfn-aggregation.asciidoc",
      "line": 610
    },
    "digest": "af25b173c8bcc73a3bfbfddacb218478",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n    \"size\": 0,\n    \"aggs\": {\n        \"my_date_histo\":{\n            \"date_histogram\":{\n                \"field\":\"date\",\n                \"calendar_interval\":\"1M\"\n            },\n            \"aggs\":{\n                \"the_sum\":{\n                    \"sum\":{ \"field\": \"price\" }\n                },\n                \"the_movavg\": {\n                    \"moving_fn\": {\n                        \"buckets_path\": \"the_sum\",\n                        \"window\": 10,\n                        \"script\": \"if (values.length > 5*2) {MovingFunctions.holtWinters(values, 0.3, 0.1, 0.1, 5, false)}\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1M"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "price"
                  }
                },
                "the_movavg": {
                  "moving_fn": {
                    "buckets_path": "the_sum",
                    "window": 10,
                    "script": "if (values.length > 5*2) {MovingFunctions.holtWinters(values, 0.3, 0.1, 0.1, 5, false)}"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-sum-aggregation.asciidoc",
      "line": 35
    },
    "digest": "1ae73d3fcc39bef9ddc654bb82d5d239",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"cumulative_sales\": {\n                    \"cumulative_sum\": {\n                        \"buckets_path\": \"sales\" <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "cumulative_sales": {
                  "cumulative_sum": {
                    "buckets_path": "sales"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-sum-aggregation.asciidoc",
      "line": 68
    },
    "digest": "0a9f95fcb384ff3833e3866fd72ed1e4",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"sales\": {\n                  \"value\": 550.0\n               },\n               \"cumulative_sales\": {\n                  \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 60.0\n               },\n               \"cumulative_sales\": {\n                  \"value\": 610.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"sales\": {\n                  \"value\": 375.0\n               },\n               \"cumulative_sales\": {\n                  \"value\": 985.0\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-cardinality-aggregation.asciidoc",
      "line": 42
    },
    "digest": "4d8d2c66e4f3ccd760bfe3008c5a4b65",
    "lang": "console",
    "found": [],
    "source": "GET /user_hits/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"users_per_day\" : {\n            \"date_histogram\" : {\n                \"field\" : \"timestamp\",\n                \"calendar_interval\" : \"day\"\n            },\n            \"aggs\": {\n                \"distinct_users\": {\n                    \"cardinality\": {\n                        \"field\": \"user_id\"\n                    }\n                },\n                \"total_new_users\": {\n                    \"cumulative_cardinality\": {\n                        \"buckets_path\": \"distinct_users\" <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/user_hits/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "users_per_day": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "day"
              },
              "aggs": {
                "distinct_users": {
                  "cardinality": {
                    "field": "user_id"
                  }
                },
                "total_new_users": {
                  "cumulative_cardinality": {
                    "buckets_path": "distinct_users"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "user_hits"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-cardinality-aggregation.asciidoc",
      "line": 75
    },
    "digest": "bedf4afad2a9787d01085d6869c44751",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"users_per_day\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2019-01-01T00:00:00.000Z\",\n               \"key\": 1546300800000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 2\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-02T00:00:00.000Z\",\n               \"key\": 1546387200000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 3\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-03T00:00:00.000Z\",\n               \"key\": 1546473600000,\n               \"doc_count\": 3,\n               \"distinct_users\": {\n                  \"value\": 3\n               },\n               \"total_new_users\": {\n                  \"value\": 4\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-cardinality-aggregation.asciidoc",
      "line": 141
    },
    "digest": "dd5d84526ecb6a33e96ff2c047b8066d",
    "lang": "console",
    "found": [],
    "source": "GET /user_hits/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"users_per_day\" : {\n            \"date_histogram\" : {\n                \"field\" : \"timestamp\",\n                \"calendar_interval\" : \"day\"\n            },\n            \"aggs\": {\n                \"distinct_users\": {\n                    \"cardinality\": {\n                        \"field\": \"user_id\"\n                    }\n                },\n                \"total_new_users\": {\n                    \"cumulative_cardinality\": {\n                        \"buckets_path\": \"distinct_users\"\n                    }\n                },\n                \"incremental_new_users\": {\n                    \"derivative\": {\n                        \"buckets_path\": \"total_new_users\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/user_hits/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "users_per_day": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "day"
              },
              "aggs": {
                "distinct_users": {
                  "cardinality": {
                    "field": "user_id"
                  }
                },
                "total_new_users": {
                  "cumulative_cardinality": {
                    "buckets_path": "distinct_users"
                  }
                },
                "incremental_new_users": {
                  "derivative": {
                    "buckets_path": "total_new_users"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "user_hits"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/cumulative-cardinality-aggregation.asciidoc",
      "line": 178
    },
    "digest": "de7cfdf9934fbb000486b00a8d40fa63",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"users_per_day\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2019-01-01T00:00:00.000Z\",\n               \"key\": 1546300800000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 2\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-02T00:00:00.000Z\",\n               \"key\": 1546387200000,\n               \"doc_count\": 2,\n               \"distinct_users\": {\n                  \"value\": 2\n               },\n               \"total_new_users\": {\n                  \"value\": 3\n               },\n               \"incremental_new_users\": {\n                  \"value\": 1.0\n               }\n            },\n            {\n               \"key_as_string\": \"2019-01-03T00:00:00.000Z\",\n               \"key\": 1546473600000,\n               \"doc_count\": 3,\n               \"distinct_users\": {\n                  \"value\": 3\n               },\n               \"total_new_users\": {\n                  \"value\": 4\n               },\n               \"incremental_new_users\": {\n                  \"value\": 1.0\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-script-aggregation.asciidoc",
      "line": 45
    },
    "digest": "c2d90e1c88ff5b1857ed4a5b169c9689",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"total_sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"t-shirts\": {\n                  \"filter\": {\n                    \"term\": {\n                      \"type\": \"t-shirt\"\n                    }\n                  },\n                  \"aggs\": {\n                    \"sales\": {\n                      \"sum\": {\n                        \"field\": \"price\"\n                      }\n                    }\n                  }\n                },\n                \"t-shirt-percentage\": {\n                    \"bucket_script\": {\n                        \"buckets_path\": {\n                          \"tShirtSales\": \"t-shirts>sales\",\n                          \"totalSales\": \"total_sales\"\n                        },\n                        \"script\": \"params.tShirtSales / params.totalSales * 100\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "total_sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "t-shirts": {
                  "filter": {
                    "term": {
                      "type": "t-shirt"
                    }
                  },
                  "aggs": {
                    "sales": {
                      "sum": {
                        "field": "price"
                      }
                    }
                  }
                },
                "t-shirt-percentage": {
                  "bucket_script": {
                    "buckets_path": {
                      "tShirtSales": "t-shirts>sales",
                      "totalSales": "total_sales"
                    },
                    "script": "params.tShirtSales / params.totalSales * 100"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-script-aggregation.asciidoc",
      "line": 94
    },
    "digest": "327c42605491ee053c73152d9de513f9",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"total_sales\": {\n                   \"value\": 550.0\n               },\n               \"t-shirts\": {\n                   \"doc_count\": 1,\n                   \"sales\": {\n                       \"value\": 200.0\n                   }\n               },\n               \"t-shirt-percentage\": {\n                   \"value\": 36.36363636363637\n               }\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"total_sales\": {\n                   \"value\": 60.0\n               },\n               \"t-shirts\": {\n                   \"doc_count\": 1,\n                   \"sales\": {\n                       \"value\": 10.0\n                   }\n               },\n               \"t-shirt-percentage\": {\n                   \"value\": 16.666666666666664\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"total_sales\": {\n                   \"value\": 375.0\n               },\n               \"t-shirts\": {\n                   \"doc_count\": 1,\n                   \"sales\": {\n                       \"value\": 175.0\n                   }\n               },\n               \"t-shirt-percentage\": {\n                   \"value\": 46.666666666666664\n               }\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-selector-aggregation.asciidoc",
      "line": 48
    },
    "digest": "7851d52ed462f0a1bdfd4f676e4a4363",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"total_sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"sales_bucket_filter\": {\n                    \"bucket_selector\": {\n                        \"buckets_path\": {\n                          \"totalSales\": \"total_sales\"\n                        },\n                        \"script\": \"params.totalSales > 200\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "total_sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "sales_bucket_filter": {
                  "bucket_selector": {
                    "buckets_path": {
                      "totalSales": "total_sales"
                    },
                    "script": "params.totalSales > 200"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-selector-aggregation.asciidoc",
      "line": 82
    },
    "digest": "3b86c66c8dfd53deb341999ab24f4040",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"total_sales\": {\n                   \"value\": 550.0\n               }\n            },<1>\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"total_sales\": {\n                   \"value\": 375.0\n               },\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-sort-aggregation.asciidoc",
      "line": 51
    },
    "digest": "7881659b181997486731d92712fbdca9",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"total_sales\": {\n                    \"sum\": {\n                        \"field\": \"price\"\n                    }\n                },\n                \"sales_bucket_sort\": {\n                    \"bucket_sort\": {\n                        \"sort\": [\n                          {\"total_sales\": {\"order\": \"desc\"}}<1>\n                        ],\n                        \"size\": 3<2>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "total_sales": {
                  "sum": {
                    "field": "price"
                  }
                },
                "sales_bucket_sort": {
                  "bucket_sort": {
                    "sort": [
                      {
                        "total_sales": {
                          "order": "desc"
                        }
                      }
                    ],
                    "size": 3
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-sort-aggregation.asciidoc",
      "line": 88
    },
    "digest": "cd97449455a4e17f5356f2c8796e1361",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 82,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/01/01 00:00:00\",\n               \"key\": 1420070400000,\n               \"doc_count\": 3,\n               \"total_sales\": {\n                   \"value\": 550.0\n               }\n            },\n            {\n               \"key_as_string\": \"2015/03/01 00:00:00\",\n               \"key\": 1425168000000,\n               \"doc_count\": 2,\n               \"total_sales\": {\n                   \"value\": 375.0\n               },\n            },\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2,\n               \"total_sales\": {\n                   \"value\": 60.0\n               },\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-sort-aggregation.asciidoc",
      "line": 139
    },
    "digest": "541c4f4fb5959cf88423196e51c7e0ef",
    "lang": "console",
    "found": [],
    "source": "POST /sales/_search\n{\n    \"size\": 0,\n    \"aggs\" : {\n        \"sales_per_month\" : {\n            \"date_histogram\" : {\n                \"field\" : \"date\",\n                \"calendar_interval\" : \"month\"\n            },\n            \"aggs\": {\n                \"bucket_truncate\": {\n                    \"bucket_sort\": {\n                        \"from\": 1,\n                        \"size\": 1\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "sales_per_month": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "month"
              },
              "aggs": {
                "bucket_truncate": {
                  "bucket_sort": {
                    "from": 1,
                    "size": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sales"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/bucket-sort-aggregation.asciidoc",
      "line": 166
    },
    "digest": "787cc8a92d371323d88b89eb331bc96b",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 11,\n   \"timed_out\": false,\n   \"_shards\": ...,\n   \"hits\": ...,\n   \"aggregations\": {\n      \"sales_per_month\": {\n         \"buckets\": [\n            {\n               \"key_as_string\": \"2015/02/01 00:00:00\",\n               \"key\": 1422748800000,\n               \"doc_count\": 2\n            }\n         ]\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/pipeline/serial-diff-aggregation.asciidoc",
      "line": 64
    },
    "digest": "b4da132cb934c33d61e2b60988c6d4a3",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n   \"size\": 0,\n   \"aggs\": {\n      \"my_date_histo\": {                  <1>\n         \"date_histogram\": {\n            \"field\": \"timestamp\",\n            \"calendar_interval\": \"day\"\n         },\n         \"aggs\": {\n            \"the_sum\": {\n               \"sum\": {\n                  \"field\": \"lemmings\"     <2>\n               }\n            },\n            \"thirtieth_difference\": {\n               \"serial_diff\": {                <3>\n                  \"buckets_path\": \"the_sum\",\n                  \"lag\" : 30\n               }\n            }\n         }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "my_date_histo": {
              "date_histogram": {
                "field": "timestamp",
                "calendar_interval": "day"
              },
              "aggs": {
                "the_sum": {
                  "sum": {
                    "field": "lemmings"
                  }
                },
                "thirtieth_difference": {
                  "serial_diff": {
                    "buckets_path": "the_sum",
                    "lag": 30
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/matrix/stats-aggregation.asciidoc",
      "line": 39
    },
    "digest": "8ab89e635fcbc485d1728c13dfeeb1ae",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\": {\n        \"statistics\": {\n            \"matrix_stats\": {\n                \"fields\": [\"poverty\", \"income\"]\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "statistics": {
              "matrix_stats": {
                "fields": [
                  "poverty",
                  "income"
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/matrix/stats-aggregation.asciidoc",
      "line": 57
    },
    "digest": "2ded5f25c691e6722f8e02aa57e4a889",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"aggregations\": {\n        \"statistics\": {\n            \"doc_count\": 50,\n            \"fields\": [{\n                \"name\": \"income\",\n                \"count\": 50,\n                \"mean\": 51985.1,\n                \"variance\": 7.383377037755103E7,\n                \"skewness\": 0.5595114003506483,\n                \"kurtosis\": 2.5692365287787124,\n                \"covariance\": {\n                    \"income\": 7.383377037755103E7,\n                    \"poverty\": -21093.65836734694\n                },\n                \"correlation\": {\n                    \"income\": 1.0,\n                    \"poverty\": -0.8352655256272504\n                }\n            }, {\n                \"name\": \"poverty\",\n                \"count\": 50,\n                \"mean\": 12.732000000000001,\n                \"variance\": 8.637730612244896,\n                \"skewness\": 0.4516049811903419,\n                \"kurtosis\": 2.8615929677997767,\n                \"covariance\": {\n                    \"income\": -21093.65836734694,\n                    \"poverty\": 8.637730612244896\n                },\n                \"correlation\": {\n                    \"income\": -0.8352655256272504,\n                    \"poverty\": 1.0\n                }\n            }]\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "aggregations/matrix/stats-aggregation.asciidoc",
      "line": 122
    },
    "digest": "7ee2877f8f031b9a4e56a40b371421fb",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"aggs\": {\n        \"matrixstats\": {\n            \"matrix_stats\": {\n                \"fields\": [\"poverty\", \"income\"],\n                \"missing\": {\"income\" : 50000} <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "aggs": {
            "matrixstats": {
              "matrix_stats": {
                "fields": [
                  "poverty",
                  "income"
                ],
                "missing": {
                  "income": 50000
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/misc.asciidoc",
      "line": 19
    },
    "digest": "0827fcf75228b6d0206a1ffe6bf7d263",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"size\": 0,\n  \"aggregations\": {\n    \"my_agg\": {\n      \"terms\": {\n        \"field\": \"text\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "my_agg": {
              "terms": {
                "field": "text"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/misc.asciidoc",
      "line": 45
    },
    "digest": "2d39331333f64fcc31fa298ac59b161f",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"titles\": {\n      \"terms\": {\n        \"field\": \"title\"\n      },\n      \"meta\": {\n        \"color\": \"blue\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "titles": {
              "terms": {
                "field": "title"
              },
              "meta": {
                "color": "blue"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/misc.asciidoc",
      "line": 66
    },
    "digest": "0e349e31fe27f0af20c2b3604b5ecd6e",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"aggregations\": {\n        \"titles\": {\n            \"meta\": {\n                \"color\" : \"blue\"\n            },\n            \"doc_count_error_upper_bound\" : 0,\n            \"sum_other_doc_count\" : 0,\n            \"buckets\": [\n            ]\n        }\n    },\n    ...\n}"
  },
  {
    "source_location": {
      "file": "aggregations/misc.asciidoc",
      "line": 96
    },
    "digest": "ea447f43ebd5f72c65de699904474d0d",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search?typed_keys\n{\n  \"aggregations\": {\n    \"tweets_over_time\": {\n      \"date_histogram\": {\n        \"field\": \"date\",\n        \"calendar_interval\": \"year\"\n      },\n      \"aggregations\": {\n        \"top_users\": {\n            \"top_hits\": {\n                \"size\": 1\n            }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "typed_keys": true
        },
        "body": {
          "aggregations": {
            "tweets_over_time": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "year"
              },
              "aggregations": {
                "top_users": {
                  "top_hits": {
                    "size": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "aggregations/misc.asciidoc",
      "line": 122
    },
    "digest": "609a1426592d38b830f5a2fbf7b24641",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"aggregations\": {\n        \"date_histogram#tweets_over_time\": { <1>\n            \"buckets\" : [\n                {\n                    \"key_as_string\" : \"2009-01-01T00:00:00.000Z\",\n                    \"key\" : 1230768000000,\n                    \"doc_count\" : 5,\n                    \"top_hits#top_users\" : {  <2>\n                        \"hits\" : {\n                            \"total\" : {\n                                \"value\": 5,\n                                \"relation\": \"eq\"\n                            },\n                            \"max_score\" : 1.0,\n                            \"hits\" : [\n                                {\n                                  \"_index\": \"twitter\",\n                                  \"_id\": \"0\",\n                                  \"_score\": 1.0,\n                                  \"_source\": {\n                                    \"date\": \"2009-11-15T14:12:12\",\n                                    \"message\": \"trying out Elasticsearch\",\n                                    \"user\": \"kimchy\",\n                                    \"likes\": 0\n                                  }\n                                }\n                            ]\n                        }\n                    }\n                }\n            ]\n        }\n    },\n    ...\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/query_filter_context.asciidoc",
      "line": 62
    },
    "digest": "f29a28fffa7ec604a33a838f48f7ea79",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": { <1>\n    \"bool\": { <2>\n      \"must\": [\n        { \"match\": { \"title\":   \"Search\"        }},\n        { \"match\": { \"content\": \"Elasticsearch\" }}\n      ],\n      \"filter\": [ <3>\n        { \"term\":  { \"status\": \"published\" }},\n        { \"range\": { \"publish_date\": { \"gte\": \"2015-01-01\" }}}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": [
                {
                  "match": {
                    "title": "Search"
                  }
                },
                {
                  "match": {
                    "content": "Elasticsearch"
                  }
                }
              ],
              "filter": [
                {
                  "term": {
                    "status": "published"
                  }
                },
                {
                  "range": {
                    "publish_date": {
                      "gte": "2015-01-01"
                    }
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/bool-query.asciidoc",
      "line": 36
    },
    "digest": "06afce2955f9094d96d27067ebca32e8",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "POST _search\n{\n  \"query\": {\n    \"bool\" : {\n      \"must\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n      },\n      \"filter\": {\n        \"term\" : { \"tag\" : \"tech\" }\n      },\n      \"must_not\" : {\n        \"range\" : {\n          \"age\" : { \"gte\" : 10, \"lte\" : 20 }\n        }\n      },\n      \"should\" : [\n        { \"term\" : { \"tag\" : \"wow\" } },\n        { \"term\" : { \"tag\" : \"elasticsearch\" } }\n      ],\n      \"minimum_should_match\" : 1,\n      \"boost\" : 1.0\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "term": {
                  "user": "kimchy"
                }
              },
              "filter": {
                "term": {
                  "tag": "tech"
                }
              },
              "must_not": {
                "range": {
                  "age": {
                    "gte": 10,
                    "lte": 20
                  }
                }
              },
              "should": [
                {
                  "term": {
                    "tag": "wow"
                  }
                },
                {
                  "term": {
                    "tag": "elasticsearch"
                  }
                }
              ],
              "minimum_should_match": 1,
              "boost": 1
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/bool-query.asciidoc",
      "line": 88
    },
    "digest": "f70a54cd9a9f4811bf962e469f2ca2ea",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET _search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"term\": {\n          \"status\": \"active\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": {
                "term": {
                  "status": "active"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/bool-query.asciidoc",
      "line": 107
    },
    "digest": "fa88f6f5a7d728ec4f1d05244228cb09",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET _search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match_all\": {}\n      },\n      \"filter\": {\n        \"term\": {\n          \"status\": \"active\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "term": {
                  "status": "active"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/bool-query.asciidoc",
      "line": 130
    },
    "digest": "162b5b693b713f0bfab1209d59443c46",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET _search\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"term\": {\n          \"status\": \"active\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "term": {
                  "status": "active"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/boosting-query.asciidoc",
      "line": 18
    },
    "digest": "292e4c6567378fc7b70033b53b04ce12",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"boosting\" : {\n            \"positive\" : {\n                \"term\" : {\n                    \"text\" : \"apple\"\n                }\n            },\n            \"negative\" : {\n                 \"term\" : {\n                     \"text\" : \"pie tart fruit crumble tree\"\n                }\n            },\n            \"negative_boost\" : 0.5\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "boosting": {
              "positive": {
                "term": {
                  "text": "apple"
                }
              },
              "negative": {
                "term": {
                  "text": "pie tart fruit crumble tree"
                }
              },
              "negative_boost": 0.5
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/constant-score-query.asciidoc",
      "line": 12
    },
    "digest": "d59a084640acf2f5c51d3068d38b5fc0",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"constant_score\" : {\n            \"filter\" : {\n                \"term\" : { \"user\" : \"kimchy\"}\n            },\n            \"boost\" : 1.2\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "term": {
                  "user": "kimchy"
                }
              },
              "boost": 1.2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/dis-max-query.asciidoc",
      "line": 18
    },
    "digest": "fcf5a593cfe8809d98a5239ad9c82038",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"dis_max\" : {\n            \"queries\" : [\n                { \"term\" : { \"title\" : \"Quick pets\" }},\n                { \"term\" : { \"body\" : \"Quick pets\" }}\n            ],\n            \"tie_breaker\" : 0.7\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "dis_max": {
              "queries": [
                {
                  "term": {
                    "title": "Quick pets"
                  }
                },
                {
                  "term": {
                    "body": "Quick pets"
                  }
                }
              ],
              "tie_breaker": 0.7
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 19
    },
    "digest": "a42f33e15b0995bb4b6058659bfdea85",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"query\": { \"match_all\": {} },\n            \"boost\": \"5\",\n            \"random_score\": {}, <1>\n            \"boost_mode\":\"multiply\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match_all": {}
              },
              "boost": "5",
              "random_score": {},
              "boost_mode": "multiply"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 41
    },
    "digest": "b4a0d0ed512dffc10ee53bca2feca49b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n          \"query\": { \"match_all\": {} },\n          \"boost\": \"5\", <1>\n          \"functions\": [\n              {\n                  \"filter\": { \"match\": { \"test\": \"bar\" } },\n                  \"random_score\": {}, <2>\n                  \"weight\": 23\n              },\n              {\n                  \"filter\": { \"match\": { \"test\": \"cat\" } },\n                  \"weight\": 42\n              }\n          ],\n          \"max_boost\": 42,\n          \"score_mode\": \"max\",\n          \"boost_mode\": \"multiply\",\n          \"min_score\" : 42\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match_all": {}
              },
              "boost": "5",
              "functions": [
                {
                  "filter": {
                    "match": {
                      "test": "bar"
                    }
                  },
                  "random_score": {},
                  "weight": 23
                },
                {
                  "filter": {
                    "match": {
                      "test": "cat"
                    }
                  },
                  "weight": 42
                }
              ],
              "max_boost": 42,
              "score_mode": "max",
              "boost_mode": "multiply",
              "min_score": 42
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 137
    },
    "digest": "ec473de07fe89bcbac1f8e278617fe46",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"query\": {\n                \"match\": { \"message\": \"elasticsearch\" }\n            },\n            \"script_score\" : {\n                \"script\" : {\n                  \"source\": \"Math.log(2 + doc['likes'].value)\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match": {
                  "message": "elasticsearch"
                }
              },
              "script_score": {
                "script": {
                  "source": "Math.log(2 + doc['likes'].value)"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 175
    },
    "digest": "b68c85fe1b0d2f264dc0d1cbf530f319",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"query\": {\n                \"match\": { \"message\": \"elasticsearch\" }\n            },\n            \"script_score\" : {\n                \"script\" : {\n                    \"params\": {\n                        \"a\": 5,\n                        \"b\": 1.2\n                    },\n                    \"source\": \"params.a / Math.pow(params.b, doc['likes'].value)\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match": {
                  "message": "elasticsearch"
                }
              },
              "script_score": {
                "script": {
                  "params": {
                    "a": 5,
                    "b": 1.2
                  },
                  "source": "params.a / Math.pow(params.b, doc['likes'].value)"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 241
    },
    "digest": "645c4c6e209719d3a4d25b1a629cb23b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"random_score\": {\n                \"seed\": 10,\n                \"field\": \"_seq_no\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "random_score": {
                "seed": 10,
                "field": "_seq_no"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 269
    },
    "digest": "8eaf4d5dd4ab1335deefa7749fdbbcc3",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"field_value_factor\": {\n                \"field\": \"likes\",\n                \"factor\": 1.2,\n                \"modifier\": \"sqrt\",\n                \"missing\": 1\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "field_value_factor": {
                "field": "likes",
                "factor": 1.2,
                "modifier": "sqrt",
                "missing": 1
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 380
    },
    "digest": "ec27afee074001b0e4e393611010842b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n            \"gauss\": {\n                \"date\": {\n                      \"origin\": \"2013-09-17\", <1>\n                      \"scale\": \"10d\",\n                      \"offset\": \"5d\", <2>\n                      \"decay\" : 0.5 <2>\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "gauss": {
                "date": {
                  "origin": "2013-09-17",
                  "scale": "10d",
                  "offset": "5d",
                  "decay": 0.5
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/function-score-query.asciidoc",
      "line": 578
    },
    "digest": "df17f920b0deab3529b98df88b781f55",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"function_score\": {\n          \"functions\": [\n            {\n              \"gauss\": {\n                \"price\": {\n                  \"origin\": \"0\",\n                  \"scale\": \"20\"\n                }\n              }\n            },\n            {\n              \"gauss\": {\n                \"location\": {\n                  \"origin\": \"11, 12\",\n                  \"scale\": \"2km\"\n                }\n              }\n            }\n          ],\n          \"query\": {\n            \"match\": {\n              \"properties\": \"balcony\"\n            }\n          },\n          \"score_mode\": \"multiply\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "functions": [
                {
                  "gauss": {
                    "price": {
                      "origin": "0",
                      "scale": "20"
                    }
                  }
                },
                {
                  "gauss": {
                    "location": {
                      "origin": "11, 12",
                      "scale": "2km"
                    }
                  }
                }
              ],
              "query": {
                "match": {
                  "properties": "balcony"
                }
              },
              "score_mode": "multiply"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 28
    },
    "digest": "807c0c9763f8c1114b3c8278c2a0cb56",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"all_of\" : {\n          \"ordered\" : true,\n          \"intervals\" : [\n            {\n              \"match\" : {\n                \"query\" : \"my favorite food\",\n                \"max_gaps\" : 0,\n                \"ordered\" : true\n              }\n            },\n            {\n              \"any_of\" : {\n                \"intervals\" : [\n                  { \"match\" : { \"query\" : \"hot water\" } },\n                  { \"match\" : { \"query\" : \"cold porridge\" } }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "all_of": {
                  "ordered": true,
                  "intervals": [
                    {
                      "match": {
                        "query": "my favorite food",
                        "max_gaps": 0,
                        "ordered": true
                      }
                    },
                    {
                      "any_of": {
                        "intervals": [
                          {
                            "match": {
                              "query": "hot water"
                            }
                          },
                          {
                            "match": {
                              "query": "cold porridge"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 312
    },
    "digest": "7471e97aaaf21c3a200abdd89f15c3cc",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"match\" : {\n          \"query\" : \"hot porridge\",\n          \"max_gaps\" : 10,\n          \"filter\" : {\n            \"not_containing\" : {\n              \"match\" : {\n                \"query\" : \"salty\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "match": {
                  "query": "hot porridge",
                  "max_gaps": 10,
                  "filter": {
                    "not_containing": {
                      "match": {
                        "query": "salty"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 343
    },
    "digest": "2de6885bacb8769b8f22dce253c96b0c",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"match\" : {\n          \"query\" : \"hot porridge\",\n          \"filter\" : {\n            \"script\" : {\n              \"source\" : \"interval.start > 10 && interval.end < 20 && interval.gaps == 0\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "match": {
                  "query": "hot porridge",
                  "filter": {
                    "script": {
                      "source": "interval.start > 10 && interval.end < 20 && interval.gaps == 0"
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 374
    },
    "digest": "e2a22c6fd58cc0becf4c383134a08f8b",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"match\" : {\n          \"query\" : \"salty\",\n          \"filter\" : {\n            \"contained_by\" : {\n              \"match\" : {\n                \"query\" : \"hot porridge\"\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "match": {
                  "query": "salty",
                  "filter": {
                    "contained_by": {
                      "match": {
                        "query": "hot porridge"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 409
    },
    "digest": "5f79c42b0f74fdf71359cef82843fad3",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"all_of\" : {\n          \"intervals\" : [\n            { \"match\" : { \"query\" : \"the\" } },\n            { \"any_of\" : {\n                \"intervals\" : [\n                    { \"match\" : { \"query\" : \"big\" } },\n                    { \"match\" : { \"query\" : \"big bad\" } }\n                ] } },\n            { \"match\" : { \"query\" : \"wolf\" } }\n          ],\n          \"max_gaps\" : 0,\n          \"ordered\" : true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "all_of": {
                  "intervals": [
                    {
                      "match": {
                        "query": "the"
                      }
                    },
                    {
                      "any_of": {
                        "intervals": [
                          {
                            "match": {
                              "query": "big"
                            }
                          },
                          {
                            "match": {
                              "query": "big bad"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "match": {
                        "query": "wolf"
                      }
                    }
                  ],
                  "max_gaps": 0,
                  "ordered": true
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/intervals-query.asciidoc",
      "line": 442
    },
    "digest": "e7811867397b305efbbe8925d8a01c1a",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"query\": {\n    \"intervals\" : {\n      \"my_text\" : {\n        \"any_of\" : {\n          \"intervals\" : [\n            { \"match\" : {\n                \"query\" : \"the big bad wolf\",\n                \"ordered\" : true,\n                \"max_gaps\" : 0 } },\n            { \"match\" : {\n                \"query\" : \"the big wolf\",\n                \"ordered\" : true,\n                \"max_gaps\" : 0 } }\n           ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "intervals": {
              "my_text": {
                "any_of": {
                  "intervals": [
                    {
                      "match": {
                        "query": "the big bad wolf",
                        "ordered": true,
                        "max_gaps": 0
                      }
                    },
                    {
                      "match": {
                        "query": "the big wolf",
                        "ordered": true,
                        "max_gaps": 0
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 18
    },
    "digest": "e0d6e02b998bdea99c9c08dcc3630c5e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match\" : {\n            \"message\" : {\n                \"query\" : \"this is a test\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "this is a test"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 150
    },
    "digest": "fa2fe60f570bd930d2891778c6efbfe6",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match\" : {\n            \"message\" : \"this is a test\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "this is a test"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 175
    },
    "digest": "6138d6919f3cbaaf61e1092f817d295c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match\" : {\n            \"message\" : {\n                \"query\" : \"this is a test\",\n                \"operator\" : \"and\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "this is a test",
                "operator": "and"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 219
    },
    "digest": "5043b83a89091fa00edb341ddf7ba370",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match\" : {\n            \"message\" : {\n                \"query\" : \"this is a testt\",\n                \"fuzziness\": \"AUTO\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "this is a testt",
                "fuzziness": "AUTO"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 241
    },
    "digest": "0ac9916f47a2483b89c1416684af322a",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match\" : {\n            \"message\" : {\n                \"query\" : \"to be or not to be\",\n                \"operator\" : \"and\",\n                \"zero_terms_query\": \"all\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "to be or not to be",
                "operator": "and",
                "zero_terms_query": "all"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-query.asciidoc",
      "line": 268
    },
    "digest": "7f56755fb6c42f7e6203339a6d0cb6e6",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n   \"query\": {\n       \"match\" : {\n           \"message\": {\n               \"query\" : \"ny city\",\n               \"auto_generate_synonyms_phrase_query\" : false\n           }\n       }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "ny city",
                "auto_generate_synonyms_phrase_query": false
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-bool-prefix-query.asciidoc",
      "line": 13
    },
    "digest": "79c7e8a98c47fad3e96c654d34aa049a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_bool_prefix\" : {\n            \"message\" : \"quick brown f\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_bool_prefix": {
              "message": "quick brown f"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-bool-prefix-query.asciidoc",
      "line": 28
    },
    "digest": "effc6b4784aca12691de5d5782c0384b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"should\": [\n                { \"term\": { \"message\": \"quick\" }},\n                { \"term\": { \"message\": \"brown\" }},\n                { \"prefix\": { \"message\": \"f\"}}\n            ]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "should": [
                {
                  "term": {
                    "message": "quick"
                  }
                },
                {
                  "term": {
                    "message": "brown"
                  }
                },
                {
                  "prefix": {
                    "message": "f"
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-bool-prefix-query.asciidoc",
      "line": 59
    },
    "digest": "953aab6cbd12a4f034cf02bf34d62a72",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_bool_prefix\" : {\n            \"message\": {\n                \"query\": \"quick brown f\",\n                \"analyzer\": \"keyword\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_bool_prefix": {
              "message": {
                "query": "quick brown f",
                "analyzer": "keyword"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-phrase-query.asciidoc",
      "line": 11
    },
    "digest": "83f95657beca9bf5d8264c80c7fb463f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_phrase\" : {\n            \"message\" : \"this is a test\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "message": "this is a test"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-phrase-query.asciidoc",
      "line": 30
    },
    "digest": "72231b7debac60c95b9869a97dafda3a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_phrase\" : {\n            \"message\" : {\n                \"query\" : \"this is a test\",\n                \"analyzer\" : \"my_analyzer\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "message": {
                "query": "this is a test",
                "analyzer": "my_analyzer"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-phrase-prefix-query.asciidoc",
      "line": 22
    },
    "digest": "ca0da81281347e33116710efd36697c8",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_phrase_prefix\" : {\n            \"message\" : {\n                \"query\" : \"quick brown f\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase_prefix": {
              "message": {
                "query": "quick brown f"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 11
    },
    "digest": "53b908c3432118c5a6e460f74d32006b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":    \"this is a test\", <1>\n      \"fields\": [ \"subject\", \"message\" ] <2>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "this is a test",
              "fields": [
                "subject",
                "message"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 33
    },
    "digest": "6a1702dd50690cae833572e48a0ddf25",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":    \"Will Smith\",\n      \"fields\": [ \"title\", \"*_name\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "Will Smith",
              "fields": [
                "title",
                "*_name"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 50
    },
    "digest": "e30ea6e3823a139d7693d8cce1920a06",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\" : \"this is a test\",\n      \"fields\" : [ \"subject^3\", \"message\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "this is a test",
              "fields": [
                "subject^3",
                "message"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 113
    },
    "digest": "5da6efd5b038ada64c9e853c88c1ec47",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"brown fox\",\n      \"type\":       \"best_fields\",\n      \"fields\":     [ \"subject\", \"message\" ],\n      \"tie_breaker\": 0.3\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "brown fox",
              "type": "best_fields",
              "fields": [
                "subject",
                "message"
              ],
              "tie_breaker": 0.3
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 130
    },
    "digest": "b0eaf67e5cce24ef8889bf20951ccec1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"dis_max\": {\n      \"queries\": [\n        { \"match\": { \"subject\": \"brown fox\" }},\n        { \"match\": { \"message\": \"brown fox\" }}\n      ],\n      \"tie_breaker\": 0.3\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "dis_max": {
              "queries": [
                {
                  "match": {
                    "subject": "brown fox"
                  }
                },
                {
                  "match": {
                    "message": "brown fox"
                  }
                }
              ],
              "tie_breaker": 0.3
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 170
    },
    "digest": "e270f3f721a5712cd11a5ca03554f5b0",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"Will Smith\",\n      \"type\":       \"best_fields\",\n      \"fields\":     [ \"first_name\", \"last_name\" ],\n      \"operator\":   \"and\" <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "Will Smith",
              "type": "best_fields",
              "fields": [
                "first_name",
                "last_name"
              ],
              "operator": "and"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 212
    },
    "digest": "7b908b1189f076942de8cd497ff1fa59",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"quick brown fox\",\n      \"type\":       \"most_fields\",\n      \"fields\":     [ \"title\", \"title.original\", \"title.shingles\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "quick brown fox",
              "type": "most_fields",
              "fields": [
                "title",
                "title.original",
                "title.shingles"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 228
    },
    "digest": "6bbc613bd4f9aec1bbdbabf5db021d28",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        { \"match\": { \"title\":          \"quick brown fox\" }},\n        { \"match\": { \"title.original\": \"quick brown fox\" }},\n        { \"match\": { \"title.shingles\": \"quick brown fox\" }}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "should": [
                {
                  "match": {
                    "title": "quick brown fox"
                  }
                },
                {
                  "match": {
                    "title.original": "quick brown fox"
                  }
                },
                {
                  "match": {
                    "title.shingles": "quick brown fox"
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 259
    },
    "digest": "0e118857b815b62118a30c042f079db1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"quick brown f\",\n      \"type\":       \"phrase_prefix\",\n      \"fields\":     [ \"subject\", \"message\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "quick brown f",
              "type": "phrase_prefix",
              "fields": [
                "subject",
                "message"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 275
    },
    "digest": "33f148e3d8676de6cc52f58749898a13",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"dis_max\": {\n      \"queries\": [\n        { \"match_phrase_prefix\": { \"subject\": \"quick brown f\" }},\n        { \"match_phrase_prefix\": { \"message\": \"quick brown f\" }}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "dis_max": {
              "queries": [
                {
                  "match_phrase_prefix": {
                    "subject": "quick brown f"
                  }
                },
                {
                  "match_phrase_prefix": {
                    "message": "quick brown f"
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 341
    },
    "digest": "047266b0d20fdb62ebc72d51952c8f6d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"Will Smith\",\n      \"type\":       \"cross_fields\",\n      \"fields\":     [ \"first_name\", \"last_name\" ],\n      \"operator\":   \"and\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "Will Smith",
              "type": "cross_fields",
              "fields": [
                "first_name",
                "last_name"
              ],
              "operator": "and"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 400
    },
    "digest": "ad0dcbc7fc619e952c8825b8f307b7b2",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"Jon\",\n      \"type\":       \"cross_fields\",\n      \"fields\":     [\n        \"first\", \"first.edge\",\n        \"last\",  \"last.edge\"\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "Jon",
              "type": "cross_fields",
              "fields": [
                "first",
                "first.edge",
                "last",
                "last.edge"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 438
    },
    "digest": "3cd50a789b8e1f0ebbbc53a8d7ecf656",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"bool\": {\n      \"should\": [\n        {\n          \"multi_match\" : {\n            \"query\":      \"Will Smith\",\n            \"type\":       \"cross_fields\",\n            \"fields\":     [ \"first\", \"last\" ],\n            \"minimum_should_match\": \"50%\" <1>\n          }\n        },\n        {\n          \"multi_match\" : {\n            \"query\":      \"Will Smith\",\n            \"type\":       \"cross_fields\",\n            \"fields\":     [ \"*.edge\" ]\n          }\n        }\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "should": [
                {
                  "multi_match": {
                    "query": "Will Smith",
                    "type": "cross_fields",
                    "fields": [
                      "first",
                      "last"
                    ],
                    "minimum_should_match": "50%"
                  }
                },
                {
                  "multi_match": {
                    "query": "Will Smith",
                    "type": "cross_fields",
                    "fields": [
                      "*.edge"
                    ]
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 472
    },
    "digest": "179f0a3e84ff4bbac18787a018eabf89",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n   \"multi_match\" : {\n      \"query\":      \"Jon\",\n      \"type\":       \"cross_fields\",\n      \"analyzer\":   \"standard\", <1>\n      \"fields\":     [ \"first\", \"last\", \"*.edge\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "Jon",
              "type": "cross_fields",
              "analyzer": "standard",
              "fields": [
                "first",
                "last",
                "*.edge"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/multi-match-query.asciidoc",
      "line": 524
    },
    "digest": "68721288dc9ad8aa1b55099b4d303051",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"multi_match\" : {\n      \"query\":      \"quick brown f\",\n      \"type\":       \"bool_prefix\",\n      \"fields\":     [ \"subject\", \"message\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "quick brown f",
              "type": "bool_prefix",
              "fields": [
                "subject",
                "message"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 42
    },
    "digest": "ad6ea0c1e46712aa1fd6d3bfa0ec979e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"query\" : \"(new york city) OR (big apple)\",\n            \"default_field\" : \"content\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "(new york city) OR (big apple)",
              "default_field": "content"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-syntax.asciidoc",
      "line": 294
    },
    "digest": "8ca595edc1e1f1ae6bc3ee05e0aa1e32",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"query\" : {\n    \"query_string\" : {\n      \"query\" : \"kimchy\\\\!\",\n      \"fields\"  : [\"user\"]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "kimchy\\!",
              "fields": [
                "user"
              ]
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 255
    },
    "digest": "f2d68493abd3ca430bd03a7f7f8d18f9",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"fields\" : [\"content\", \"name\"],\n            \"query\" : \"this AND that\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "content",
                "name"
              ],
              "query": "this AND that"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 271
    },
    "digest": "e17e8852ec3f31781e1364f4dffeb6d0",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"(content:this OR name:this) AND (content:that OR name:that)\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "(content:this OR name:this) AND (content:that OR name:that)"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 287
    },
    "digest": "a2a25aad1fea9a541b52ac613c78fb64",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"fields\" : [\"content\", \"name^5\"],\n            \"query\" : \"this AND that OR thus\",\n            \"tie_breaker\" : 0\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "content",
                "name^5"
              ],
              "query": "this AND that OR thus",
              "tie_breaker": 0
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 306
    },
    "digest": "28aad2c5942bfb221c2bf1bbdc01658e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"fields\" : [\"city.*\"],\n            \"query\" : \"this AND that OR thus\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "city.*"
              ],
              "query": "this AND that OR thus"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 323
    },
    "digest": "db6cba451ba562abe953d09ad80cc15c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"query\" : \"city.\\\\*:(this AND that OR thus)\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "city.\\*:(this AND that OR thus)"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 342
    },
    "digest": "58b5003c0a53a39bf509aa3797aad471",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\" : {\n            \"fields\" : [\"content\", \"name.*^5\"],\n            \"query\" : \"this AND that OR thus\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "content",
                "name.*^5"
              ],
              "query": "this AND that OR thus"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 408
    },
    "digest": "f32f0c19b42de3b87dd764fe4ca17e7c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n   \"query\": {\n       \"query_string\" : {\n           \"default_field\": \"title\",\n           \"query\" : \"ny city\",\n           \"auto_generate_synonyms_phrase_query\" : false\n       }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "default_field": "title",
              "query": "ny city",
              "auto_generate_synonyms_phrase_query": false
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 436
    },
    "digest": "60ee33f3acfdd0fe6f288ac77312c780",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"fields\": [\n                \"title\"\n            ],\n            \"query\": \"this that thus\",\n            \"minimum_should_match\": 2\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "title"
              ],
              "query": "this that thus",
              "minimum_should_match": 2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 462
    },
    "digest": "be1bd47393646ac6bbee177d1cdb7738",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ],\n            \"query\": \"this that thus\",\n            \"minimum_should_match\": 2\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "title",
                "content"
              ],
              "query": "this that thus",
              "minimum_should_match": 2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 486
    },
    "digest": "fdd38f0d248385a444c777e7acd97846",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ],\n            \"query\": \"this OR that OR thus\",\n            \"minimum_should_match\": 2\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "title",
                "content"
              ],
              "query": "this OR that OR thus",
              "minimum_should_match": 2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/query-string-query.asciidoc",
      "line": 518
    },
    "digest": "6f21a878fee3b43c5332b81aaddbeac7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"fields\": [\n                \"title\",\n                \"content\"\n            ],\n            \"query\": \"this OR that OR thus\",\n            \"type\": \"cross_fields\",\n            \"minimum_should_match\": 2\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "fields": [
                "title",
                "content"
              ],
              "query": "this OR that OR thus",
              "type": "cross_fields",
              "minimum_should_match": 2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 24
    },
    "digest": "0d49474511b236bc89e768c8ee91adf1",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\": {\n    \"simple_query_string\" : {\n        \"query\": \"\\\"fried eggs\\\" +(eggplant | potato) -frittata\",\n        \"fields\": [\"title^5\", \"body\"],\n        \"default_operator\": \"and\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "\"fried eggs\" +(eggplant | potato) -frittata",
              "fields": [
                "title^5",
                "body"
              ],
              "default_operator": "and"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 156
    },
    "digest": "521aa59ae56681fd59ac5840cba6b6c5",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"simple_query_string\" : {\n            \"fields\" : [\"content\"],\n            \"query\" : \"foo bar -baz\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "fields": [
                "content"
              ],
              "query": "foo bar -baz"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 184
    },
    "digest": "f686f52decb1d57356d42920f46d4d85",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"simple_query_string\" : {\n            \"query\" : \"foo | bar + baz*\",\n            \"flags\" : \"OR|AND|PREFIX\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "foo | bar + baz*",
              "flags": "OR|AND|PREFIX"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 248
    },
    "digest": "e8ea65153d7775f25b08dfdfe6954498",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\": {\n    \"simple_query_string\" : {\n      \"query\":    \"Will Smith\",\n      \"fields\": [ \"title\", \"*_name\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "Will Smith",
              "fields": [
                "title",
                "*_name"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 265
    },
    "digest": "da8db0769dff7305f178c12b1111bc99",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\": {\n    \"simple_query_string\" : {\n      \"query\" : \"this is a test\",\n      \"fields\" : [ \"subject^3\", \"message\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "this is a test",
              "fields": [
                "subject^3",
                "message"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/simple-query-string-query.asciidoc",
      "line": 291
    },
    "digest": "2e602d7fbad46132358f921dff7d1a26",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n   \"query\": {\n       \"simple_query_string\" : {\n           \"query\" : \"ny city\",\n           \"auto_generate_synonyms_phrase_query\" : false\n       }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "query": "ny city",
              "auto_generate_synonyms_phrase_query": false
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 11
    },
    "digest": "b4ef55e48f137e8f67f82b42a047c8f6",
    "lang": "console",
    "found": [],
    "source": "PUT /my_locations\n{\n    \"mappings\": {\n        \"properties\": {\n            \"pin\": {\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"geo_point\"\n                    }\n                }\n            }\n        }\n    }\n}\n\nPUT /my_locations/_doc/1\n{\n    \"pin\" : {\n        \"location\" : {\n            \"lat\" : 40.12,\n            \"lon\" : -71.34\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_locations",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "pin": {
                "properties": {
                  "location": {
                    "type": "geo_point"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_locations/_doc/1",
        "query": null,
        "body": {
          "pin": {
            "location": {
              "lat": 40.12,
              "lon": -71.34
            }
          }
        },
        "params": {
          "index": "my_locations",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 43
    },
    "digest": "49abe3273ac51f14cd4b5f1aaa7f6833",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : {\n                            \"lat\" : 40.73,\n                            \"lon\" : -74.1\n                        },\n                        \"bottom_right\" : {\n                            \"lat\" : 40.01,\n                            \"lon\" : -71.12\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": {
                      "lat": 40.73,
                      "lon": -74.1
                    },
                    "bottom_right": {
                      "lat": 40.01,
                      "lon": -71.12
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 98
    },
    "digest": "49abe3273ac51f14cd4b5f1aaa7f6833",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : {\n                            \"lat\" : 40.73,\n                            \"lon\" : -74.1\n                        },\n                        \"bottom_right\" : {\n                            \"lat\" : 40.01,\n                            \"lon\" : -71.12\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": {
                      "lat": 40.73,
                      "lon": -74.1
                    },
                    "bottom_right": {
                      "lat": 40.01,
                      "lon": -71.12
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 132
    },
    "digest": "2cbaaab829728c46359d2f68b71c446e",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : [-74.1, 40.73],\n                        \"bottom_right\" : [-71.12, 40.01]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": [
                      -74.1,
                      40.73
                    ],
                    "bottom_right": [
                      -71.12,
                      40.01
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 159
    },
    "digest": "bbf04a7f7a8858e911d6a53fe88127b0",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : \"40.73, -74.1\",\n                        \"bottom_right\" : \"40.01, -71.12\"\n                    }\n                }\n            }\n    }\n}\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": "40.73, -74.1",
                    "bottom_right": "40.01, -71.12"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 184
    },
    "digest": "417dcb29f5547d4de9d75d8b6a7a53c8",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"wkt\" : \"BBOX (-74.1, -71.12, 40.73, 40.01)\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "wkt": "BBOX (-74.1, -71.12, 40.73, 40.01)"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 208
    },
    "digest": "d84695e3db2c92cd3faebf729e482bf0",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : \"dr5r9ydj2y73\",\n                        \"bottom_right\" : \"drj7teegpus6\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": "dr5r9ydj2y73",
                    "bottom_right": "drj7teegpus6"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 242
    },
    "digest": "32ffcae9e1d13df0b7295c349d9145ec",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"geo_bounding_box\" : {\n            \"pin.location\" : {\n                \"top_left\" : \"dr\",\n                \"bottom_right\" : \"dr\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "geo_bounding_box": {
              "pin.location": {
                "top_left": "dr",
                "bottom_right": "dr"
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 271
    },
    "digest": "370750b2f51bd097f4578e5b105babdf",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top\" : 40.73,\n                        \"left\" : -74.1,\n                        \"bottom\" : 40.01,\n                        \"right\" : -71.12\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top": 40.73,
                    "left": -74.1,
                    "bottom": 40.01,
                    "right": -71.12
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-bounding-box-query.asciidoc",
      "line": 320
    },
    "digest": "15eee00f09d2290e0f350d420029906e",
    "lang": "console",
    "found": [],
    "source": "GET my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_bounding_box\" : {\n                    \"pin.location\" : {\n                        \"top_left\" : {\n                            \"lat\" : 40.73,\n                            \"lon\" : -74.1\n                        },\n                        \"bottom_right\" : {\n                            \"lat\" : 40.10,\n                            \"lon\" : -71.12\n                        }\n                    },\n                    \"type\" : \"indexed\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_bounding_box": {
                  "pin.location": {
                    "top_left": {
                      "lat": 40.73,
                      "lon": -74.1
                    },
                    "bottom_right": {
                      "lat": 40.1,
                      "lon": -71.12
                    }
                  },
                  "type": "indexed"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 12
    },
    "digest": "b4ef55e48f137e8f67f82b42a047c8f6",
    "lang": "console",
    "found": [],
    "source": "PUT /my_locations\n{\n    \"mappings\": {\n        \"properties\": {\n            \"pin\": {\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"geo_point\"\n                    }\n                }\n            }\n        }\n    }\n}\n\nPUT /my_locations/_doc/1\n{\n    \"pin\" : {\n        \"location\" : {\n            \"lat\" : 40.12,\n            \"lon\" : -71.34\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_locations",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "pin": {
                "properties": {
                  "location": {
                    "type": "geo_point"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_locations/_doc/1",
        "query": null,
        "body": {
          "pin": {
            "location": {
              "lat": 40.12,
              "lon": -71.34
            }
          }
        },
        "params": {
          "index": "my_locations",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 45
    },
    "digest": "4639a1bbd12710d5f01f1aaadce09a3e",
    "lang": "console",
    "found": [],
    "source": "GET /my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_distance\" : {\n                    \"distance\" : \"200km\",\n                    \"pin.location\" : {\n                        \"lat\" : 40,\n                        \"lon\" : -70\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_distance": {
                  "distance": "200km",
                  "pin.location": {
                    "lat": 40,
                    "lon": -70
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 77
    },
    "digest": "6fc37ccf570ff7e35b7b0bd4bacb8abd",
    "lang": "console",
    "found": [],
    "source": "GET /my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_distance\" : {\n                    \"distance\" : \"12km\",\n                    \"pin.location\" : {\n                        \"lat\" : 40,\n                        \"lon\" : -70\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_distance": {
                  "distance": "12km",
                  "pin.location": {
                    "lat": 40,
                    "lon": -70
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 106
    },
    "digest": "926fff8330fc3008f62b9de34f385a57",
    "lang": "console",
    "found": [],
    "source": "GET /my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_distance\" : {\n                    \"distance\" : \"12km\",\n                    \"pin.location\" : [-70, 40]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_distance": {
                  "distance": "12km",
                  "pin.location": [
                    -70,
                    40
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 132
    },
    "digest": "f878546633c6bcc30edcdcf520a20eba",
    "lang": "console",
    "found": [],
    "source": "GET /my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_distance\" : {\n                    \"distance\" : \"12km\",\n                    \"pin.location\" : \"40,-70\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_distance": {
                  "distance": "12km",
                  "pin.location": "40,-70"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-distance-query.asciidoc",
      "line": 155
    },
    "digest": "48a40f20b752a8120cf020bda041adca",
    "lang": "console",
    "found": [],
    "source": "GET /my_locations/_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_distance\" : {\n                    \"distance\" : \"12km\",\n                    \"pin.location\" : \"drm3btev3e86\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_locations/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_distance": {
                  "distance": "12km",
                  "pin.location": "drm3btev3e86"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_locations"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-polygon-query.asciidoc",
      "line": 11
    },
    "digest": "383c5a0771484086dcfd8d990830eeb7",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_polygon\" : {\n                    \"person.location\" : {\n                        \"points\" : [\n                            {\"lat\" : 40, \"lon\" : -70},\n                            {\"lat\" : 30, \"lon\" : -80},\n                            {\"lat\" : 20, \"lon\" : -90}\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_polygon": {
                  "person.location": {
                    "points": [
                      {
                        "lat": 40,
                        "lon": -70
                      },
                      {
                        "lat": 30,
                        "lon": -80
                      },
                      {
                        "lat": 20,
                        "lon": -90
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-polygon-query.asciidoc",
      "line": 60
    },
    "digest": "ecf966a20c54eb4e60a2670f51a99bdc",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n                \"geo_polygon\" : {\n                    \"person.location\" : {\n                        \"points\" : [\n                            [-70, 40],\n                            [-80, 30],\n                            [-90, 20]\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_polygon": {
                  "person.location": {
                    "points": [
                      [
                        -70,
                        40
                      ],
                      [
                        -80,
                        30
                      ],
                      [
                        -90,
                        20
                      ]
                    ]
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-polygon-query.asciidoc",
      "line": 90
    },
    "digest": "e532955a897ac1844e7c5727916bf32c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n               \"geo_polygon\" : {\n                    \"person.location\" : {\n                        \"points\" : [\n                            \"40, -70\",\n                            \"30, -80\",\n                            \"20, -90\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_polygon": {
                  "person.location": {
                    "points": [
                      "40, -70",
                      "30, -80",
                      "20, -90"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-polygon-query.asciidoc",
      "line": 118
    },
    "digest": "5b809a128ee33be706e2097dde6e7719",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"match_all\" : {}\n            },\n            \"filter\" : {\n               \"geo_polygon\" : {\n                    \"person.location\" : {\n                        \"points\" : [\n                            \"drn5x1g8cu2y\",\n                            \"30, -80\",\n                            \"20, -90\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_polygon": {
                  "person.location": {
                    "points": [
                      "drn5x1g8cu2y",
                      "30, -80",
                      "20, -90"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-shape-query.asciidoc",
      "line": 29
    },
    "digest": "183be708fc91109008109b5ed44c8b08",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_shape\"\n            }\n        }\n    }\n}\n\nPOST /example/_doc?refresh\n{\n    \"name\": \"Wind & Wetter, Berlin, Germany\",\n    \"location\": {\n        \"type\": \"point\",\n        \"coordinates\": [13.400544, 52.530286]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_shape"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "Wind & Wetter, Berlin, Germany",
          "location": {
            "type": "point",
            "coordinates": [
              13.400544,
              52.530286
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-shape-query.asciidoc",
      "line": 56
    },
    "digest": "129975da094b6b93cc8fcc4042d47913",
    "lang": "console",
    "found": [],
    "source": "GET /example/_search\n{\n    \"query\":{\n        \"bool\": {\n            \"must\": {\n                \"match_all\": {}\n            },\n            \"filter\": {\n                \"geo_shape\": {\n                    \"location\": {\n                        \"shape\": {\n                            \"type\": \"envelope\",\n                            \"coordinates\" : [[13.0, 53.0], [14.0, 52.0]]\n                        },\n                        \"relation\": \"within\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/example/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match_all": {}
              },
              "filter": {
                "geo_shape": {
                  "location": {
                    "shape": {
                      "type": "envelope",
                      "coordinates": [
                        [
                          13,
                          53
                        ],
                        [
                          14,
                          52
                        ]
                      ]
                    },
                    "relation": "within"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/geo-shape-query.asciidoc",
      "line": 100
    },
    "digest": "0e941a8309c3743972b8f5a8d9d9ada6",
    "lang": "console",
    "found": [],
    "source": "PUT /shapes\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_shape\"\n            }\n        }\n    }\n}\n\nPUT /shapes/_doc/deu\n{\n    \"location\": {\n        \"type\": \"envelope\",\n        \"coordinates\" : [[13.0, 53.0], [14.0, 52.0]]\n    }\n}\n\nGET /example/_search\n{\n    \"query\": {\n        \"bool\": {\n            \"filter\": {\n                \"geo_shape\": {\n                    \"location\": {\n                        \"indexed_shape\": {\n                            \"index\": \"shapes\",\n                            \"id\": \"deu\",\n                            \"path\": \"location\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/shapes",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_shape"
              }
            }
          }
        },
        "params": {
          "index": "shapes"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/shapes/_doc/deu",
        "query": null,
        "body": {
          "location": {
            "type": "envelope",
            "coordinates": [
              [
                13,
                53
              ],
              [
                14,
                52
              ]
            ]
          }
        },
        "params": {
          "index": "shapes",
          "id": "deu"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/example/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": {
                "geo_shape": {
                  "location": {
                    "indexed_shape": {
                      "index": "shapes",
                      "id": "deu",
                      "path": "location"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/shape-query.asciidoc",
      "line": 28
    },
    "digest": "9208f0823deacf3e3a2cc2b5d78f1e33",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n    \"mappings\": {\n        \"properties\": {\n            \"geometry\": {\n                \"type\": \"shape\"\n            }\n        }\n    }\n}\n\nPUT /example/_doc/1?refresh=wait_for\n{\n    \"name\": \"Lucky Landing\",\n    \"geometry\": {\n        \"type\": \"point\",\n        \"coordinates\": [1355.400544, 5255.530286]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "geometry": {
                "type": "shape"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/example/_doc/1",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "name": "Lucky Landing",
          "geometry": {
            "type": "point",
            "coordinates": [
              1355.400544,
              5255.530286
            ]
          }
        },
        "params": {
          "index": "example",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/shape-query.asciidoc",
      "line": 55
    },
    "digest": "f7bbcd762afef5a562768a46fe192b56",
    "lang": "console",
    "found": [],
    "source": "GET /example/_search\n{\n    \"query\":{\n        \"shape\": {\n            \"geometry\": {\n                \"shape\": {\n                    \"type\": \"envelope\",\n                    \"coordinates\" : [[1355.0, 5355.0], [1400.0, 5200.0]]\n                },\n                \"relation\": \"within\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/example/_search",
        "query": null,
        "body": {
          "query": {
            "shape": {
              "geometry": {
                "shape": {
                  "type": "envelope",
                  "coordinates": [
                    [
                      1355,
                      5355
                    ],
                    [
                      1400,
                      5200
                    ]
                  ]
                },
                "relation": "within"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/shape-query.asciidoc",
      "line": 133
    },
    "digest": "86388922e307dd94c0f5f93890f13832",
    "lang": "console",
    "found": [],
    "source": "PUT /shapes\n{\n    \"mappings\": {\n        \"properties\": {\n            \"geometry\": {\n                \"type\": \"shape\"\n            }\n        }\n    }\n}\n\nPUT /shapes/_doc/footprint\n{\n    \"geometry\": {\n        \"type\": \"envelope\",\n        \"coordinates\" : [[1355.0, 5355.0], [1400.0, 5200.0]]\n    }\n}\n\nGET /example/_search\n{\n    \"query\": {\n        \"shape\": {\n            \"geometry\": {\n                \"indexed_shape\": {\n                    \"index\": \"shapes\",\n                    \"id\": \"footprint\",\n                    \"path\": \"geometry\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/shapes",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "geometry": {
                "type": "shape"
              }
            }
          }
        },
        "params": {
          "index": "shapes"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/shapes/_doc/footprint",
        "query": null,
        "body": {
          "geometry": {
            "type": "envelope",
            "coordinates": [
              [
                1355,
                5355
              ],
              [
                1400,
                5200
              ]
            ]
          }
        },
        "params": {
          "index": "shapes",
          "id": "footprint"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/example/_search",
        "query": null,
        "body": {
          "query": {
            "shape": {
              "geometry": {
                "indexed_shape": {
                  "index": "shapes",
                  "id": "footprint",
                  "path": "geometry"
                }
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 23
    },
    "digest": "c612d93e7f682a0d731e385edf9f5d56",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"obj1\" : {\n                \"type\" : \"nested\"\n            }\n        }\n    }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "obj1": {
                "type": "nested"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 41
    },
    "digest": "6be70810d6ebd6f09d8a49f9df847765",
    "lang": "console",
    "found": [],
    "source": "GET /my_index/_search\n{\n    \"query\":  {\n        \"nested\" : {\n            \"path\" : \"obj1\",\n            \"query\" : {\n                \"bool\" : {\n                    \"must\" : [\n                    { \"match\" : {\"obj1.name\" : \"blue\"} },\n                    { \"range\" : {\"obj1.count\" : {\"gt\" : 5}} }\n                    ]\n                }\n            },\n            \"score_mode\" : \"avg\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "obj1",
              "query": {
                "bool": {
                  "must": [
                    {
                      "match": {
                        "obj1.name": "blue"
                      }
                    },
                    {
                      "range": {
                        "obj1.count": {
                          "gt": 5
                        }
                      }
                    }
                  ]
                }
              },
              "score_mode": "avg"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 133
    },
    "digest": "54092c8c646133f5dbbc047990dd458d",
    "lang": "console",
    "found": [],
    "source": "PUT /drivers\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"driver\" : {\n                \"type\" : \"nested\",\n                \"properties\" : {\n                    \"last_name\" : {\n                        \"type\" : \"text\"\n                    },\n                    \"vehicle\" : {\n                        \"type\" : \"nested\",\n                        \"properties\" : {\n                            \"make\" : {\n                                \"type\" : \"text\"\n                            },\n                            \"model\" : {\n                                \"type\" : \"text\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/drivers",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "driver": {
                "type": "nested",
                "properties": {
                  "last_name": {
                    "type": "text"
                  },
                  "vehicle": {
                    "type": "nested",
                    "properties": {
                      "make": {
                        "type": "text"
                      },
                      "model": {
                        "type": "text"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "drivers"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 165
    },
    "digest": "873fbbc6ab81409058591385fd602736",
    "lang": "console",
    "found": [],
    "source": "PUT /drivers/_doc/1\n{\n  \"driver\" : {\n        \"last_name\" : \"McQueen\",\n        \"vehicle\" : [\n            {\n                \"make\" : \"Powell Motors\",\n                \"model\" : \"Canyonero\"\n            },\n            {\n                \"make\" : \"Miller-Meteor\",\n                \"model\" : \"Ecto-1\"\n            }\n        ]\n    }\n}\n\nPUT /drivers/_doc/2?refresh\n{\n  \"driver\" : {\n        \"last_name\" : \"Hudson\",\n        \"vehicle\" : [\n            {\n                \"make\" : \"Mifune\",\n                \"model\" : \"Mach Five\"\n            },\n            {\n                \"make\" : \"Miller-Meteor\",\n                \"model\" : \"Ecto-1\"\n            }\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/drivers/_doc/1",
        "query": null,
        "body": {
          "driver": {
            "last_name": "McQueen",
            "vehicle": [
              {
                "make": "Powell Motors",
                "model": "Canyonero"
              },
              {
                "make": "Miller-Meteor",
                "model": "Ecto-1"
              }
            ]
          }
        },
        "params": {
          "index": "drivers",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/drivers/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "driver": {
            "last_name": "Hudson",
            "vehicle": [
              {
                "make": "Mifune",
                "model": "Mach Five"
              },
              {
                "make": "Miller-Meteor",
                "model": "Ecto-1"
              }
            ]
          }
        },
        "params": {
          "index": "drivers",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 206
    },
    "digest": "0bd3923424a20a4ba860b0774b9991b1",
    "lang": "console",
    "found": [],
    "source": "GET /drivers/_search\n{\n    \"query\" : {\n        \"nested\" : {\n            \"path\" : \"driver\",\n            \"query\" : {\n                \"nested\" : {\n                    \"path\" :  \"driver.vehicle\",\n                    \"query\" :  {\n                        \"bool\" : {\n                            \"must\" : [\n                                { \"match\" : { \"driver.vehicle.make\" : \"Powell Motors\" } },\n                                { \"match\" : { \"driver.vehicle.model\" : \"Canyonero\" } }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/drivers/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "driver",
              "query": {
                "nested": {
                  "path": "driver.vehicle",
                  "query": {
                    "bool": {
                      "must": [
                        {
                          "match": {
                            "driver.vehicle.make": "Powell Motors"
                          }
                        },
                        {
                          "match": {
                            "driver.vehicle.model": "Canyonero"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "drivers"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/nested-query.asciidoc",
      "line": 234
    },
    "digest": "72fbc50004bd2882be2ca312b24cfe7d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 5,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 3.7349272,\n    \"hits\" : [\n      {\n        \"_index\" : \"drivers\",\n        \"_id\" : \"1\",\n        \"_score\" : 3.7349272,\n        \"_source\" : {\n          \"driver\" : {\n            \"last_name\" : \"McQueen\",\n            \"vehicle\" : [\n              {\n                \"make\" : \"Powell Motors\",\n                \"model\" : \"Canyonero\"\n              },\n              {\n                \"make\" : \"Miller-Meteor\",\n                \"model\" : \"Ecto-1\"\n              }\n            ]\n          }\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/has-child-query.asciidoc",
      "line": 31
    },
    "digest": "10239a59784c3069e0d9399d3f9a7008",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"my-join-field\" : {\n                \"type\" : \"join\",\n                \"relations\": {\n                    \"parent\": \"child\"\n                }\n            }\n        }\n    }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my-join-field": {
                "type": "join",
                "relations": {
                  "parent": "child"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/has-child-query.asciidoc",
      "line": 53
    },
    "digest": "a204ff3396082b32175371c7ed8b9394",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"has_child\" : {\n            \"type\" : \"child\",\n            \"query\" : {\n                \"match_all\" : {}\n            },\n            \"max_children\": 10,\n            \"min_children\": 2,\n            \"score_mode\" : \"min\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "has_child": {
              "type": "child",
              "query": {
                "match_all": {}
              },
              "max_children": 10,
              "min_children": 2,
              "score_mode": "min"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/has-child-query.asciidoc",
      "line": 141
    },
    "digest": "d7b459941dc32d790ade80a0f5712560",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"has_child\" : {\n            \"type\" : \"child\",\n            \"query\" : {\n                \"function_score\" : {\n                    \"script_score\": {\n                        \"script\": \"_score * doc['click_count'].value\"\n                    }\n                }\n            },\n            \"score_mode\" : \"max\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "has_child": {
              "type": "child",
              "query": {
                "function_score": {
                  "script_score": {
                    "script": "_score * doc['click_count'].value"
                  }
                }
              },
              "score_mode": "max"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/has-parent-query.asciidoc",
      "line": 27
    },
    "digest": "6515e74b150bbdae570e0fd3ef5ac2e5",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"my-join-field\" : {\n                \"type\" : \"join\",\n                \"relations\": {\n                    \"parent\": \"child\"\n                }\n            },\n            \"tag\" : {\n                \"type\" : \"keyword\"\n            }\n        }\n    }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my-join-field": {
                "type": "join",
                "relations": {
                  "parent": "child"
                }
              },
              "tag": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/has-parent-query.asciidoc",
      "line": 52
    },
    "digest": "e539bfb5c73771c73acdf22fe77dde04",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\": {\n        \"has_parent\" : {\n            \"parent_type\" : \"parent\",\n            \"query\" : {\n                \"term\" : {\n                    \"tag\" : {\n                        \"value\" : \"Elasticsearch\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "has_parent": {
              "parent_type": "parent",
              "query": {
                "term": {
                  "tag": {
                    "value": "Elasticsearch"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/has-parent-query.asciidoc",
      "line": 122
    },
    "digest": "85d88b08243afbef45d4dcea72c9a41c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"has_parent\" : {\n            \"parent_type\" : \"parent\",\n            \"score\" : true,\n            \"query\" : {\n                \"function_score\" : {\n                    \"script_score\": {\n                        \"script\": \"_score * doc['view_count'].value\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "has_parent": {
              "parent_type": "parent",
              "score": true,
              "query": {
                "function_score": {
                  "script_score": {
                    "script": "_score * doc['view_count'].value"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/parent-id-query.asciidoc",
      "line": 24
    },
    "digest": "0377c031f840e23dcf607a08e5549bac",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"my-join-field\" : {\n                \"type\" : \"join\",\n                \"relations\": {\n                    \"my-parent\": \"my-child\"\n                }\n            }\n        }\n    }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my-join-field": {
                "type": "join",
                "relations": {
                  "my-parent": "my-child"
                }
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/parent-id-query.asciidoc",
      "line": 47
    },
    "digest": "6528a67cc20e5a422f11cbc0ffb6f673",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/1?refresh\n{\n  \"text\": \"This is a parent document.\",\n  \"my-join-field\": \"my-parent\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "This is a parent document.",
          "my-join-field": "my-parent"
        },
        "params": {
          "index": "my-index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/parent-id-query.asciidoc",
      "line": 60
    },
    "digest": "a4d0e6ff5bb904cbd686aecafa917aa2",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/2?routing=1&refresh\n{\n  \"text\": \"This is a child document.\",\n  \"my_join_field\": {\n    \"name\": \"my-child\",\n    \"parent\": \"1\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/2",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "text": "This is a child document.",
          "my_join_field": {
            "name": "my-child",
            "parent": "1"
          }
        },
        "params": {
          "index": "my-index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/parent-id-query.asciidoc",
      "line": 79
    },
    "digest": "0dd8ee4a383f84f8454c262262630f41",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n  \"query\": {\n      \"parent_id\": {\n          \"type\": \"my-child\",\n          \"id\": \"1\"\n      }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "parent_id": {
              "type": "my-child",
              "id": "1"
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-all-query.asciidoc",
      "line": 11
    },
    "digest": "09d617863a103c82fb4101e6165ea7fe",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_all\": {}\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-all-query.asciidoc",
      "line": 23
    },
    "digest": "75330ec1305d2beb0e2f34d2195464e2",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_all\": { \"boost\" : 1.2 }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {
              "boost": 1.2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/match-all-query.asciidoc",
      "line": 39
    },
    "digest": "81c9aa2678d6166a9662ddf2c011a6a5",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"match_none\": {}\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_none": {}
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-containing-query.asciidoc",
      "line": 11
    },
    "digest": "73094e82ce3850cbb6f9d071cc8a2d14",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_containing\" : {\n            \"little\" : {\n                \"span_term\" : { \"field1\" : \"foo\" }\n            },\n            \"big\" : {\n                \"span_near\" : {\n                    \"clauses\" : [\n                        { \"span_term\" : { \"field1\" : \"bar\" } },\n                        { \"span_term\" : { \"field1\" : \"baz\" } }\n                    ],\n                    \"slop\" : 5,\n                    \"in_order\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_containing": {
              "little": {
                "span_term": {
                  "field1": "foo"
                }
              },
              "big": {
                "span_near": {
                  "clauses": [
                    {
                      "span_term": {
                        "field1": "bar"
                      }
                    },
                    {
                      "span_term": {
                        "field1": "baz"
                      }
                    }
                  ],
                  "slop": 5,
                  "in_order": true
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-field-masking-query.asciidoc",
      "line": 16
    },
    "digest": "b59861ad84352fee3e78bc869ccbe8b0",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\": {\n    \"span_near\": {\n      \"clauses\": [\n        {\n          \"span_term\": {\n            \"text\": \"quick brown\"\n          }\n        },\n        {\n          \"field_masking_span\": {\n            \"query\": {\n              \"span_term\": {\n                \"text.stems\": \"fox\"\n              }\n            },\n            \"field\": \"text\"\n          }\n        }\n      ],\n      \"slop\": 5,\n      \"in_order\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_near": {
              "clauses": [
                {
                  "span_term": {
                    "text": "quick brown"
                  }
                },
                {
                  "field_masking_span": {
                    "query": {
                      "span_term": {
                        "text.stems": "fox"
                      }
                    },
                    "field": "text"
                  }
                }
              ],
              "slop": 5,
              "in_order": false
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-first-query.asciidoc",
      "line": 11
    },
    "digest": "020655381882d0721472a1581e06384a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_first\" : {\n            \"match\" : {\n                \"span_term\" : { \"user\" : \"kimchy\" }\n            },\n            \"end\" : 3\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_first": {
              "match": {
                "span_term": {
                  "user": "kimchy"
                }
              },
              "end": 3
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-multi-term-query.asciidoc",
      "line": 12
    },
    "digest": "a22f79d01a4a625840072024feb60b46",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_multi\":{\n            \"match\":{\n                \"prefix\" : { \"user\" :  { \"value\" : \"ki\" } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_multi": {
              "match": {
                "prefix": {
                  "user": {
                    "value": "ki"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-multi-term-query.asciidoc",
      "line": 28
    },
    "digest": "87ffa93d8de41fd0c3ea2f52378dab9c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_multi\":{\n            \"match\":{\n                \"prefix\" : { \"user\" :  { \"value\" : \"ki\", \"boost\" : 1.08 } }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_multi": {
              "match": {
                "prefix": {
                  "user": {
                    "value": "ki",
                    "boost": 1.08
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-near-query.asciidoc",
      "line": 13
    },
    "digest": "35ee06bbcc1291446187f1eeaf7eed90",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_near\" : {\n            \"clauses\" : [\n                { \"span_term\" : { \"field\" : \"value1\" } },\n                { \"span_term\" : { \"field\" : \"value2\" } },\n                { \"span_term\" : { \"field\" : \"value3\" } }\n            ],\n            \"slop\" : 12,\n            \"in_order\" : false\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_near": {
              "clauses": [
                {
                  "span_term": {
                    "field": "value1"
                  }
                },
                {
                  "span_term": {
                    "field": "value2"
                  }
                },
                {
                  "span_term": {
                    "field": "value3"
                  }
                }
              ],
              "slop": 12,
              "in_order": false
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-not-query.asciidoc",
      "line": 13
    },
    "digest": "4a3b37cdf27279800355ccdef0e13128",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_not\" : {\n            \"include\" : {\n                \"span_term\" : { \"field1\" : \"hoya\" }\n            },\n            \"exclude\" : {\n                \"span_near\" : {\n                    \"clauses\" : [\n                        { \"span_term\" : { \"field1\" : \"la\" } },\n                        { \"span_term\" : { \"field1\" : \"hoya\" } }\n                    ],\n                    \"slop\" : 0,\n                    \"in_order\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_not": {
              "include": {
                "span_term": {
                  "field1": "hoya"
                }
              },
              "exclude": {
                "span_near": {
                  "clauses": [
                    {
                      "span_term": {
                        "field1": "la"
                      }
                    },
                    {
                      "span_term": {
                        "field1": "hoya"
                      }
                    }
                  ],
                  "slop": 0,
                  "in_order": true
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-or-query.asciidoc",
      "line": 11
    },
    "digest": "b8b1c96897001708b2cfad92ac36a21f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_or\" : {\n            \"clauses\" : [\n                { \"span_term\" : { \"field\" : \"value1\" } },\n                { \"span_term\" : { \"field\" : \"value2\" } },\n                { \"span_term\" : { \"field\" : \"value3\" } }\n            ]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_or": {
              "clauses": [
                {
                  "span_term": {
                    "field": "value1"
                  }
                },
                {
                  "span_term": {
                    "field": "value2"
                  }
                },
                {
                  "span_term": {
                    "field": "value3"
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-term-query.asciidoc",
      "line": 11
    },
    "digest": "086b2bbc4c3bfc2310c22d10db42cb82",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-term-query.asciidoc",
      "line": 23
    },
    "digest": "5add42087c83b7e498f8f43e91f343d4",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n       \"span_term\" : { \"user\" : { \"value\" : \"kimchy\", \"boost\" : 2.0 } }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_term": {
              "user": {
                "value": "kimchy",
                "boost": 2
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-term-query.asciidoc",
      "line": 35
    },
    "digest": "2a07d189553602066fefdb6b7cbdf542",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_term\" : { \"user\" : { \"term\" : \"kimchy\", \"boost\" : 2.0 } }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_term": {
              "user": {
                "term": "kimchy",
                "boost": 2
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/span-within-query.asciidoc",
      "line": 11
    },
    "digest": "9429e565d0b56289a10b81220660163c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"span_within\" : {\n            \"little\" : {\n                \"span_term\" : { \"field1\" : \"foo\" }\n            },\n            \"big\" : {\n                \"span_near\" : {\n                    \"clauses\" : [\n                        { \"span_term\" : { \"field1\" : \"bar\" } },\n                        { \"span_term\" : { \"field1\" : \"baz\" } }\n                    ],\n                    \"slop\" : 5,\n                    \"in_order\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "span_within": {
              "little": {
                "span_term": {
                  "field1": "foo"
                }
              },
              "big": {
                "span_near": {
                  "clauses": [
                    {
                      "span_term": {
                        "field1": "bar"
                      }
                    },
                    {
                      "span_term": {
                        "field1": "baz"
                      }
                    }
                  ],
                  "slop": 5,
                  "in_order": true
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/distance-feature-query.asciidoc",
      "line": 37
    },
    "digest": "b81a7b5f5ef19553f9cd49196f31018c",
    "lang": "console",
    "found": [],
    "source": "PUT /items\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"type\": \"keyword\"\n      },\n      \"production_date\": {\n        \"type\": \"date\"\n      },\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/items",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name": {
                "type": "keyword"
              },
              "production_date": {
                "type": "date"
              },
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "items"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/distance-feature-query.asciidoc",
      "line": 62
    },
    "digest": "b0d3f839237fabf8cdc2221734c668ad",
    "lang": "console",
    "found": [],
    "source": "PUT /items/_doc/1?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2018-02-01\",\n  \"location\": [-71.34, 41.12]\n}\n\nPUT /items/_doc/2?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2018-01-01\",\n  \"location\": [-71.3, 41.15]\n}\n\n\nPUT /items/_doc/3?refresh\n{\n  \"name\" : \"chocolate\",\n  \"production_date\": \"2017-12-01\",\n  \"location\": [-71.3, 41.12]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/items/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "chocolate",
          "production_date": "2018-02-01",
          "location": [
            -71.34,
            41.12
          ]
        },
        "params": {
          "index": "items",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/items/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "chocolate",
          "production_date": "2018-01-01",
          "location": [
            -71.3,
            41.15
          ]
        },
        "params": {
          "index": "items",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/items/_doc/3",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "chocolate",
          "production_date": "2017-12-01",
          "location": [
            -71.3,
            41.12
          ]
        },
        "params": {
          "index": "items",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/distance-feature-query.asciidoc",
      "line": 98
    },
    "digest": "1e2c5cef7a3f254c71a33865eb4d7569",
    "lang": "console",
    "found": [],
    "source": "GET /items/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": {\n          \"name\": \"chocolate\"\n        }\n      },\n      \"should\": {\n        \"distance_feature\": {\n          \"field\": \"production_date\",\n          \"pivot\": \"7d\",\n          \"origin\": \"now\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/items/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match": {
                  "name": "chocolate"
                }
              },
              "should": {
                "distance_feature": {
                  "field": "production_date",
                  "pivot": "7d",
                  "origin": "now"
                }
              }
            }
          }
        },
        "params": {
          "index": "items"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/distance-feature-query.asciidoc",
      "line": 127
    },
    "digest": "57a3e8d2ca64e37e90d658c4cd935399",
    "lang": "console",
    "found": [],
    "source": "GET /items/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": {\n          \"name\": \"chocolate\"\n        }\n      },\n      \"should\": {\n        \"distance_feature\": {\n          \"field\": \"location\",\n          \"pivot\": \"1000m\",\n          \"origin\": [-71.3, 41.15]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/items/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match": {
                  "name": "chocolate"
                }
              },
              "should": {
                "distance_feature": {
                  "field": "location",
                  "pivot": "1000m",
                  "origin": [
                    -71.3,
                    41.15
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "items"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/mlt-query.asciidoc",
      "line": 19
    },
    "digest": "32db70e5e08349aa254788ab4a2c4a51",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"more_like_this\" : {\n            \"fields\" : [\"title\", \"description\"],\n            \"like\" : \"Once upon a time\",\n            \"min_term_freq\" : 1,\n            \"max_query_terms\" : 12\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "more_like_this": {
              "fields": [
                "title",
                "description"
              ],
              "like": "Once upon a time",
              "min_term_freq": 1,
              "max_query_terms": 12
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/mlt-query.asciidoc",
      "line": 38
    },
    "digest": "cba099b82792fa5ba7741d00483c2b47",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"more_like_this\" : {\n            \"fields\" : [\"title\", \"description\"],\n            \"like\" : [\n            {\n                \"_index\" : \"imdb\",\n                \"_id\" : \"1\"\n            },\n            {\n                \"_index\" : \"imdb\",\n                \"_id\" : \"2\"\n            },\n            \"and potentially some more text here as well\"\n            ],\n            \"min_term_freq\" : 1,\n            \"max_query_terms\" : 12\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "more_like_this": {
              "fields": [
                "title",
                "description"
              ],
              "like": [
                {
                  "_index": "imdb",
                  "_id": "1"
                },
                {
                  "_index": "imdb",
                  "_id": "2"
                },
                "and potentially some more text here as well"
              ],
              "min_term_freq": 1,
              "max_query_terms": 12
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/mlt-query.asciidoc",
      "line": 67
    },
    "digest": "33f77a3b80f33323faa091538220de2a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"more_like_this\" : {\n            \"fields\" : [\"name.first\", \"name.last\"],\n            \"like\" : [\n            {\n                \"_index\" : \"marvel\",\n                \"doc\" : {\n                    \"name\": {\n                        \"first\": \"Ben\",\n                        \"last\": \"Grimm\"\n                    },\n                    \"_doc\": \"You got no idea what I'd... what I'd give to be invisible.\"\n                  }\n            },\n            {\n                \"_index\" : \"marvel\",\n                \"_id\" : \"2\"\n            }\n            ],\n            \"min_term_freq\" : 1,\n            \"max_query_terms\" : 12\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "more_like_this": {
              "fields": [
                "name.first",
                "name.last"
              ],
              "like": [
                {
                  "_index": "marvel",
                  "doc": {
                    "name": {
                      "first": "Ben",
                      "last": "Grimm"
                    },
                    "_doc": "You got no idea what I'd... what I'd give to be invisible."
                  }
                },
                {
                  "_index": "marvel",
                  "_id": "2"
                }
              ],
              "min_term_freq": 1,
              "max_query_terms": 12
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/mlt-query.asciidoc",
      "line": 121
    },
    "digest": "084b3e3ff6f22c1c9a56b79760f50b36",
    "lang": "console",
    "found": [],
    "source": "PUT /imdb\n{\n    \"mappings\": {\n        \"properties\": {\n            \"title\": {\n                \"type\": \"text\",\n                \"term_vector\": \"yes\"\n            },\n            \"description\": {\n                \"type\": \"text\"\n            },\n            \"tags\": {\n                \"type\": \"text\",\n                \"fields\" : {\n                    \"raw\": {\n                        \"type\" : \"text\",\n                        \"analyzer\": \"keyword\",\n                        \"term_vector\" : \"yes\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/imdb",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "term_vector": "yes"
              },
              "description": {
                "type": "text"
              },
              "tags": {
                "type": "text",
                "fields": {
                  "raw": {
                    "type": "text",
                    "analyzer": "keyword",
                    "term_vector": "yes"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "imdb"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 18
    },
    "digest": "e79bff3fe9fe9d8732e0b034f17a03c5",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index\n{\n    \"mappings\": {\n        \"properties\": {\n             \"message\": {\n                 \"type\": \"text\"\n             },\n             \"query\": {\n                 \"type\": \"percolator\"\n             }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "message": {
                "type": "text"
              },
              "query": {
                "type": "percolator"
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 46
    },
    "digest": "25843127c07257bf09154920779d3055",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/1?refresh\n{\n    \"query\" : {\n        \"match\" : {\n            \"message\" : \"bonsai tree\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "message": "bonsai tree"
            }
          }
        },
        "params": {
          "index": "my-index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 61
    },
    "digest": "4ef2837148b6b23e2eb0a11d14ccae80",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"percolate\" : {\n            \"field\" : \"query\",\n            \"document\" : {\n                \"message\" : \"A new bonsai tree in the office\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "message": "A new bonsai tree in the office"
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 79
    },
    "digest": "ac96110be37dee22d5da427499945bb0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.26152915,\n    \"hits\": [\n      { <1>\n        \"_index\": \"my-index\",\n        \"_id\": \"1\",\n        \"_score\": 0.26152915,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"bonsai tree\"\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0] <2>\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 158
    },
    "digest": "4e4e6a2e173cc20c00cca1a06166a687",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"constant_score\": {\n            \"filter\": {\n                \"percolate\" : {\n                    \"field\" : \"query\",\n                    \"document\" : {\n                        \"message\" : \"A new bonsai tree in the office\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "percolate": {
                  "field": "query",
                  "document": {
                    "message": "A new bonsai tree in the office"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 198
    },
    "digest": "2d417d4eea299b45f384af7303252611",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"percolate\" : {\n            \"field\" : \"query\",\n            \"documents\" : [ <1>\n                {\n                    \"message\" : \"bonsai tree\"\n                },\n                {\n                    \"message\" : \"new tree\"\n                },\n                {\n                    \"message\" : \"the office\"\n                },\n                {\n                    \"message\" : \"office tree\"\n                }\n            ]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "documents": [
                {
                  "message": "bonsai tree"
                },
                {
                  "message": "new tree"
                },
                {
                  "message": "the office"
                },
                {
                  "message": "office tree"
                }
              ]
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 227
    },
    "digest": "554f99ea4dcd638b7a152796867528be",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.7093853,\n    \"hits\": [\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"1\",\n        \"_score\": 0.7093853,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"bonsai tree\"\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0, 1, 3] <1>\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 283
    },
    "digest": "fe0b180951e143d4c624d9fbf677b884",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/2\n{\n  \"message\" : \"A new bonsai tree in the office\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/2",
        "query": null,
        "body": {
          "message": "A new bonsai tree in the office"
        },
        "params": {
          "index": "my-index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 293
    },
    "digest": "acbf32c5afd55d370121e03f27083206",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"my-index\",\n  \"_id\": \"2\",\n  \"_version\": 1,\n  \"_shards\": {\n    \"total\": 2,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"result\": \"created\",\n  \"_seq_no\" : 1,\n  \"_primary_term\" : 1\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 312
    },
    "digest": "6736f6e4e04379918a21e7c223c08cf9",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"percolate\" : {\n            \"field\": \"query\",\n            \"index\" : \"my-index\",\n            \"id\" : \"2\",\n            \"version\" : 1 <1>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "index": "my-index",
              "id": "2",
              "version": 1
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 348
    },
    "digest": "f33cfd0350f5f474362aa6f2e03f734f",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/3?refresh\n{\n    \"query\" : {\n        \"match\" : {\n            \"message\" : \"brown fox\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/3",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "message": "brown fox"
            }
          }
        },
        "params": {
          "index": "my-index",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 363
    },
    "digest": "1ae1587dfc299b9f3f57d3da0dbc9a3b",
    "lang": "console",
    "found": [],
    "source": "PUT /my-index/_doc/4?refresh\n{\n    \"query\" : {\n        \"match\" : {\n            \"message\" : \"lazy dog\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/4",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "message": "lazy dog"
            }
          }
        },
        "params": {
          "index": "my-index",
          "id": "4"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 378
    },
    "digest": "a8852f083978b748b93b87ff7fa7b15b",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"percolate\" : {\n            \"field\": \"query\",\n            \"document\" : {\n                \"message\" : \"The quick brown fox jumps over the lazy dog\"\n            }\n        }\n    },\n    \"highlight\": {\n      \"fields\": {\n        \"message\": {}\n      }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "message": "The quick brown fox jumps over the lazy dog"
              }
            }
          },
          "highlight": {
            "fields": {
              "message": {}
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 401
    },
    "digest": "76d17c166f769246933c1d1e2b235c6f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 7,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 2,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.26152915,\n    \"hits\": [\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"3\",\n        \"_score\": 0.26152915,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"brown fox\"\n            }\n          }\n        },\n        \"highlight\": {\n          \"message\": [\n            \"The quick <em>brown</em> <em>fox</em> jumps over the lazy dog\" <1>\n          ]\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0]\n        }\n      },\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"4\",\n        \"_score\": 0.26152915,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"lazy dog\"\n            }\n          }\n        },\n        \"highlight\": {\n          \"message\": [\n            \"The quick brown fox jumps over the <em>lazy</em> <em>dog</em>\" <1>\n          ]\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 472
    },
    "digest": "3bbf150f4ae5c8e53beb6d6ae6f07775",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"percolate\" : {\n            \"field\": \"query\",\n            \"documents\" : [\n                {\n                    \"message\" : \"bonsai tree\"\n                },\n                {\n                    \"message\" : \"new tree\"\n                },\n                {\n                    \"message\" : \"the office\"\n                },\n                {\n                    \"message\" : \"office tree\"\n                }\n            ]\n        }\n    },\n    \"highlight\": {\n      \"fields\": {\n        \"message\": {}\n      }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "documents": [
                {
                  "message": "bonsai tree"
                },
                {
                  "message": "new tree"
                },
                {
                  "message": "the office"
                },
                {
                  "message": "office tree"
                }
              ]
            }
          },
          "highlight": {
            "fields": {
              "message": {}
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 506
    },
    "digest": "c11e614e77e400d9175a62f701e3205e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.7093853,\n    \"hits\": [\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"1\",\n        \"_score\": 0.7093853,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"bonsai tree\"\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0, 1, 3]\n        },\n        \"highlight\" : { <1>\n          \"0_message\" : [\n              \"<em>bonsai</em> <em>tree</em>\"\n          ],\n          \"3_message\" : [\n              \"office <em>tree</em>\"\n          ],\n          \"1_message\" : [\n              \"new <em>tree</em>\"\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 564
    },
    "digest": "6163e92fa93136a1907f820e8d57db45",
    "lang": "console",
    "found": [],
    "source": "GET /my-index/_search\n{\n    \"query\" : {\n        \"bool\" : {\n            \"should\" : [\n                {\n                    \"percolate\" : {\n                        \"field\" : \"query\",\n                        \"document\" : {\n                            \"message\" : \"bonsai tree\"\n                        },\n                        \"name\": \"query1\" <1>\n                    }\n                },\n                {\n                    \"percolate\" : {\n                        \"field\" : \"query\",\n                        \"document\" : {\n                            \"message\" : \"tulip flower\"\n                        },\n                        \"name\": \"query2\" <1>\n                    }\n                }\n            ]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "should": [
                {
                  "percolate": {
                    "field": "query",
                    "document": {
                      "message": "bonsai tree"
                    },
                    "name": "query1"
                  }
                },
                {
                  "percolate": {
                    "field": "query",
                    "document": {
                      "message": "tulip flower"
                    },
                    "name": "query2"
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 603
    },
    "digest": "512be7642780d7953f71c95b27894aa1",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.26152915,\n    \"hits\": [\n      {\n        \"_index\": \"my-index\",\n        \"_id\": \"1\",\n        \"_score\": 0.26152915,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"message\": \"bonsai tree\"\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot_query1\" : [0] <1>\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/percolate-query.asciidoc",
      "line": 668
    },
    "digest": "9501e6c8e95c21838653ea15b9b7ed5f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\": {\n    \"term\" : {\n      \"query.extraction_result\" : \"failed\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "query.extraction_result": "failed"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 57
    },
    "digest": "e2750d69bcb6d4c7e16e704cd0fb3530",
    "lang": "console",
    "found": [],
    "source": "PUT /test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"pagerank\": {\n        \"type\": \"rank_feature\"\n      },\n      \"url_length\": {\n        \"type\": \"rank_feature\",\n        \"positive_score_impact\": false\n      },\n      \"topics\": {\n        \"type\": \"rank_features\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "pagerank": {
                "type": "rank_feature"
              },
              "url_length": {
                "type": "rank_feature",
                "positive_score_impact": false
              },
              "topics": {
                "type": "rank_features"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 82
    },
    "digest": "c786505cf972dd41bd0cbb6ebcf939e9",
    "lang": "console",
    "found": [],
    "source": "PUT /test/_doc/1?refresh\n{\n  \"url\": \"http://en.wikipedia.org/wiki/2016_Summer_Olympics\",\n  \"content\": \"Rio 2016\",\n  \"pagerank\": 50.3,\n  \"url_length\": 42,\n  \"topics\": {\n    \"sports\": 50,\n    \"brazil\": 30\n  }\n}\n\nPUT /test/_doc/2?refresh\n{\n  \"url\": \"http://en.wikipedia.org/wiki/2016_Brazilian_Grand_Prix\",\n  \"content\": \"Formula One motor race held on 13 November 2016\",\n  \"pagerank\": 50.3,\n  \"url_length\": 47,\n  \"topics\": {\n    \"sports\": 35,\n    \"formula one\": 65,\n    \"brazil\": 20\n  }\n}\n\nPUT /test/_doc/3?refresh\n{\n  \"url\": \"http://en.wikipedia.org/wiki/Deadpool_(film)\",\n  \"content\": \"Deadpool is a 2016 American superhero film\",\n  \"pagerank\": 50.3,\n  \"url_length\": 37,\n  \"topics\": {\n    \"movies\": 60,\n    \"super hero\": 65\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "url": "http://en.wikipedia.org/wiki/2016_Summer_Olympics",
          "content": "Rio 2016",
          "pagerank": 50.3,
          "url_length": 42,
          "topics": {
            "sports": 50,
            "brazil": 30
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "url": "http://en.wikipedia.org/wiki/2016_Brazilian_Grand_Prix",
          "content": "Formula One motor race held on 13 November 2016",
          "pagerank": 50.3,
          "url_length": 47,
          "topics": {
            "sports": 35,
            "formula one": 65,
            "brazil": 20
          }
        },
        "params": {
          "index": "test",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/3",
        "query": {
          "refresh": true
        },
        "body": {
          "url": "http://en.wikipedia.org/wiki/Deadpool_(film)",
          "content": "Deadpool is a 2016 American superhero film",
          "pagerank": 50.3,
          "url_length": 37,
          "topics": {
            "movies": 60,
            "super hero": 65
          }
        },
        "params": {
          "index": "test",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 128
    },
    "digest": "fd0cd8ecd03468726b59a605eea06d75",
    "lang": "console",
    "found": [],
    "source": "GET /test/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match\": {\n            \"content\": \"2016\"\n          }\n        }\n      ],\n      \"should\": [\n        {\n          \"rank_feature\": {\n            \"field\": \"pagerank\"\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"url_length\",\n            \"boost\": 0.1\n          }\n        },\n        {\n          \"rank_feature\": {\n            \"field\": \"topics.sports\",\n            \"boost\": 0.4\n          }\n        }\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": [
                {
                  "match": {
                    "content": "2016"
                  }
                }
              ],
              "should": [
                {
                  "rank_feature": {
                    "field": "pagerank"
                  }
                },
                {
                  "rank_feature": {
                    "field": "url_length",
                    "boost": 0.1
                  }
                },
                {
                  "rank_feature": {
                    "field": "topics.sports",
                    "boost": 0.4
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 233
    },
    "digest": "309f0721145b5c656338a02459c3ff1e",
    "lang": "console",
    "found": [],
    "source": "GET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"saturation\": {\n        \"pivot\": 8\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "pagerank",
              "saturation": {
                "pivot": 8
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 253
    },
    "digest": "0c05c66cfe3a2169b1ec1aba77e26db2",
    "lang": "console",
    "found": [],
    "source": "GET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"saturation\": {}\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "pagerank",
              "saturation": {}
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 274
    },
    "digest": "e89bf0d893b7bf43c2d9b44db6cfe21b",
    "lang": "console",
    "found": [],
    "source": "GET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"log\": {\n        \"scaling_factor\": 4\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "pagerank",
              "log": {
                "scaling_factor": 4
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/rank-feature-query.asciidoc",
      "line": 300
    },
    "digest": "9e3c28d5820c38ea117eb2e9a5061089",
    "lang": "console",
    "found": [],
    "source": "GET /test/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\",\n      \"sigmoid\": {\n        \"pivot\": 7,\n        \"exponent\": 0.6\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "pagerank",
              "sigmoid": {
                "pivot": 7,
                "exponent": 0.6
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/script-query.asciidoc",
      "line": 15
    },
    "digest": "b3aa46565d98f8a6750c571bb1c1bb8c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"filter\" : {\n                \"script\" : {\n                    \"script\" : {\n                        \"source\": \"doc['num1'].value > 1\",\n                        \"lang\": \"painless\"\n                     }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": {
                "script": {
                  "script": {
                    "source": "doc['num1'].value > 1",
                    "lang": "painless"
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/script-query.asciidoc",
      "line": 52
    },
    "digest": "c4459f98de5decb37b8c403885f4b226",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"filter\" : {\n                \"script\" : {\n                    \"script\" : {\n                        \"source\" : \"doc['num1'].value > params.param1\",\n                        \"lang\"   : \"painless\",\n                        \"params\" : {\n                            \"param1\" : 5\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": {
                "script": {
                  "script": {
                    "source": "doc['num1'].value > params.param1",
                    "lang": "painless",
                    "params": {
                      "param1": 5
                    }
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/script-score-query.asciidoc",
      "line": 18
    },
    "digest": "eb35bef392e0957d609f1a26481e048d",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"script_score\" : {\n            \"query\" : {\n                \"match\": { \"message\": \"elasticsearch\" }\n            },\n            \"script\" : {\n                \"source\" : \"doc['likes'].value / 10 \"\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "match": {
                  "message": "elasticsearch"
                }
              },
              "script": {
                "source": "doc['likes'].value / 10 "
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "vectors/vector-functions.asciidoc",
      "line": 15
    },
    "digest": "f4bdad6ecd4a53cabee95883731e1bc7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_dense_vector\": {\n        \"type\": \"dense_vector\",\n        \"dims\": 3\n      },\n      \"status\" : {\n        \"type\" : \"keyword\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"my_dense_vector\": [0.5, 10, 6],\n  \"status\" : \"published\"\n}\n\nPUT my_index/_doc/2\n{\n  \"my_dense_vector\": [-0.5, 10, 10],\n  \"status\" : \"published\"\n}\n\nPOST my_index/_refresh\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_dense_vector": {
                "type": "dense_vector",
                "dims": 3
              },
              "status": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_dense_vector": [
            0.5,
            10,
            6
          ],
          "status": "published"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "my_dense_vector": [
            -0.5,
            10,
            10
          ],
          "status": "published"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/my_index/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.refresh"
      }
    ]
  },
  {
    "source_location": {
      "file": "vectors/vector-functions.asciidoc",
      "line": 52
    },
    "digest": "fb7eaa05e4b418cb3da04e56d3eefa71",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\" : {\n        \"bool\" : {\n          \"filter\" : {\n            \"term\" : {\n              \"status\" : \"published\" <1>\n            }\n          }\n        }\n      },\n      \"script\": {\n        \"source\": \"cosineSimilarity(params.query_vector, 'my_dense_vector') + 1.0\", <2>\n        \"params\": {\n          \"query_vector\": [4, 3.4, -0.2]  <3>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "bool": {
                  "filter": {
                    "term": {
                      "status": "published"
                    }
                  }
                }
              },
              "script": {
                "source": "cosineSimilarity(params.query_vector, 'my_dense_vector') + 1.0",
                "params": {
                  "query_vector": [
                    4,
                    3.4,
                    -0.2
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "vectors/vector-functions.asciidoc",
      "line": 88
    },
    "digest": "5f3793dbe5223db53fc67861388ecb10",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\" : {\n        \"bool\" : {\n          \"filter\" : {\n            \"term\" : {\n              \"status\" : \"published\"\n            }\n          }\n        }\n      },\n      \"script\": {\n        \"source\": \"\"\"\n          double value = dotProduct(params.query_vector, 'my_dense_vector');\n          return sigmoid(1, Math.E, -value); <1>\n        \"\"\",\n        \"params\": {\n          \"query_vector\": [4, 3.4, -0.2]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "bool": {
                  "filter": {
                    "term": {
                      "status": "published"
                    }
                  }
                }
              },
              "script": {
                "source": "\n          double value = dotProduct(params.query_vector, 'my_dense_vector');\n          return sigmoid(1, Math.E, -value); \n        ",
                "params": {
                  "query_vector": [
                    4,
                    3.4,
                    -0.2
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "vectors/vector-functions.asciidoc",
      "line": 123
    },
    "digest": "7453c76da9d525b8c5fb5b86f1207667",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\" : {\n        \"bool\" : {\n          \"filter\" : {\n            \"term\" : {\n              \"status\" : \"published\"\n            }\n          }\n        }\n      },\n      \"script\": {\n        \"source\": \"1 / (1 + l1norm(params.queryVector, 'my_dense_vector'))\", <1>\n        \"params\": {\n          \"queryVector\": [4, 3.4, -0.2]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "bool": {
                  "filter": {
                    "term": {
                      "status": "published"
                    }
                  }
                }
              },
              "script": {
                "source": "1 / (1 + l1norm(params.queryVector, 'my_dense_vector'))",
                "params": {
                  "queryVector": [
                    4,
                    3.4,
                    -0.2
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "vectors/vector-functions.asciidoc",
      "line": 162
    },
    "digest": "98e4bd19706e57405b6e810de72ea4df",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\" : {\n        \"bool\" : {\n          \"filter\" : {\n            \"term\" : {\n              \"status\" : \"published\"\n            }\n          }\n        }\n      },\n      \"script\": {\n        \"source\": \"1 / (1 + l2norm(params.queryVector, 'my_dense_vector'))\",\n        \"params\": {\n          \"queryVector\": [4, 3.4, -0.2]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "bool": {
                  "filter": {
                    "term": {
                      "status": "published"
                    }
                  }
                }
              },
              "script": {
                "source": "1 / (1 + l2norm(params.queryVector, 'my_dense_vector'))",
                "params": {
                  "queryVector": [
                    4,
                    3.4,
                    -0.2
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/script-score-query.asciidoc",
      "line": 345
    },
    "digest": "e5240a59149072e8bc7532603fa813bd",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_explain/0\n{\n    \"query\" : {\n        \"script_score\" : {\n            \"query\" : {\n                \"match\": { \"message\": \"elasticsearch\" }\n            },\n            \"script\" : {\n                \"source\" : \"\"\"\n                  long likes = doc['likes'].value;\n                  double normalizedLikes = likes / 10;\n                  if (explanation != null) {\n                    explanation.set('normalized likes = likes / 10 = ' + likes + ' / 10 = ' + normalizedLikes);\n                  }\n                  return normalizedLikes;\n                \"\"\"\n            }\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_explain/0",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "match": {
                  "message": "elasticsearch"
                }
              },
              "script": {
                "source": "\n                  long likes = doc['likes'].value;\n                  double normalizedLikes = likes / 10;\n                  if (explanation != null) {\n                    explanation.set('normalized likes = likes / 10 = ' + likes + ' / 10 = ' + normalizedLikes);\n                  }\n                  return normalizedLikes;\n                "
              }
            }
          }
        },
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/wrapper-query.asciidoc",
      "line": 10
    },
    "digest": "6159a7d56e93e14a31fc06644c803a38",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"wrapper\": {\n            \"query\" : \"eyJ0ZXJtIiA6IHsgInVzZXIiIDogIktpbWNoeSIgfX0=\" <1>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "wrapper": {
              "query": "eyJ0ZXJtIiA6IHsgInVzZXIiIDogIktpbWNoeSIgfX0="
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/pinned-query.asciidoc",
      "line": 14
    },
    "digest": "f36a6f32ef72b326f13317bd34c6353f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"pinned\" : {\n            \"ids\" : [\"1\", \"4\", \"100\"],\n            \"organic\" : {\n            \t\"match\":{\n            \t\t\"description\": \"iphone\"\n            \t}\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "pinned": {
              "ids": [
                "1",
                "4",
                "100"
              ],
              "organic": {
                "match": {
                  "description": "iphone"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/exists-query.asciidoc",
      "line": 20
    },
    "digest": "3342c69b2c2303247217532956fcce85",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"exists\": {\n            \"field\": \"user\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "exists": {
              "field": "user"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/exists-query.asciidoc",
      "line": 56
    },
    "digest": "43af86de5e49aa06070092fffc138208",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\": {\n            \"must_not\": {\n                \"exists\": {\n                    \"field\": \"user\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must_not": {
                "exists": {
                  "field": "user"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/fuzzy-query.asciidoc",
      "line": 29
    },
    "digest": "10dd8b5da64f1f6af031706dd50bc9b5",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"fuzzy\": {\n            \"user\": {\n                \"value\": \"ki\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "fuzzy": {
              "user": {
                "value": "ki"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/fuzzy-query.asciidoc",
      "line": 46
    },
    "digest": "8baebb670ca5624d7920ccac4afdff06",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"fuzzy\": {\n            \"user\": {\n                \"value\": \"ki\",\n                \"fuzziness\": \"AUTO\",\n                \"max_expansions\": 50,\n                \"prefix_length\": 0,\n                \"transpositions\": true,\n                \"rewrite\": \"constant_score\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "fuzzy": {
              "user": {
                "value": "ki",
                "fuzziness": "AUTO",
                "max_expansions": 50,
                "prefix_length": 0,
                "transpositions": true,
                "rewrite": "constant_score"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/ids-query.asciidoc",
      "line": 13
    },
    "digest": "84cdb6a7a5464af7ef95b3d546883870",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"ids\" : {\n            \"values\" : [\"1\", \"4\", \"100\"]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "ids": {
              "values": [
                "1",
                "4",
                "100"
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/prefix-query.asciidoc",
      "line": 16
    },
    "digest": "81514791349e0e79ac565160e42889c0",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"prefix\": {\n            \"user\": {\n                \"value\": \"ki\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "prefix": {
              "user": {
                "value": "ki"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/prefix-query.asciidoc",
      "line": 53
    },
    "digest": "32ea547cefa2976c8c3c2eb45a2a4ff4",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"prefix\" : { \"user\" : \"ki\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "prefix": {
              "user": "ki"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/range-query.asciidoc",
      "line": 16
    },
    "digest": "a116949e446f34dc25ae57d4b703d0c1",
    "lang": "console",
    "found": [
      "php",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"range\" : {\n            \"age\" : {\n                \"gte\" : 10,\n                \"lte\" : 20,\n                \"boost\" : 2.0\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "range": {
              "age": {
                "gte": 10,
                "lte": 20,
                "boost": 2
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/range-query.asciidoc",
      "line": 157
    },
    "digest": "67ceac4bf2d9ac7cc500390544cdcb41",
    "lang": "console",
    "found": [
      "php",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"range\" : {\n            \"timestamp\" : {\n                \"gte\" : \"now-1d/d\",\n                \"lt\" :  \"now/d\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "range": {
              "timestamp": {
                "gte": "now-1d/d",
                "lt": "now/d"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/range-query.asciidoc",
      "line": 219
    },
    "digest": "5c2f486c27bd5346e512265f93375d16",
    "lang": "console",
    "found": [
      "php",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n  \"query\": {\n    \"range\": {\n      \"timestamp\": {\n        \"time_zone\": \"+01:00\",        <1>\n        \"gte\": \"2020-01-01T00:00:00\", <2>\n        \"lte\": \"now\"                  <3>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "range": {
              "timestamp": {
                "time_zone": "+01:00",
                "gte": "2020-01-01T00:00:00",
                "lte": "now"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/regexp-query.asciidoc",
      "line": 23
    },
    "digest": "618d5f3d35921d8cb7e9ccfbe9a4c3e3",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"regexp\": {\n            \"user\": {\n                \"value\": \"k.*y\",\n                \"flags\" : \"ALL\",\n                \"max_determinized_states\": 10000,\n                \"rewrite\": \"constant_score\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "regexp": {
              "user": {
                "value": "k.*y",
                "flags": "ALL",
                "max_determinized_states": 10000,
                "rewrite": "constant_score"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 28
    },
    "digest": "d0a8a938a2fa913b6fdbc871079a59dd",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"term\": {\n            \"user\": {\n                \"value\": \"Kimchy\",\n                \"boost\": 1.0\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": {
                "value": "Kimchy",
                "boost": 1
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 94
    },
    "digest": "2a1de18774f9c68cafa169847832b2bc",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"full_text\" : { \"type\" : \"text\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "full_text": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 113
    },
    "digest": "d4b4cefba4318caeba7480187faf2b13",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index/_doc/1\n{\n  \"full_text\":   \"Quick Brown Foxes!\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "full_text": "Quick Brown Foxes!"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 132
    },
    "digest": "cdedd5f33f7e5f7acde561e97bff61de",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET my_index/_search?pretty\n{\n  \"query\": {\n    \"term\": {\n      \"full_text\": \"Quick Brown Foxes!\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "term": {
              "full_text": "Quick Brown Foxes!"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 165
    },
    "digest": "a80f5db4357bb25b8704d374c18318ed",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET my_index/_search?pretty\n{\n  \"query\": {\n    \"match\": {\n      \"full_text\": \"Quick Brown Foxes!\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "match": {
              "full_text": "Quick Brown Foxes!"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/term-query.asciidoc",
      "line": 186
    },
    "digest": "79cf697879cf060401557649bef22730",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 1,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 0.8630463,\n    \"hits\" : [\n      {\n        \"_index\" : \"my_index\",\n        \"_id\" : \"1\",\n        \"_score\" : 0.8630463,\n        \"_source\" : {\n          \"full_text\" : \"Quick Brown Foxes!\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 19
    },
    "digest": "0c4ad860a485fe53d8140ad3ccd11dcf",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"terms\" : {\n            \"user\" : [\"kimchy\", \"elasticsearch\"],\n            \"boost\" : 1.0\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "terms": {
              "user": [
                "kimchy",
                "elasticsearch"
              ],
              "boost": 1
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 127
    },
    "digest": "9e56d79ad9a02b642c361f0b85dd95d7",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"color\" : { \"type\" : \"keyword\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "color": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 145
    },
    "digest": "d3088d5fa59b3ab110f64fb4f9b0065c",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index/_doc/1\n{\n  \"color\":   [\"blue\", \"green\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "color": [
            "blue",
            "green"
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 160
    },
    "digest": "8c5977410335d58217e0626618ce6641",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index/_doc/2\n{\n  \"color\":   \"blue\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "color": "blue"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 186
    },
    "digest": "d1bcf2eb63a462bfdcf01a68e68d5b4a",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET my_index/_search?pretty\n{\n  \"query\": {\n    \"terms\": {\n        \"color\" : {\n            \"index\" : \"my_index\",\n            \"id\" : \"2\",\n            \"path\" : \"color\"\n        }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "terms": {
              "color": {
                "index": "my_index",
                "id": "2",
                "path": "color"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-query.asciidoc",
      "line": 206
    },
    "digest": "ca09b9f5e1b649ec0b311ac8f4f9db23",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 17,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 2,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"my_index\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"color\" : [\n            \"blue\",\n            \"green\"\n          ]\n        }\n      },\n      {\n        \"_index\" : \"my_index\",\n        \"_id\" : \"2\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"color\" : \"blue\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "query-dsl/terms-set-query.asciidoc",
      "line": 49
    },
    "digest": "f29bc8beaa219c21be3204e010f5a509",
    "lang": "console",
    "found": [],
    "source": "PUT /job-candidates\n{\n    \"mappings\": {\n        \"properties\": {\n            \"name\": {\n                \"type\": \"keyword\"\n            },\n            \"programming_languages\": {\n                \"type\": \"keyword\"\n            },\n            \"required_matches\": {\n                \"type\": \"long\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/job-candidates",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name": {
                "type": "keyword"
              },
              "programming_languages": {
                "type": "keyword"
              },
              "required_matches": {
                "type": "long"
              }
            }
          }
        },
        "params": {
          "index": "job-candidates"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-set-query.asciidoc",
      "line": 85
    },
    "digest": "6866beb749ef6dee19d2cb56edc0a9ab",
    "lang": "console",
    "found": [],
    "source": "PUT /job-candidates/_doc/1?refresh\n{\n    \"name\": \"Jane Smith\",\n    \"programming_languages\": [\"c++\", \"java\"],\n    \"required_matches\": 2\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/job-candidates/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "Jane Smith",
          "programming_languages": [
            "c++",
            "java"
          ],
          "required_matches": 2
        },
        "params": {
          "index": "job-candidates",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-set-query.asciidoc",
      "line": 107
    },
    "digest": "f7bccd5a51a4000215767e9a6454327f",
    "lang": "console",
    "found": [],
    "source": "PUT /job-candidates/_doc/2?refresh\n{\n    \"name\": \"Jason Response\",\n    \"programming_languages\": [\"java\", \"php\"],\n    \"required_matches\": 2\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/job-candidates/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "name": "Jason Response",
          "programming_languages": [
            "java",
            "php"
          ],
          "required_matches": 2
        },
        "params": {
          "index": "job-candidates",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-set-query.asciidoc",
      "line": 136
    },
    "digest": "c5040ac6dc2922f191113e7a5fd5a699",
    "lang": "console",
    "found": [],
    "source": "GET /job-candidates/_search\n{\n    \"query\": {\n        \"terms_set\": {\n            \"programming_languages\": {\n                \"terms\": [\"c++\", \"java\", \"php\"],\n                \"minimum_should_match_field\": \"required_matches\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/job-candidates/_search",
        "query": null,
        "body": {
          "query": {
            "terms_set": {
              "programming_languages": {
                "terms": [
                  "c++",
                  "java",
                  "php"
                ],
                "minimum_should_match_field": "required_matches"
              }
            }
          }
        },
        "params": {
          "index": "job-candidates"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/terms-set-query.asciidoc",
      "line": 214
    },
    "digest": "cf2e6e604c67175398f6c217b9e86127",
    "lang": "console",
    "found": [],
    "source": "GET /job-candidates/_search\n{\n    \"query\": {\n        \"terms_set\": {\n            \"programming_languages\": {\n                \"terms\": [\"c++\", \"java\", \"php\"],\n                \"minimum_should_match_script\": {\n                   \"source\": \"Math.min(params.num_terms, doc['required_matches'].value)\"\n                },\n                \"boost\": 1.0\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/job-candidates/_search",
        "query": null,
        "body": {
          "query": {
            "terms_set": {
              "programming_languages": {
                "terms": [
                  "c++",
                  "java",
                  "php"
                ],
                "minimum_should_match_script": {
                  "source": "Math.min(params.num_terms, doc['required_matches'].value)"
                },
                "boost": 1
              }
            }
          }
        },
        "params": {
          "index": "job-candidates"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "query-dsl/wildcard-query.asciidoc",
      "line": 21
    },
    "digest": "d31062ff8c015387889fed4ad86fd914",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\": {\n        \"wildcard\": {\n            \"user\": {\n                \"value\": \"ki*y\",\n                \"boost\": 1.0,\n                \"rewrite\": \"constant_score\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "wildcard": {
              "user": {
                "value": "ki*y",
                "boost": 1,
                "rewrite": "constant_score"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 36
    },
    "digest": "a8d39396d741e768083808bb11443e9b",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"cluster_one\": {\n          \"seeds\": [\n            \"127.0.0.1:9300\"\n          ]\n        },\n        \"cluster_two\": {\n          \"seeds\": [\n            \"127.0.0.1:9301\"\n          ]\n        },\n        \"cluster_three\": {\n          \"seeds\": [\n            \"127.0.0.1:9302\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "cluster_one": {
                  "seeds": [
                    "127.0.0.1:9300"
                  ]
                },
                "cluster_two": {
                  "seeds": [
                    "127.0.0.1:9301"
                  ]
                },
                "cluster_three": {
                  "seeds": [
                    "127.0.0.1:9302"
                  ]
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 73
    },
    "digest": "972c0c1b6c0b8327fadd77cc1c71b532",
    "lang": "console",
    "found": [],
    "source": "GET /cluster_one:twitter/_search\n{\n  \"query\": {\n    \"match\": {\n      \"user\": \"kimchy\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/cluster_one:twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "cluster_one:twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 89
    },
    "digest": "406b27ffe91927d52e03fd104b58c6d1",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 150,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0,\n    \"skipped\": 0\n  },\n  \"_clusters\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"cluster_one:twitter\", <1>\n        \"_id\": \"0\",\n        \"_score\": 1,\n        \"_source\": {\n          \"user\": \"kimchy\",\n          \"date\": \"2009-11-15T14:12:12\",\n          \"message\": \"trying out Elasticsearch\",\n          \"likes\": 0\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 144
    },
    "digest": "6a570214755e38fd587e406d5b19b371",
    "lang": "console",
    "found": [],
    "source": "GET /twitter,cluster_one:twitter,cluster_two:twitter/_search\n{\n  \"query\": {\n    \"match\": {\n      \"user\": \"kimchy\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter,cluster_one:twitter,cluster_two:twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter,cluster_one:twitter,cluster_two:twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 159
    },
    "digest": "995347a8d6d131a9c0a664a357afcf1f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 150,\n  \"timed_out\": false,\n  \"num_reduce_phases\": 4,\n  \"_shards\": {\n    \"total\": 3,\n    \"successful\": 3,\n    \"failed\": 0,\n    \"skipped\": 0\n  },\n  \"_clusters\": {\n    \"total\": 3,\n    \"successful\": 3,\n    \"skipped\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 3,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 1,\n    \"hits\": [\n      {\n        \"_index\": \"twitter\", <1>\n        \"_id\": \"0\",\n        \"_score\": 2,\n        \"_source\": {\n          \"user\": \"kimchy\",\n          \"date\": \"2009-11-15T14:12:12\",\n          \"message\": \"trying out Elasticsearch\",\n          \"likes\": 0\n        }\n      },\n      {\n        \"_index\": \"cluster_one:twitter\", <2>\n        \"_id\": \"0\",\n        \"_score\": 1,\n        \"_source\": {\n          \"user\": \"kimchy\",\n          \"date\": \"2009-11-15T14:12:12\",\n          \"message\": \"trying out Elasticsearch\",\n          \"likes\": 0\n        }\n      },\n      {\n        \"_index\": \"cluster_two:twitter\", <3>\n        \"_id\": \"0\",\n        \"_score\": 1,\n        \"_source\": {\n          \"user\": \"kimchy\",\n          \"date\": \"2009-11-15T14:12:12\",\n          \"message\": \"trying out Elasticsearch\",\n          \"likes\": 0\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "modules/cross-cluster-search.asciidoc",
      "line": 243
    },
    "digest": "9949bcc64c9cd6f4041819546d7fce78",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.remote.cluster_two.skip_unavailable\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.remote.cluster_two.skip_unavailable": true
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 24
    },
    "digest": "e62cf588bfc891504bbf933af86eed7c",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1\n{\n  \"my_field\": 5\n}\n\nGET my_index/_search\n{\n  \"script_fields\": {\n    \"my_doubled_field\": {\n      \"script\": {\n        \"lang\":   \"expression\",\n        \"source\": \"doc['my_field'] * multiplier\",\n        \"params\": {\n          \"multiplier\": 2\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_field": 5
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "script_fields": {
            "my_doubled_field": {
              "script": {
                "lang": "expression",
                "source": "doc['my_field'] * multiplier",
                "params": {
                  "multiplier": 2
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 147
    },
    "digest": "40a2bbc35a887d6c7dda3cca1fe7aa58",
    "lang": "console",
    "found": [],
    "source": "POST _scripts/calculate-score\n{\n  \"script\": {\n    \"lang\": \"painless\",\n    \"source\": \"Math.log(_score * 2) + params.my_modifier\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_scripts/calculate-score",
        "query": null,
        "body": {
          "script": {
            "lang": "painless",
            "source": "Math.log(_score * 2) + params.my_modifier"
          }
        },
        "params": {
          "id": "calculate-score"
        },
        "api": "put_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 163
    },
    "digest": "548a09b4630ae38cf8af33581ae614e6",
    "lang": "console",
    "found": [],
    "source": "POST _scripts/calculate-score/score\n{\n  \"script\": {\n    \"lang\": \"painless\",\n    \"source\": \"Math.log(_score * 2) + params.my_modifier\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_scripts/calculate-score/score",
        "query": null,
        "body": {
          "script": {
            "lang": "painless",
            "source": "Math.log(_score * 2) + params.my_modifier"
          }
        },
        "params": {
          "id": "calculate-score",
          "context": "score"
        },
        "api": "put_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 177
    },
    "digest": "08e08feb514b24006e13f258d617d873",
    "lang": "console",
    "found": [],
    "source": "GET _scripts/calculate-score",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_scripts/calculate-score",
        "query": null,
        "body": null,
        "params": {
          "id": "calculate-score"
        },
        "api": "get_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 185
    },
    "digest": "b3423b00c6336ee0a1720b4ed7031cd7",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n  \"query\": {\n    \"script_score\": {\n      \"query\": {\n        \"match\": {\n            \"message\": \"some message\"\n        }\n      },\n      \"script\": {\n        \"id\": \"calculate-score\",\n        \"params\": {\n          \"my_modifier\": 2\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "match": {
                  "message": "some message"
                }
              },
              "script": {
                "id": "calculate-score",
                "params": {
                  "my_modifier": 2
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/using.asciidoc",
      "line": 210
    },
    "digest": "4061fd5ba7221ca85805ed14d59a6bc5",
    "lang": "console",
    "found": [],
    "source": "DELETE _scripts/calculate-score",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_scripts/calculate-score",
        "query": null,
        "body": null,
        "params": {
          "id": "calculate-score"
        },
        "api": "delete_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/fields.asciidoc",
      "line": 46
    },
    "digest": "729f4abc0b4edaf6b58bd9e7b3fd5a8b",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"text\": \"quick brown fox\",\n  \"popularity\": 1\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"text\": \"quick fox\",\n  \"popularity\": 5\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"match\": {\n          \"text\": \"quick brown fox\"\n        }\n      },\n      \"script_score\": {\n        \"script\": {\n          \"lang\": \"expression\",\n          \"source\": \"_score * doc['popularity']\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "quick brown fox",
          "popularity": 1
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "quick fox",
          "popularity": 5
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match": {
                  "text": "quick brown fox"
                }
              },
              "script_score": {
                "script": {
                  "lang": "expression",
                  "source": "_score * doc['popularity']"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/fields.asciidoc",
      "line": 90
    },
    "digest": "0dfe9d6724c7bd11094bb4a0796e7ac7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"cost_price\": 100\n}\n\nGET my_index/_search\n{\n  \"script_fields\": {\n    \"sales_price\": {\n      \"script\": {\n        \"lang\":   \"expression\",\n        \"source\": \"doc['cost_price'] * markup\",\n        \"params\": {\n          \"markup\": 0.2\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "cost_price": 100
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "script_fields": {
            "sales_price": {
              "script": {
                "lang": "expression",
                "source": "doc['cost_price'] * markup",
                "params": {
                  "markup": 0.2
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/fields.asciidoc",
      "line": 172
    },
    "digest": "2a9c29afe23e30a68dd6e30ea22f5d42",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"title\": { <1>\n        \"type\": \"text\"\n      },\n      \"first_name\": {\n        \"type\": \"text\",\n        \"store\": true\n      },\n      \"last_name\": {\n        \"type\": \"text\",\n        \"store\": true\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1?refresh\n{\n  \"title\": \"Mr\",\n  \"first_name\": \"Barry\",\n  \"last_name\": \"White\"\n}\n\nGET my_index/_search\n{\n  \"script_fields\": {\n    \"source\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"params._source.title + ' ' + params._source.first_name + ' ' + params._source.last_name\" <2>\n      }\n    },\n    \"stored_fields\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"params._fields['first_name'].value + ' ' + params._fields['last_name'].value\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text"
              },
              "first_name": {
                "type": "text",
                "store": true
              },
              "last_name": {
                "type": "text",
                "store": true
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Mr",
          "first_name": "Barry",
          "last_name": "White"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "script_fields": {
            "source": {
              "script": {
                "lang": "painless",
                "source": "params._source.title + ' ' + params._source.first_name + ' ' + params._source.last_name"
              }
            },
            "stored_fields": {
              "script": {
                "lang": "painless",
                "source": "params._fields['first_name'].value + ' ' + params._fields['last_name'].value"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "scripting/engine.asciidoc",
      "line": 28
    },
    "digest": "d9de409a4a197ce7cbe3714e07155d34",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"match\": {\n          \"body\": \"foo\"\n        }\n      },\n      \"functions\": [\n        {\n          \"script_score\": {\n            \"script\": {\n                \"source\": \"pure_df\",\n                \"lang\" : \"expert_scripts\",\n                \"params\": {\n                    \"field\": \"body\",\n                    \"term\": \"foo\"\n                }\n            }\n          }\n        }\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "function_score": {
              "query": {
                "match": {
                  "body": "foo"
                }
              },
              "functions": [
                {
                  "script_score": {
                    "script": {
                      "source": "pure_df",
                      "lang": "expert_scripts",
                      "params": {
                        "field": "body",
                        "term": "foo"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 137
    },
    "digest": "d8b2a88b5eca99d3691ad3cd40266736",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my-index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"age\":    { \"type\": \"integer\" },  <1>\n      \"email\":  { \"type\": \"keyword\"  }, <2>\n      \"name\":   { \"type\": \"text\"  }     <3>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "age": {
                "type": "integer"
              },
              "email": {
                "type": "keyword"
              },
              "name": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 166
    },
    "digest": "71ba9033107882f61cdc3b32fc73568d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my-index/_mapping\n{\n  \"properties\": {\n    \"employee-id\": {\n      \"type\": \"keyword\",\n      \"index\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "employee-id": {
              "type": "keyword",
              "index": false
            }
          }
        },
        "params": {
          "index": "my-index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 204
    },
    "digest": "609260ad1d5998be2ca09ff1fe237efa",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my-index/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my-index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 212
    },
    "digest": "df61238ba28b6aaf41edf247b01aa893",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my-index\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"age\" : {\n          \"type\" : \"integer\"\n        },\n        \"email\" : {\n          \"type\" : \"keyword\"\n        },\n        \"employee-id\" : {\n          \"type\" : \"keyword\",\n          \"index\" : false\n        },\n        \"name\" : {\n          \"type\" : \"text\"\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 250
    },
    "digest": "99a52be903945b17e734a1d02a57e958",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my-index/_mapping/field/employee-id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my-index/_mapping/field/employee-id",
        "query": null,
        "body": null,
        "params": {
          "index": "my-index",
          "fields": "employee-id"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping.asciidoc",
      "line": 258
    },
    "digest": "47a0f4c64e6debd190796fc38e58c9c0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my-index\" : {\n    \"mappings\" : {\n      \"employee-id\" : {\n        \"full_name\" : \"employee-id\",\n        \"mapping\" : {\n          \"employee-id\" : {\n            \"type\" : \"keyword\",\n            \"index\" : false\n          }\n        }\n      }\n    }\n  }\n}\n"
  },
  {
    "source_location": {
      "file": "mapping/types/alias.asciidoc",
      "line": 12
    },
    "digest": "2716453454dbf9c6dde2ea6850a62214",
    "lang": "console",
    "found": [],
    "source": "PUT trips\n{\n  \"mappings\": {\n    \"properties\": {\n      \"distance\": {\n        \"type\": \"long\"\n      },\n      \"route_length_miles\": {\n        \"type\": \"alias\",\n        \"path\": \"distance\" <1>\n      },\n      \"transit_mode\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n\nGET _search\n{\n  \"query\": {\n    \"range\" : {\n      \"route_length_miles\" : {\n        \"gte\" : 39\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/trips",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "distance": {
                "type": "long"
              },
              "route_length_miles": {
                "type": "alias",
                "path": "distance"
              },
              "transit_mode": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "trips"
        },
        "api": "indices.create"
      },
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "range": {
              "route_length_miles": {
                "gte": 39
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/alias.asciidoc",
      "line": 55
    },
    "digest": "a2dabdcbb661e7690166ae6d0de27e46",
    "lang": "console",
    "found": [],
    "source": "GET trips/_field_caps?fields=route_*,transit_mode",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/trips/_field_caps",
        "query": {
          "fields": "route_*,transit_mode"
        },
        "body": null,
        "params": {
          "index": "trips"
        },
        "api": "field_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/alias.asciidoc",
      "line": 86
    },
    "digest": "f6c9d72fa26cbedd0c3f9fa64a88c38a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n  \"query\" : {\n    \"match_all\": {}\n  },\n  \"_source\": \"route_length_miles\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "_source": "route_length_miles"
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/array.asciidoc",
      "line": 42
    },
    "digest": "4d6997c70a1851f9151443c0d38b532e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1\n{\n  \"message\": \"some arrays in this document...\",\n  \"tags\":  [ \"elasticsearch\", \"wow\" ], <1>\n  \"lists\": [ <2>\n    {\n      \"name\": \"prog_list\",\n      \"description\": \"programming list\"\n    },\n    {\n      \"name\": \"cool_list\",\n      \"description\": \"cool stuff list\"\n    }\n  ]\n}\n\nPUT my_index/_doc/2 <3>\n{\n  \"message\": \"no arrays in this document...\",\n  \"tags\":  \"elasticsearch\",\n  \"lists\": {\n    \"name\": \"prog_list\",\n    \"description\": \"programming list\"\n  }\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"tags\": \"elasticsearch\" <4>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "message": "some arrays in this document...",
          "tags": [
            "elasticsearch",
            "wow"
          ],
          "lists": [
            {
              "name": "prog_list",
              "description": "programming list"
            },
            {
              "name": "cool_list",
              "description": "cool stuff list"
            }
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "message": "no arrays in this document...",
          "tags": "elasticsearch",
          "lists": {
            "name": "prog_list",
            "description": "programming list"
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "tags": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/binary.asciidoc",
      "line": 12
    },
    "digest": "9296dd085f411739f5b0ec80eb9b9e27",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"type\": \"text\"\n      },\n      \"blob\": {\n        \"type\": \"binary\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"name\": \"Some binary blob\",\n  \"blob\": \"U29tZSBiaW5hcnkgYmxvYg==\" <1>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name": {
                "type": "text"
              },
              "blob": {
                "type": "binary"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "name": "Some binary blob",
          "blob": "U29tZSBiaW5hcnkgYmxvYg=="
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/boolean.asciidoc",
      "line": 22
    },
    "digest": "1c1be1df747c9f8ecc9f82e980387d8f",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"is_published\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST my_index/_doc/1\n{\n  \"is_published\": \"true\" <1>\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"is_published\": true <2>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "is_published": {
                "type": "boolean"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "is_published": "true"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "is_published": true
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/boolean.asciidoc",
      "line": 58
    },
    "digest": "636ec3c018ac15ec11caf6f3d835a08c",
    "lang": "console",
    "found": [],
    "source": "POST my_index/_doc/1\n{\n  \"is_published\": true\n}\n\nPOST my_index/_doc/2\n{\n  \"is_published\": false\n}\n\nGET my_index/_search\n{\n  \"aggs\": {\n    \"publish_state\": {\n      \"terms\": {\n        \"field\": \"is_published\"\n      }\n    }\n  },\n  \"script_fields\": {\n    \"is_published\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"doc['is_published'].value\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "is_published": true
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "is_published": false
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "aggs": {
            "publish_state": {
              "terms": {
                "field": "is_published"
              }
            }
          },
          "script_fields": {
            "is_published": {
              "script": {
                "lang": "painless",
                "source": "doc['is_published'].value"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/date.asciidoc",
      "line": 35
    },
    "digest": "645136747d37368a14ab34de8bd046c6",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\": \"date\" <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{ \"date\": \"2015-01-01\" } <2>\n\nPUT my_index/_doc/2\n{ \"date\": \"2015-01-01T12:10:30Z\" } <3>\n\nPUT my_index/_doc/3\n{ \"date\": 1420070400001 } <4>\n\nGET my_index/_search\n{\n  \"sort\": { \"date\": \"asc\"} <5>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "date": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "date": "2015-01-01"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "date": "2015-01-01T12:10:30Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": null,
        "body": {
          "date": 1420070400001
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "sort": {
            "date": "asc"
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/date.asciidoc",
      "line": 77
    },
    "digest": "e2a042c629429855c3bcaefffb26b7fa",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\":   \"date\",\n        \"format\": \"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "date": {
                "type": "date",
                "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/date_nanos.asciidoc",
      "line": 32
    },
    "digest": "5e11eb4d328005434b19bbb9b11a3685",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\": \"date_nanos\" <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{ \"date\": \"2015-01-01\" } <2>\n\nPUT my_index/_doc/2\n{ \"date\": \"2015-01-01T12:10:30.123456789Z\" } <3>\n\nPUT my_index/_doc/3\n{ \"date\": 1420070400 } <4>\n\nGET my_index/_search\n{\n  \"sort\": { \"date\": \"asc\"} <5>\n}\n\nGET my_index/_search\n{\n  \"script_fields\" : {\n    \"my_field\" : {\n      \"script\" : {\n        \"lang\" : \"painless\",\n        \"source\" : \"doc['date'].value.nano\" <6>\n      }\n    }\n  }\n}\n\nGET my_index/_search\n{\n  \"docvalue_fields\" : [\n    {\n      \"field\" : \"date\",\n      \"format\": \"strict_date_time\" <7>\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "date": {
                "type": "date_nanos"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "date": "2015-01-01"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "date": "2015-01-01T12:10:30.123456789Z"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": null,
        "body": {
          "date": 1420070400
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "sort": {
            "date": "asc"
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "script_fields": {
            "my_field": {
              "script": {
                "lang": "painless",
                "source": "doc['date'].value.nano"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "docvalue_fields": [
            {
              "field": "date",
              "format": "strict_date_time"
            }
          ]
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/dense-vector.asciidoc",
      "line": 20
    },
    "digest": "7c7b74084cc9f18b085c25a208bd1306",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_vector\": {\n        \"type\": \"dense_vector\",\n        \"dims\": 3  <1>\n      },\n      \"my_text\" : {\n        \"type\" : \"keyword\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"my_text\" : \"text1\",\n  \"my_vector\" : [0.5, 10, 6]\n}\n\nPUT my_index/_doc/2\n{\n  \"my_text\" : \"text2\",\n  \"my_vector\" : [-0.5, 10, 10]\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_vector": {
                "type": "dense_vector",
                "dims": 3
              },
              "my_text": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_text": "text1",
          "my_vector": [
            0.5,
            10,
            6
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "my_text": "text2",
          "my_vector": [
            -0.5,
            10,
            10
          ]
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/histogram.asciidoc",
      "line": 73
    },
    "digest": "7d6b1797b1178e96d287831a94bb9658",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_histogram\": {\n        \"type\" : \"histogram\"\n      },\n      \"my_text\" : {\n        \"type\" : \"keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_histogram": {
                "type": "histogram"
              },
              "my_text": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/histogram.asciidoc",
      "line": 93
    },
    "digest": "09774dd1a8613672844caadb2bc8dc1e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1\n{\n  \"my_text\" : \"histogram_1\",\n  \"my_histogram\" : {\n      \"values\" : [0.1, 0.2, 0.3, 0.4, 0.5], <1>\n      \"counts\" : [3, 7, 23, 12, 6] <2>\n   }\n}\n\nPUT my_index/_doc/2\n{\n  \"my_text\" : \"histogram_2\",\n  \"my_histogram\" : {\n      \"values\" : [0.1, 0.25, 0.35, 0.4, 0.45, 0.5], <1>\n      \"counts\" : [8, 17, 8, 7, 6, 2] <2>\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_text": "histogram_1",
          "my_histogram": {
            "values": [
              0.1,
              0.2,
              0.3,
              0.4,
              0.5
            ],
            "counts": [
              3,
              7,
              23,
              12,
              6
            ]
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "my_text": "histogram_2",
          "my_histogram": {
            "values": [
              0.1,
              0.25,
              0.35,
              0.4,
              0.45,
              0.5
            ],
            "counts": [
              8,
              17,
              8,
              7,
              6,
              2
            ]
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/flattened.asciidoc",
      "line": 38
    },
    "digest": "8aa74aee3dcf4b34028e4c5e1c1ed27b",
    "lang": "console",
    "found": [],
    "source": "PUT bug_reports\n{\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\"\n      },\n      \"labels\": {\n        \"type\": \"flattened\"\n      }\n    }\n  }\n}\n\nPOST bug_reports/_doc/1\n{\n  \"title\": \"Results are not sorted correctly.\",\n  \"labels\": {\n    \"priority\": \"urgent\",\n    \"release\": [\"v1.2.5\", \"v1.3.0\"],\n    \"timestamp\": {\n      \"created\": 1541458026,\n      \"closed\": 1541457010\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/bug_reports",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text"
              },
              "labels": {
                "type": "flattened"
              }
            }
          }
        },
        "params": {
          "index": "bug_reports"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/bug_reports/_doc/1",
        "query": null,
        "body": {
          "title": "Results are not sorted correctly.",
          "labels": {
            "priority": "urgent",
            "release": [
              "v1.2.5",
              "v1.3.0"
            ],
            "timestamp": {
              "created": 1541458026,
              "closed": 1541457010
            }
          }
        },
        "params": {
          "index": "bug_reports",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/flattened.asciidoc",
      "line": 76
    },
    "digest": "169b39bb889ecd47541bed3e48725488",
    "lang": "console",
    "found": [],
    "source": "POST bug_reports/_search\n{\n  \"query\": {\n    \"term\": {\"labels\": \"urgent\"}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/bug_reports/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "labels": "urgent"
            }
          }
        },
        "params": {
          "index": "bug_reports"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/flattened.asciidoc",
      "line": 88
    },
    "digest": "2f4a55dfeba8851b306ef9c1b216ef54",
    "lang": "console",
    "found": [],
    "source": "POST bug_reports/_search\n{\n  \"query\": {\n    \"term\": {\"labels.release\": \"v1.3.0\"}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/bug_reports/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "labels.release": "v1.3.0"
            }
          }
        },
        "params": {
          "index": "bug_reports"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-point.asciidoc",
      "line": 20
    },
    "digest": "f1b512400f2f7ca0b0f2e4bb45a8b2fe",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"location\": {\n        \"type\": \"geo_point\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"text\": \"Geo-point as an object\",\n  \"location\": { <1>\n    \"lat\": 41.12,\n    \"lon\": -71.34\n  }\n}\n\nPUT my_index/_doc/2\n{\n  \"text\": \"Geo-point as a string\",\n  \"location\": \"41.12,-71.34\" <2>\n}\n\nPUT my_index/_doc/3\n{\n  \"text\": \"Geo-point as a geohash\",\n  \"location\": \"drm3btev3e86\" <3>\n}\n\nPUT my_index/_doc/4\n{\n  \"text\": \"Geo-point as an array\",\n  \"location\": [ -71.34, 41.12 ] <4>\n}\n\nPUT my_index/_doc/5\n{\n  \"text\": \"Geo-point as a WKT POINT primitive\",\n  \"location\" : \"POINT (-71.34 41.12)\" <5>\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"geo_bounding_box\": { <6>\n      \"location\": {\n        \"top_left\": {\n          \"lat\": 42,\n          \"lon\": -72\n        },\n        \"bottom_right\": {\n          \"lat\": 40,\n          \"lon\": -74\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Geo-point as an object",
          "location": {
            "lat": 41.12,
            "lon": -71.34
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "text": "Geo-point as a string",
          "location": "41.12,-71.34"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": null,
        "body": {
          "text": "Geo-point as a geohash",
          "location": "drm3btev3e86"
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/4",
        "query": null,
        "body": {
          "text": "Geo-point as an array",
          "location": [
            -71.34,
            41.12
          ]
        },
        "params": {
          "index": "my_index",
          "id": "4"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/5",
        "query": null,
        "body": {
          "text": "Geo-point as a WKT POINT primitive",
          "location": "POINT (-71.34 41.12)"
        },
        "params": {
          "index": "my_index",
          "id": "5"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "geo_bounding_box": {
              "location": {
                "top_left": {
                  "lat": 42,
                  "lon": -72
                },
                "bottom_right": {
                  "lat": 40,
                  "lon": -74
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 212
    },
    "digest": "3fef996cf6795e881918ffedc273c642",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_shape\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_shape"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 304
    },
    "digest": "f851d1be5d5e5fe5455ba81344d01133",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"point\",\n        \"coordinates\" : [-77.03653, 38.897676]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "point",
            "coordinates": [
              -77.03653,
              38.897676
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 317
    },
    "digest": "d673a2c008015ac6f754661ae336131c",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POINT (-77.03653 38.897676)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POINT (-77.03653 38.897676)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 334
    },
    "digest": "21a9348800406e09b8bdaab192245096",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"linestring\",\n        \"coordinates\" : [[-77.03653, 38.897676], [-77.009051, 38.889939]]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "linestring",
            "coordinates": [
              [
                -77.03653,
                38.897676
              ],
              [
                -77.009051,
                38.889939
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 347
    },
    "digest": "48625e23b05d33977451cde7b98b634a",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"LINESTRING (-77.03653 38.897676, -77.009051 38.889939)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "LINESTRING (-77.03653 38.897676, -77.009051 38.889939)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 366
    },
    "digest": "1d6ee162260a21f6e4597eadbea88650",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"coordinates\" : [\n            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "coordinates": [
              [
                [
                  100,
                  0
                ],
                [
                  101,
                  0
                ],
                [
                  101,
                  1
                ],
                [
                  100,
                  1
                ],
                [
                  100,
                  0
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 381
    },
    "digest": "18c34a2c5820e330a125dfddf2624c69",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 393
    },
    "digest": "f83e3ea198f6e87046aab2c5dea60d61",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"coordinates\" : [\n            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0] ],\n            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "coordinates": [
              [
                [
                  100,
                  0
                ],
                [
                  101,
                  0
                ],
                [
                  101,
                  1
                ],
                [
                  100,
                  1
                ],
                [
                  100,
                  0
                ]
              ],
              [
                [
                  100.2,
                  0.2
                ],
                [
                  100.8,
                  0.2
                ],
                [
                  100.8,
                  0.8
                ],
                [
                  100.2,
                  0.8
                ],
                [
                  100.2,
                  0.2
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 409
    },
    "digest": "00eb71b03b73e605da6368041a64a8ad",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POLYGON ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 436
    },
    "digest": "4c42c8835876a2271e7ba63d6bd3149f",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"coordinates\" : [\n            [ [-177.0, 10.0], [176.0, 15.0], [172.0, 0.0], [176.0, -15.0], [-177.0, -10.0], [-177.0, 10.0] ],\n            [ [178.2, 8.2], [-178.8, 8.2], [-180.8, -8.8], [178.2, 8.8] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "coordinates": [
              [
                [
                  -177,
                  10
                ],
                [
                  176,
                  15
                ],
                [
                  172,
                  0
                ],
                [
                  176,
                  -15
                ],
                [
                  -177,
                  -10
                ],
                [
                  -177,
                  10
                ]
              ],
              [
                [
                  178.2,
                  8.2
                ],
                [
                  -178.8,
                  8.2
                ],
                [
                  -180.8,
                  -8.8
                ],
                [
                  178.2,
                  8.8
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 455
    },
    "digest": "60294ea29c96c432047d4fffcb3cc8b4",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"orientation\" : \"clockwise\",\n        \"coordinates\" : [\n            [ [100.0, 0.0], [100.0, 1.0], [101.0, 1.0], [101.0, 0.0], [100.0, 0.0] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "orientation": "clockwise",
            "coordinates": [
              [
                [
                  100,
                  0
                ],
                [
                  100,
                  1
                ],
                [
                  101,
                  1
                ],
                [
                  101,
                  0
                ],
                [
                  100,
                  0
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 475
    },
    "digest": "2eca42af76c6ddc657fca3948f3865bd",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multipoint\",\n        \"coordinates\" : [\n            [102.0, 2.0], [103.0, 2.0]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multipoint",
            "coordinates": [
              [
                102,
                2
              ],
              [
                103,
                2
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 490
    },
    "digest": "f1e1f4f37194a899e7056d0782804790",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTIPOINT (102.0 2.0, 103.0 2.0)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTIPOINT (102.0 2.0, 103.0 2.0)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 504
    },
    "digest": "c4ba19b62e87ed837dc6f1f9fe184244",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multilinestring\",\n        \"coordinates\" : [\n            [ [102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0] ],\n            [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0] ],\n            [ [100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multilinestring",
            "coordinates": [
              [
                [
                  102,
                  2
                ],
                [
                  103,
                  2
                ],
                [
                  103,
                  3
                ],
                [
                  102,
                  3
                ]
              ],
              [
                [
                  100,
                  0
                ],
                [
                  101,
                  0
                ],
                [
                  101,
                  1
                ],
                [
                  100,
                  1
                ]
              ],
              [
                [
                  100.2,
                  0.2
                ],
                [
                  100.8,
                  0.2
                ],
                [
                  100.8,
                  0.8
                ],
                [
                  100.2,
                  0.8
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 521
    },
    "digest": "117096e1830e7acedf38bd6a92a9c8b4",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTILINESTRING ((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0), (100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 535
    },
    "digest": "4be91bb5ac3a1b83b767a060c58e0b12",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multipolygon\",\n        \"coordinates\" : [\n            [ [[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]] ],\n            [ [[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n              [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multipolygon",
            "coordinates": [
              [
                [
                  [
                    102,
                    2
                  ],
                  [
                    103,
                    2
                  ],
                  [
                    103,
                    3
                  ],
                  [
                    102,
                    3
                  ],
                  [
                    102,
                    2
                  ]
                ]
              ],
              [
                [
                  [
                    100,
                    0
                  ],
                  [
                    101,
                    0
                  ],
                  [
                    101,
                    1
                  ],
                  [
                    100,
                    1
                  ],
                  [
                    100,
                    0
                  ]
                ],
                [
                  [
                    100.2,
                    0.2
                  ],
                  [
                    100.8,
                    0.2
                  ],
                  [
                    100.8,
                    0.8
                  ],
                  [
                    100.2,
                    0.8
                  ],
                  [
                    100.2,
                    0.2
                  ]
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 552
    },
    "digest": "9290410340f0e66e67fa96aacc83bbdc",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTIPOLYGON (((102.0 2.0, 103.0 2.0, 103.0 3.0, 102.0 3.0, 102.0 2.0)), ((100.0 0.0, 101.0 0.0, 101.0 1.0, 100.0 1.0, 100.0 0.0), (100.2 0.2, 100.8 0.2, 100.8 0.8, 100.2 0.8, 100.2 0.2)))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 566
    },
    "digest": "a99750fb5d296fa8df97ee71a34c698c",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\": \"geometrycollection\",\n        \"geometries\": [\n            {\n                \"type\": \"point\",\n                \"coordinates\": [100.0, 0.0]\n            },\n            {\n                \"type\": \"linestring\",\n                \"coordinates\": [ [101.0, 0.0], [102.0, 1.0] ]\n            }\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "geometrycollection",
            "geometries": [
              {
                "type": "point",
                "coordinates": [
                  100,
                  0
                ]
              },
              {
                "type": "linestring",
                "coordinates": [
                  [
                    101,
                    0
                  ],
                  [
                    102,
                    1
                  ]
                ]
              }
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 588
    },
    "digest": "71bb89f56d847b636a050c553c0cd0a7",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "GEOMETRYCOLLECTION (POINT (100.0 0.0), LINESTRING (101.0 0.0, 102.0 1.0))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 604
    },
    "digest": "f893fffd649507119d0a9afd98a0cf87",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"envelope\",\n        \"coordinates\" : [ [100.0, 1.0], [101.0, 0.0] ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "envelope",
            "coordinates": [
              [
                100,
                1
              ],
              [
                101,
                0
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 619
    },
    "digest": "65208190e9640cb4ca67271f1694814d",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"BBOX (100.0, 102.0, 2.0, 0.0)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "BBOX (100.0, 102.0, 2.0, 0.0)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/geo-shape.asciidoc",
      "line": 636
    },
    "digest": "76039c2fd422a6bb6340848cc0a78bbd",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"circle\",\n        \"coordinates\" : [101.0, 1.0],\n        \"radius\" : \"100m\"\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "circle",
            "coordinates": [
              101,
              1
            ],
            "radius": "100m"
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/ip.asciidoc",
      "line": 11
    },
    "digest": "ef38d941f9d914c095e729046a2e2d95",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"ip_addr\": {\n        \"type\": \"ip\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"ip_addr\": \"192.168.1.1\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"192.168.0.0/16\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "ip_addr": {
                "type": "ip"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "ip_addr": "192.168.1.1"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "ip_addr": "192.168.0.0/16"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/ip.asciidoc",
      "line": 77
    },
    "digest": "96d3e3ee5d410507ca6ffb64a7e3d88e",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"192.168.0.0/16\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "ip_addr": "192.168.0.0/16"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/ip.asciidoc",
      "line": 91
    },
    "digest": "f880cf334c8d355edc3abf196d9a8b67",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"ip_addr\": \"2001:db8::/48\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "ip_addr": "2001:db8::/48"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/ip.asciidoc",
      "line": 108
    },
    "digest": "db5fe7de772a7607b8d104cc35a6bc6c",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"query_string\" : {\n      \"query\": \"ip_addr:\\\"2001:db8::/48\\\"\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "ip_addr:\"2001:db8::/48\""
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 14
    },
    "digest": "adbb85423739e45e6d072fd6bebb140e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_id\": {\n        \"type\": \"keyword\"\n      },\n      \"my_join_field\": { <1>\n        \"type\": \"join\",\n        \"relations\": {\n          \"question\": \"answer\" <2>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_id": {
                "type": "keyword"
              },
              "my_join_field": {
                "type": "join",
                "relations": {
                  "question": "answer"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 41
    },
    "digest": "ce09baf41be8157b688e19e36b6050c9",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"my_id\": \"1\",\n  \"text\": \"This is a question\",\n  \"my_join_field\": {\n    \"name\": \"question\" <1>\n  }\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"my_id\": \"2\",\n  \"text\": \"This is another question\",\n  \"my_join_field\": {\n    \"name\": \"question\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "my_id": "1",
          "text": "This is a question",
          "my_join_field": {
            "name": "question"
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "my_id": "2",
          "text": "This is another question",
          "my_join_field": {
            "name": "question"
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 68
    },
    "digest": "34a90fc67bf423c562cfbc91ca1016cf",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"my_id\": \"1\",\n  \"text\": \"This is a question\",\n  \"my_join_field\": \"question\" <1>\n}\n\nPUT my_index/_doc/2?refresh\n{\n  \"my_id\": \"2\",\n  \"text\": \"This is another question\",\n  \"my_join_field\": \"question\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "my_id": "1",
          "text": "This is a question",
          "my_join_field": "question"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "my_id": "2",
          "text": "This is another question",
          "my_join_field": "question"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 96
    },
    "digest": "f2b074b37e37cc12abf1b5c795965912",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/3?routing=1&refresh <1>\n{\n  \"my_id\": \"3\",\n  \"text\": \"This is an answer\",\n  \"my_join_field\": {\n    \"name\": \"answer\", <2>\n    \"parent\": \"1\" <3>\n  }\n}\n\nPUT my_index/_doc/4?routing=1&refresh\n{\n  \"my_id\": \"4\",\n  \"text\": \"This is another answer\",\n  \"my_join_field\": {\n    \"name\": \"answer\",\n    \"parent\": \"1\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "my_id": "3",
          "text": "This is an answer",
          "my_join_field": {
            "name": "answer",
            "parent": "1"
          }
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/4",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "my_id": "4",
          "text": "This is another answer",
          "my_join_field": {
            "name": "answer",
            "parent": "1"
          }
        },
        "params": {
          "index": "my_index",
          "id": "4"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 165
    },
    "digest": "275353b0245fde574d0b11f2aba2836e",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  },\n  \"sort\": [\"my_id\"]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "sort": [
            "my_id"
          ]
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 179
    },
    "digest": "e3d73c2ed2f1f17f401fbe06127a415f",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...,\n    \"hits\": {\n        \"total\" : {\n            \"value\": 4,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": null,\n        \"hits\": [\n            {\n                \"_index\": \"my_index\",\n                \"_id\": \"1\",\n                \"_score\": null,\n                \"_source\": {\n                    \"my_id\": \"1\",\n                    \"text\": \"This is a question\",\n                    \"my_join_field\": \"question\" <1>\n                },\n                \"sort\": [\n                    \"1\"\n                ]\n            },\n            {\n                \"_index\": \"my_index\",\n                \"_id\": \"2\",\n                \"_score\": null,\n                \"_source\": {\n                    \"my_id\": \"2\",\n                    \"text\": \"This is another question\",\n                    \"my_join_field\": \"question\" <2>\n                },\n                \"sort\": [\n                    \"2\"\n                ]\n            },\n            {\n                \"_index\": \"my_index\",\n                \"_id\": \"3\",\n                \"_score\": null,\n                \"_routing\": \"1\",\n                \"_source\": {\n                    \"my_id\": \"3\",\n                    \"text\": \"This is an answer\",\n                    \"my_join_field\": {\n                        \"name\": \"answer\", <3>\n                        \"parent\": \"1\"  <4>\n                    }\n                },\n                \"sort\": [\n                    \"3\"\n                ]\n            },\n            {\n                \"_index\": \"my_index\",\n                \"_id\": \"4\",\n                \"_score\": null,\n                \"_routing\": \"1\",\n                \"_source\": {\n                    \"my_id\": \"4\",\n                    \"text\": \"This is another answer\",\n                    \"my_join_field\": {\n                        \"name\": \"answer\",\n                        \"parent\": \"1\"\n                    }\n                },\n                \"sort\": [\n                    \"4\"\n                ]\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 272
    },
    "digest": "26fe7b3c9aeab972725b6d708cc6df22",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"parent_id\": { <1>\n      \"type\": \"answer\",\n      \"id\": \"1\"\n    }\n  },\n  \"aggs\": {\n    \"parents\": {\n      \"terms\": {\n        \"field\": \"my_join_field#question\", <2>\n        \"size\": 10\n      }\n    }\n  },\n  \"script_fields\": {\n    \"parent\": {\n      \"script\": {\n         \"source\": \"doc['my_join_field#question']\" <3>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "parent_id": {
              "type": "answer",
              "id": "1"
            }
          },
          "aggs": {
            "parents": {
              "terms": {
                "field": "my_join_field#question",
                "size": 10
              }
            }
          },
          "script_fields": {
            "parent": {
              "script": {
                "source": "doc['my_join_field#question']"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 325
    },
    "digest": "e0b414b45460d424ab838b5136492fa1",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_join_field\": {\n        \"type\": \"join\",\n        \"relations\": {\n           \"question\": \"answer\"\n        },\n        \"eager_global_ordinals\": false\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_join_field": {
                "type": "join",
                "relations": {
                  "question": "answer"
                },
                "eager_global_ordinals": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 346
    },
    "digest": "2c090fe7ec7b66b3f5c178d71c46323b",
    "lang": "console",
    "found": [],
    "source": "# Per-index\nGET _stats/fielddata?human&fields=my_join_field#question\n\n# Per-node per-index\nGET _nodes/stats/indices/fielddata?human&fields=my_join_field#question",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_stats/fielddata",
        "query": {
          "human": true,
          "fields": "my_join_field"
        },
        "body": null,
        "params": {
          "metric": "fielddata"
        },
        "api": "indices.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/fielddata",
        "query": {
          "human": true,
          "fields": "my_join_field"
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "fielddata"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 360
    },
    "digest": "bc358cfd219faf9353cb65820981a0df",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_join_field\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"question\": [\"answer\", \"comment\"]  <1>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_join_field": {
                "type": "join",
                "relations": {
                  "question": [
                    "answer",
                    "comment"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 387
    },
    "digest": "1cc03b9715d9a3f876f7b7bb7fe66394",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_join_field\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"question\": [\"answer\", \"comment\"],  <1>\n          \"answer\": \"vote\" <2>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_join_field": {
                "type": "join",
                "relations": {
                  "question": [
                    "answer",
                    "comment"
                  ],
                  "answer": "vote"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/parent-join.asciidoc",
      "line": 422
    },
    "digest": "6eecf0fbf95d132beb0f49b3181da419",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/3?routing=1&refresh <1>\n{\n  \"text\": \"This is a vote\",\n  \"my_join_field\": {\n    \"name\": \"vote\",\n    \"parent\": \"2\" <2>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/3",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "text": "This is a vote",
          "my_join_field": {
            "name": "vote",
            "parent": "2"
          }
        },
        "params": {
          "index": "my_index",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/keyword.asciidoc",
      "line": 20
    },
    "digest": "46c4b0dfb674825f9579203d41e7f404",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"tags\": {\n        \"type\":  \"keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "tags": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/nested.asciidoc",
      "line": 19
    },
    "digest": "8baccd8688a6bad1749b8935f9601ea4",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index/_doc/1\n{\n  \"group\" : \"fans\",\n  \"user\" : [ <1>\n    {\n      \"first\" : \"John\",\n      \"last\" :  \"Smith\"\n    },\n    {\n      \"first\" : \"Alice\",\n      \"last\" :  \"White\"\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "group": "fans",
          "user": [
            {
              "first": "John",
              "last": "Smith"
            },
            {
              "first": "Alice",
              "last": "White"
            }
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/nested.asciidoc",
      "line": 55
    },
    "digest": "b214942b938e47f2c486e523546cb574",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        { \"match\": { \"user.first\": \"Alice\" }},\n        { \"match\": { \"user.last\":  \"Smith\" }}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": [
                {
                  "match": {
                    "user.first": "Alice"
                  }
                },
                {
                  "match": {
                    "user.last": "Smith"
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/nested.asciidoc",
      "line": 80
    },
    "digest": "b919f88e6f47a40d5793479440a90ba6",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user\": {\n        \"type\": \"nested\" <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"group\" : \"fans\",\n  \"user\" : [\n    {\n      \"first\" : \"John\",\n      \"last\" :  \"Smith\"\n    },\n    {\n      \"first\" : \"Alice\",\n      \"last\" :  \"White\"\n    }\n  ]\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"user\",\n      \"query\": {\n        \"bool\": {\n          \"must\": [\n            { \"match\": { \"user.first\": \"Alice\" }},\n            { \"match\": { \"user.last\":  \"Smith\" }} <2>\n          ]\n        }\n      }\n    }\n  }\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"user\",\n      \"query\": {\n        \"bool\": {\n          \"must\": [\n            { \"match\": { \"user.first\": \"Alice\" }},\n            { \"match\": { \"user.last\":  \"White\" }} <3>\n          ]\n        }\n      },\n      \"inner_hits\": { <4>\n        \"highlight\": {\n          \"fields\": {\n            \"user.first\": {}\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user": {
                "type": "nested"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "group": "fans",
          "user": [
            {
              "first": "John",
              "last": "Smith"
            },
            {
              "first": "Alice",
              "last": "White"
            }
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "user",
              "query": {
                "bool": {
                  "must": [
                    {
                      "match": {
                        "user.first": "Alice"
                      }
                    },
                    {
                      "match": {
                        "user.last": "Smith"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "user",
              "query": {
                "bool": {
                  "must": [
                    {
                      "match": {
                        "user.first": "Alice"
                      }
                    },
                    {
                      "match": {
                        "user.last": "White"
                      }
                    }
                  ]
                }
              },
              "inner_hits": {
                "highlight": {
                  "fields": {
                    "user.first": {}
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/numeric.asciidoc",
      "line": 22
    },
    "digest": "a71c438cc4df1cafe3109ccff475afdb",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"number_of_bytes\": {\n        \"type\": \"integer\"\n      },\n      \"time_in_seconds\": {\n        \"type\": \"float\"\n      },\n      \"price\": {\n        \"type\": \"scaled_float\",\n        \"scaling_factor\": 100\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "number_of_bytes": {
                "type": "integer"
              },
              "time_in_seconds": {
                "type": "float"
              },
              "price": {
                "type": "scaled_float",
                "scaling_factor": 100
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/object.asciidoc",
      "line": 11
    },
    "digest": "9bb2dc0500011e0774f4bdfebf57a7a0",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1\n{ <1>\n  \"region\": \"US\",\n  \"manager\": { <2>\n    \"age\":     30,\n    \"name\": { <3>\n      \"first\": \"John\",\n      \"last\":  \"Smith\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "region": "US",
          "manager": {
            "age": 30,
            "name": {
              "first": "John",
              "last": "Smith"
            }
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/object.asciidoc",
      "line": 46
    },
    "digest": "8e907d7533581efadf7831b05dd9f794",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": { <1>\n      \"region\": {\n        \"type\": \"keyword\"\n      },\n      \"manager\": { <2>\n        \"properties\": {\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { <3>\n            \"properties\": {\n              \"first\": { \"type\": \"text\" },\n              \"last\":  { \"type\": \"text\" }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "region": {
                "type": "keyword"
              },
              "manager": {
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "name": {
                    "properties": {
                      "first": {
                        "type": "text"
                      },
                      "last": {
                        "type": "text"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 20
    },
    "digest": "05c14dd0bda732cfa36f7fb88138d98e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n    \"mappings\": {\n        \"properties\": {\n            \"query\": {\n                \"type\": \"percolator\"\n            },\n            \"field\": {\n                \"type\": \"text\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "field": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 40
    },
    "digest": "dc1f917924b43416a9ec7f8c9505f885",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/match_value\n{\n    \"query\" : {\n        \"match\" : {\n            \"field\" : \"value\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/match_value",
        "query": null,
        "body": {
          "query": {
            "match": {
              "field": "value"
            }
          }
        },
        "params": {
          "index": "my_index",
          "id": "match_value"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 70
    },
    "digest": "3eb4cdd4a799a117ac1ff5f02b18a512",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"query\" : {\n        \"type\" : \"percolator\"\n      },\n      \"body\" : {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPOST _aliases\n{\n  \"actions\": [\n    {\n      \"add\": {\n        \"index\": \"index\",\n        \"alias\": \"queries\" <1>\n      }\n    }\n  ]\n}\n\nPUT queries/_doc/1?refresh\n{\n  \"query\" : {\n    \"match\" : {\n      \"body\" : \"quick brown fox\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "body": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "index",
                "alias": "queries"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      },
      {
        "method": "PUT",
        "url": "/queries/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "body": "quick brown fox"
            }
          }
        },
        "params": {
          "index": "queries",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 115
    },
    "digest": "f09817fd13ff3dce52eb79d0722409c3",
    "lang": "console",
    "found": [],
    "source": "PUT new_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"query\" : {\n        \"type\" : \"percolator\"\n      },\n      \"body\" : {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPOST /_reindex?refresh\n{\n  \"source\": {\n    \"index\": \"index\"\n  },\n  \"dest\": {\n    \"index\": \"new_index\"\n  }\n}\n\nPOST _aliases\n{\n  \"actions\": [ <1>\n    {\n      \"remove\": {\n        \"index\" : \"index\",\n        \"alias\": \"queries\"\n      }\n    },\n    {\n      \"add\": {\n        \"index\": \"new_index\",\n        \"alias\": \"queries\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/new_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "body": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "new_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/_reindex",
        "query": {
          "refresh": true
        },
        "body": {
          "source": {
            "index": "index"
          },
          "dest": {
            "index": "new_index"
          }
        },
        "params": null,
        "api": "reindex"
      },
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "remove": {
                "index": "index",
                "alias": "queries"
              }
            },
            {
              "add": {
                "index": "new_index",
                "alias": "queries"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 165
    },
    "digest": "60cab62af1540db2ad3b696b0ee1d7a8",
    "lang": "console",
    "found": [],
    "source": "GET /queries/_search\n{\n  \"query\": {\n    \"percolate\" : {\n      \"field\" : \"query\",\n      \"document\" : {\n        \"body\" : \"fox jumps over the lazy dog\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/queries/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "body": "fox jumps over the lazy dog"
              }
            }
          }
        },
        "params": {
          "index": "queries"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 183
    },
    "digest": "8bb3c37f6c007d069b7107b6c1e306b2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.13076457,\n    \"hits\": [\n      {\n        \"_index\": \"new_index\", <1>\n        \"_id\": \"1\",\n        \"_score\": 0.13076457,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"body\": \"quick brown fox\"\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 262
    },
    "digest": "360c4f373e72ba861584ee85bd218124",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\" : {\n          \"tokenizer\": \"standard\",\n          \"filter\" : [\"lowercase\", \"porter_stem\"]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"query\" : {\n        \"type\": \"percolator\"\n      },\n      \"body\" : {\n        \"type\": \"text\",\n        \"analyzer\": \"my_analyzer\" <1>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "porter_stem"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "body": {
                "type": "text",
                "analyzer": "my_analyzer"
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 295
    },
    "digest": "3e13c8a81f40a537eddc0b57633b45f8",
    "lang": "console",
    "found": [],
    "source": "POST /test_index/_analyze\n{\n  \"analyzer\" : \"my_analyzer\",\n  \"text\" : \"missing bicycles\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "missing bicycles"
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 307
    },
    "digest": "d674b0d80bef84b374861ff1023e8ac6",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"miss\",\n      \"start_offset\": 0,\n      \"end_offset\": 7,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"bicycl\",\n      \"start_offset\": 8,\n      \"end_offset\": 16,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 331
    },
    "digest": "7a2b9a7b2b6553a48bd4db60a939c0fc",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index/_doc/1?refresh\n{\n  \"query\" : {\n    \"match\" : {\n      \"body\" : {\n        \"query\" : \"miss bicycl\",\n        \"analyzer\" : \"whitespace\" <1>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "body": {
                "query": "miss bicycl",
                "analyzer": "whitespace"
              }
            }
          }
        },
        "params": {
          "index": "test_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 355
    },
    "digest": "45813d971bfa890ffa2f51f3f480cce5",
    "lang": "console",
    "found": [],
    "source": "GET /test_index/_search\n{\n  \"query\": {\n    \"percolate\" : {\n      \"field\" : \"query\",\n      \"document\" : {\n        \"body\" : \"Bycicles are missing\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test_index/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "body": "Bycicles are missing"
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 373
    },
    "digest": "6c36ac2864631f76aa6b04ac6b4d18a4",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 6,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.13076457,\n    \"hits\": [\n      {\n        \"_index\": \"test_index\",\n        \"_id\": \"1\",\n        \"_score\": 0.13076457,\n        \"_source\": {\n          \"query\": {\n            \"match\": {\n              \"body\": {\n                \"query\": \"miss bicycl\",\n                \"analyzer\": \"whitespace\"\n              }\n            }\n          }\n        },\n        \"fields\" : {\n          \"_percolator_document_slot\" : [0]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 427
    },
    "digest": "a04a8d90f8245ff5f30a9983909faa1d",
    "lang": "console",
    "found": [],
    "source": "PUT my_queries1\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"wildcard_prefix\": { <1>\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"wildcard_edge_ngram\"\n          ]\n        }\n      },\n      \"filter\": {\n        \"wildcard_edge_ngram\": { <2>\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 1,\n          \"max_gram\": 32\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"query\": {\n        \"type\": \"percolator\"\n      },\n      \"my_field\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"prefix\": { <3>\n            \"type\": \"text\",\n            \"analyzer\": \"wildcard_prefix\",\n            \"search_analyzer\": \"standard\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_queries1",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "wildcard_prefix": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "wildcard_edge_ngram"
                  ]
                }
              },
              "filter": {
                "wildcard_edge_ngram": {
                  "type": "edge_ngram",
                  "min_gram": 1,
                  "max_gram": 32
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "my_field": {
                "type": "text",
                "fields": {
                  "prefix": {
                    "type": "text",
                    "analyzer": "wildcard_prefix",
                    "search_analyzer": "standard"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_queries1"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 495
    },
    "digest": "ed688d86eeaa4d7969acb0f574eb917f",
    "lang": "console",
    "found": [],
    "source": "PUT /my_queries1/_doc/1?refresh\n{\n  \"query\": {\n    \"term\": {\n      \"my_field.prefix\": \"abc\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_queries1/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "term": {
              "my_field.prefix": "abc"
            }
          }
        },
        "params": {
          "index": "my_queries1",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 513
    },
    "digest": "d2f6040c058a9555dfa62bb42d896a8f",
    "lang": "console",
    "found": [],
    "source": "GET /my_queries1/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"field\": \"query\",\n      \"document\": {\n        \"my_field\": \"abcd\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_queries1/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "my_field": "abcd"
              }
            }
          }
        },
        "params": {
          "index": "my_queries1"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 529
    },
    "digest": "c314bccc7efd6cdf7fed6aa2585900c7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 6,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.18864399,\n    \"hits\": [\n      {\n        \"_index\": \"my_queries1\",\n        \"_id\": \"1\",\n        \"_score\": 0.18864399,\n        \"_source\": {\n          \"query\": {\n            \"term\": {\n              \"my_field.prefix\": \"abc\"\n            }\n          }\n        },\n        \"fields\": {\n          \"_percolator_document_slot\": [\n            0\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 574
    },
    "digest": "343dd09a8c76987e586858be3bdc51eb",
    "lang": "console",
    "found": [],
    "source": "PUT my_queries2\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"wildcard_suffix\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"reverse\",\n            \"wildcard_edge_ngram\"\n          ]\n        },\n        \"wildcard_suffix_search_time\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"reverse\"\n          ]\n        }\n      },\n      \"filter\": {\n        \"wildcard_edge_ngram\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 1,\n          \"max_gram\": 32\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"query\": {\n        \"type\": \"percolator\"\n      },\n      \"my_field\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"suffix\": {\n            \"type\": \"text\",\n            \"analyzer\": \"wildcard_suffix\",\n            \"search_analyzer\": \"wildcard_suffix_search_time\" <1>\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_queries2",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "wildcard_suffix": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "reverse",
                    "wildcard_edge_ngram"
                  ]
                },
                "wildcard_suffix_search_time": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "reverse"
                  ]
                }
              },
              "filter": {
                "wildcard_edge_ngram": {
                  "type": "edge_ngram",
                  "min_gram": 1,
                  "max_gram": 32
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "query": {
                "type": "percolator"
              },
              "my_field": {
                "type": "text",
                "fields": {
                  "suffix": {
                    "type": "text",
                    "analyzer": "wildcard_suffix",
                    "search_analyzer": "wildcard_suffix_search_time"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_queries2"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 649
    },
    "digest": "bd7330af2609bdd8aa10958f5e640b93",
    "lang": "console",
    "found": [],
    "source": "PUT /my_queries2/_doc/2?refresh\n{\n  \"query\": {\n    \"match\": { <1>\n      \"my_field.suffix\": \"xyz\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_queries2/_doc/2",
        "query": {
          "refresh": true
        },
        "body": {
          "query": {
            "match": {
              "my_field.suffix": "xyz"
            }
          }
        },
        "params": {
          "index": "my_queries2",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/percolator.asciidoc",
      "line": 668
    },
    "digest": "4aa81a694266fb634904224d14cd9a87",
    "lang": "console",
    "found": [],
    "source": "GET /my_queries2/_search\n{\n  \"query\": {\n    \"percolate\": {\n      \"field\": \"query\",\n      \"document\": {\n        \"my_field\": \"wxyz\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_queries2/_search",
        "query": null,
        "body": {
          "query": {
            "percolate": {
              "field": "query",
              "document": {
                "my_field": "wxyz"
              }
            }
          }
        },
        "params": {
          "index": "my_queries2"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 21
    },
    "digest": "2b371fbf0654d76436d49f5703d6c137",
    "lang": "console",
    "found": [],
    "source": "PUT range_index\n{\n  \"settings\": {\n    \"number_of_shards\": 2\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"expected_attendees\": {\n        \"type\": \"integer_range\"\n      },\n      \"time_frame\": {\n        \"type\": \"date_range\", <1>\n        \"format\": \"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis\"\n      }\n    }\n  }\n}\n\nPUT range_index/_doc/1?refresh\n{\n  \"expected_attendees\" : { <2>\n    \"gte\" : 10,\n    \"lte\" : 20\n  },\n  \"time_frame\" : { <3>\n    \"gte\" : \"2015-10-31 12:00:00\", <4>\n    \"lte\" : \"2015-11-01\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/range_index",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 2
          },
          "mappings": {
            "properties": {
              "expected_attendees": {
                "type": "integer_range"
              },
              "time_frame": {
                "type": "date_range",
                "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/range_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "expected_attendees": {
            "gte": 10,
            "lte": 20
          },
          "time_frame": {
            "gte": "2015-10-31 12:00:00",
            "lte": "2015-11-01"
          }
        },
        "params": {
          "index": "range_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 62
    },
    "digest": "84edb44c5b74426f448b2baa101092d6",
    "lang": "console",
    "found": [],
    "source": "GET range_index/_search\n{\n  \"query\" : {\n    \"term\" : {\n      \"expected_attendees\" : {\n        \"value\": 12\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/range_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "expected_attendees": {
                "value": 12
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 78
    },
    "digest": "570b8a6473120ec5941ccae33072efd7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\" : {\n    \"total\": 2,\n    \"successful\": 2,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"range_index\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"expected_attendees\" : {\n            \"gte\" : 10, \"lte\" : 20\n          },\n          \"time_frame\" : {\n            \"gte\" : \"2015-10-31 12:00:00\", \"lte\" : \"2015-11-01\"\n          }\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 117
    },
    "digest": "1572696b97822d3332be51700e09672f",
    "lang": "console",
    "found": [],
    "source": "GET range_index/_search\n{\n  \"query\" : {\n    \"range\" : {\n      \"time_frame\" : { <1>\n        \"gte\" : \"2015-10-31\",\n        \"lte\" : \"2015-11-01\",\n        \"relation\" : \"within\" <2>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/range_index/_search",
        "query": null,
        "body": {
          "query": {
            "range": {
              "time_frame": {
                "gte": "2015-10-31",
                "lte": "2015-11-01",
                "relation": "within"
              }
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 139
    },
    "digest": "570b8a6473120ec5941ccae33072efd7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 13,\n  \"timed_out\": false,\n  \"_shards\" : {\n    \"total\": 2,\n    \"successful\": 2,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 1.0,\n    \"hits\" : [\n      {\n        \"_index\" : \"range_index\",\n        \"_id\" : \"1\",\n        \"_score\" : 1.0,\n        \"_source\" : {\n          \"expected_attendees\" : {\n            \"gte\" : 10, \"lte\" : 20\n          },\n          \"time_frame\" : {\n            \"gte\" : \"2015-10-31 12:00:00\", \"lte\" : \"2015-11-01\"\n          }\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/range.asciidoc",
      "line": 182
    },
    "digest": "f894f680943a8af8328aab4741e6ab93",
    "lang": "console",
    "found": [],
    "source": "PUT range_index/_mapping\n{\n  \"properties\": {\n    \"ip_whitelist\": {\n      \"type\": \"ip_range\"\n    }\n  }\n}\n\nPUT range_index/_doc/2\n{\n  \"ip_whitelist\" : \"192.168.0.0/16\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/range_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "ip_whitelist": {
              "type": "ip_range"
            }
          }
        },
        "params": {
          "index": "range_index"
        },
        "api": "indices.put_mapping"
      },
      {
        "method": "PUT",
        "url": "/range_index/_doc/2",
        "query": null,
        "body": {
          "ip_whitelist": "192.168.0.0/16"
        },
        "params": {
          "index": "range_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/rank-feature.asciidoc",
      "line": 11
    },
    "digest": "1e088f892b20697fd6e537a3ecf624ee",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"pagerank\": {\n        \"type\": \"rank_feature\" <1>\n      },\n      \"url_length\": {\n        \"type\": \"rank_feature\",\n        \"positive_score_impact\": false <2>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"pagerank\": 8,\n  \"url_length\": 22\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"pagerank\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "pagerank": {
                "type": "rank_feature"
              },
              "url_length": {
                "type": "rank_feature",
                "positive_score_impact": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "pagerank": 8,
          "url_length": 22
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "pagerank"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/rank-features.asciidoc",
      "line": 16
    },
    "digest": "17867d05695ddeaee5d5aea2263ac589",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"topics\": {\n        \"type\": \"rank_features\" <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"topics\": { <2>\n    \"politics\": 20,\n    \"economics\": 50.8\n  }\n}\n\nPUT my_index/_doc/2\n{\n  \"topics\": {\n    \"politics\": 5.2,\n    \"sports\": 80.1\n  }\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"rank_feature\": {\n      \"field\": \"topics.politics\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "topics": {
                "type": "rank_features"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "topics": {
            "politics": 20,
            "economics": 50.8
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "topics": {
            "politics": 5.2,
            "sports": 80.1
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "rank_feature": {
              "field": "topics.politics"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/search-as-you-type.asciidoc",
      "line": 18
    },
    "digest": "6f31f9cfe0dd741ccad4af62ba8f815e",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_field\": {\n        \"type\": \"search_as_you_type\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_field": {
                "type": "search_as_you_type"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/search-as-you-type.asciidoc",
      "line": 71
    },
    "digest": "867e5fad9c57055712fe2b69fa69a97c",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"my_field\": \"quick brown fox jump lazy dog\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "my_field": "quick brown fox jump lazy dog"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/search-as-you-type.asciidoc",
      "line": 87
    },
    "digest": "9bd25962f177e86dbc5a8030a420cc31",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"multi_match\": {\n      \"query\": \"brown f\",\n      \"type\": \"bool_prefix\",\n      \"fields\": [\n        \"my_field\",\n        \"my_field._2gram\",\n        \"my_field._3gram\"\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "brown f",
              "type": "bool_prefix",
              "fields": [
                "my_field",
                "my_field._2gram",
                "my_field._3gram"
              ]
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/search-as-you-type.asciidoc",
      "line": 106
    },
    "digest": "cf032a0749b770fb4f77af46d1059c18",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 44,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 0.8630463,\n    \"hits\" : [\n      {\n        \"_index\" : \"my_index\",\n        \"_id\" : \"1\",\n        \"_score\" : 0.8630463,\n        \"_source\" : {\n          \"my_field\" : \"quick brown fox jump lazy dog\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/types/search-as-you-type.asciidoc",
      "line": 147
    },
    "digest": "0ced86822f8c0a479af5e1fe28dfc2ec",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"match_phrase_prefix\": {\n      \"my_field\": \"brown f\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase_prefix": {
              "my_field": "brown f"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/text.asciidoc",
      "line": 22
    },
    "digest": "24ea1c6cdf10165228951e562b7ec0ef",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"full_name\": {\n        \"type\":  \"text\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "full_name": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/token-count.asciidoc",
      "line": 14
    },
    "digest": "98c3d643f71c1fd71238ebb748e846e7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": { <1>\n        \"type\": \"text\",\n        \"fields\": {\n          \"length\": { <2>\n            \"type\":     \"token_count\",\n            \"analyzer\": \"standard\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{ \"name\": \"John Smith\" }\n\nPUT my_index/_doc/2\n{ \"name\": \"Rachel Alice Williams\" }\n\nGET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"name.length\": 3 <3>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name": {
                "type": "text",
                "fields": {
                  "length": {
                    "type": "token_count",
                    "analyzer": "standard"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "name": "John Smith"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "name": "Rachel Alice Williams"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "name.length": 3
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 77
    },
    "digest": "04409304cd13f4cfa8efbed87aea9b15",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n    \"mappings\": {\n        \"properties\": {\n            \"geometry\": {\n                \"type\": \"shape\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "geometry": {
                "type": "shape"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 141
    },
    "digest": "a55bdc75b139d947d64b32dc9824e558",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"point\",\n        \"coordinates\" : [-377.03653, 389.897676]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "point",
            "coordinates": [
              -377.03653,
              389.897676
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 154
    },
    "digest": "8fb11f30a609b13c1373ce4a26124159",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POINT (-377.03653 389.897676)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POINT (-377.03653 389.897676)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 171
    },
    "digest": "bff745b32238691bae88de22530643cb",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"linestring\",\n        \"coordinates\" : [[-377.03653, 389.897676], [-377.009051, 389.889939]]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "linestring",
            "coordinates": [
              [
                -377.03653,
                389.897676
              ],
              [
                -377.009051,
                389.889939
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 184
    },
    "digest": "c4f62c66f967c6e0da3616957efbeccf",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"LINESTRING (-377.03653 389.897676, -377.009051 389.889939)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "LINESTRING (-377.03653 389.897676, -377.009051 389.889939)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 200
    },
    "digest": "567829f263dd472bf76500db05d2200a",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"coordinates\" : [\n            [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "coordinates": [
              [
                [
                  1000,
                  -1001
                ],
                [
                  1001,
                  -1001
                ],
                [
                  1001,
                  -1000
                ],
                [
                  1000,
                  -1000
                ],
                [
                  1000,
                  -1001
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 215
    },
    "digest": "ae5f9956a525e976bfc37dcb4e7414ae",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POLYGON ((1000.0 -1001.0, 1001.0 -1001.0, 1001.0 -1000.0, 1000.0 -1000.0, 1000.0 -1001.0))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POLYGON ((1000.0 -1001.0, 1001.0 -1001.0, 1001.0 -1000.0, 1000.0 -1000.0, 1000.0 -1001.0))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 227
    },
    "digest": "4f869e56eb25586ac402ccfb00aa0359",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"coordinates\" : [\n            [ [1000.0, -1001.0], [1001.0, -1001.0], [1001.0, -1000.0], [1000.0, -1000.0], [1000.0, -1001.0] ],\n            [ [1000.2, -1001.2], [1000.8, -1001.2], [1000.8, -1001.8], [1000.2, -1001.8], [1000.2, -1001.2] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "coordinates": [
              [
                [
                  1000,
                  -1001
                ],
                [
                  1001,
                  -1001
                ],
                [
                  1001,
                  -1000
                ],
                [
                  1000,
                  -1000
                ],
                [
                  1000,
                  -1001
                ]
              ],
              [
                [
                  1000.2,
                  -1001.2
                ],
                [
                  1000.8,
                  -1001.2
                ],
                [
                  1000.8,
                  -1001.8
                ],
                [
                  1000.2,
                  -1001.8
                ],
                [
                  1000.2,
                  -1001.2
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 243
    },
    "digest": "a5816a58c1fa769c23c6211ab449e6f3",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"POLYGON ((1000.0 1000.0, 1001.0 1000.0, 1001.0 1001.0, 1000.0 1001.0, 1000.0 1000.0), (1000.2 1000.2, 1000.8 1000.2, 1000.8 1000.8, 1000.2 1000.8, 1000.2 1000.2))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "POLYGON ((1000.0 1000.0, 1001.0 1000.0, 1001.0 1001.0, 1000.0 1001.0, 1000.0 1000.0), (1000.2 1000.2, 1000.8 1000.2, 1000.8 1000.8, 1000.2 1000.8, 1000.2 1000.2))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 265
    },
    "digest": "1f1ccd9af526b2251bf960a85288fc97",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"polygon\",\n        \"orientation\" : \"clockwise\",\n        \"coordinates\" : [\n            [ [1000.0, 1000.0], [1000.0, 1001.0], [1001.0, 1001.0], [1001.0, 1000.0], [1000.0, 1000.0] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "polygon",
            "orientation": "clockwise",
            "coordinates": [
              [
                [
                  1000,
                  1000
                ],
                [
                  1000,
                  1001
                ],
                [
                  1001,
                  1001
                ],
                [
                  1001,
                  1000
                ],
                [
                  1000,
                  1000
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 285
    },
    "digest": "02da8c5d098d9e7cc263efac344a96de",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multipoint\",\n        \"coordinates\" : [\n            [1002.0, 1002.0], [1003.0, 2000.0]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multipoint",
            "coordinates": [
              [
                1002,
                1002
              ],
              [
                1003,
                2000
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 300
    },
    "digest": "577b09f45256ff855252d29e1d1cd433",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTIPOINT (1002.0 2000.0, 1003.0 2000.0)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTIPOINT (1002.0 2000.0, 1003.0 2000.0)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 314
    },
    "digest": "76c551d13c3d907ad6dc56b85bec76de",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multilinestring\",\n        \"coordinates\" : [\n            [ [1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0] ],\n            [ [1000.0, 100.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0] ],\n            [ [1000.2, 100.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multilinestring",
            "coordinates": [
              [
                [
                  1002,
                  200
                ],
                [
                  1003,
                  200
                ],
                [
                  1003,
                  300
                ],
                [
                  1002,
                  300
                ]
              ],
              [
                [
                  1000,
                  100
                ],
                [
                  1001,
                  100
                ],
                [
                  1001,
                  100
                ],
                [
                  1000,
                  100
                ]
              ],
              [
                [
                  1000.2,
                  100.2
                ],
                [
                  1000.8,
                  100.2
                ],
                [
                  1000.8,
                  100.8
                ],
                [
                  1000.2,
                  100.8
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 331
    },
    "digest": "9aeca1d56bb2ff0701587b269163311e",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTILINESTRING ((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0), (1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0), (1000.2 0.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTILINESTRING ((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0), (1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0), (1000.2 0.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 345
    },
    "digest": "9d2464f0dce99d47f2699d953ee55b37",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"multipolygon\",\n        \"coordinates\" : [\n            [ [[1002.0, 200.0], [1003.0, 200.0], [1003.0, 300.0], [1002.0, 300.0], [1002.0, 200.0]] ],\n            [ [[1000.0, 200.0], [1001.0, 100.0], [1001.0, 100.0], [1000.0, 100.0], [1000.0, 100.0]],\n              [[1000.2, 200.2], [1000.8, 100.2], [1000.8, 100.8], [1000.2, 100.8], [1000.2, 100.2]] ]\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "multipolygon",
            "coordinates": [
              [
                [
                  [
                    1002,
                    200
                  ],
                  [
                    1003,
                    200
                  ],
                  [
                    1003,
                    300
                  ],
                  [
                    1002,
                    300
                  ],
                  [
                    1002,
                    200
                  ]
                ]
              ],
              [
                [
                  [
                    1000,
                    200
                  ],
                  [
                    1001,
                    100
                  ],
                  [
                    1001,
                    100
                  ],
                  [
                    1000,
                    100
                  ],
                  [
                    1000,
                    100
                  ]
                ],
                [
                  [
                    1000.2,
                    200.2
                  ],
                  [
                    1000.8,
                    100.2
                  ],
                  [
                    1000.8,
                    100.8
                  ],
                  [
                    1000.2,
                    100.8
                  ],
                  [
                    1000.2,
                    100.2
                  ]
                ]
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 362
    },
    "digest": "e7f366d76e3e53b4c0c30f7b0c21fbc0",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"MULTIPOLYGON (((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0, 102.0 200.0)), ((1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0, 1000.0 100.0), (1000.2 100.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8, 1000.2 100.2)))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "MULTIPOLYGON (((1002.0 200.0, 1003.0 200.0, 1003.0 300.0, 1002.0 300.0, 102.0 200.0)), ((1000.0 100.0, 1001.0 100.0, 1001.0 100.0, 1000.0 100.0, 1000.0 100.0), (1000.2 100.2, 1000.8 100.2, 1000.8 100.8, 1000.2 100.8, 1000.2 100.2)))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 376
    },
    "digest": "4b3ef0f1d3cb9598a3fb94c03948e9e2",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\": \"geometrycollection\",\n        \"geometries\": [\n            {\n                \"type\": \"point\",\n                \"coordinates\": [1000.0, 100.0]\n            },\n            {\n                \"type\": \"linestring\",\n                \"coordinates\": [ [1001.0, 100.0], [1002.0, 100.0] ]\n            }\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "geometrycollection",
            "geometries": [
              {
                "type": "point",
                "coordinates": [
                  1000,
                  100
                ]
              },
              {
                "type": "linestring",
                "coordinates": [
                  [
                    1001,
                    100
                  ],
                  [
                    1002,
                    100
                  ]
                ]
              }
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 398
    },
    "digest": "72ef8c634b3594963f203d2b3631c12e",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"GEOMETRYCOLLECTION (POINT (1000.0 100.0), LINESTRING (1001.0 100.0, 1002.0 100.0))\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "GEOMETRYCOLLECTION (POINT (1000.0 100.0), LINESTRING (1001.0 100.0, 1002.0 100.0))"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 413
    },
    "digest": "6dd3c5a716302fdd39fcf5c150b826bc",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : {\n        \"type\" : \"envelope\",\n        \"coordinates\" : [ [1000.0, 100.0], [1001.0, 100.0] ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": {
            "type": "envelope",
            "coordinates": [
              [
                1000,
                100
              ],
              [
                1001,
                100
              ]
            ]
          }
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/shape.asciidoc",
      "line": 428
    },
    "digest": "70932f56df27fb502d2095fefcaa83d6",
    "lang": "console",
    "found": [],
    "source": "POST /example/_doc\n{\n    \"location\" : \"BBOX (1000.0, 1002.0, 2000.0, 1000.0)\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/example/_doc",
        "query": null,
        "body": {
          "location": "BBOX (1000.0, 1002.0, 2000.0, 1000.0)"
        },
        "params": {
          "index": "example"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/constant-keyword.asciidoc",
      "line": 14
    },
    "digest": "6b0d492c0f50103fefeab385a7bebd01",
    "lang": "console",
    "found": [],
    "source": "PUT logs-debug\n{\n  \"mappings\": {\n    \"properties\": {\n      \"@timestamp\": {\n        \"type\": \"date\"\n      },\n      \"message\": {\n        \"type\": \"text\"\n      },\n      \"level\": {\n        \"type\": \"constant_keyword\",\n        \"value\": \"debug\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs-debug",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "@timestamp": {
                "type": "date"
              },
              "message": {
                "type": "text"
              },
              "level": {
                "type": "constant_keyword",
                "value": "debug"
              }
            }
          }
        },
        "params": {
          "index": "logs-debug"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/constant-keyword.asciidoc",
      "line": 43
    },
    "digest": "134384b8c63cfbd8d762fb01757bb3f9",
    "lang": "console",
    "found": [],
    "source": "POST logs-debug/_doc\n{\n  \"date\": \"2019-12-12\",\n  \"message\": \"Starting up Elasticsearch\",\n  \"level\": \"debug\"\n}\n\nPOST logs-debug/_doc\n{\n  \"date\": \"2019-12-12\",\n  \"message\": \"Starting up Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/logs-debug/_doc",
        "query": null,
        "body": {
          "date": "2019-12-12",
          "message": "Starting up Elasticsearch",
          "level": "debug"
        },
        "params": {
          "index": "logs-debug"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/logs-debug/_doc",
        "query": null,
        "body": {
          "date": "2019-12-12",
          "message": "Starting up Elasticsearch"
        },
        "params": {
          "index": "logs-debug"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/types/wildcard.asciidoc",
      "line": 23
    },
    "digest": "4f272d2d69153037c3eba5864745b23e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_wildcard\": {\n        \"type\": \"wildcard\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"my_wildcard\" : \"This string can be quite lengthy\"\n}\n\nPOST my_index/_doc/_search\n{\n  \"query\": {\n      \"wildcard\" : \"*quite*lengthy\"\n  }\n}\n\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_wildcard": {
                "type": "wildcard"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_wildcard": "This string can be quite lengthy"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/my_index/_doc/_search",
        "query": null,
        "body": {
          "query": {
            "wildcard": "*quite*lengthy"
          }
        },
        "params": {
          "index": "my_index",
          "id": "_search"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/ignored-field.asciidoc",
      "line": 18
    },
    "digest": "3fe0fb38f75d2a34fb1e6ac9bedbcdbc",
    "lang": "console",
    "found": [],
    "source": "GET _search\n{\n  \"query\": {\n    \"exists\": {\n      \"field\": \"_ignored\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "exists": {
              "field": "_ignored"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/ignored-field.asciidoc",
      "line": 33
    },
    "digest": "cf47cd4a39cd62a3ecad919e54a67bca",
    "lang": "console",
    "found": [],
    "source": "GET _search\n{\n  \"query\": {\n    \"term\": {\n      \"_ignored\": \"@timestamp\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "_ignored": "@timestamp"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/id-field.asciidoc",
      "line": 12
    },
    "digest": "8d9a63d7c31f08bd27d92ece3de1649c",
    "lang": "console",
    "found": [],
    "source": "# Example documents\nPUT my_index/_doc/1\n{\n  \"text\": \"Document with ID 1\"\n}\n\nPUT my_index/_doc/2?refresh=true\n{\n  \"text\": \"Document with ID 2\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"terms\": {\n      \"_id\": [ \"1\", \"2\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Document with ID 1"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": {
          "refresh": "true"
        },
        "body": {
          "text": "Document with ID 2"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "terms": {
              "_id": [
                "1",
                "2"
              ]
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/index-field.asciidoc",
      "line": 11
    },
    "digest": "3c04f75bcbb07125d51b21b9b2c9f6f0",
    "lang": "console",
    "found": [],
    "source": "PUT index_1/_doc/1\n{\n  \"text\": \"Document in index 1\"\n}\n\nPUT index_2/_doc/2?refresh=true\n{\n  \"text\": \"Document in index 2\"\n}\n\nGET index_1,index_2/_search\n{\n  \"query\": {\n    \"terms\": {\n      \"_index\": [\"index_1\", \"index_2\"] <1>\n    }\n  },\n  \"aggs\": {\n    \"indices\": {\n      \"terms\": {\n        \"field\": \"_index\", <2>\n        \"size\": 10\n      }\n    }\n  },\n  \"sort\": [\n    {\n      \"_index\": { <3>\n        \"order\": \"asc\"\n      }\n    }\n  ],\n  \"script_fields\": {\n    \"index_name\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"doc['_index']\" <4>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_1/_doc/1",
        "query": null,
        "body": {
          "text": "Document in index 1"
        },
        "params": {
          "index": "index_1",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/index_2/_doc/2",
        "query": {
          "refresh": "true"
        },
        "body": {
          "text": "Document in index 2"
        },
        "params": {
          "index": "index_2",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/index_1,index_2/_search",
        "query": null,
        "body": {
          "query": {
            "terms": {
              "_index": [
                "index_1",
                "index_2"
              ]
            }
          },
          "aggs": {
            "indices": {
              "terms": {
                "field": "_index",
                "size": 10
              }
            }
          },
          "sort": [
            {
              "_index": {
                "order": "asc"
              }
            }
          ],
          "script_fields": {
            "index_name": {
              "script": {
                "lang": "painless",
                "source": "doc['_index']"
              }
            }
          }
        },
        "params": {
          "index": "index_1,index_2"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/meta-field.asciidoc",
      "line": 9
    },
    "digest": "e10d7f411744eb1d5ddaa2f70a368490",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"_meta\": { <1>\n      \"class\": \"MyApp::User\",\n      \"version\": {\n        \"min\": \"1.0\",\n        \"max\": \"1.3\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "_meta": {
              "class": "MyApp::User",
              "version": {
                "min": "1.0",
                "max": "1.3"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/meta-field.asciidoc",
      "line": 31
    },
    "digest": "019eab381444c3d77ad3bb4e39edfac6",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_mapping\n{\n  \"_meta\": {\n    \"class\": \"MyApp2::User3\",\n    \"version\": {\n      \"min\": \"1.3\",\n      \"max\": \"1.5\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "_meta": {
            "class": "MyApp2::User3",
            "version": {
              "min": "1.3",
              "max": "1.5"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/routing-field.asciidoc",
      "line": 15
    },
    "digest": "b684073ea8d34359c290c663d2a5e798",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?routing=user1&refresh=true <1>\n{\n  \"title\": \"This is a document\"\n}\n\nGET my_index/_doc/1?routing=user1 <2>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "routing": "user1",
          "refresh": "true"
        },
        "body": {
          "title": "This is a document"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/1",
        "query": {
          "routing": "user1"
        },
        "body": null,
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/routing-field.asciidoc",
      "line": 33
    },
    "digest": "6817609dd2fcb73b9920327c5cf5ec77",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"terms\": {\n      \"_routing\": [ \"user1\" ] <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "terms": {
              "_routing": [
                "user1"
              ]
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/routing-field.asciidoc",
      "line": 53
    },
    "digest": "134bdbfb50c81dd3c487514faabc81d3",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search?routing=user1,user2 <1>\n{\n  \"query\": {\n    \"match\": {\n      \"title\": \"document\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": {
          "routing": "user1,user2"
        },
        "body": {
          "query": {
            "match": {
              "title": "document"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/routing-field.asciidoc",
      "line": 78
    },
    "digest": "4f3089b403945e391f03280ae2f360a4",
    "lang": "console",
    "found": [],
    "source": "PUT my_index2\n{\n  \"mappings\": {\n    \"_routing\": {\n      \"required\": true <1>\n    }\n  }\n}\n\nPUT my_index2/_doc/1 <2>\n{\n  \"text\": \"No routing value provided\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index2",
        "query": null,
        "body": {
          "mappings": {
            "_routing": {
              "required": true
            }
          }
        },
        "params": {
          "index": "my_index2"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index2/_doc/1",
        "query": null,
        "body": {
          "text": "No routing value provided"
        },
        "params": {
          "index": "my_index2",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/source-field.asciidoc",
      "line": 16
    },
    "digest": "50246e04b49dab320409b95526e6e34c",
    "lang": "console",
    "found": [],
    "source": "PUT tweets\n{\n  \"mappings\": {\n    \"_source\": {\n      \"enabled\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/tweets",
        "query": null,
        "body": {
          "mappings": {
            "_source": {
              "enabled": false
            }
          }
        },
        "params": {
          "index": "tweets"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/source-field.asciidoc",
      "line": 85
    },
    "digest": "b557f114e21dbc6f531d4e7621a08e8f",
    "lang": "console",
    "found": [],
    "source": "PUT logs\n{\n  \"mappings\": {\n    \"_source\": {\n      \"includes\": [\n        \"*.count\",\n        \"meta.*\"\n      ],\n      \"excludes\": [\n        \"meta.description\",\n        \"meta.other.*\"\n      ]\n    }\n  }\n}\n\nPUT logs/_doc/1\n{\n  \"requests\": {\n    \"count\": 10,\n    \"foo\": \"bar\" <1>\n  },\n  \"meta\": {\n    \"name\": \"Some metric\",\n    \"description\": \"Some metric description\", <1>\n    \"other\": {\n      \"foo\": \"one\", <1>\n      \"baz\": \"two\" <1>\n    }\n  }\n}\n\nGET logs/_search\n{\n  \"query\": {\n    \"match\": {\n      \"meta.other.foo\": \"one\" <2>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs",
        "query": null,
        "body": {
          "mappings": {
            "_source": {
              "includes": [
                "*.count",
                "meta.*"
              ],
              "excludes": [
                "meta.description",
                "meta.other.*"
              ]
            }
          }
        },
        "params": {
          "index": "logs"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/logs/_doc/1",
        "query": null,
        "body": {
          "requests": {
            "count": 10,
            "foo": "bar"
          },
          "meta": {
            "name": "Some metric",
            "description": "Some metric description",
            "other": {
              "foo": "one",
              "baz": "two"
            }
          }
        },
        "params": {
          "index": "logs",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/logs/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "meta.other.foo": "one"
            }
          }
        },
        "params": {
          "index": "logs"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/type-field.asciidoc",
      "line": 14
    },
    "digest": "cb639c02d28945379ba10dbfb982186f",
    "lang": "console",
    "found": [],
    "source": "# Example documents\n\nPUT my_index/_doc/1?refresh=true\n{\n  \"text\": \"Document with type 'doc'\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": "true"
        },
        "body": {
          "text": "Document with type 'doc'"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/fields/type-field.asciidoc",
      "line": 25
    },
    "digest": "0d7b0f40446e2001c63bef29f84530eb",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"_type\": \"_doc\"  <1>\n    }\n  },\n  \"aggs\": {\n    \"types\": {\n      \"terms\": {\n        \"field\": \"_type\", <2>\n        \"size\": 10\n      }\n    }\n  },\n  \"sort\": [\n    {\n      \"_type\": { <3>\n        \"order\": \"desc\"\n      }\n    }\n  ],\n  \"script_fields\": {\n    \"type\": {\n      \"script\": {\n        \"lang\": \"painless\",\n        \"source\": \"doc['_type']\" <4>\n      }\n    }\n  }\n}\n",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "_type": "_doc"
            }
          },
          "aggs": {
            "types": {
              "terms": {
                "field": "_type",
                "size": 10
              }
            }
          },
          "sort": [
            {
              "_type": {
                "order": "desc"
              }
            }
          ],
          "script_fields": {
            "type": {
              "script": {
                "lang": "painless",
                "source": "doc['_type']"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/analyzer.asciidoc",
      "line": 35
    },
    "digest": "5bf1e4194dce1e15eb7f48fd72b1fc6b",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n   \"settings\":{\n      \"analysis\":{\n         \"analyzer\":{\n            \"my_analyzer\":{ <1>\n               \"type\":\"custom\",\n               \"tokenizer\":\"standard\",\n               \"filter\":[\n                  \"lowercase\"\n               ]\n            },\n            \"my_stop_analyzer\":{ <2>\n               \"type\":\"custom\",\n               \"tokenizer\":\"standard\",\n               \"filter\":[\n                  \"lowercase\",\n                  \"english_stop\"\n               ]\n            }\n         },\n         \"filter\":{\n            \"english_stop\":{\n               \"type\":\"stop\",\n               \"stopwords\":\"_english_\"\n            }\n         }\n      }\n   },\n   \"mappings\":{\n       \"properties\":{\n          \"title\": {\n             \"type\":\"text\",\n             \"analyzer\":\"my_analyzer\", <3>\n             \"search_analyzer\":\"my_stop_analyzer\", <4>\n             \"search_quote_analyzer\":\"my_analyzer\" <5>\n         }\n      }\n   }\n}\n\nPUT my_index/_doc/1\n{\n   \"title\":\"The Quick Brown Fox\"\n}\n\nPUT my_index/_doc/2\n{\n   \"title\":\"A Quick Brown Fox\"\n}\n\nGET my_index/_search\n{\n   \"query\":{\n      \"query_string\":{\n         \"query\":\"\\\"the quick brown fox\\\"\" <6>\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase"
                  ]
                },
                "my_stop_analyzer": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "english_stop"
                  ]
                }
              },
              "filter": {
                "english_stop": {
                  "type": "stop",
                  "stopwords": "_english_"
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "analyzer": "my_analyzer",
                "search_analyzer": "my_stop_analyzer",
                "search_quote_analyzer": "my_analyzer"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "title": "The Quick Brown Fox"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "title": "A Quick Brown Fox"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "\"the quick brown fox\""
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/coerce.asciidoc",
      "line": 19
    },
    "digest": "5c734d4a7252cc155f8dc90c4785f491",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": {\n        \"type\": \"integer\"\n      },\n      \"number_two\": {\n        \"type\": \"integer\",\n        \"coerce\": false\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"number_one\": \"10\" <1>\n}\n\nPUT my_index/_doc/2\n{\n  \"number_two\": \"10\" <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "number_one": {
                "type": "integer"
              },
              "number_two": {
                "type": "integer",
                "coerce": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "number_one": "10"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "number_two": "10"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/coerce.asciidoc",
      "line": 60
    },
    "digest": "dad2db81c728827a782a3fefd3399849",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"index.mapping.coerce\": false\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": {\n        \"type\": \"integer\",\n        \"coerce\": true\n      },\n      \"number_two\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{ \"number_one\": \"10\" } <1>\n\nPUT my_index/_doc/2\n{ \"number_two\": \"10\" } <2>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index.mapping.coerce": false
          },
          "mappings": {
            "properties": {
              "number_one": {
                "type": "integer",
                "coerce": true
              },
              "number_two": {
                "type": "integer"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "number_one": "10"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "number_two": "10"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/copy-to.asciidoc",
      "line": 10
    },
    "digest": "363d200a378f8c3acc6d8a77df42eba7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"first_name\": {\n        \"type\": \"text\",\n        \"copy_to\": \"full_name\" <1>\n      },\n      \"last_name\": {\n        \"type\": \"text\",\n        \"copy_to\": \"full_name\" <1>\n      },\n      \"full_name\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"first_name\": \"John\",\n  \"last_name\": \"Smith\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"full_name\": { <2>\n        \"query\": \"John Smith\",\n        \"operator\": \"and\"\n      }\n    }\n  }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "first_name": {
                "type": "text",
                "copy_to": "full_name"
              },
              "last_name": {
                "type": "text",
                "copy_to": "full_name"
              },
              "full_name": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "first_name": "John",
          "last_name": "Smith"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "full_name": {
                "query": "John Smith",
                "operator": "and"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/doc-values.asciidoc",
      "line": 25
    },
    "digest": "4e75503583efc222045e0be4430a2863",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"status_code\": { <1>\n        \"type\":       \"keyword\"\n      },\n      \"session_id\": { <2>\n        \"type\":       \"keyword\",\n        \"doc_values\": false\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "status_code": {
                "type": "keyword"
              },
              "session_id": {
                "type": "keyword",
                "doc_values": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/dynamic.asciidoc",
      "line": 9
    },
    "digest": "e65e9805b8b17f72616f099e11a5c337",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1 <1>\n{\n  \"username\": \"johnsmith\",\n  \"name\": {\n    \"first\": \"John\",\n    \"last\": \"Smith\"\n  }\n}\n\nGET my_index/_mapping <2>\n\nPUT my_index/_doc/2 <3>\n{\n  \"username\": \"marywhite\",\n  \"email\": \"mary@white.com\",\n  \"name\": {\n    \"first\": \"Mary\",\n    \"middle\": \"Alice\",\n    \"last\": \"White\"\n  }\n}\n\nGET my_index/_mapping <4>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "username": "johnsmith",
          "name": {
            "first": "John",
            "last": "Smith"
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "username": "marywhite",
          "email": "mary@white.com",
          "name": {
            "first": "Mary",
            "middle": "Alice",
            "last": "White"
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/dynamic.asciidoc",
      "line": 60
    },
    "digest": "4b478d9b1231513362d2fa8c766cd0a5",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic\": false, <1>\n    \"properties\": {\n      \"user\": { <2>\n        \"properties\": {\n          \"name\": {\n            \"type\": \"text\"\n          },\n          \"social_networks\": { <3>\n            \"dynamic\": true,\n            \"properties\": {}\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic": false,
            "properties": {
              "user": {
                "properties": {
                  "name": {
                    "type": "text"
                  },
                  "social_networks": {
                    "dynamic": true,
                    "properties": {}
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/eager-global-ordinals.asciidoc",
      "line": 53
    },
    "digest": "f7682345a4e36a4c6e553902039a9410",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_mapping\n{\n  \"properties\": {\n    \"tags\": {\n      \"type\": \"keyword\",\n      \"eager_global_ordinals\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "tags": {
              "type": "keyword",
              "eager_global_ordinals": true
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/eager-global-ordinals.asciidoc",
      "line": 76
    },
    "digest": "9c9221059c06dd26041a95b93ec9b6df",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_mapping\n{\n  \"properties\": {\n    \"tags\": {\n      \"type\": \"keyword\",\n      \"eager_global_ordinals\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "tags": {
              "type": "keyword",
              "eager_global_ordinals": false
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/enabled.asciidoc",
      "line": 17
    },
    "digest": "b0b00ab5b673d747d36deabbc4359859",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_id\": {\n        \"type\":  \"keyword\"\n      },\n      \"last_updated\": {\n        \"type\": \"date\"\n      },\n      \"session_data\": { <1>\n        \"type\": \"object\",\n        \"enabled\": false\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/session_1\n{\n  \"user_id\": \"kimchy\",\n  \"session_data\": { <2>\n    \"arbitrary_object\": {\n      \"some_array\": [ \"foo\", \"bar\", { \"baz\": 2 } ]\n    }\n  },\n  \"last_updated\": \"2015-12-06T18:20:22\"\n}\n\nPUT my_index/_doc/session_2\n{\n  \"user_id\": \"jpountz\",\n  \"session_data\": \"none\", <3>\n  \"last_updated\": \"2015-12-06T18:22:13\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_id": {
                "type": "keyword"
              },
              "last_updated": {
                "type": "date"
              },
              "session_data": {
                "type": "object",
                "enabled": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/session_1",
        "query": null,
        "body": {
          "user_id": "kimchy",
          "session_data": {
            "arbitrary_object": {
              "some_array": [
                "foo",
                "bar",
                {
                  "baz": 2
                }
              ]
            }
          },
          "last_updated": "2015-12-06T18:20:22"
        },
        "params": {
          "index": "my_index",
          "id": "session_1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/session_2",
        "query": null,
        "body": {
          "user_id": "jpountz",
          "session_data": "none",
          "last_updated": "2015-12-06T18:22:13"
        },
        "params": {
          "index": "my_index",
          "id": "session_2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/enabled.asciidoc",
      "line": 64
    },
    "digest": "d31274ad53af4baa23ec3e5000783cbd",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"enabled\": false <1>\n  }\n}\n\nPUT my_index/_doc/session_1\n{\n  \"user_id\": \"kimchy\",\n  \"session_data\": {\n    \"arbitrary_object\": {\n      \"some_array\": [ \"foo\", \"bar\", { \"baz\": 2 } ]\n    }\n  },\n  \"last_updated\": \"2015-12-06T18:20:22\"\n}\n\nGET my_index/_doc/session_1 <2>\n\nGET my_index/_mapping <3>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "enabled": false
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/session_1",
        "query": null,
        "body": {
          "user_id": "kimchy",
          "session_data": {
            "arbitrary_object": {
              "some_array": [
                "foo",
                "bar",
                {
                  "baz": 2
                }
              ]
            }
          },
          "last_updated": "2015-12-06T18:20:22"
        },
        "params": {
          "index": "my_index",
          "id": "session_1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/session_1",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "session_1"
        },
        "api": "get"
      },
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/enabled.asciidoc",
      "line": 99
    },
    "digest": "e93514654ea0c7c9f15cda0eed61a292",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"session_data\": {\n        \"type\": \"object\",\n        \"enabled\": false\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/session_1\n{\n  \"session_data\": \"foo bar\" <1>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "session_data": {
                "type": "object",
                "enabled": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/session_1",
        "query": null,
        "body": {
          "session_data": "foo bar"
        },
        "params": {
          "index": "my_index",
          "id": "session_1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/fielddata.asciidoc",
      "line": 56
    },
    "digest": "ef9111c1648d7820925f12e07d1346c5",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_field\": { <1>\n        \"type\": \"text\",\n        \"fields\": {\n          \"keyword\": { <2>\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_field": {
                "type": "text",
                "fields": {
                  "keyword": {
                    "type": "keyword"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/fielddata.asciidoc",
      "line": 84
    },
    "digest": "a7c15fe6b5779c84ce9a34bf4b2a7ab7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_mapping\n{\n  \"properties\": {\n    \"my_field\": { <1>\n      \"type\":     \"text\",\n      \"fielddata\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "my_field": {
              "type": "text",
              "fielddata": true
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/fielddata.asciidoc",
      "line": 117
    },
    "digest": "6a81d00f0d73bc5985e76b3cadab645e",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"tag\": {\n        \"type\": \"text\",\n        \"fielddata\": true,\n        \"fielddata_frequency_filter\": {\n          \"min\": 0.001,\n          \"max\": 0.1,\n          \"min_segment_size\": 500\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "tag": {
                "type": "text",
                "fielddata": true,
                "fielddata_frequency_filter": {
                  "min": 0.001,
                  "max": 0.1,
                  "min_segment_size": 500
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/format.asciidoc",
      "line": 13
    },
    "digest": "7f465b7e8ed42df6c42251b4481e699e",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"date\": {\n        \"type\":   \"date\",\n        \"format\": \"yyyy-MM-dd\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "date": {
                "type": "date",
                "format": "yyyy-MM-dd"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/ignore-above.asciidoc",
      "line": 10
    },
    "digest": "17a77b9c39526c865d7bd6b72cf4a79f",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"message\": {\n        \"type\": \"keyword\",\n        \"ignore_above\": 20 <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1 <2>\n{\n  \"message\": \"Syntax error\"\n}\n\nPUT my_index/_doc/2 <3>\n{\n  \"message\": \"Syntax error with some long stacktrace\"\n}\n\nGET my_index/_search <4>\n{\n  \"aggs\": {\n    \"messages\": {\n      \"terms\": {\n        \"field\": \"message\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "message": {
                "type": "keyword",
                "ignore_above": 20
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "message": "Syntax error"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "message": "Syntax error with some long stacktrace"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "aggs": {
            "messages": {
              "terms": {
                "field": "message"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/ignore-malformed.asciidoc",
      "line": 16
    },
    "digest": "56af112ba65955f3ca5ef61a199c0daa",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": {\n        \"type\": \"integer\",\n        \"ignore_malformed\": true\n      },\n      \"number_two\": {\n        \"type\": \"integer\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"text\":       \"Some text value\",\n  \"number_one\": \"foo\" <1>\n}\n\nPUT my_index/_doc/2\n{\n  \"text\":       \"Some text value\",\n  \"number_two\": \"foo\" <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "number_one": {
                "type": "integer",
                "ignore_malformed": true
              },
              "number_two": {
                "type": "integer"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Some text value",
          "number_one": "foo"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "text": "Some text value",
          "number_two": "foo"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/ignore-malformed.asciidoc",
      "line": 69
    },
    "digest": "835faff0d2e8874b7b9693376fa7fc57",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"index.mapping.ignore_malformed\": true <1>\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"number_one\": { <1>\n        \"type\": \"byte\"\n      },\n      \"number_two\": {\n        \"type\": \"integer\",\n        \"ignore_malformed\": false <2>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index.mapping.ignore_malformed": true
          },
          "mappings": {
            "properties": {
              "number_one": {
                "type": "byte"
              },
              "number_two": {
                "type": "integer",
                "ignore_malformed": false
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/index-options.asciidoc",
      "line": 34
    },
    "digest": "3a24ebb542f657420fcd8fdf3f757ce6",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"index_options\": \"offsets\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"text\": \"Quick brown fox\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"text\": \"brown fox\"\n    }\n  },\n  \"highlight\": {\n    \"fields\": {\n      \"text\": {} <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "index_options": "offsets"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Quick brown fox"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "text": "brown fox"
            }
          },
          "highlight": {
            "fields": {
              "text": {}
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/index-prefixes.asciidoc",
      "line": 21
    },
    "digest": "ff5d15a265855b1c11cb20ceef6a1b58",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"body_text\": {\n        \"type\": \"text\",\n        \"index_prefixes\": { }    <1>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "body_text": {
                "type": "text",
                "index_prefixes": {}
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/index-prefixes.asciidoc",
      "line": 41
    },
    "digest": "b19ec4a20c19082e5c40e3b1f28bfbcb",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"full_name\": {\n        \"type\": \"text\",\n        \"index_prefixes\": {\n          \"min_chars\" : 1,\n          \"max_chars\" : 10\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "full_name": {
                "type": "text",
                "index_prefixes": {
                  "min_chars": 1,
                  "max_chars": 10
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/meta.asciidoc",
      "line": 9
    },
    "digest": "bb49cbbeef6afe2dae0db46c4a10df3b",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"latency\": {\n        \"type\": \"long\",\n        \"meta\": {\n          \"unit\": \"ms\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "latency": {
                "type": "long",
                "meta": {
                  "unit": "ms"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/multi-fields.asciidoc",
      "line": 10
    },
    "digest": "5271f4ff29bb48838396e5a674664ee0",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"city\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"raw\": { <1>\n            \"type\":  \"keyword\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"city\": \"New York\"\n}\n\nPUT my_index/_doc/2\n{\n  \"city\": \"York\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"city\": \"york\" <2>\n    }\n  },\n  \"sort\": {\n    \"city.raw\": \"asc\" <3>\n  },\n  \"aggs\": {\n    \"Cities\": {\n      \"terms\": {\n        \"field\": \"city.raw\" <3>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "city": {
                "type": "text",
                "fields": {
                  "raw": {
                    "type": "keyword"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "city": "New York"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "city": "York"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "city": "york"
            }
          },
          "sort": {
            "city.raw": "asc"
          },
          "aggs": {
            "Cities": {
              "terms": {
                "field": "city.raw"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/multi-fields.asciidoc",
      "line": 75
    },
    "digest": "fc8097bdfb6f3a4017bf4186ccca8a84",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": { <1>\n        \"type\": \"text\",\n        \"fields\": {\n          \"english\": { <2>\n            \"type\":     \"text\",\n            \"analyzer\": \"english\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{ \"text\": \"quick brown fox\" } <3>\n\nPUT my_index/_doc/2\n{ \"text\": \"quick brown foxes\" } <3>\n\nGET my_index/_search\n{\n  \"query\": {\n    \"multi_match\": {\n      \"query\": \"quick brown foxes\",\n      \"fields\": [ <4>\n        \"text\",\n        \"text.english\"\n      ],\n      \"type\": \"most_fields\" <4>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "fields": {
                  "english": {
                    "type": "text",
                    "analyzer": "english"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "quick brown fox"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "text": "quick brown foxes"
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "multi_match": {
              "query": "quick brown foxes",
              "fields": [
                "text",
                "text.english"
              ],
              "type": "most_fields"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/normalizer.asciidoc",
      "line": 18
    },
    "digest": "4cd40113e0fc90c37976f28d7e4a2327",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"normalizer\": {\n        \"my_normalizer\": {\n          \"type\": \"custom\",\n          \"char_filter\": [],\n          \"filter\": [\"lowercase\", \"asciifolding\"]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"keyword\",\n        \"normalizer\": \"my_normalizer\"\n      }\n    }\n  }\n}\n\nPUT index/_doc/1\n{\n  \"foo\": \"BÀR\"\n}\n\nPUT index/_doc/2\n{\n  \"foo\": \"bar\"\n}\n\nPUT index/_doc/3\n{\n  \"foo\": \"baz\"\n}\n\nPOST index/_refresh\n\nGET index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"foo\": \"BAR\"\n    }\n  }\n}\n\nGET index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"foo\": \"BAR\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "normalizer": {
                "my_normalizer": {
                  "type": "custom",
                  "char_filter": [],
                  "filter": [
                    "lowercase",
                    "asciifolding"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "foo": {
                "type": "keyword",
                "normalizer": "my_normalizer"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "foo": "BÀR"
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/2",
        "query": null,
        "body": {
          "foo": "bar"
        },
        "params": {
          "index": "index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/3",
        "query": null,
        "body": {
          "foo": "baz"
        },
        "params": {
          "index": "index",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/index/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "index"
        },
        "api": "indices.refresh"
      },
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "foo": "BAR"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "foo": "BAR"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/normalizer.asciidoc",
      "line": 82
    },
    "digest": "3088eb56d501a35ffbd654bc1016dbe2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": $body.took,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 2,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.4700036,\n    \"hits\": [\n      {\n        \"_index\": \"index\",\n        \"_id\": \"1\",\n        \"_score\": 0.4700036,\n        \"_source\": {\n          \"foo\": \"BÀR\"\n        }\n      },\n      {\n        \"_index\": \"index\",\n        \"_id\": \"2\",\n        \"_score\": 0.4700036,\n        \"_source\": {\n          \"foo\": \"bar\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/params/normalizer.asciidoc",
      "line": 125
    },
    "digest": "6f842819c50e8490080dd085e0c6aca3",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"foo_terms\": {\n      \"terms\": {\n        \"field\": \"foo\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "size": 0,
          "aggs": {
            "foo_terms": {
              "terms": {
                "field": "foo"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/normalizer.asciidoc",
      "line": 143
    },
    "digest": "c962116c8a4852673ef22e6d05659e9b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 43,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 3,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": []\n  },\n  \"aggregations\": {\n    \"foo_terms\": {\n      \"doc_count_error_upper_bound\": 0,\n      \"sum_other_doc_count\": 0,\n      \"buckets\": [\n        {\n          \"key\": \"bar\",\n          \"doc_count\": 2\n        },\n        {\n          \"key\": \"baz\",\n          \"doc_count\": 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "mapping/params/norms.asciidoc",
      "line": 21
    },
    "digest": "f9d15004aba50331c595837c4546aeef",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_mapping\n{\n  \"properties\": {\n    \"title\": {\n      \"type\": \"text\",\n      \"norms\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "title": {
              "type": "text",
              "norms": false
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/null-value.asciidoc",
      "line": 12
    },
    "digest": "463e64093c0dfba910eb5b248085584f",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"status_code\": {\n        \"type\":       \"keyword\",\n        \"null_value\": \"NULL\" <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"status_code\": null\n}\n\nPUT my_index/_doc/2\n{\n  \"status_code\": [] <2>\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"term\": {\n      \"status_code\": \"NULL\" <3>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "status_code": {
                "type": "keyword",
                "null_value": "NULL"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "status_code": null
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "status_code": []
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "status_code": "NULL"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/position-increment-gap.asciidoc",
      "line": 15
    },
    "digest": "5e17abef396d757d65edf81dff5701b6",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1\n{\n    \"names\": [ \"John Abraham\", \"Lincoln Smith\"]\n}\n\nGET my_index/_search\n{\n    \"query\": {\n        \"match_phrase\": {\n            \"names\": {\n                \"query\": \"Abraham Lincoln\" <1>\n            }\n        }\n    }\n}\n\nGET my_index/_search\n{\n    \"query\": {\n        \"match_phrase\": {\n            \"names\": {\n                \"query\": \"Abraham Lincoln\",\n                \"slop\": 101 <2>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "names": [
            "John Abraham",
            "Lincoln Smith"
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "names": {
                "query": "Abraham Lincoln"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "names": {
                "query": "Abraham Lincoln",
                "slop": 101
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/position-increment-gap.asciidoc",
      "line": 53
    },
    "digest": "a37ed1648f68b69e2ea467b38ce21ffc",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"names\": {\n        \"type\": \"text\",\n        \"position_increment_gap\": 0 <1>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n    \"names\": [ \"John Abraham\", \"Lincoln Smith\"]\n}\n\nGET my_index/_search\n{\n    \"query\": {\n        \"match_phrase\": {\n            \"names\": \"Abraham Lincoln\" <2>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "names": {
                "type": "text",
                "position_increment_gap": 0
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "names": [
            "John Abraham",
            "Lincoln Smith"
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "names": "Abraham Lincoln"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/properties.asciidoc",
      "line": 17
    },
    "digest": "241df3bb0c16b4bd53ee569a45539184",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": { <1>\n      \"manager\": {\n        \"properties\": { <2>\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { \"type\": \"text\"  }\n        }\n      },\n      \"employees\": {\n        \"type\": \"nested\",\n        \"properties\": { <3>\n          \"age\":  { \"type\": \"integer\" },\n          \"name\": { \"type\": \"text\"  }\n        }\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1 <4>\n{\n  \"region\": \"US\",\n  \"manager\": {\n    \"name\": \"Alice White\",\n    \"age\": 30\n  },\n  \"employees\": [\n    {\n      \"name\": \"John Smith\",\n      \"age\": 34\n    },\n    {\n      \"name\": \"Peter Brown\",\n      \"age\": 26\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "manager": {
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "text"
                  }
                }
              },
              "employees": {
                "type": "nested",
                "properties": {
                  "age": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "text"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "region": "US",
          "manager": {
            "name": "Alice White",
            "age": 30
          },
          "employees": [
            {
              "name": "John Smith",
              "age": 34
            },
            {
              "name": "Peter Brown",
              "age": 26
            }
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/properties.asciidoc",
      "line": 74
    },
    "digest": "7f21b09b9306a03491ddcf0355f33860",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"manager.name\": \"Alice White\"\n    }\n  },\n  \"aggs\": {\n    \"Employees\": {\n      \"nested\": {\n        \"path\": \"employees\"\n      },\n      \"aggs\": {\n        \"Employee Ages\": {\n          \"histogram\": {\n            \"field\": \"employees.age\",\n            \"interval\": 5\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "manager.name": "Alice White"
            }
          },
          "aggs": {
            "Employees": {
              "nested": {
                "path": "employees"
              },
              "aggs": {
                "Employee Ages": {
                  "histogram": {
                    "field": "employees.age",
                    "interval": 5
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/search-analyzer.asciidoc",
      "line": 16
    },
    "digest": "60677e5144fed659e8417b7fa9964285",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"autocomplete_filter\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 1,\n          \"max_gram\": 20\n        }\n      },\n      \"analyzer\": {\n        \"autocomplete\": { <1>\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"autocomplete_filter\"\n          ]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"analyzer\": \"autocomplete\", <2>\n        \"search_analyzer\": \"standard\" <2>\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"text\": \"Quick Brown Fox\" <3>\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"text\": {\n        \"query\": \"Quick Br\", <4>\n        \"operator\": \"and\"\n      }\n    }\n  }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "autocomplete_filter": {
                  "type": "edge_ngram",
                  "min_gram": 1,
                  "max_gram": 20
                }
              },
              "analyzer": {
                "autocomplete": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "autocomplete_filter"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "analyzer": "autocomplete",
                "search_analyzer": "standard"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Quick Brown Fox"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "text": {
                "query": "Quick Br",
                "operator": "and"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/similarity.asciidoc",
      "line": 33
    },
    "digest": "e6e31dcdd1ca214c17e375c54069d513",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"default_field\": { <1>\n        \"type\": \"text\"\n      },\n      \"boolean_sim_field\": {\n        \"type\": \"text\",\n        \"similarity\": \"boolean\" <2>\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "default_field": {
                "type": "text"
              },
              "boolean_sim_field": {
                "type": "text",
                "similarity": "boolean"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/store.asciidoc",
      "line": 20
    },
    "digest": "ff26214b3981f7418688e4c8905d5068",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"store\": true <1>\n      },\n      \"date\": {\n        \"type\": \"date\",\n        \"store\": true <1>\n      },\n      \"content\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"title\":   \"Some short title\",\n  \"date\":    \"2015-01-01\",\n  \"content\": \"A very long content field...\"\n}\n\nGET my_index/_search\n{\n  \"stored_fields\": [ \"title\", \"date\" ] <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "store": true
              },
              "date": {
                "type": "date",
                "store": true
              },
              "content": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "title": "Some short title",
          "date": "2015-01-01",
          "content": "A very long content field..."
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "stored_fields": [
            "title",
            "date"
          ]
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/params/term-vector.asciidoc",
      "line": 35
    },
    "digest": "325ce39f81c442a5447ce0ede550c44a",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\":        \"text\",\n        \"term_vector\": \"with_positions_offsets\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"text\": \"Quick brown fox\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"text\": \"brown fox\"\n    }\n  },\n  \"highlight\": {\n    \"fields\": {\n      \"text\": {} <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "term_vector": "with_positions_offsets"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "text": "Quick brown fox"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "text": "brown fox"
            }
          },
          "highlight": {
            "fields": {
              "text": {}
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic-mapping.asciidoc",
      "line": 11
    },
    "digest": "61c49cee90c6aa0eafbdd5cc03936e7d",
    "lang": "console",
    "found": [],
    "source": "PUT data/_doc/1 <1>\n{ \"count\": 5 }",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/data/_doc/1",
        "query": null,
        "body": {
          "count": 5
        },
        "params": {
          "index": "data",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/field-mapping.asciidoc",
      "line": 50
    },
    "digest": "4909bf2f9e86b4bdd6af1d0b13c0015d",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index/_doc/1\n{\n  \"create_date\": \"2015/09/02\"\n}\n\nGET my_index/_mapping <1>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "create_date": "2015/09/02"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/field-mapping.asciidoc",
      "line": 68
    },
    "digest": "95fa846e5d0a75210f9ad1fa1acfa8f3",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"date_detection\": false\n  }\n}\n\nPUT my_index/_doc/1 <1>\n{\n  \"create\": \"2015/09/02\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "date_detection": false
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "create": "2015/09/02"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/field-mapping.asciidoc",
      "line": 90
    },
    "digest": "4eae628c9aaa259f80711c6e9cc6fd25",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_date_formats\": [\"MM/dd/yyyy\"]\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"create_date\": \"09/25/2015\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_date_formats": [
              "MM/dd/yyyy"
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "create_date": "09/25/2015"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/field-mapping.asciidoc",
      "line": 115
    },
    "digest": "fa3cd4ffaec8273656a328ae29f32c65",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"numeric_detection\": true\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"my_float\":   \"1.0\", <1>\n  \"my_integer\": \"1\" <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "numeric_detection": true
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_float": "1.0",
          "my_integer": "1"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 84
    },
    "digest": "bb33e638fdeded7d721d9bbac2305fda",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"integers\": {\n          \"match_mapping_type\": \"long\",\n          \"mapping\": {\n            \"type\": \"integer\"\n          }\n        }\n      },\n      {\n        \"strings\": {\n          \"match_mapping_type\": \"string\",\n          \"mapping\": {\n            \"type\": \"text\",\n            \"fields\": {\n              \"raw\": {\n                \"type\":  \"keyword\",\n                \"ignore_above\": 256\n              }\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"my_integer\": 5, <1>\n  \"my_string\": \"Some string\" <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "integers": {
                  "match_mapping_type": "long",
                  "mapping": {
                    "type": "integer"
                  }
                }
              },
              {
                "strings": {
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "text",
                    "fields": {
                      "raw": {
                        "type": "keyword",
                        "ignore_above": 256
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "my_integer": 5,
          "my_string": "Some string"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 138
    },
    "digest": "4f54b88e05c7a62901062e9e0ed13e5a",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"longs_as_strings\": {\n          \"match_mapping_type\": \"string\",\n          \"match\":   \"long_*\",\n          \"unmatch\": \"*_text\",\n          \"mapping\": {\n            \"type\": \"long\"\n          }\n        }\n      }\n    ]\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"long_num\": \"5\", <1>\n  \"long_text\": \"foo\" <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "longs_as_strings": {
                  "match_mapping_type": "string",
                  "match": "long_*",
                  "unmatch": "*_text",
                  "mapping": {
                    "type": "long"
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "long_num": "5",
          "long_text": "foo"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 192
    },
    "digest": "0b91c082258ce623cc716b679aace653",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"full_name\": {\n          \"path_match\":   \"name.*\",\n          \"path_unmatch\": \"*.middle\",\n          \"mapping\": {\n            \"type\":       \"text\",\n            \"copy_to\":    \"full_name\"\n          }\n        }\n      }\n    ]\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"name\": {\n    \"first\":  \"John\",\n    \"middle\": \"Winston\",\n    \"last\":   \"Lennon\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "full_name": {
                  "path_match": "name.*",
                  "path_unmatch": "*.middle",
                  "mapping": {
                    "type": "text",
                    "copy_to": "full_name"
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "name": {
            "first": "John",
            "middle": "Winston",
            "last": "Lennon"
          }
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 227
    },
    "digest": "be51ed37c8425d281a8153abe56b04cb",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index/_doc/2\n{\n  \"name\": {\n    \"first\":  \"Paul\",\n    \"last\":   \"McCartney\",\n    \"title\": {\n      \"value\": \"Sir\",\n      \"category\": \"order of chivalry\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/2",
        "query": null,
        "body": {
          "name": {
            "first": "Paul",
            "last": "McCartney",
            "title": {
              "value": "Sir",
              "category": "order of chivalry"
            }
          }
        },
        "params": {
          "index": "my_index",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 252
    },
    "digest": "6873971eb4e4577d76d0a5bd7cd15ef9",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"named_analyzers\": {\n          \"match_mapping_type\": \"string\",\n          \"match\": \"*\",\n          \"mapping\": {\n            \"type\": \"text\",\n            \"analyzer\": \"{name}\"\n          }\n        }\n      },\n      {\n        \"no_doc_values\": {\n          \"match_mapping_type\":\"*\",\n          \"mapping\": {\n            \"type\": \"{dynamic_type}\",\n            \"doc_values\": false\n          }\n        }\n      }\n    ]\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"english\": \"Some English text\", <1>\n  \"count\":   5 <2>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "named_analyzers": {
                  "match_mapping_type": "string",
                  "match": "*",
                  "mapping": {
                    "type": "text",
                    "analyzer": "{name}"
                  }
                }
              },
              {
                "no_doc_values": {
                  "match_mapping_type": "*",
                  "mapping": {
                    "type": "{dynamic_type}",
                    "doc_values": false
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "english": "Some English text",
          "count": 5
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 304
    },
    "digest": "87f85bb49d18f73d0eed0b704e05eb90",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"strings_as_keywords\": {\n          \"match_mapping_type\": \"string\",\n          \"mapping\": {\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "strings_as_keywords": {
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "keyword"
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 332
    },
    "digest": "1a59fa2708ccb3a24c71e8306b81f17f",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"strings_as_text\": {\n          \"match_mapping_type\": \"string\",\n          \"mapping\": {\n            \"type\": \"text\"\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "strings_as_text": {
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "text"
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 357
    },
    "digest": "3e60c0b29bd3931927e6f2ee7d2ed0ef",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"strings_as_keywords\": {\n          \"match_mapping_type\": \"string\",\n          \"mapping\": {\n            \"type\": \"text\",\n            \"norms\": false,\n            \"fields\": {\n              \"keyword\": {\n                \"type\": \"keyword\",\n                \"ignore_above\": 256\n              }\n            }\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "strings_as_keywords": {
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "text",
                    "norms": false,
                    "fields": {
                      "keyword": {
                        "type": "keyword",
                        "ignore_above": 256
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "mapping/dynamic/templates.asciidoc",
      "line": 395
    },
    "digest": "9a91f7d0bf52d6c582c62daef5c9d040",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"unindexed_longs\": {\n          \"match_mapping_type\": \"long\",\n          \"mapping\": {\n            \"type\": \"long\",\n            \"index\": false\n          }\n        }\n      },\n      {\n        \"unindexed_doubles\": {\n          \"match_mapping_type\": \"double\",\n          \"mapping\": {\n            \"type\": \"float\", <1>\n            \"index\": false\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "unindexed_longs": {
                  "match_mapping_type": "long",
                  "mapping": {
                    "type": "long",
                    "index": false
                  }
                }
              },
              {
                "unindexed_doubles": {
                  "match_mapping_type": "double",
                  "mapping": {
                    "type": "float",
                    "index": false
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 9
    },
    "digest": "035a7a919eb6513b4769a3727b7d6447",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"whitespace\",\n  \"text\":     \"The quick brown fox.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "whitespace",
          "text": "The quick brown fox."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 20
    },
    "digest": "849718cd9322ec336d1805137eac05cd",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"The\",\n      \"start_offset\": 0,\n      \"end_offset\": 3,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"quick\",\n      \"start_offset\": 4,\n      \"end_offset\": 9,\n      \"type\": \"word\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"brown\",\n      \"start_offset\": 10,\n      \"end_offset\": 15,\n      \"type\": \"word\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"fox.\",\n      \"start_offset\": 16,\n      \"end_offset\": 20,\n      \"type\": \"word\",\n      \"position\": 3\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 62
    },
    "digest": "f7ec9062b3a7578fed55f119d7c22b74",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\":  [ \"lowercase\", \"asciifolding\" ],\n  \"text\":      \"Is this déja vu?\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "lowercase",
            "asciifolding"
          ],
          "text": "Is this déja vu?"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 74
    },
    "digest": "2c5b97ad9e616d74cf8ac8f4bbe664a8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"is\",\n      \"start_offset\": 0,\n      \"end_offset\": 2,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"this\",\n      \"start_offset\": 3,\n      \"end_offset\": 7,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"deja\",\n      \"start_offset\": 8,\n      \"end_offset\": 12,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"vu\",\n      \"start_offset\": 13,\n      \"end_offset\": 15,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 3\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 125
    },
    "digest": "acebf0b821acfbd6089f71e0359a56d3",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"std_folded\": { <1>\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"asciifolding\"\n          ]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"my_text\": {\n        \"type\": \"text\",\n        \"analyzer\": \"std_folded\" <2>\n      }\n    }\n  }\n}\n\nGET my_index/_analyze <3>\n{\n  \"analyzer\": \"std_folded\", <4>\n  \"text\":     \"Is this déjà vu?\"\n}\n\nGET my_index/_analyze <3>\n{\n  \"field\": \"my_text\", <5>\n  \"text\":  \"Is this déjà vu?\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "std_folded": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "asciifolding"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "my_text": {
                "type": "text",
                "analyzer": "std_folded"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "GET",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "std_folded",
          "text": "Is this déjà vu?"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      },
      {
        "method": "GET",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "field": "my_text",
          "text": "Is this déjà vu?"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/testing.asciidoc",
      "line": 168
    },
    "digest": "2c5b97ad9e616d74cf8ac8f4bbe664a8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"is\",\n      \"start_offset\": 0,\n      \"end_offset\": 2,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"this\",\n      \"start_offset\": 3,\n      \"end_offset\": 7,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"deja\",\n      \"start_offset\": 8,\n      \"end_offset\": 12,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"vu\",\n      \"start_offset\": 13,\n      \"end_offset\": 15,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 3\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/analyzers/configuring.asciidoc",
      "line": 10
    },
    "digest": "98fa08f638178692476abcae1ac8ce5a",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"std_english\": { <1>\n          \"type\":      \"standard\",\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"my_text\": {\n        \"type\":     \"text\",\n        \"analyzer\": \"standard\", <2>\n        \"fields\": {\n          \"english\": {\n            \"type\":     \"text\",\n            \"analyzer\": \"std_english\" <3>\n          }\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"field\": \"my_text\", <2>\n  \"text\": \"The old brown cow\"\n}\n\nPOST my_index/_analyze\n{\n  \"field\": \"my_text.english\", <3>\n  \"text\": \"The old brown cow\"\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "std_english": {
                  "type": "standard",
                  "stopwords": "_english_"
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "my_text": {
                "type": "text",
                "analyzer": "standard",
                "fields": {
                  "english": {
                    "type": "text",
                    "analyzer": "std_english"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "field": "my_text",
          "text": "The old brown cow"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "field": "my_text.english",
          "text": "The old brown cow"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/custom-analyzer.asciidoc",
      "line": 55
    },
    "digest": "81db5fb0ea5b942204f4ba27b7ae836a",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_analyzer\": {\n          \"type\": \"custom\", <1>\n          \"tokenizer\": \"standard\",\n          \"char_filter\": [\n            \"html_strip\"\n          ],\n          \"filter\": [\n            \"lowercase\",\n            \"asciifolding\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_custom_analyzer\",\n  \"text\": \"Is this <b>déjà vu</b>?\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_analyzer": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "char_filter": [
                    "html_strip"
                  ],
                  "filter": [
                    "lowercase",
                    "asciifolding"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_custom_analyzer",
          "text": "Is this déjà vu</b>?"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/custom-analyzer.asciidoc",
      "line": 157
    },
    "digest": "8fb13998654631659f998e35922bcde6",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_analyzer\": { <1>\n          \"type\": \"custom\",\n          \"char_filter\": [\n            \"emoticons\"\n          ],\n          \"tokenizer\": \"punctuation\",\n          \"filter\": [\n            \"lowercase\",\n            \"english_stop\"\n          ]\n        }\n      },\n      \"tokenizer\": {\n        \"punctuation\": { <2>\n          \"type\": \"pattern\",\n          \"pattern\": \"[ .,!?]\"\n        }\n      },\n      \"char_filter\": {\n        \"emoticons\": { <3>\n          \"type\": \"mapping\",\n          \"mappings\": [\n            \":) => _happy_\",\n            \":( => _sad_\"\n          ]\n        }\n      },\n      \"filter\": {\n        \"english_stop\": { <4>\n          \"type\": \"stop\",\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_custom_analyzer\",\n  \"text\": \"I'm a :) person, and you?\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_analyzer": {
                  "type": "custom",
                  "char_filter": [
                    "emoticons"
                  ],
                  "tokenizer": "punctuation",
                  "filter": [
                    "lowercase",
                    "english_stop"
                  ]
                }
              },
              "tokenizer": {
                "punctuation": {
                  "type": "pattern",
                  "pattern": "[ .,!?]"
                }
              },
              "char_filter": {
                "emoticons": {
                  "type": "mapping",
                  "mappings": [
                    ":) => _happy_",
                    ":( => _sad_"
                  ]
                }
              },
              "filter": {
                "english_stop": {
                  "type": "stop",
                  "stopwords": "_english_"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_custom_analyzer",
          "text": "I'm a :) person, and you?"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/specify-analyzer.asciidoc",
      "line": 50
    },
    "digest": "311c6e60a020df4e301c6db9bcaf9e0a",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"analyzer\": \"whitespace\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "analyzer": "whitespace"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/specify-analyzer.asciidoc",
      "line": 74
    },
    "digest": "7b2c75b4f6150485593c49f96f05fb2f",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"type\": \"simple\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "type": "simple"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/specify-analyzer.asciidoc",
      "line": 130
    },
    "digest": "040e4b4d0119e4cc94eafb9db91baae5",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"message\": {\n        \"query\": \"Quick foxes\",\n        \"analyzer\": \"stop\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "query": "Quick foxes",
                "analyzer": "stop"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/specify-analyzer.asciidoc",
      "line": 158
    },
    "digest": "8870b188fd9471b853f03cbc2a312261",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"analyzer\": \"whitespace\",\n        \"search_analyzer\": \"simple\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "analyzer": "whitespace",
                "search_analyzer": "simple"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/specify-analyzer.asciidoc",
      "line": 186
    },
    "digest": "77c1e9a95f91229bc3f4ede13af97d34",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"type\": \"simple\"\n        },\n        \"default_search\": {\n          \"type\": \"whitespace\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "type": "simple"
                },
                "default_search": {
                  "type": "whitespace"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/fingerprint-analyzer.asciidoc",
      "line": 16
    },
    "digest": "6490d89a4e43cac5e6b9bc19840d5478",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"fingerprint\",\n  \"text\": \"Yes yes, Gödel said this sentence is consistent and.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "fingerprint",
          "text": "Yes yes, Gödel said this sentence is consistent and."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/fingerprint-analyzer.asciidoc",
      "line": 86
    },
    "digest": "2659ccd414867f3a5ee262c9b7cd3f1d",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_fingerprint_analyzer\": {\n          \"type\": \"fingerprint\",\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_fingerprint_analyzer\",\n  \"text\": \"Yes yes, Gödel said this sentence is consistent and.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_fingerprint_analyzer": {
                  "type": "fingerprint",
                  "stopwords": "_english_"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_fingerprint_analyzer",
          "text": "Yes yes, Gödel said this sentence is consistent and."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/fingerprint-analyzer.asciidoc",
      "line": 156
    },
    "digest": "ce725697f93b3eebb3a266314568565a",
    "lang": "console",
    "found": [],
    "source": "PUT /fingerprint_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_fingerprint\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"asciifolding\",\n            \"fingerprint\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/fingerprint_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "rebuilt_fingerprint": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "asciifolding",
                    "fingerprint"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "fingerprint_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/keyword-analyzer.asciidoc",
      "line": 11
    },
    "digest": "19ee488226d357d1576e7d3ae7a4693f",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"keyword\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "keyword",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/keyword-analyzer.asciidoc",
      "line": 68
    },
    "digest": "c1efc5cfcb3c29711bfe118f1baa28b0",
    "lang": "console",
    "found": [],
    "source": "PUT /keyword_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_keyword\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [         <1>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/keyword_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "rebuilt_keyword": {
                  "tokenizer": "keyword",
                  "filter": []
                }
              }
            }
          }
        },
        "params": {
          "index": "keyword_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 81
    },
    "digest": "137c62a4443bdd7d5b95a15022a9dc30",
    "lang": "console",
    "found": [],
    "source": "PUT /arabic_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"arabic_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_arabic_\" <1>\n        },\n        \"arabic_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"مثال\"] <2>\n        },\n        \"arabic_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"arabic\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_arabic\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_stop\",\n            \"arabic_normalization\",\n            \"arabic_keywords\",\n            \"arabic_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/arabic_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "arabic_stop": {
                  "type": "stop",
                  "stopwords": "_arabic_"
                },
                "arabic_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "مثال"
                  ]
                },
                "arabic_stemmer": {
                  "type": "stemmer",
                  "language": "arabic"
                }
              },
              "analyzer": {
                "rebuilt_arabic": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "decimal_digit",
                    "arabic_stop",
                    "arabic_normalization",
                    "arabic_keywords",
                    "arabic_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "arabic_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 131
    },
    "digest": "f7dc2fed08e57abda2c3e8a14f8eb098",
    "lang": "console",
    "found": [],
    "source": "PUT /armenian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"armenian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_armenian_\" <1>\n        },\n        \"armenian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"օրինակ\"] <2>\n        },\n        \"armenian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"armenian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_armenian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"armenian_stop\",\n            \"armenian_keywords\",\n            \"armenian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/armenian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "armenian_stop": {
                  "type": "stop",
                  "stopwords": "_armenian_"
                },
                "armenian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "օրինակ"
                  ]
                },
                "armenian_stemmer": {
                  "type": "stemmer",
                  "language": "armenian"
                }
              },
              "analyzer": {
                "rebuilt_armenian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "armenian_stop",
                    "armenian_keywords",
                    "armenian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "armenian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 179
    },
    "digest": "01f50acf7998b24969f451e922d145eb",
    "lang": "console",
    "found": [],
    "source": "PUT /basque_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"basque_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_basque_\" <1>\n        },\n        \"basque_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Adibidez\"] <2>\n        },\n        \"basque_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"basque\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_basque\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"basque_stop\",\n            \"basque_keywords\",\n            \"basque_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/basque_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "basque_stop": {
                  "type": "stop",
                  "stopwords": "_basque_"
                },
                "basque_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "Adibidez"
                  ]
                },
                "basque_stemmer": {
                  "type": "stemmer",
                  "language": "basque"
                }
              },
              "analyzer": {
                "rebuilt_basque": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "basque_stop",
                    "basque_keywords",
                    "basque_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "basque_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 227
    },
    "digest": "496d35c89dc991a1509f7e8fb93ade45",
    "lang": "console",
    "found": [],
    "source": "PUT /bengali_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bengali_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bengali_\" <1>\n        },\n        \"bengali_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"উদাহরণ\"] <2>\n        },\n        \"bengali_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bengali\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bengali\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"bengali_keywords\",\n            \"indic_normalization\",\n            \"bengali_normalization\",\n            \"bengali_stop\",\n            \"bengali_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/bengali_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "bengali_stop": {
                  "type": "stop",
                  "stopwords": "_bengali_"
                },
                "bengali_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "উদাহরণ"
                  ]
                },
                "bengali_stemmer": {
                  "type": "stemmer",
                  "language": "bengali"
                }
              },
              "analyzer": {
                "rebuilt_bengali": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "decimal_digit",
                    "bengali_keywords",
                    "indic_normalization",
                    "bengali_normalization",
                    "bengali_stop",
                    "bengali_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "bengali_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 278
    },
    "digest": "13670d1534125831c2059eebd86d840c",
    "lang": "console",
    "found": [],
    "source": "PUT /brazilian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"brazilian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_brazilian_\" <1>\n        },\n        \"brazilian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"brazilian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"brazilian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_brazilian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"brazilian_stop\",\n            \"brazilian_keywords\",\n            \"brazilian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/brazilian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "brazilian_stop": {
                  "type": "stop",
                  "stopwords": "_brazilian_"
                },
                "brazilian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "exemplo"
                  ]
                },
                "brazilian_stemmer": {
                  "type": "stemmer",
                  "language": "brazilian"
                }
              },
              "analyzer": {
                "rebuilt_brazilian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "brazilian_stop",
                    "brazilian_keywords",
                    "brazilian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "brazilian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 326
    },
    "digest": "d0378fe5e3aad05a2fd2e6e81213374f",
    "lang": "console",
    "found": [],
    "source": "PUT /bulgarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"bulgarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_bulgarian_\" <1>\n        },\n        \"bulgarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"пример\"] <2>\n        },\n        \"bulgarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"bulgarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_bulgarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"bulgarian_stop\",\n            \"bulgarian_keywords\",\n            \"bulgarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/bulgarian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "bulgarian_stop": {
                  "type": "stop",
                  "stopwords": "_bulgarian_"
                },
                "bulgarian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "пример"
                  ]
                },
                "bulgarian_stemmer": {
                  "type": "stemmer",
                  "language": "bulgarian"
                }
              },
              "analyzer": {
                "rebuilt_bulgarian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "bulgarian_stop",
                    "bulgarian_keywords",
                    "bulgarian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "bulgarian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 374
    },
    "digest": "7ab968a61bb0783f563dd6d29b253901",
    "lang": "console",
    "found": [],
    "source": "PUT /catalan_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"catalan_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"l\", \"m\", \"n\", \"s\", \"t\"],\n          \"articles_case\": true\n        },\n        \"catalan_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_catalan_\" <1>\n        },\n        \"catalan_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"catalan_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"catalan\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_catalan\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"catalan_elision\",\n            \"lowercase\",\n            \"catalan_stop\",\n            \"catalan_keywords\",\n            \"catalan_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/catalan_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "catalan_elision": {
                  "type": "elision",
                  "articles": [
                    "d",
                    "l",
                    "m",
                    "n",
                    "s",
                    "t"
                  ],
                  "articles_case": true
                },
                "catalan_stop": {
                  "type": "stop",
                  "stopwords": "_catalan_"
                },
                "catalan_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "example"
                  ]
                },
                "catalan_stemmer": {
                  "type": "stemmer",
                  "language": "catalan"
                }
              },
              "analyzer": {
                "rebuilt_catalan": {
                  "tokenizer": "standard",
                  "filter": [
                    "catalan_elision",
                    "lowercase",
                    "catalan_stop",
                    "catalan_keywords",
                    "catalan_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "catalan_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 431
    },
    "digest": "d305110a8cabfbebd1e38d85559d1023",
    "lang": "console",
    "found": [],
    "source": "PUT /cjk_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ <1>\n            \"a\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\",\n            \"if\", \"in\", \"into\", \"is\", \"it\", \"no\", \"not\", \"of\", \"on\",\n            \"or\", \"s\", \"such\", \"t\", \"that\", \"the\", \"their\", \"then\",\n            \"there\", \"these\", \"they\", \"this\", \"to\", \"was\", \"will\",\n            \"with\", \"www\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_cjk\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"cjk_width\",\n            \"lowercase\",\n            \"cjk_bigram\",\n            \"english_stop\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/cjk_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "english_stop": {
                  "type": "stop",
                  "stopwords": [
                    "a",
                    "and",
                    "are",
                    "as",
                    "at",
                    "be",
                    "but",
                    "by",
                    "for",
                    "if",
                    "in",
                    "into",
                    "is",
                    "it",
                    "no",
                    "not",
                    "of",
                    "on",
                    "or",
                    "s",
                    "such",
                    "t",
                    "that",
                    "the",
                    "their",
                    "then",
                    "there",
                    "these",
                    "they",
                    "this",
                    "to",
                    "was",
                    "will",
                    "with",
                    "www"
                  ]
                }
              },
              "analyzer": {
                "rebuilt_cjk": {
                  "tokenizer": "standard",
                  "filter": [
                    "cjk_width",
                    "lowercase",
                    "cjk_bigram",
                    "english_stop"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "cjk_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 477
    },
    "digest": "a28111cdd9b5aaea96c779cbfbf38780",
    "lang": "console",
    "found": [],
    "source": "PUT /czech_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"czech_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_czech_\" <1>\n        },\n        \"czech_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"příklad\"] <2>\n        },\n        \"czech_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"czech\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_czech\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"czech_stop\",\n            \"czech_keywords\",\n            \"czech_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/czech_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "czech_stop": {
                  "type": "stop",
                  "stopwords": "_czech_"
                },
                "czech_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "příklad"
                  ]
                },
                "czech_stemmer": {
                  "type": "stemmer",
                  "language": "czech"
                }
              },
              "analyzer": {
                "rebuilt_czech": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "czech_stop",
                    "czech_keywords",
                    "czech_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "czech_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 525
    },
    "digest": "ed85ed833bec7286a0dfbe64077c5715",
    "lang": "console",
    "found": [],
    "source": "PUT /danish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"danish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_danish_\" <1>\n        },\n        \"danish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"danish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"danish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_danish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"danish_stop\",\n            \"danish_keywords\",\n            \"danish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/danish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "danish_stop": {
                  "type": "stop",
                  "stopwords": "_danish_"
                },
                "danish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "eksempel"
                  ]
                },
                "danish_stemmer": {
                  "type": "stemmer",
                  "language": "danish"
                }
              },
              "analyzer": {
                "rebuilt_danish": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "danish_stop",
                    "danish_keywords",
                    "danish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "danish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 573
    },
    "digest": "10d8b17e73d31dcd907de67327ed78a2",
    "lang": "console",
    "found": [],
    "source": "PUT /dutch_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"dutch_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_dutch_\" <1>\n        },\n        \"dutch_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"voorbeeld\"] <2>\n        },\n        \"dutch_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"dutch\"\n        },\n        \"dutch_override\": {\n          \"type\":       \"stemmer_override\",\n          \"rules\": [\n            \"fiets=>fiets\",\n            \"bromfiets=>bromfiets\",\n            \"ei=>eier\",\n            \"kind=>kinder\"\n          ]\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_dutch\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"dutch_stop\",\n            \"dutch_keywords\",\n            \"dutch_override\",\n            \"dutch_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/dutch_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "dutch_stop": {
                  "type": "stop",
                  "stopwords": "_dutch_"
                },
                "dutch_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "voorbeeld"
                  ]
                },
                "dutch_stemmer": {
                  "type": "stemmer",
                  "language": "dutch"
                },
                "dutch_override": {
                  "type": "stemmer_override",
                  "rules": [
                    "fiets=>fiets",
                    "bromfiets=>bromfiets",
                    "ei=>eier",
                    "kind=>kinder"
                  ]
                }
              },
              "analyzer": {
                "rebuilt_dutch": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "dutch_stop",
                    "dutch_keywords",
                    "dutch_override",
                    "dutch_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "dutch_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 631
    },
    "digest": "81c7a392efd505b686eed978fb7d9d17",
    "lang": "console",
    "found": [],
    "source": "PUT /english_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_english_\" <1>\n        },\n        \"english_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"example\"] <2>\n        },\n        \"english_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"english\"\n        },\n        \"english_possessive_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"possessive_english\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_english\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"english_possessive_stemmer\",\n            \"lowercase\",\n            \"english_stop\",\n            \"english_keywords\",\n            \"english_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/english_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "english_stop": {
                  "type": "stop",
                  "stopwords": "_english_"
                },
                "english_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "example"
                  ]
                },
                "english_stemmer": {
                  "type": "stemmer",
                  "language": "english"
                },
                "english_possessive_stemmer": {
                  "type": "stemmer",
                  "language": "possessive_english"
                }
              },
              "analyzer": {
                "rebuilt_english": {
                  "tokenizer": "standard",
                  "filter": [
                    "english_possessive_stemmer",
                    "lowercase",
                    "english_stop",
                    "english_keywords",
                    "english_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "english_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 684
    },
    "digest": "2f4e28c81db47547ad39d0926babab12",
    "lang": "console",
    "found": [],
    "source": "PUT /estonian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"estonian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_estonian_\" <1>\n        },\n        \"estonian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"näide\"] <2>\n        },\n        \"estonian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"estonian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_estonian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"estonian_stop\",\n            \"estonian_keywords\",\n            \"estonian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/estonian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "estonian_stop": {
                  "type": "stop",
                  "stopwords": "_estonian_"
                },
                "estonian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "näide"
                  ]
                },
                "estonian_stemmer": {
                  "type": "stemmer",
                  "language": "estonian"
                }
              },
              "analyzer": {
                "rebuilt_estonian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "estonian_stop",
                    "estonian_keywords",
                    "estonian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "estonian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 732
    },
    "digest": "85f0e5e8ab91ceab63c21dbedd9f4037",
    "lang": "console",
    "found": [],
    "source": "PUT /finnish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"finnish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_finnish_\" <1>\n        },\n        \"finnish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esimerkki\"] <2>\n        },\n        \"finnish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"finnish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_finnish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"finnish_stop\",\n            \"finnish_keywords\",\n            \"finnish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/finnish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "finnish_stop": {
                  "type": "stop",
                  "stopwords": "_finnish_"
                },
                "finnish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "esimerkki"
                  ]
                },
                "finnish_stemmer": {
                  "type": "stemmer",
                  "language": "finnish"
                }
              },
              "analyzer": {
                "rebuilt_finnish": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "finnish_stop",
                    "finnish_keywords",
                    "finnish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "finnish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 780
    },
    "digest": "f545bb95214769aca993c1632a71ad2c",
    "lang": "console",
    "found": [],
    "source": "PUT /french_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"french_elision\": {\n          \"type\":         \"elision\",\n          \"articles_case\": true,\n          \"articles\": [\n              \"l\", \"m\", \"t\", \"qu\", \"n\", \"s\",\n              \"j\", \"d\", \"c\", \"jusqu\", \"quoiqu\",\n              \"lorsqu\", \"puisqu\"\n            ]\n        },\n        \"french_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_french_\" <1>\n        },\n        \"french_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Example\"] <2>\n        },\n        \"french_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_french\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_french\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"french_elision\",\n            \"lowercase\",\n            \"french_stop\",\n            \"french_keywords\",\n            \"french_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/french_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "french_elision": {
                  "type": "elision",
                  "articles_case": true,
                  "articles": [
                    "l",
                    "m",
                    "t",
                    "qu",
                    "n",
                    "s",
                    "j",
                    "d",
                    "c",
                    "jusqu",
                    "quoiqu",
                    "lorsqu",
                    "puisqu"
                  ]
                },
                "french_stop": {
                  "type": "stop",
                  "stopwords": "_french_"
                },
                "french_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "Example"
                  ]
                },
                "french_stemmer": {
                  "type": "stemmer",
                  "language": "light_french"
                }
              },
              "analyzer": {
                "rebuilt_french": {
                  "tokenizer": "standard",
                  "filter": [
                    "french_elision",
                    "lowercase",
                    "french_stop",
                    "french_keywords",
                    "french_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "french_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 838
    },
    "digest": "9606c271921cb800d5ea395b16d6ceaf",
    "lang": "console",
    "found": [],
    "source": "PUT /galician_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"galician_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_galician_\" <1>\n        },\n        \"galician_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"galician_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"galician\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_galician\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"galician_stop\",\n            \"galician_keywords\",\n            \"galician_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/galician_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "galician_stop": {
                  "type": "stop",
                  "stopwords": "_galician_"
                },
                "galician_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "exemplo"
                  ]
                },
                "galician_stemmer": {
                  "type": "stemmer",
                  "language": "galician"
                }
              },
              "analyzer": {
                "rebuilt_galician": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "galician_stop",
                    "galician_keywords",
                    "galician_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "galician_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 886
    },
    "digest": "187e8786e0a90f1f6278cf89b670de0a",
    "lang": "console",
    "found": [],
    "source": "PUT /german_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"german_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_german_\" <1>\n        },\n        \"german_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"Beispiel\"] <2>\n        },\n        \"german_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_german\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_german\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"german_stop\",\n            \"german_keywords\",\n            \"german_normalization\",\n            \"german_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/german_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "german_stop": {
                  "type": "stop",
                  "stopwords": "_german_"
                },
                "german_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "Beispiel"
                  ]
                },
                "german_stemmer": {
                  "type": "stemmer",
                  "language": "light_german"
                }
              },
              "analyzer": {
                "rebuilt_german": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "german_stop",
                    "german_keywords",
                    "german_normalization",
                    "german_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "german_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 935
    },
    "digest": "1f00e73c144603e97f6c14ab15fa1913",
    "lang": "console",
    "found": [],
    "source": "PUT /greek_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"greek_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_greek_\" <1>\n        },\n        \"greek_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"greek\"\n        },\n        \"greek_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"παράδειγμα\"] <2>\n        },\n        \"greek_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"greek\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_greek\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"greek_lowercase\",\n            \"greek_stop\",\n            \"greek_keywords\",\n            \"greek_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/greek_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "greek_stop": {
                  "type": "stop",
                  "stopwords": "_greek_"
                },
                "greek_lowercase": {
                  "type": "lowercase",
                  "language": "greek"
                },
                "greek_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "παράδειγμα"
                  ]
                },
                "greek_stemmer": {
                  "type": "stemmer",
                  "language": "greek"
                }
              },
              "analyzer": {
                "rebuilt_greek": {
                  "tokenizer": "standard",
                  "filter": [
                    "greek_lowercase",
                    "greek_stop",
                    "greek_keywords",
                    "greek_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "greek_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 987
    },
    "digest": "af00a58d9171d32f6efe52d94e51e526",
    "lang": "console",
    "found": [],
    "source": "PUT /hindi_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hindi_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hindi_\" <1>\n        },\n        \"hindi_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"उदाहरण\"] <2>\n        },\n        \"hindi_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hindi\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hindi\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"hindi_keywords\",\n            \"indic_normalization\",\n            \"hindi_normalization\",\n            \"hindi_stop\",\n            \"hindi_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/hindi_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "hindi_stop": {
                  "type": "stop",
                  "stopwords": "_hindi_"
                },
                "hindi_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "उदाहरण"
                  ]
                },
                "hindi_stemmer": {
                  "type": "stemmer",
                  "language": "hindi"
                }
              },
              "analyzer": {
                "rebuilt_hindi": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "decimal_digit",
                    "hindi_keywords",
                    "indic_normalization",
                    "hindi_normalization",
                    "hindi_stop",
                    "hindi_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "hindi_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1038
    },
    "digest": "84108653e9e03b4edacd878ec870df77",
    "lang": "console",
    "found": [],
    "source": "PUT /hungarian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"hungarian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_hungarian_\" <1>\n        },\n        \"hungarian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"példa\"] <2>\n        },\n        \"hungarian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"hungarian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_hungarian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"hungarian_stop\",\n            \"hungarian_keywords\",\n            \"hungarian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/hungarian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "hungarian_stop": {
                  "type": "stop",
                  "stopwords": "_hungarian_"
                },
                "hungarian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "példa"
                  ]
                },
                "hungarian_stemmer": {
                  "type": "stemmer",
                  "language": "hungarian"
                }
              },
              "analyzer": {
                "rebuilt_hungarian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "hungarian_stop",
                    "hungarian_keywords",
                    "hungarian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "hungarian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1087
    },
    "digest": "eb5987b58dae90c3a8a1609410be0570",
    "lang": "console",
    "found": [],
    "source": "PUT /indonesian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"indonesian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_indonesian_\" <1>\n        },\n        \"indonesian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"contoh\"] <2>\n        },\n        \"indonesian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"indonesian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_indonesian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"indonesian_stop\",\n            \"indonesian_keywords\",\n            \"indonesian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/indonesian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "indonesian_stop": {
                  "type": "stop",
                  "stopwords": "_indonesian_"
                },
                "indonesian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "contoh"
                  ]
                },
                "indonesian_stemmer": {
                  "type": "stemmer",
                  "language": "indonesian"
                }
              },
              "analyzer": {
                "rebuilt_indonesian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "indonesian_stop",
                    "indonesian_keywords",
                    "indonesian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "indonesian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1135
    },
    "digest": "160f39a50847bad0be4be1529a95e4ce",
    "lang": "console",
    "found": [],
    "source": "PUT /irish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"irish_hyphenation\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  [ \"h\", \"n\", \"t\" ],\n          \"ignore_case\": true\n        },\n        \"irish_elision\": {\n          \"type\":       \"elision\",\n          \"articles\":   [ \"d\", \"m\", \"b\" ],\n          \"articles_case\": true\n        },\n        \"irish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_irish_\" <1>\n        },\n        \"irish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"irish\"\n        },\n        \"irish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"sampla\"] <2>\n        },\n        \"irish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"irish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_irish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"irish_hyphenation\",\n            \"irish_elision\",\n            \"irish_lowercase\",\n            \"irish_stop\",\n            \"irish_keywords\",\n            \"irish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/irish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "irish_hyphenation": {
                  "type": "stop",
                  "stopwords": [
                    "h",
                    "n",
                    "t"
                  ],
                  "ignore_case": true
                },
                "irish_elision": {
                  "type": "elision",
                  "articles": [
                    "d",
                    "m",
                    "b"
                  ],
                  "articles_case": true
                },
                "irish_stop": {
                  "type": "stop",
                  "stopwords": "_irish_"
                },
                "irish_lowercase": {
                  "type": "lowercase",
                  "language": "irish"
                },
                "irish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "sampla"
                  ]
                },
                "irish_stemmer": {
                  "type": "stemmer",
                  "language": "irish"
                }
              },
              "analyzer": {
                "rebuilt_irish": {
                  "tokenizer": "standard",
                  "filter": [
                    "irish_hyphenation",
                    "irish_elision",
                    "irish_lowercase",
                    "irish_stop",
                    "irish_keywords",
                    "irish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "irish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1199
    },
    "digest": "00e0c964c79fcc1876ab957da2ffce82",
    "lang": "console",
    "found": [],
    "source": "PUT /italian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"italian_elision\": {\n          \"type\": \"elision\",\n          \"articles\": [\n                \"c\", \"l\", \"all\", \"dall\", \"dell\",\n                \"nell\", \"sull\", \"coll\", \"pell\",\n                \"gl\", \"agl\", \"dagl\", \"degl\", \"negl\",\n                \"sugl\", \"un\", \"m\", \"t\", \"s\", \"v\", \"d\"\n          ],\n          \"articles_case\": true\n        },\n        \"italian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_italian_\" <1>\n        },\n        \"italian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"esempio\"] <2>\n        },\n        \"italian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_italian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_italian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"italian_elision\",\n            \"lowercase\",\n            \"italian_stop\",\n            \"italian_keywords\",\n            \"italian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/italian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "italian_elision": {
                  "type": "elision",
                  "articles": [
                    "c",
                    "l",
                    "all",
                    "dall",
                    "dell",
                    "nell",
                    "sull",
                    "coll",
                    "pell",
                    "gl",
                    "agl",
                    "dagl",
                    "degl",
                    "negl",
                    "sugl",
                    "un",
                    "m",
                    "t",
                    "s",
                    "v",
                    "d"
                  ],
                  "articles_case": true
                },
                "italian_stop": {
                  "type": "stop",
                  "stopwords": "_italian_"
                },
                "italian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "esempio"
                  ]
                },
                "italian_stemmer": {
                  "type": "stemmer",
                  "language": "light_italian"
                }
              },
              "analyzer": {
                "rebuilt_italian": {
                  "tokenizer": "standard",
                  "filter": [
                    "italian_elision",
                    "lowercase",
                    "italian_stop",
                    "italian_keywords",
                    "italian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "italian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1258
    },
    "digest": "d983c1ea730eeabac9e914656d7c9be2",
    "lang": "console",
    "found": [],
    "source": "PUT /latvian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"latvian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_latvian_\" <1>\n        },\n        \"latvian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"piemērs\"] <2>\n        },\n        \"latvian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"latvian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_latvian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"latvian_stop\",\n            \"latvian_keywords\",\n            \"latvian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/latvian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "latvian_stop": {
                  "type": "stop",
                  "stopwords": "_latvian_"
                },
                "latvian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "piemērs"
                  ]
                },
                "latvian_stemmer": {
                  "type": "stemmer",
                  "language": "latvian"
                }
              },
              "analyzer": {
                "rebuilt_latvian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "latvian_stop",
                    "latvian_keywords",
                    "latvian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "latvian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1306
    },
    "digest": "bb067c049331cc850a77b18bdfff81b5",
    "lang": "console",
    "found": [],
    "source": "PUT /lithuanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"lithuanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_lithuanian_\" <1>\n        },\n        \"lithuanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"pavyzdys\"] <2>\n        },\n        \"lithuanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"lithuanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_lithuanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"lithuanian_stop\",\n            \"lithuanian_keywords\",\n            \"lithuanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/lithuanian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "lithuanian_stop": {
                  "type": "stop",
                  "stopwords": "_lithuanian_"
                },
                "lithuanian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "pavyzdys"
                  ]
                },
                "lithuanian_stemmer": {
                  "type": "stemmer",
                  "language": "lithuanian"
                }
              },
              "analyzer": {
                "rebuilt_lithuanian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "lithuanian_stop",
                    "lithuanian_keywords",
                    "lithuanian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "lithuanian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1354
    },
    "digest": "2731a8577ad734a732d784c5dcb1225d",
    "lang": "console",
    "found": [],
    "source": "PUT /norwegian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"norwegian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_norwegian_\" <1>\n        },\n        \"norwegian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"eksempel\"] <2>\n        },\n        \"norwegian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"norwegian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_norwegian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"norwegian_stop\",\n            \"norwegian_keywords\",\n            \"norwegian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/norwegian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "norwegian_stop": {
                  "type": "stop",
                  "stopwords": "_norwegian_"
                },
                "norwegian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "eksempel"
                  ]
                },
                "norwegian_stemmer": {
                  "type": "stemmer",
                  "language": "norwegian"
                }
              },
              "analyzer": {
                "rebuilt_norwegian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "norwegian_stop",
                    "norwegian_keywords",
                    "norwegian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "norwegian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1402
    },
    "digest": "d1a285aa244ec461d68f13e7078a33c0",
    "lang": "console",
    "found": [],
    "source": "PUT /persian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"char_filter\": {\n        \"zero_width_spaces\": {\n            \"type\":       \"mapping\",\n            \"mappings\": [ \"\\\\u200C=>\\\\u0020\"] <1>\n        }\n      },\n      \"filter\": {\n        \"persian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_persian_\" <2>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_persian\": {\n          \"tokenizer\":     \"standard\",\n          \"char_filter\": [ \"zero_width_spaces\" ],\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"arabic_normalization\",\n            \"persian_normalization\",\n            \"persian_stop\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/persian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "char_filter": {
                "zero_width_spaces": {
                  "type": "mapping",
                  "mappings": [
                    "\\u200C=>\\u0020"
                  ]
                }
              },
              "filter": {
                "persian_stop": {
                  "type": "stop",
                  "stopwords": "_persian_"
                }
              },
              "analyzer": {
                "rebuilt_persian": {
                  "tokenizer": "standard",
                  "char_filter": [
                    "zero_width_spaces"
                  ],
                  "filter": [
                    "lowercase",
                    "decimal_digit",
                    "arabic_normalization",
                    "persian_normalization",
                    "persian_stop"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "persian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1448
    },
    "digest": "584f502cf840134f2db5f39e2483ced1",
    "lang": "console",
    "found": [],
    "source": "PUT /portuguese_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"portuguese_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_portuguese_\" <1>\n        },\n        \"portuguese_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplo\"] <2>\n        },\n        \"portuguese_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_portuguese\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_portuguese\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"portuguese_stop\",\n            \"portuguese_keywords\",\n            \"portuguese_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/portuguese_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "portuguese_stop": {
                  "type": "stop",
                  "stopwords": "_portuguese_"
                },
                "portuguese_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "exemplo"
                  ]
                },
                "portuguese_stemmer": {
                  "type": "stemmer",
                  "language": "light_portuguese"
                }
              },
              "analyzer": {
                "rebuilt_portuguese": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "portuguese_stop",
                    "portuguese_keywords",
                    "portuguese_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "portuguese_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1496
    },
    "digest": "1ba7afe23a26fe9ac7856d8c5bc1059d",
    "lang": "console",
    "found": [],
    "source": "PUT /romanian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"romanian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_romanian_\" <1>\n        },\n        \"romanian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exemplu\"] <2>\n        },\n        \"romanian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"romanian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_romanian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"romanian_stop\",\n            \"romanian_keywords\",\n            \"romanian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/romanian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "romanian_stop": {
                  "type": "stop",
                  "stopwords": "_romanian_"
                },
                "romanian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "exemplu"
                  ]
                },
                "romanian_stemmer": {
                  "type": "stemmer",
                  "language": "romanian"
                }
              },
              "analyzer": {
                "rebuilt_romanian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "romanian_stop",
                    "romanian_keywords",
                    "romanian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "romanian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1545
    },
    "digest": "d260225cf97e068ead2a8a6bb5aefd90",
    "lang": "console",
    "found": [],
    "source": "PUT /russian_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"russian_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_russian_\" <1>\n        },\n        \"russian_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"пример\"] <2>\n        },\n        \"russian_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"russian\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_russian\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"russian_stop\",\n            \"russian_keywords\",\n            \"russian_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/russian_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "russian_stop": {
                  "type": "stop",
                  "stopwords": "_russian_"
                },
                "russian_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "пример"
                  ]
                },
                "russian_stemmer": {
                  "type": "stemmer",
                  "language": "russian"
                }
              },
              "analyzer": {
                "rebuilt_russian": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "russian_stop",
                    "russian_keywords",
                    "russian_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "russian_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1593
    },
    "digest": "320645d771e952af2a67bb7445c3688d",
    "lang": "console",
    "found": [],
    "source": "PUT /sorani_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"sorani_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_sorani_\" <1>\n        },\n        \"sorani_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"mînak\"] <2>\n        },\n        \"sorani_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"sorani\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_sorani\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"sorani_normalization\",\n            \"lowercase\",\n            \"decimal_digit\",\n            \"sorani_stop\",\n            \"sorani_keywords\",\n            \"sorani_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/sorani_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "sorani_stop": {
                  "type": "stop",
                  "stopwords": "_sorani_"
                },
                "sorani_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "mînak"
                  ]
                },
                "sorani_stemmer": {
                  "type": "stemmer",
                  "language": "sorani"
                }
              },
              "analyzer": {
                "rebuilt_sorani": {
                  "tokenizer": "standard",
                  "filter": [
                    "sorani_normalization",
                    "lowercase",
                    "decimal_digit",
                    "sorani_stop",
                    "sorani_keywords",
                    "sorani_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "sorani_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1643
    },
    "digest": "327466380bcd55361973b4a96c6dccb2",
    "lang": "console",
    "found": [],
    "source": "PUT /spanish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"spanish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_spanish_\" <1>\n        },\n        \"spanish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"ejemplo\"] <2>\n        },\n        \"spanish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"light_spanish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_spanish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"spanish_stop\",\n            \"spanish_keywords\",\n            \"spanish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/spanish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "spanish_stop": {
                  "type": "stop",
                  "stopwords": "_spanish_"
                },
                "spanish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "ejemplo"
                  ]
                },
                "spanish_stemmer": {
                  "type": "stemmer",
                  "language": "light_spanish"
                }
              },
              "analyzer": {
                "rebuilt_spanish": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "spanish_stop",
                    "spanish_keywords",
                    "spanish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "spanish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1691
    },
    "digest": "f097c02541056f3c0fc855e7bbeef8a8",
    "lang": "console",
    "found": [],
    "source": "PUT /swedish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"swedish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_swedish_\" <1>\n        },\n        \"swedish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"exempel\"] <2>\n        },\n        \"swedish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"swedish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_swedish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"lowercase\",\n            \"swedish_stop\",\n            \"swedish_keywords\",\n            \"swedish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/swedish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "swedish_stop": {
                  "type": "stop",
                  "stopwords": "_swedish_"
                },
                "swedish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "exempel"
                  ]
                },
                "swedish_stemmer": {
                  "type": "stemmer",
                  "language": "swedish"
                }
              },
              "analyzer": {
                "rebuilt_swedish": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "swedish_stop",
                    "swedish_keywords",
                    "swedish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "swedish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1739
    },
    "digest": "103296e16b4233926ad1f07360385606",
    "lang": "console",
    "found": [],
    "source": "PUT /turkish_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"turkish_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_turkish_\" <1>\n        },\n        \"turkish_lowercase\": {\n          \"type\":       \"lowercase\",\n          \"language\":   \"turkish\"\n        },\n        \"turkish_keywords\": {\n          \"type\":       \"keyword_marker\",\n          \"keywords\":   [\"örnek\"] <2>\n        },\n        \"turkish_stemmer\": {\n          \"type\":       \"stemmer\",\n          \"language\":   \"turkish\"\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_turkish\": {\n          \"tokenizer\":  \"standard\",\n          \"filter\": [\n            \"apostrophe\",\n            \"turkish_lowercase\",\n            \"turkish_stop\",\n            \"turkish_keywords\",\n            \"turkish_stemmer\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/turkish_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "turkish_stop": {
                  "type": "stop",
                  "stopwords": "_turkish_"
                },
                "turkish_lowercase": {
                  "type": "lowercase",
                  "language": "turkish"
                },
                "turkish_keywords": {
                  "type": "keyword_marker",
                  "keywords": [
                    "örnek"
                  ]
                },
                "turkish_stemmer": {
                  "type": "stemmer",
                  "language": "turkish"
                }
              },
              "analyzer": {
                "rebuilt_turkish": {
                  "tokenizer": "standard",
                  "filter": [
                    "apostrophe",
                    "turkish_lowercase",
                    "turkish_stop",
                    "turkish_keywords",
                    "turkish_stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "turkish_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/lang-analyzer.asciidoc",
      "line": 1792
    },
    "digest": "346f28d82acb5427c304aa574fea0008",
    "lang": "console",
    "found": [],
    "source": "PUT /thai_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"thai_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_thai_\" <1>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_thai\": {\n          \"tokenizer\":  \"thai\",\n          \"filter\": [\n            \"lowercase\",\n            \"decimal_digit\",\n            \"thai_stop\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/thai_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "thai_stop": {
                  "type": "stop",
                  "stopwords": "_thai_"
                }
              },
              "analyzer": {
                "rebuilt_thai": {
                  "tokenizer": "thai",
                  "filter": [
                    "lowercase",
                    "decimal_digit",
                    "thai_stop"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "thai_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/pattern-analyzer.asciidoc",
      "line": 26
    },
    "digest": "467833bd44b35a89a7fe0d7df5f253f1",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"pattern\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "pattern",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/pattern-analyzer.asciidoc",
      "line": 177
    },
    "digest": "314851d590d195015a76866b92cf6b32",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_email_analyzer\": {\n          \"type\":      \"pattern\",\n          \"pattern\":   \"\\\\W|_\", <1>\n          \"lowercase\": true\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_email_analyzer\",\n  \"text\": \"John_Smith@foo-bar.com\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_email_analyzer": {
                  "type": "pattern",
                  "pattern": "\\W|_",
                  "lowercase": true
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_email_analyzer",
          "text": "John_Smith@foo-bar.com"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/pattern-analyzer.asciidoc",
      "line": 264
    },
    "digest": "9e2f7b134ac7c5e7c0119866b7a96700",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"camel\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"([^\\\\p{L}\\\\d]+)|(?<=\\\\D)(?=\\\\d)|(?<=\\\\d)(?=\\\\D)|(?<=[\\\\p{L}&&[^\\\\p{Lu}]])(?=\\\\p{Lu})|(?<=\\\\p{Lu})(?=\\\\p{Lu}[\\\\p{L}&&[^\\\\p{Lu}]])\"\n        }\n      }\n    }\n  }\n}\n\nGET my_index/_analyze\n{\n  \"analyzer\": \"camel\",\n  \"text\": \"MooseX::FTPClass2_beta\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "camel": {
                  "type": "pattern",
                  "pattern": "([^\\p{L}\\d]+)|(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)|(?<=[\\p{L}&&[^\\p{Lu}]])(?=\\p{Lu})|(?<=\\p{Lu})(?=\\p{Lu}[\\p{L}&&[^\\p{Lu}]])"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "GET",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "camel",
          "text": "MooseX::FTPClass2_beta"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/pattern-analyzer.asciidoc",
      "line": 382
    },
    "digest": "f453e14bcf30853e57618bf12f83e148",
    "lang": "console",
    "found": [],
    "source": "PUT /pattern_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"tokenizer\": {\n        \"split_on_non_word\": {\n          \"type\":       \"pattern\",\n          \"pattern\":    \"\\\\W+\" <1>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_pattern\": {\n          \"tokenizer\": \"split_on_non_word\",\n          \"filter\": [\n            \"lowercase\"       <2>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/pattern_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "tokenizer": {
                "split_on_non_word": {
                  "type": "pattern",
                  "pattern": "\\W+"
                }
              },
              "analyzer": {
                "rebuilt_pattern": {
                  "tokenizer": "split_on_non_word",
                  "filter": [
                    "lowercase"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "pattern_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/simple-analyzer.asciidoc",
      "line": 11
    },
    "digest": "1ea24f67fbbb6293d53caf2fe0c4b984",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"simple\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "simple",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/simple-analyzer.asciidoc",
      "line": 135
    },
    "digest": "432ab6ff7cfe06988dda436907218cc5",
    "lang": "console",
    "found": [],
    "source": "PUT /simple_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_simple\": {\n          \"tokenizer\": \"lowercase\",\n          \"filter\": [         <1>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/simple_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "rebuilt_simple": {
                  "tokenizer": "lowercase",
                  "filter": []
                }
              }
            }
          }
        },
        "params": {
          "index": "simple_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/standard-analyzer.asciidoc",
      "line": 14
    },
    "digest": "6884454f57c3a41059037ea762f48d77",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"standard\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "standard",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/standard-analyzer.asciidoc",
      "line": 151
    },
    "digest": "5af5d2999833b6b1fdcd84404751a7e3",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_english_analyzer\": {\n          \"type\": \"standard\",\n          \"max_token_length\": 5,\n          \"stopwords\": \"_english_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_english_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_english_analyzer": {
                  "type": "standard",
                  "max_token_length": 5,
                  "stopwords": "_english_"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_english_analyzer",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/standard-analyzer.asciidoc",
      "line": 281
    },
    "digest": "ccf84c1e5e5602a9e841cb8f7e3bb29f",
    "lang": "console",
    "found": [],
    "source": "PUT /standard_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_standard\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\"       <1>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/standard_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "rebuilt_standard": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "standard_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/stop-analyzer.asciidoc",
      "line": 12
    },
    "digest": "42d02087f1c8ab0452ef373079a76843",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"stop\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "stop",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/stop-analyzer.asciidoc",
      "line": 130
    },
    "digest": "5a676e5f09ba584408ce6ecacda13d1d",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_stop_analyzer\": {\n          \"type\": \"stop\",\n          \"stopwords\": [\"the\", \"over\"]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_stop_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_stop_analyzer": {
                  "type": "stop",
                  "stopwords": [
                    "the",
                    "over"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_stop_analyzer",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/stop-analyzer.asciidoc",
      "line": 246
    },
    "digest": "42deb4fe32afbe0f94185e256a79c447",
    "lang": "console",
    "found": [],
    "source": "PUT /stop_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"filter\": {\n        \"english_stop\": {\n          \"type\":       \"stop\",\n          \"stopwords\":  \"_english_\" <1>\n        }\n      },\n      \"analyzer\": {\n        \"rebuilt_stop\": {\n          \"tokenizer\": \"lowercase\",\n          \"filter\": [\n            \"english_stop\"          <2>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/stop_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "english_stop": {
                  "type": "stop",
                  "stopwords": "_english_"
                }
              },
              "analyzer": {
                "rebuilt_stop": {
                  "tokenizer": "lowercase",
                  "filter": [
                    "english_stop"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "stop_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/whitespace-analyzer.asciidoc",
      "line": 11
    },
    "digest": "262a778d754add491fbc9c721ac25bf0",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"analyzer\": \"whitespace\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "whitespace",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/analyzers/whitespace-analyzer.asciidoc",
      "line": 128
    },
    "digest": "31aed390c30bd4f42a5c56253695e53f",
    "lang": "console",
    "found": [],
    "source": "PUT /whitespace_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"rebuilt_whitespace\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [         <1>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/whitespace_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "rebuilt_whitespace": {
                  "tokenizer": "whitespace",
                  "filter": []
                }
              }
            }
          }
        },
        "params": {
          "index": "whitespace_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/chargroup-tokenizer.asciidoc",
      "line": 26
    },
    "digest": "f8cafb1a08bc9b2dd5239f99d4e93f4c",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": {\n    \"type\": \"char_group\",\n    \"tokenize_on_chars\": [\n      \"whitespace\",\n      \"-\",\n      \"\\n\"\n    ]\n  },\n  \"text\": \"The QUICK brown-fox\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": {
            "type": "char_group",
            "tokenize_on_chars": [
              "whitespace",
              "-",
              "\n"
            ]
          },
          "text": "The QUICK brown-fox"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/chargroup-tokenizer.asciidoc",
      "line": 44
    },
    "digest": "f3ac0bc5ecf9995f51d22f6fb2ec1afa",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"The\",\n      \"start_offset\": 0,\n      \"end_offset\": 3,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"QUICK\",\n      \"start_offset\": 4,\n      \"end_offset\": 9,\n      \"type\": \"word\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"brown\",\n      \"start_offset\": 10,\n      \"end_offset\": 15,\n      \"type\": \"word\",\n      \"position\": 2\n    },\n    {\n      \"token\": \"fox\",\n      \"start_offset\": 16,\n      \"end_offset\": 19,\n      \"type\": \"word\",\n      \"position\": 3\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/classic-tokenizer.asciidoc",
      "line": 22
    },
    "digest": "c6d39d22188dc7bbfdad811a94cbcc2b",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"classic\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "classic",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/classic-tokenizer.asciidoc",
      "line": 145
    },
    "digest": "326f5bc3013c80c2ee005c676a877ecf",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"classic\",\n          \"max_token_length\": 5\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "classic",
                  "max_token_length": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/edgengram-tokenizer.asciidoc",
      "line": 25
    },
    "digest": "a512e4dd8880ce0395937db1bab1d205",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"edge_ngram\",\n  \"text\": \"Quick Fox\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "edge_ngram",
          "text": "Quick Fox"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/edgengram-tokenizer.asciidoc",
      "line": 141
    },
    "digest": "a61389da4033bd7b73a63ff2ee258125",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 2,\n          \"max_gram\": 10,\n          \"token_chars\": [\n            \"letter\",\n            \"digit\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"2 Quick Foxes.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "edge_ngram",
                  "min_gram": 2,
                  "max_gram": 10,
                  "token_chars": [
                    "letter",
                    "digit"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "2 Quick Foxes."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/edgengram-tokenizer.asciidoc",
      "line": 261
    },
    "digest": "b8893e8f2b1aea4b093e0c4f037cfff7",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"autocomplete\": {\n          \"tokenizer\": \"autocomplete\",\n          \"filter\": [\n            \"lowercase\"\n          ]\n        },\n        \"autocomplete_search\": {\n          \"tokenizer\": \"lowercase\"\n        }\n      },\n      \"tokenizer\": {\n        \"autocomplete\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 2,\n          \"max_gram\": 10,\n          \"token_chars\": [\n            \"letter\"\n          ]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"analyzer\": \"autocomplete\",\n        \"search_analyzer\": \"autocomplete_search\"\n      }\n    }\n  }\n}\n\nPUT my_index/_doc/1\n{\n  \"title\": \"Quick Foxes\" <1>\n}\n\nPOST my_index/_refresh\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"title\": {\n        \"query\": \"Quick Fo\", <2>\n        \"operator\": \"and\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "autocomplete": {
                  "tokenizer": "autocomplete",
                  "filter": [
                    "lowercase"
                  ]
                },
                "autocomplete_search": {
                  "tokenizer": "lowercase"
                }
              },
              "tokenizer": {
                "autocomplete": {
                  "type": "edge_ngram",
                  "min_gram": 2,
                  "max_gram": 10,
                  "token_chars": [
                    "letter"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "analyzer": "autocomplete",
                "search_analyzer": "autocomplete_search"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": null,
        "body": {
          "title": "Quick Foxes"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/my_index/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.refresh"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "title": {
                "query": "Quick Fo",
                "operator": "and"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/keyword-tokenizer.asciidoc",
      "line": 12
    },
    "digest": "09a44b619a99f6bf3f01bd5e258fd22d",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"text\": \"New York\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "text": "New York"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/keyword-tokenizer.asciidoc",
      "line": 58
    },
    "digest": "c95d5317525c2ff625e6971c277247af",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"filter\": [ \"lowercase\" ],\n  \"text\": \"john.SMITH@example.COM\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "lowercase"
          ],
          "text": "john.SMITH@example.COM"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/letter-tokenizer.asciidoc",
      "line": 13
    },
    "digest": "76448aaaaa2c352bb6e09d2f83a3fbb3",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"letter\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "letter",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/lowercase-tokenizer.asciidoc",
      "line": 18
    },
    "digest": "a99bc141066ef673e35f306157750ec9",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"lowercase\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "lowercase",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/ngram-tokenizer.asciidoc",
      "line": 21
    },
    "digest": "39963032d423e2f20f53c4621b6ca3c6",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"ngram\",\n  \"text\": \"Quick Fox\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "ngram",
          "text": "Quick Fox"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/ngram-tokenizer.asciidoc",
      "line": 217
    },
    "digest": "9efcafd1f28490fd658d88df7d93c66c",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"ngram\",\n          \"min_gram\": 3,\n          \"max_gram\": 3,\n          \"token_chars\": [\n            \"letter\",\n            \"digit\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"2 Quick Foxes.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "ngram",
                  "min_gram": 3,
                  "max_gram": 3,
                  "token_chars": [
                    "letter",
                    "digit"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "2 Quick Foxes."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer.asciidoc",
      "line": 12
    },
    "digest": "dc4dcfeae8a5f248639335c2c9809549",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"path_hierarchy\",\n  \"text\": \"/one/two/three\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "path_hierarchy",
          "text": "/one/two/three"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer.asciidoc",
      "line": 93
    },
    "digest": "fcc35d56dff0291bcf3663830ce99254",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"path_hierarchy\",\n          \"delimiter\": \"-\",\n          \"replacement\": \"/\",\n          \"skip\": 2\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"one-two-three-four-five\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "path_hierarchy",
                  "delimiter": "-",
                  "replacement": "/",
                  "skip": 2
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "one-two-three-four-five"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 18
    },
    "digest": "840b6c5c3d9c56aed854cfab8da04486",
    "lang": "console",
    "found": [],
    "source": "PUT file-path-test\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"custom_path_tree\": {\n          \"tokenizer\": \"custom_hierarchy\"\n        },\n        \"custom_path_tree_reversed\": {\n          \"tokenizer\": \"custom_hierarchy_reversed\"\n        }\n      },\n      \"tokenizer\": {\n        \"custom_hierarchy\": {\n          \"type\": \"path_hierarchy\",\n          \"delimiter\": \"/\"\n        },\n        \"custom_hierarchy_reversed\": {\n          \"type\": \"path_hierarchy\",\n          \"delimiter\": \"/\",\n          \"reverse\": \"true\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"file_path\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"tree\": {\n            \"type\": \"text\",\n            \"analyzer\": \"custom_path_tree\"\n          },\n          \"tree_reversed\": {\n            \"type\": \"text\",\n            \"analyzer\": \"custom_path_tree_reversed\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPOST file-path-test/_doc/1\n{\n  \"file_path\": \"/User/alice/photos/2017/05/16/my_photo1.jpg\"\n}\n\nPOST file-path-test/_doc/2\n{\n  \"file_path\": \"/User/alice/photos/2017/05/16/my_photo2.jpg\"\n}\n\nPOST file-path-test/_doc/3\n{\n  \"file_path\": \"/User/alice/photos/2017/05/16/my_photo3.jpg\"\n}\n\nPOST file-path-test/_doc/4\n{\n  \"file_path\": \"/User/alice/photos/2017/05/15/my_photo1.jpg\"\n}\n\nPOST file-path-test/_doc/5\n{\n  \"file_path\": \"/User/bob/photos/2017/05/16/my_photo1.jpg\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/file-path-test",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "custom_path_tree": {
                  "tokenizer": "custom_hierarchy"
                },
                "custom_path_tree_reversed": {
                  "tokenizer": "custom_hierarchy_reversed"
                }
              },
              "tokenizer": {
                "custom_hierarchy": {
                  "type": "path_hierarchy",
                  "delimiter": "/"
                },
                "custom_hierarchy_reversed": {
                  "type": "path_hierarchy",
                  "delimiter": "/",
                  "reverse": "true"
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "file_path": {
                "type": "text",
                "fields": {
                  "tree": {
                    "type": "text",
                    "analyzer": "custom_path_tree"
                  },
                  "tree_reversed": {
                    "type": "text",
                    "analyzer": "custom_path_tree_reversed"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_doc/1",
        "query": null,
        "body": {
          "file_path": "/User/alice/photos/2017/05/16/my_photo1.jpg"
        },
        "params": {
          "index": "file-path-test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_doc/2",
        "query": null,
        "body": {
          "file_path": "/User/alice/photos/2017/05/16/my_photo2.jpg"
        },
        "params": {
          "index": "file-path-test",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_doc/3",
        "query": null,
        "body": {
          "file_path": "/User/alice/photos/2017/05/16/my_photo3.jpg"
        },
        "params": {
          "index": "file-path-test",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_doc/4",
        "query": null,
        "body": {
          "file_path": "/User/alice/photos/2017/05/15/my_photo1.jpg"
        },
        "params": {
          "index": "file-path-test",
          "id": "4"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_doc/5",
        "query": null,
        "body": {
          "file_path": "/User/bob/photos/2017/05/16/my_photo1.jpg"
        },
        "params": {
          "index": "file-path-test",
          "id": "5"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 97
    },
    "digest": "bd767ea03171fe71c73f58f16d5da92f",
    "lang": "console",
    "found": [],
    "source": "GET file-path-test/_search\n{\n  \"query\": {\n    \"match\": {\n      \"file_path\": \"/User/bob/photos/2017/05\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/file-path-test/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "file_path": "/User/bob/photos/2017/05"
            }
          }
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 112
    },
    "digest": "b724f547c5d67e95bbc0a9920e47033c",
    "lang": "console",
    "found": [],
    "source": "GET file-path-test/_search\n{\n  \"query\": {\n    \"term\": {\n      \"file_path.tree\": \"/User/alice/photos/2017/05/16\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/file-path-test/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "file_path.tree": "/User/alice/photos/2017/05/16"
            }
          }
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 131
    },
    "digest": "f1dc6f69453867ffafe86e998dd464d9",
    "lang": "console",
    "found": [],
    "source": "GET file-path-test/_search\n{\n  \"query\": {\n    \"term\": {\n      \"file_path.tree_reversed\": {\n        \"value\": \"my_photo1.jpg\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/file-path-test/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "file_path.tree_reversed": {
                "value": "my_photo1.jpg"
              }
            }
          }
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 149
    },
    "digest": "acc52da725a996ae696b00d9f818dfde",
    "lang": "console",
    "found": [],
    "source": "POST file-path-test/_analyze\n{\n  \"analyzer\": \"custom_path_tree\",\n  \"text\": \"/User/alice/photos/2017/05/16/my_photo1.jpg\"\n}\n\nPOST file-path-test/_analyze\n{\n  \"analyzer\": \"custom_path_tree_reversed\",\n  \"text\": \"/User/alice/photos/2017/05/16/my_photo1.jpg\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/file-path-test/_analyze",
        "query": null,
        "body": {
          "analyzer": "custom_path_tree",
          "text": "/User/alice/photos/2017/05/16/my_photo1.jpg"
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "indices.analyze"
      },
      {
        "method": "POST",
        "url": "/file-path-test/_analyze",
        "query": null,
        "body": {
          "analyzer": "custom_path_tree_reversed",
          "text": "/User/alice/photos/2017/05/16/my_photo1.jpg"
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pathhierarchy-tokenizer-examples.asciidoc",
      "line": 169
    },
    "digest": "4bba59cf745ac7b996bf90308bc26957",
    "lang": "console",
    "found": [],
    "source": "GET file-path-test/_search\n{\n  \"query\": {\n    \"bool\" : {\n      \"must\" : {\n        \"match\" : { \"file_path\" : \"16\" }\n      },\n      \"filter\": {\n        \"term\" : { \"file_path.tree\" : \"/User/alice\" }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/file-path-test/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match": {
                  "file_path": "16"
                }
              },
              "filter": {
                "term": {
                  "file_path.tree": "/User/alice"
                }
              }
            }
          }
        },
        "params": {
          "index": "file-path-test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pattern-tokenizer.asciidoc",
      "line": 29
    },
    "digest": "1a6dbe5df488c4a16e2f1101ba8a25d9",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"pattern\",\n  \"text\": \"The foo_bar_size's default is 5.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "pattern",
          "text": "The foo_bar_size's default is 5."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pattern-tokenizer.asciidoc",
      "line": 125
    },
    "digest": "448339a39d847c4cac57a325e23c2a5a",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"pattern\",\n          \"pattern\": \",\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"comma,separated,values\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "pattern",
                  "pattern": ","
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "comma,separated,values"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/pattern-tokenizer.asciidoc",
      "line": 213
    },
    "digest": "fa8d64d622b4d7fe3234924b4de4f0bf",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"pattern\",\n          \"pattern\": \"\\\"((?:\\\\\\\\\\\"|[^\\\"]|\\\\\\\\\\\")+)\\\"\",\n          \"group\": 1\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"\\\"value\\\", \\\"value with embedded \\\\\\\" quote\\\"\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "pattern",
                  "pattern": "\"((?:\\\\\"|[^\"]|\\\\\")+)\"",
                  "group": 1
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "\"value\", \"value with embedded \\\" quote\""
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/simplepattern-tokenizer.asciidoc",
      "line": 36
    },
    "digest": "9ffc049d5c5a570b90d913e92f910ee4",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"simple_pattern\",\n          \"pattern\": \"[0123456789]{3}\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"fd-786-335-514-x\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "simple_pattern",
                  "pattern": "[0123456789]{3}"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "fd-786-335-514-x"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/simplepatternsplit-tokenizer.asciidoc",
      "line": 37
    },
    "digest": "5c28bb67716ed2bbe03c1d5d3733cb42",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"simple_pattern_split\",\n          \"pattern\": \"_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"an_underscored_phrase\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "simple_pattern_split",
                  "pattern": "_"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "an_underscored_phrase"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/standard-tokenizer.asciidoc",
      "line": 13
    },
    "digest": "88a08d0b15ef41324f5c23db533d47d1",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/standard-tokenizer.asciidoc",
      "line": 136
    },
    "digest": "7375d4fe72c848ee3b0a799fda8bb0f0",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"standard\",\n          \"max_token_length\": 5\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "standard",
                  "max_token_length": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/thai-tokenizer.asciidoc",
      "line": 17
    },
    "digest": "a1e5f3956f9a697e79478fc9a6e30e1f",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"thai\",\n  \"text\": \"การที่ได้ต้องแสดงว่างานดี\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "thai",
          "text": "การที่ได้ต้องแสดงว่างานดี"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/uaxurlemail-tokenizer.asciidoc",
      "line": 11
    },
    "digest": "d12df43ffcdcd937bae9b26fb475e239",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"uax_url_email\",\n  \"text\": \"Email me at john.smith@global-international.com\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "uax_url_email",
          "text": "Email me at john.smith@global-international.com"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/uaxurlemail-tokenizer.asciidoc",
      "line": 92
    },
    "digest": "1125986e8e55028ff4c10b5e6c7bbebb",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"my_tokenizer\"\n        }\n      },\n      \"tokenizer\": {\n        \"my_tokenizer\": {\n          \"type\": \"uax_url_email\",\n          \"max_token_length\": 5\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"john.smith@global-international.com\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "my_tokenizer"
                }
              },
              "tokenizer": {
                "my_tokenizer": {
                  "type": "uax_url_email",
                  "max_token_length": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "john.smith@global-international.com"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenizers/whitespace-tokenizer.asciidoc",
      "line": 11
    },
    "digest": "7b9dfe5857bde1bd8483ea3241656714",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"text\": \"The 2 QUICK Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "text": "The 2 QUICK Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/apostrophe-tokenfilter.asciidoc",
      "line": 22
    },
    "digest": "3343a4cf559060c422d86c786a95e535",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"apostrophe\"],\n  \"text\" : \"Istanbul'a veya Istanbul'dan\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "apostrophe"
          ],
          "text": "Istanbul'a veya Istanbul'dan"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/apostrophe-tokenfilter.asciidoc",
      "line": 77
    },
    "digest": "da19e4ecfabcbabdc894687106eaccdc",
    "lang": "console",
    "found": [],
    "source": "PUT /apostrophe_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"standard_apostrophe\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"apostrophe\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/apostrophe_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_apostrophe": {
                  "tokenizer": "standard",
                  "filter": [
                    "apostrophe"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "apostrophe_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/asciifolding-tokenfilter.asciidoc",
      "line": 21
    },
    "digest": "00d65f7b9daa1c6b18eedd8ace206bae",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"asciifolding\"],\n  \"text\" : \"açaí à la carte\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "asciifolding"
          ],
          "text": "açaí à la carte"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/asciifolding-tokenfilter.asciidoc",
      "line": 83
    },
    "digest": "a976bdf566730e35c5277740c1e3a7f2",
    "lang": "console",
    "found": [],
    "source": "PUT /asciifold_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"standard_asciifolding\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"asciifolding\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/asciifold_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_asciifolding": {
                  "tokenizer": "standard",
                  "filter": [
                    "asciifolding"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "asciifold_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/asciifolding-tokenfilter.asciidoc",
      "line": 118
    },
    "digest": "c5a0248213307f8e036a26e3294ad611",
    "lang": "console",
    "found": [],
    "source": "PUT /asciifold_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"standard_asciifolding\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"my_ascii_folding\"]\n                }\n            },\n            \"filter\" : {\n                \"my_ascii_folding\" : {\n                    \"type\" : \"asciifolding\",\n                    \"preserve_original\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/asciifold_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_asciifolding": {
                  "tokenizer": "standard",
                  "filter": [
                    "my_ascii_folding"
                  ]
                }
              },
              "filter": {
                "my_ascii_folding": {
                  "type": "asciifolding",
                  "preserve_original": true
                }
              }
            }
          }
        },
        "params": {
          "index": "asciifold_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/cjk-bigram-tokenfilter.asciidoc",
      "line": 22
    },
    "digest": "b8c03bbd917d0cf5474a3e46ebdd7aad",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"cjk_bigram\"],\n  \"text\" : \"東京都は、日本の首都であり\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "cjk_bigram"
          ],
          "text": "東京都は、日本の首都であり"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/cjk-bigram-tokenfilter.asciidoc",
      "line": 126
    },
    "digest": "7230edf3a8cdb5e4091fad668b4049dc",
    "lang": "console",
    "found": [],
    "source": "PUT /cjk_bigram_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"standard_cjk_bigram\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"cjk_bigram\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/cjk_bigram_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_cjk_bigram": {
                  "tokenizer": "standard",
                  "filter": [
                    "cjk_bigram"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "cjk_bigram_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/cjk-bigram-tokenfilter.asciidoc",
      "line": 176
    },
    "digest": "6b328ac5a63ac7f26b011a6905083934",
    "lang": "console",
    "found": [],
    "source": "PUT /cjk_bigram_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"han_bigrams\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"han_bigrams_filter\"]\n                }\n            },\n            \"filter\" : {\n                \"han_bigrams_filter\" : {\n                    \"type\" : \"cjk_bigram\",\n                    \"ignored_scripts\": [\n                        \"hangul\",\n                        \"hiragana\",\n                        \"katakana\"\n                    ],\n                    \"output_unigrams\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/cjk_bigram_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "han_bigrams": {
                  "tokenizer": "standard",
                  "filter": [
                    "han_bigrams_filter"
                  ]
                }
              },
              "filter": {
                "han_bigrams_filter": {
                  "type": "cjk_bigram",
                  "ignored_scripts": [
                    "hangul",
                    "hiragana",
                    "katakana"
                  ],
                  "output_unigrams": true
                }
              }
            }
          }
        },
        "params": {
          "index": "cjk_bigram_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/cjk-width-tokenfilter.asciidoc",
      "line": 28
    },
    "digest": "76b279835936ee4b546a171c671c3cd7",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"cjk_width\"],\n  \"text\" : \"ｼｰｻｲﾄﾞﾗｲﾅｰ\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "cjk_width"
          ],
          "text": "ｼｰｻｲﾄﾞﾗｲﾅｰ"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/cjk-width-tokenfilter.asciidoc",
      "line": 69
    },
    "digest": "3df1aa197f7498a534b0536f49aea28b",
    "lang": "console",
    "found": [],
    "source": "PUT /cjk_width_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"standard_cjk_width\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"cjk_width\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/cjk_width_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_cjk_width": {
                  "tokenizer": "standard",
                  "filter": [
                    "cjk_width"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "cjk_width_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/classic-tokenfilter.asciidoc",
      "line": 21
    },
    "digest": "c8bbf362f06a0d8dab33ec0d99743343",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"classic\",\n  \"filter\" : [\"classic\"],\n  \"text\" : \"The 2 Q.U.I.C.K. Brown-Foxes jumped over the lazy dog's bone.\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "classic",
          "filter": [
            "classic"
          ],
          "text": "The 2 Q.U.I.C.K. Brown-Foxes jumped over the lazy dog's bone."
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/classic-tokenfilter.asciidoc",
      "line": 132
    },
    "digest": "50952b8040f875ce3719c71ca1c3bc8f",
    "lang": "console",
    "found": [],
    "source": "PUT /classic_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"classic_analyzer\" : {\n                    \"tokenizer\" : \"classic\",\n                    \"filter\" : [\"classic\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/classic_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "classic_analyzer": {
                  "tokenizer": "classic",
                  "filter": [
                    "classic"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "classic_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/common-grams-tokenfilter.asciidoc",
      "line": 28
    },
    "digest": "2fd0b3c132b46aa34cc9d92dd2d4bc85",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\n    {\n      \"type\": \"common_grams\",\n      \"common_words\": [\"is\", \"the\"]\n    }\n  ],\n  \"text\" : \"the quick fox is brown\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            {
              "type": "common_grams",
              "common_words": [
                "is",
                "the"
              ]
            }
          ],
          "text": "the quick fox is brown"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/common-grams-tokenfilter.asciidoc",
      "line": 126
    },
    "digest": "63de16d533d65708cf794eb50da02fbd",
    "lang": "console",
    "found": [],
    "source": "PUT /common_grams_example\n{\n    \"settings\": {\n        \"analysis\": {\n            \"analyzer\": {\n              \"index_grams\": {\n                  \"tokenizer\": \"whitespace\",\n                  \"filter\": [\"common_grams\"]\n              }\n            },\n            \"filter\": {\n              \"common_grams\": {\n                  \"type\": \"common_grams\",\n                  \"common_words\": [\"a\", \"is\", \"the\"]\n              }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/common_grams_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "index_grams": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "common_grams"
                  ]
                }
              },
              "filter": {
                "common_grams": {
                  "type": "common_grams",
                  "common_words": [
                    "a",
                    "is",
                    "the"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "common_grams_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/common-grams-tokenfilter.asciidoc",
      "line": 206
    },
    "digest": "d2d5a5fa4ab40787db87c85e1dd2bd06",
    "lang": "console",
    "found": [],
    "source": "PUT /common_grams_example\n{\n    \"settings\": {\n        \"analysis\": {\n            \"analyzer\": {\n              \"index_grams\": {\n                  \"tokenizer\": \"whitespace\",\n                  \"filter\": [\"common_grams_query\"]\n              }\n            },\n            \"filter\": {\n              \"common_grams_query\": {\n                  \"type\": \"common_grams\",\n                  \"common_words\": [\"a\", \"is\", \"the\"],\n                  \"ignore_case\": true,\n                  \"query_mode\": true\n              }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/common_grams_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "index_grams": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "common_grams_query"
                  ]
                }
              },
              "filter": {
                "common_grams_query": {
                  "type": "common_grams",
                  "common_words": [
                    "a",
                    "is",
                    "the"
                  ],
                  "ignore_case": true,
                  "query_mode": true
                }
              }
            }
          }
        },
        "params": {
          "index": "common_grams_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/condition-tokenfilter.asciidoc",
      "line": 22
    },
    "digest": "09944369863fd8666d5301d717317276",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"condition\",\n      \"filter\": [ \"lowercase\" ],\n      \"script\": {\n        \"source\": \"token.getTerm().length() < 5\"\n      }\n    }\n  ],\n  \"text\": \"THE QUICK BROWN FOX\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "condition",
              "filter": [
                "lowercase"
              ],
              "script": {
                "source": "token.getTerm().length() < 5"
              }
            }
          ],
          "text": "THE QUICK BROWN FOX"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/condition-tokenfilter.asciidoc",
      "line": 125
    },
    "digest": "a197076e0e74951ea88f20309ec257e2",
    "lang": "console",
    "found": [],
    "source": "PUT /palindrome_list\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_reverse_first_token\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"reverse_first_token\" ]\n        }\n      },\n      \"filter\": {\n        \"reverse_first_token\": {\n          \"type\": \"condition\",\n          \"filter\": [ \"reverse\" ],\n          \"script\": {\n            \"source\": \"token.getPosition() === 0\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/palindrome_list",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_reverse_first_token": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "reverse_first_token"
                  ]
                }
              },
              "filter": {
                "reverse_first_token": {
                  "type": "condition",
                  "filter": [
                    "reverse"
                  ],
                  "script": {
                    "source": "token.getPosition() === 0"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "palindrome_list"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/decimal-digit-tokenfilter.asciidoc",
      "line": 20
    },
    "digest": "a21319c9eff1ac47d7fe7490f1ef2efa",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"decimal_digit\"],\n  \"text\" : \"१-one two-२ ३\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "decimal_digit"
          ],
          "text": "१-one two-२ ३"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/decimal-digit-tokenfilter.asciidoc",
      "line": 75
    },
    "digest": "121b8bc28620095dfa570a989bcdb04e",
    "lang": "console",
    "found": [],
    "source": "PUT /decimal_digit_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"whitespace_decimal_digit\" : {\n                    \"tokenizer\" : \"whitespace\",\n                    \"filter\" : [\"decimal_digit\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/decimal_digit_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_decimal_digit": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "decimal_digit"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "decimal_digit_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 47
    },
    "digest": "7dc82f7d36686fd57a47e34cbda39a4e",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\"delimited_payload\"],\n  \"text\": \"the|0 brown|10 fox|5 is|0 quick|10\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "delimited_payload"
          ],
          "text": "the|0 brown|10 fox|5 is|0 quick|10"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 120
    },
    "digest": "d443db2755fde3b49ca3a9d296c4a96f",
    "lang": "console",
    "found": [],
    "source": "PUT delimited_payload\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_delimited_payload\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"delimited_payload\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/delimited_payload",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_delimited_payload": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "delimited_payload"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "delimited_payload"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 173
    },
    "digest": "27f9f604e7a48799fa30529cbc0ff619",
    "lang": "console",
    "found": [],
    "source": "PUT delimited_payload_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_plus_delimited\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"plus_delimited\" ]\n        }\n      },\n      \"filter\": {\n        \"plus_delimited\": {\n          \"type\": \"delimited_payload\",\n          \"delimiter\": \"+\",\n          \"encoding\": \"int\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/delimited_payload_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_plus_delimited": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "plus_delimited"
                  ]
                }
              },
              "filter": {
                "plus_delimited": {
                  "type": "delimited_payload",
                  "delimiter": "+",
                  "encoding": "int"
                }
              }
            }
          }
        },
        "params": {
          "index": "delimited_payload_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 206
    },
    "digest": "50c2cea2adbe9523458c2686ab11df54",
    "lang": "console",
    "found": [],
    "source": "PUT text_payloads\n{\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"term_vector\": \"with_positions_payloads\",\n        \"analyzer\": \"payload_delimiter\"\n      }\n    }\n  },\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"payload_delimiter\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"delimited_payload\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/text_payloads",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "term_vector": "with_positions_payloads",
                "analyzer": "payload_delimiter"
              }
            }
          },
          "settings": {
            "analysis": {
              "analyzer": {
                "payload_delimiter": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "delimited_payload"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "text_payloads"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 234
    },
    "digest": "d2f6fb271e97fde8685d7744e6718cc7",
    "lang": "console",
    "found": [],
    "source": "POST text_payloads/_doc/1\n{\n  \"text\": \"the|0 brown|3 fox|4 is|0 quick|10\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/text_payloads/_doc/1",
        "query": null,
        "body": {
          "text": "the|0 brown|3 fox|4 is|0 quick|10"
        },
        "params": {
          "index": "text_payloads",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 246
    },
    "digest": "b24a374c0ad264abbcacb5686f5ed61c",
    "lang": "console",
    "found": [],
    "source": "GET text_payloads/_termvectors/1\n{\n  \"fields\": [ \"text\" ],\n  \"payloads\": true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/text_payloads/_termvectors/1",
        "query": null,
        "body": {
          "fields": [
            "text"
          ],
          "payloads": true
        },
        "params": {
          "index": "text_payloads",
          "id": "1"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/delimited-payload-tokenfilter.asciidoc",
      "line": 258
    },
    "digest": "82a0b9e193b65de0a1c71288328f5f3d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"text_payloads\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"found\": true,\n  \"took\": 8,\n  \"term_vectors\": {\n    \"text\": {\n      \"field_statistics\": {\n        \"sum_doc_freq\": 5,\n        \"doc_count\": 1,\n        \"sum_ttf\": 5\n      },\n      \"terms\": {\n        \"brown\": {\n          \"term_freq\": 1,\n          \"tokens\": [\n            {\n              \"position\": 1,\n              \"payload\": \"QEAAAA==\"\n            }\n          ]\n        },\n        \"fox\": {\n          \"term_freq\": 1,\n          \"tokens\": [\n            {\n              \"position\": 2,\n              \"payload\": \"QIAAAA==\"\n            }\n          ]\n        },\n        \"is\": {\n          \"term_freq\": 1,\n          \"tokens\": [\n            {\n              \"position\": 3,\n              \"payload\": \"AAAAAA==\"\n            }\n          ]\n        },\n        \"quick\": {\n          \"term_freq\": 1,\n          \"tokens\": [\n            {\n              \"position\": 4,\n              \"payload\": \"QSAAAA==\"\n            }\n          ]\n        },\n        \"the\": {\n          \"term_freq\": 1,\n          \"tokens\": [\n            {\n              \"position\": 0,\n              \"payload\": \"AAAAAA==\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/dictionary-decompounder-tokenfilter.asciidoc",
      "line": 32
    },
    "digest": "3fecd5c6d0c172566da4a54320e1cff3",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"dictionary_decompounder\",\n      \"word_list\": [\"Donau\", \"dampf\", \"meer\", \"schiff\"]\n    }\n  ],\n  \"text\": \"Donaudampfschiff\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "dictionary_decompounder",
              "word_list": [
                "Donau",
                "dampf",
                "meer",
                "schiff"
              ]
            }
          ],
          "text": "Donaudampfschiff"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/dictionary-decompounder-tokenfilter.asciidoc",
      "line": 152
    },
    "digest": "a5a5fb129de2f492e8fd33043a73439c",
    "lang": "console",
    "found": [],
    "source": "PUT dictionary_decompound_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_dictionary_decompound\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"22_char_dictionary_decompound\" ]\n        }\n      },\n      \"filter\": {\n        \"22_char_dictionary_decompound\": {\n          \"type\": \"dictionary_decompounder\",\n          \"word_list_path\": \"analysis/example_word_list.txt\",\n          \"max_subword_size\": 22\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/dictionary_decompound_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_dictionary_decompound": {
                  "tokenizer": "standard",
                  "filter": [
                    "22_char_dictionary_decompound"
                  ]
                }
              },
              "filter": {
                "22_char_dictionary_decompound": {
                  "type": "dictionary_decompounder",
                  "word_list_path": "analysis/example_word_list.txt",
                  "max_subword_size": 22
                }
              }
            }
          }
        },
        "params": {
          "index": "dictionary_decompound_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/edgengram-tokenfilter.asciidoc",
      "line": 34
    },
    "digest": "6dbfe5565a95508e65d304131847f9fc",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    { \"type\": \"edge_ngram\",\n      \"min_gram\": 1,\n      \"max_gram\": 2\n    }\n  ],\n  \"text\": \"the quick brown fox jumps\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "edge_ngram",
              "min_gram": 1,
              "max_gram": 2
            }
          ],
          "text": "the quick brown fox jumps"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/edgengram-tokenfilter.asciidoc",
      "line": 143
    },
    "digest": "16351d99d0608789d04a0bb11a537098",
    "lang": "console",
    "found": [],
    "source": "PUT edge_ngram_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_edge_ngram\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"edge_ngram\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/edge_ngram_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_edge_ngram": {
                  "tokenizer": "standard",
                  "filter": [
                    "edge_ngram"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "edge_ngram_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/edgengram-tokenfilter.asciidoc",
      "line": 199
    },
    "digest": "6f07152055e99416deb10e95b428b847",
    "lang": "console",
    "found": [],
    "source": "PUT edge_ngram_custom_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"3_5_edgegrams\" ]\n        }\n      },\n      \"filter\": {\n        \"3_5_edgegrams\": {\n          \"type\": \"edge_ngram\",\n          \"min_gram\": 3,\n          \"max_gram\": 5\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/edge_ngram_custom_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "3_5_edgegrams"
                  ]
                }
              },
              "filter": {
                "3_5_edgegrams": {
                  "type": "edge_ngram",
                  "min_gram": 3,
                  "max_gram": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "edge_ngram_custom_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/elision-tokenfilter.asciidoc",
      "line": 34
    },
    "digest": "446e8fc8ccfb13bb5ec64e32a5676d18",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"elision\"],\n  \"text\" : \"j’examine près du wharf\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "elision"
          ],
          "text": "j’examine près du wharf"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/elision-tokenfilter.asciidoc",
      "line": 96
    },
    "digest": "26d49d11bb37c3f4ef8179010e34b50e",
    "lang": "console",
    "found": [],
    "source": "PUT /elision_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"whitespace_elision\" : {\n                    \"tokenizer\" : \"whitespace\",\n                    \"filter\" : [\"elision\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/elision_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_elision": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "elision"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "elision_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/elision-tokenfilter.asciidoc",
      "line": 165
    },
    "digest": "fc575e08d0bc8f4cb03a54e5d57fff7b",
    "lang": "console",
    "found": [],
    "source": "PUT /elision_case_sensitive_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"default\" : {\n                    \"tokenizer\" : \"whitespace\",\n                    \"filter\" : [\"elision_case_sensitive\"]\n                }\n            },\n            \"filter\" : {\n                \"elision_case_sensitive\" : {\n                    \"type\" : \"elision\",\n                    \"articles\" : [\"l\", \"m\", \"t\", \"qu\", \"n\", \"s\", \"j\"],\n                    \"articles_case\": true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/elision_case_sensitive_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "elision_case_sensitive"
                  ]
                }
              },
              "filter": {
                "elision_case_sensitive": {
                  "type": "elision",
                  "articles": [
                    "l",
                    "m",
                    "t",
                    "qu",
                    "n",
                    "s",
                    "j"
                  ],
                  "articles_case": true
                }
              }
            }
          }
        },
        "params": {
          "index": "elision_case_sensitive_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/fingerprint-tokenfilter.asciidoc",
      "line": 35
    },
    "digest": "df82a9cb21a7557f3ddba2509f76f608",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"fingerprint\"],\n  \"text\" : \"zebra jumps over resting resting dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "fingerprint"
          ],
          "text": "zebra jumps over resting resting dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/fingerprint-tokenfilter.asciidoc",
      "line": 76
    },
    "digest": "8e09caccab0c7c0f82f06cea45424396",
    "lang": "console",
    "found": [],
    "source": "PUT fingerprint_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_fingerprint\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"elision\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/fingerprint_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_fingerprint": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "elision"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "fingerprint_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/fingerprint-tokenfilter.asciidoc",
      "line": 117
    },
    "digest": "1b0f40959a7a4d124372f2bd3f7eac85",
    "lang": "console",
    "found": [],
    "source": "PUT custom_fingerprint_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"fingerprint_plus_concat\" ]\n        }\n      },\n      \"filter\": {\n        \"fingerprint_plus_concat\": {\n          \"type\": \"fingerprint\",\n          \"max_output_size\": 100,\n          \"separator\": \"+\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/custom_fingerprint_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "fingerprint_plus_concat"
                  ]
                }
              },
              "filter": {
                "fingerprint_plus_concat": {
                  "type": "fingerprint",
                  "max_output_size": 100,
                  "separator": "+"
                }
              }
            }
          }
        },
        "params": {
          "index": "custom_fingerprint_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/flatten-graph-tokenfilter.asciidoc",
      "line": 39
    },
    "digest": "2c27a8eb6528126f37a843d434cd88b6",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"synonym_graph\",\n      \"synonyms\": [ \"dns, domain name system\" ]\n    }\n  ],\n  \"text\": \"domain name system is fragile\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "synonym_graph",
              "synonyms": [
                "dns, domain name system"
              ]
            }
          ],
          "text": "domain name system is fragile"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/flatten-graph-tokenfilter.asciidoc",
      "line": 118
    },
    "digest": "ef10e8d07d9fae945e035d5dee1e9754",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"synonym_graph\",\n      \"synonyms\": [ \"dns, domain name system\" ]\n    },\n    \"flatten_graph\"\n  ],\n  \"text\": \"domain name system is fragile\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "synonym_graph",
              "synonyms": [
                "dns, domain name system"
              ]
            },
            "flatten_graph"
          ],
          "text": "domain name system is fragile"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/flatten-graph-tokenfilter.asciidoc",
      "line": 203
    },
    "digest": "4b6312348785cb57de3467f82ec252a5",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_index_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"my_custom_word_delimiter_graph_filter\",\n            \"flatten_graph\"\n          ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_word_delimiter_graph_filter\": {\n          \"type\": \"word_delimiter_graph\",\n          \"catenate_all\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_index_analyzer": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "my_custom_word_delimiter_graph_filter",
                    "flatten_graph"
                  ]
                }
              },
              "filter": {
                "my_custom_word_delimiter_graph_filter": {
                  "type": "word_delimiter_graph",
                  "catenate_all": true
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/hunspell-tokenfilter.asciidoc",
      "line": 47
    },
    "digest": "0af002734dd884f9385da6c3a4ca87a1",
    "lang": "console",
    "found": [],
    "source": "PUT /hunspell_example\n{\n    \"settings\": {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"en\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [ \"lowercase\", \"en_US\" ]\n                }\n            },\n            \"filter\" : {\n                \"en_US\" : {\n                    \"type\" : \"hunspell\",\n                    \"locale\" : \"en_US\",\n                    \"dedup\" : true\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/hunspell_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "en": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "en_US"
                  ]
                }
              },
              "filter": {
                "en_US": {
                  "type": "hunspell",
                  "locale": "en_US",
                  "dedup": true
                }
              }
            }
          }
        },
        "params": {
          "index": "hunspell_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/hyphenation-decompounder-tokenfilter.asciidoc",
      "line": 25
    },
    "digest": "f34c02351662481dd61a5c2a3e206c60",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"hyphenation_decompounder\",\n      \"hyphenation_patterns_path\": \"analysis/hyphenation_patterns.xml\",\n      \"word_list\": [\"Kaffee\", \"zucker\", \"tasse\"]\n    }\n  ],\n  \"text\": \"Kaffeetasse\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "hyphenation_decompounder",
              "hyphenation_patterns_path": "analysis/hyphenation_patterns.xml",
              "word_list": [
                "Kaffee",
                "zucker",
                "tasse"
              ]
            }
          ],
          "text": "Kaffeetasse"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/hyphenation-decompounder-tokenfilter.asciidoc",
      "line": 132
    },
    "digest": "5f8acd1e367b048b5542dbc6079bcc88",
    "lang": "console",
    "found": [],
    "source": "PUT hyphenation_decompound_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_hyphenation_decompound\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"22_char_hyphenation_decompound\" ]\n        }\n      },\n      \"filter\": {\n        \"22_char_hyphenation_decompound\": {\n          \"type\": \"hyphenation_decompounder\",\n          \"word_list_path\": \"analysis/example_word_list.txt\",\n          \"hyphenation_patterns_path\": \"analysis/hyphenation_patterns.xml\",\n          \"max_subword_size\": 22\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/hyphenation_decompound_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_hyphenation_decompound": {
                  "tokenizer": "standard",
                  "filter": [
                    "22_char_hyphenation_decompound"
                  ]
                }
              },
              "filter": {
                "22_char_hyphenation_decompound": {
                  "type": "hyphenation_decompounder",
                  "word_list_path": "analysis/example_word_list.txt",
                  "hyphenation_patterns_path": "analysis/hyphenation_patterns.xml",
                  "max_subword_size": 22
                }
              }
            }
          }
        },
        "params": {
          "index": "hyphenation_decompound_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keep-types-tokenfilter.asciidoc",
      "line": 38
    },
    "digest": "83cd4eb89818b4c32f654d370eafa920",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"keep_types\",\n      \"types\": [ \"<NUM>\" ]\n    }\n  ],\n  \"text\": \"1 quick fox 2 lazy dogs\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "keep_types",
              "types": [
                "<NUM>"
              ]
            }
          ],
          "text": "1 quick fox 2 lazy dogs"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keep-types-tokenfilter.asciidoc",
      "line": 91
    },
    "digest": "d94f666616dea141dcb7aaf08a35bc10",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [\n    {\n      \"type\": \"keep_types\",\n      \"types\": [ \"<NUM>\" ],\n      \"mode\": \"exclude\"\n    }\n  ],\n  \"text\": \"1 quick fox 2 lazy dogs\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "keep_types",
              "types": [
                "<NUM>"
              ],
              "mode": "exclude"
            }
          ],
          "text": "1 quick fox 2 lazy dogs"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keep-types-tokenfilter.asciidoc",
      "line": 182
    },
    "digest": "13b02da42d3afe7f0b649e1c98ac9549",
    "lang": "console",
    "found": [],
    "source": "PUT keep_types_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"extract_alpha\" ]\n        }\n      },\n      \"filter\": {\n        \"extract_alpha\": {\n          \"type\": \"keep_types\",\n          \"types\": [ \"<ALPHANUM>\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/keep_types_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "extract_alpha"
                  ]
                }
              },
              "filter": {
                "extract_alpha": {
                  "type": "keep_types",
                  "types": [
                    "<ALPHANUM>"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "keep_types_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keep-words-tokenfilter.asciidoc",
      "line": 26
    },
    "digest": "9a036a792be1d39af9fd0d1adb5f3402",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    {\n      \"type\": \"keep\",\n      \"keep_words\": [ \"dog\", \"elephant\", \"fox\" ]\n    }\n  ],\n  \"text\": \"the quick fox jumps over the lazy dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            {
              "type": "keep",
              "keep_words": [
                "dog",
                "elephant",
                "fox"
              ]
            }
          ],
          "text": "the quick fox jumps over the lazy dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keep-words-tokenfilter.asciidoc",
      "line": 118
    },
    "digest": "642c0c1c76e9bf226cd216ebae9ab958",
    "lang": "console",
    "found": [],
    "source": "PUT keep_words_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_keep_word_array\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"keep_word_array\" ]\n        },\n        \"standard_keep_word_file\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"keep_word_file\" ]\n        }\n      },\n      \"filter\": {\n        \"keep_word_array\": {\n          \"type\": \"keep\",\n          \"keep_words\": [ \"one\", \"two\", \"three\" ]\n        },\n        \"keep_word_file\": {\n          \"type\": \"keep\",\n          \"keep_words_path\": \"analysis/example_word_list.txt\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/keep_words_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_keep_word_array": {
                  "tokenizer": "standard",
                  "filter": [
                    "keep_word_array"
                  ]
                },
                "standard_keep_word_file": {
                  "tokenizer": "standard",
                  "filter": [
                    "keep_word_file"
                  ]
                }
              },
              "filter": {
                "keep_word_array": {
                  "type": "keep",
                  "keep_words": [
                    "one",
                    "two",
                    "three"
                  ]
                },
                "keep_word_file": {
                  "type": "keep",
                  "keep_words_path": "analysis/example_word_list.txt"
                }
              }
            }
          }
        },
        "params": {
          "index": "keep_words_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-marker-tokenfilter.asciidoc",
      "line": 35
    },
    "digest": "26f237f9bf14e8b972cc33ff6aebefa2",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [ \"stemmer\" ],\n  \"text\": \"fox running and jumping\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "stemmer"
          ],
          "text": "fox running and jumping"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-marker-tokenfilter.asciidoc",
      "line": 95
    },
    "digest": "5302f4f2bcc0f400ff71c791e6f68d7b",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    {\n      \"type\": \"keyword_marker\",\n      \"keywords\": [ \"jumping\" ]\n    },\n    \"stemmer\"\n  ],\n  \"text\": \"fox running and jumping\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            {
              "type": "keyword_marker",
              "keywords": [
                "jumping"
              ]
            },
            "stemmer"
          ],
          "text": "fox running and jumping"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-marker-tokenfilter.asciidoc",
      "line": 163
    },
    "digest": "059e04aaf093379401f665c33ac796dc",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    {\n      \"type\": \"keyword_marker\",\n      \"keywords\": [ \"jumping\" ]\n    },\n    \"stemmer\"\n  ],\n  \"text\": \"fox running and jumping\",\n  \"explain\": true,\n  \"attributes\": \"keyword\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            {
              "type": "keyword_marker",
              "keywords": [
                "jumping"
              ]
            },
            "stemmer"
          ],
          "text": "fox running and jumping",
          "explain": true,
          "attributes": "keyword"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-marker-tokenfilter.asciidoc",
      "line": 184
    },
    "digest": "833e768e4bb608875c81988e1432f6a0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"detail\": {\n    \"custom_analyzer\": true,\n    \"charfilters\": [],\n    \"tokenizer\": {\n      \"name\": \"whitespace\",\n      \"tokens\": [\n        {\n          \"token\": \"fox\",\n          \"start_offset\": 0,\n          \"end_offset\": 3,\n          \"type\": \"word\",\n          \"position\": 0\n        },\n        {\n          \"token\": \"running\",\n          \"start_offset\": 4,\n          \"end_offset\": 11,\n          \"type\": \"word\",\n          \"position\": 1\n        },\n        {\n          \"token\": \"and\",\n          \"start_offset\": 12,\n          \"end_offset\": 15,\n          \"type\": \"word\",\n          \"position\": 2\n        },\n        {\n          \"token\": \"jumping\",\n          \"start_offset\": 16,\n          \"end_offset\": 23,\n          \"type\": \"word\",\n          \"position\": 3\n        }\n      ]\n    },\n    \"tokenfilters\": [\n      {\n        \"name\": \"__anonymous__keyword_marker\",\n        \"tokens\": [\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"running\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": true\n          }\n        ]\n      },\n      {\n        \"name\": \"stemmer\",\n        \"tokens\": [\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"run\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": true\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-marker-tokenfilter.asciidoc",
      "line": 365
    },
    "digest": "f8c1fa91443573fcc0a5f2e22b7b4582",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"my_custom_keyword_marker_filter\",\n            \"porter_stem\"\n          ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_keyword_marker_filter\": {\n          \"type\": \"keyword_marker\",\n          \"keywords\": \"analysis/example_word_list.txt\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_analyzer": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "my_custom_keyword_marker_filter",
                    "porter_stem"
                  ]
                }
              },
              "filter": {
                "my_custom_keyword_marker_filter": {
                  "type": "keyword_marker",
                  "keywords": "analysis/example_word_list.txt"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 49
    },
    "digest": "a037beb3d02296e1d36dd43ef5c935dd",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    \"keyword_repeat\"\n  ],\n  \"text\": \"fox running and jumping\",\n  \"explain\": true,\n  \"attributes\": \"keyword\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "keyword_repeat"
          ],
          "text": "fox running and jumping",
          "explain": true,
          "attributes": "keyword"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 69
    },
    "digest": "19d80a3f2bcf9adf97fc1790ede525d3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"detail\": {\n    \"custom_analyzer\": true,\n    \"charfilters\": [],\n    \"tokenizer\": ...,\n    \"tokenfilters\": [\n      {\n        \"name\": \"keyword_repeat\",\n        \"tokens\": [\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"running\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"running\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 156
    },
    "digest": "8cbf9b46ce3ccc966c4902d2e0c56317",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    \"keyword_repeat\",\n    \"stemmer\"\n  ],\n  \"text\": \"fox running and jumping\",\n  \"explain\": true,\n  \"attributes\": \"keyword\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "keyword_repeat",
            "stemmer"
          ],
          "text": "fox running and jumping",
          "explain": true,
          "attributes": "keyword"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 179
    },
    "digest": "22482143f10ede75ca81a9232544a943",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"detail\": {\n    \"custom_analyzer\": true,\n    \"charfilters\": [],\n    \"tokenizer\": ...,\n    \"tokenfilters\": [\n      {\n        \"name\": \"keyword_repeat\",\n        \"tokens\": ...\n      },\n      {\n        \"name\": \"stemmer\",\n        \"tokens\": [\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"running\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"run\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"jump\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 274
    },
    "digest": "29783e5de3a5f3c985cbf11094cf49a0",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    \"keyword_repeat\",\n    \"stemmer\",\n    \"remove_duplicates\"\n  ],\n  \"text\": \"fox running and jumping\",\n  \"explain\": true,\n  \"attributes\": \"keyword\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "keyword_repeat",
            "stemmer",
            "remove_duplicates"
          ],
          "text": "fox running and jumping",
          "explain": true,
          "attributes": "keyword"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 296
    },
    "digest": "baf54208b4d120a5ac4489c8027d32ba",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"detail\": {\n    \"custom_analyzer\": true,\n    \"charfilters\": [],\n    \"tokenizer\": ...,\n    \"tokenfilters\": [\n      {\n        \"name\": \"keyword_repeat\",\n        \"tokens\": ...\n      },\n      {\n        \"name\": \"stemmer\",\n        \"tokens\": ...\n      },\n      {\n        \"name\": \"remove_duplicates\",\n        \"tokens\": [\n          {\n            \"token\": \"fox\",\n            \"start_offset\": 0,\n            \"end_offset\": 3,\n            \"type\": \"word\",\n            \"position\": 0,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"running\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"run\",\n            \"start_offset\": 4,\n            \"end_offset\": 11,\n            \"type\": \"word\",\n            \"position\": 1,\n            \"keyword\": false\n          },\n          {\n            \"token\": \"and\",\n            \"start_offset\": 12,\n            \"end_offset\": 15,\n            \"type\": \"word\",\n            \"position\": 2,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"jumping\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": true\n          },\n          {\n            \"token\": \"jump\",\n            \"start_offset\": 16,\n            \"end_offset\": 23,\n            \"type\": \"word\",\n            \"position\": 3,\n            \"keyword\": false\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/keyword-repeat-tokenfilter.asciidoc",
      "line": 384
    },
    "digest": "4710188da1085a6be9a1e0bdd66c4f26",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"keyword_repeat\",\n            \"porter_stem\",\n            \"remove_duplicates\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "keyword_repeat",
                    "porter_stem",
                    "remove_duplicates"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/length-tokenfilter.asciidoc",
      "line": 27
    },
    "digest": "1659420311d907d9fc024b96f4150216",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    {\n      \"type\": \"length\",\n      \"min\": 0,\n      \"max\": 4\n    }\n  ],\n  \"text\": \"the quick brown fox jumps over the lazy dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            {
              "type": "length",
              "min": 0,
              "max": 4
            }
          ],
          "text": "the quick brown fox jumps over the lazy dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/length-tokenfilter.asciidoc",
      "line": 109
    },
    "digest": "ea690283f301c6ce957efad93d7d5c5d",
    "lang": "console",
    "found": [],
    "source": "PUT length_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_length\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"length\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/length_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_length": {
                  "tokenizer": "standard",
                  "filter": [
                    "length"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "length_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/length-tokenfilter.asciidoc",
      "line": 149
    },
    "digest": "d88f883ed2fb8be35cd3e72ddffcf4ef",
    "lang": "console",
    "found": [],
    "source": "PUT length_custom_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_length_2_to_10_char\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"length_2_to_10_char\" ]\n        }\n      },\n      \"filter\": {\n        \"length_2_to_10_char\": {\n          \"type\": \"length\",\n          \"min\": 2,\n          \"max\": 10\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/length_custom_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_length_2_to_10_char": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "length_2_to_10_char"
                  ]
                }
              },
              "filter": {
                "length_2_to_10_char": {
                  "type": "length",
                  "min": 2,
                  "max": 10
                }
              }
            }
          }
        },
        "params": {
          "index": "length_custom_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/limit-token-count-tokenfilter.asciidoc",
      "line": 43
    },
    "digest": "5a3855f1b3e37d89ab7cbcc4f7ae1dd3",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n    \"filter\": [\n    {\n      \"type\": \"limit\",\n      \"max_token_count\": 2\n    }\n  ],\n  \"text\": \"quick fox jumps over lazy dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            {
              "type": "limit",
              "max_token_count": 2
            }
          ],
          "text": "quick fox jumps over lazy dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/limit-token-count-tokenfilter.asciidoc",
      "line": 96
    },
    "digest": "b96f465abb658fe32889c3d183f159a3",
    "lang": "console",
    "found": [],
    "source": "PUT limit_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_one_token_limit\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"limit\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/limit_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_one_token_limit": {
                  "tokenizer": "standard",
                  "filter": [
                    "limit"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "limit_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/limit-token-count-tokenfilter.asciidoc",
      "line": 123
    },
    "digest": "63521e0089c631d6668c44a0a9d7fdcc",
    "lang": "console",
    "found": [],
    "source": "PUT custom_limit_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"whitespace_five_token_limit\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"five_token_limit\" ]\n        }\n      },\n      \"filter\": {\n        \"five_token_limit\": {\n          \"type\": \"limit\",\n          \"max_token_count\": 5\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/custom_limit_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_five_token_limit": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "five_token_limit"
                  ]
                }
              },
              "filter": {
                "five_token_limit": {
                  "type": "limit",
                  "max_token_count": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "custom_limit_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/lowercase-tokenfilter.asciidoc",
      "line": 20
    },
    "digest": "aa3284717241ed79d3d1d3bdbbdce598",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"lowercase\"],\n  \"text\" : \"THE Quick FoX JUMPs\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "lowercase"
          ],
          "text": "THE Quick FoX JUMPs"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/lowercase-tokenfilter.asciidoc",
      "line": 82
    },
    "digest": "bf173db2ec48059c47eb8a7268545add",
    "lang": "console",
    "found": [],
    "source": "PUT lowercase_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"whitespace_lowercase\" : {\n                    \"tokenizer\" : \"whitespace\",\n                    \"filter\" : [\"lowercase\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/lowercase_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_lowercase": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "lowercase"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "lowercase_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/lowercase-tokenfilter.asciidoc",
      "line": 131
    },
    "digest": "f268416813befd13c604642c6fe6eda9",
    "lang": "console",
    "found": [],
    "source": "PUT custom_lowercase_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"greek_lowercase_example\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"standard\",\n          \"filter\": [\"greek_lowercase\"]\n        }\n      },\n      \"filter\": {\n        \"greek_lowercase\": {\n          \"type\": \"lowercase\",\n          \"language\": \"greek\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/custom_lowercase_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "greek_lowercase_example": {
                  "type": "custom",
                  "tokenizer": "standard",
                  "filter": [
                    "greek_lowercase"
                  ]
                }
              },
              "filter": {
                "greek_lowercase": {
                  "type": "lowercase",
                  "language": "greek"
                }
              }
            }
          }
        },
        "params": {
          "index": "custom_lowercase_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/multiplexer-tokenfilter.asciidoc",
      "line": 36
    },
    "digest": "c306212babadc14fa124b88fd8c43a6b",
    "lang": "console",
    "found": [],
    "source": "PUT /multiplexer_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [ \"my_multiplexer\" ]\n                }\n            },\n            \"filter\" : {\n                \"my_multiplexer\" : {\n                    \"type\" : \"multiplexer\",\n                    \"filters\" : [ \"lowercase\", \"lowercase, porter_stem\" ]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/multiplexer_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "my_multiplexer"
                  ]
                }
              },
              "filter": {
                "my_multiplexer": {
                  "type": "multiplexer",
                  "filters": [
                    "lowercase",
                    "lowercase, porter_stem"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "multiplexer_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/multiplexer-tokenfilter.asciidoc",
      "line": 61
    },
    "digest": "fa9a3ef94470f3d9bd6500b65bf993d1",
    "lang": "console",
    "found": [],
    "source": "POST /multiplexer_example/_analyze\n{\n  \"analyzer\" : \"my_analyzer\",\n  \"text\" : \"Going HOME\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/multiplexer_example/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "Going HOME"
        },
        "params": {
          "index": "multiplexer_example"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/multiplexer-tokenfilter.asciidoc",
      "line": 73
    },
    "digest": "3b7cbf575fe4305af42563b9046ca3be",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"Going\",\n      \"start_offset\": 0,\n      \"end_offset\": 5,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"going\",\n      \"start_offset\": 0,\n      \"end_offset\": 5,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"go\",\n      \"start_offset\": 0,\n      \"end_offset\": 5,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"HOME\",\n      \"start_offset\": 6,\n      \"end_offset\": 10,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"home\",          <1>\n      \"start_offset\": 6,\n      \"end_offset\": 10,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/ngram-tokenfilter.asciidoc",
      "line": 30
    },
    "digest": "f65abb38dd0cfedeb06e0cef206fbdab",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [ \"ngram\" ],\n  \"text\": \"Quick fox\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "ngram"
          ],
          "text": "Quick fox"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/ngram-tokenfilter.asciidoc",
      "line": 161
    },
    "digest": "923aee95078219ee6eb321a252e1121b",
    "lang": "console",
    "found": [],
    "source": "PUT ngram_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"standard_ngram\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [ \"ngram\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/ngram_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_ngram": {
                  "tokenizer": "standard",
                  "filter": [
                    "ngram"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "ngram_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/ngram-tokenfilter.asciidoc",
      "line": 204
    },
    "digest": "2793fa53b7d269852aa74f6bf57e34dc",
    "lang": "console",
    "found": [],
    "source": "PUT ngram_custom_example\n{\n  \"settings\": {\n    \"index\": {\n      \"max_ngram_diff\": 2\n    },\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"3_5_grams\" ]\n        }\n      },\n      \"filter\": {\n        \"3_5_grams\": {\n          \"type\": \"ngram\",\n          \"min_gram\": 3,\n          \"max_gram\": 5\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/ngram_custom_example",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "max_ngram_diff": 2
            },
            "analysis": {
              "analyzer": {
                "default": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "3_5_grams"
                  ]
                }
              },
              "filter": {
                "3_5_grams": {
                  "type": "ngram",
                  "min_gram": 3,
                  "max_gram": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "ngram_custom_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/pattern-capture-tokenfilter.asciidoc",
      "line": 51
    },
    "digest": "f733b25cd4c448b226bb76862974eef2",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n   \"settings\" : {\n      \"analysis\" : {\n         \"filter\" : {\n            \"code\" : {\n               \"type\" : \"pattern_capture\",\n               \"preserve_original\" : true,\n               \"patterns\" : [\n                  \"(\\\\p{Ll}+|\\\\p{Lu}\\\\p{Ll}+|\\\\p{Lu}+)\",\n                  \"(\\\\d+)\"\n               ]\n            }\n         },\n         \"analyzer\" : {\n            \"code\" : {\n               \"tokenizer\" : \"pattern\",\n               \"filter\" : [ \"code\", \"lowercase\" ]\n            }\n         }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "code": {
                  "type": "pattern_capture",
                  "preserve_original": true,
                  "patterns": [
                    "(\\p{Ll}+|\\p{Lu}\\p{Ll}+|\\p{Lu}+)",
                    "(\\d+)"
                  ]
                }
              },
              "analyzer": {
                "code": {
                  "tokenizer": "pattern",
                  "filter": [
                    "code",
                    "lowercase"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/pattern-capture-tokenfilter.asciidoc",
      "line": 91
    },
    "digest": "080c34d8151d02b760571e3a2899fa97",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n   \"settings\" : {\n      \"analysis\" : {\n         \"filter\" : {\n            \"email\" : {\n               \"type\" : \"pattern_capture\",\n               \"preserve_original\" : true,\n               \"patterns\" : [\n                  \"([^@]+)\",\n                  \"(\\\\p{L}+)\",\n                  \"(\\\\d+)\",\n                  \"@(.+)\"\n               ]\n            }\n         },\n         \"analyzer\" : {\n            \"email\" : {\n               \"tokenizer\" : \"uax_url_email\",\n               \"filter\" : [ \"email\", \"lowercase\",  \"unique\" ]\n            }\n         }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "filter": {
                "email": {
                  "type": "pattern_capture",
                  "preserve_original": true,
                  "patterns": [
                    "([^@]+)",
                    "(\\p{L}+)",
                    "(\\d+)",
                    "@(.+)"
                  ]
                }
              },
              "analyzer": {
                "email": {
                  "tokenizer": "uax_url_email",
                  "filter": [
                    "email",
                    "lowercase",
                    "unique"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/predicate-tokenfilter.asciidoc",
      "line": 22
    },
    "digest": "10338787b66a7f93270c3b88dd6197f8",
    "lang": "console",
    "found": [],
    "source": "PUT /condition_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [ \"my_script_filter\" ]\n                }\n            },\n            \"filter\" : {\n                \"my_script_filter\" : {\n                    \"type\" : \"predicate_token_filter\",\n                    \"script\" : {\n                        \"source\" : \"token.getTerm().length() > 5\"  <1>\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/condition_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "my_script_filter"
                  ]
                }
              },
              "filter": {
                "my_script_filter": {
                  "type": "predicate_token_filter",
                  "script": {
                    "source": "token.getTerm().length() > 5"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "condition_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/predicate-tokenfilter.asciidoc",
      "line": 51
    },
    "digest": "e20493a20d3992a97238b87c6930f08d",
    "lang": "console",
    "found": [],
    "source": "POST /condition_example/_analyze\n{\n  \"analyzer\" : \"my_analyzer\",\n  \"text\" : \"What Flapdoodle\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/condition_example/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "What Flapdoodle"
        },
        "params": {
          "index": "condition_example"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/predicate-tokenfilter.asciidoc",
      "line": 63
    },
    "digest": "f874e7c40c29fc3b2722f51140c8bf5e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"Flapdoodle\",        <1>\n      \"start_offset\": 5,\n      \"end_offset\": 15,\n      \"type\": \"<ALPHANUM>\",\n      \"position\": 1                 <2>\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc",
      "line": 24
    },
    "digest": "15d948d593d2624ac5e2b155052048f0",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    \"keyword_repeat\",\n    \"stemmer\"\n  ],\n  \"text\": \"jumping dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "keyword_repeat",
            "stemmer"
          ],
          "text": "jumping dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc",
      "line": 40
    },
    "digest": "9ecf59043a40c3344523501baa53f933",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"jumping\",\n      \"start_offset\": 0,\n      \"end_offset\": 7,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"jump\",\n      \"start_offset\": 0,\n      \"end_offset\": 7,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"dog\",\n      \"start_offset\": 8,\n      \"end_offset\": 11,\n      \"type\": \"word\",\n      \"position\": 1\n    },\n    {\n      \"token\": \"dog\",\n      \"start_offset\": 8,\n      \"end_offset\": 11,\n      \"type\": \"word\",\n      \"position\": 1\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc",
      "line": 79
    },
    "digest": "bab4c3b22c1768fcc7153345e4096dfb",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\": \"whitespace\",\n  \"filter\": [\n    \"keyword_repeat\",\n    \"stemmer\",\n    \"remove_duplicates\"\n  ],\n  \"text\": \"jumping dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "keyword_repeat",
            "stemmer",
            "remove_duplicates"
          ],
          "text": "jumping dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc",
      "line": 96
    },
    "digest": "547e7047e8a8ec29337bf4abc3ce8e5a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"jumping\",\n      \"start_offset\": 0,\n      \"end_offset\": 7,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"jump\",\n      \"start_offset\": 0,\n      \"end_offset\": 7,\n      \"type\": \"word\",\n      \"position\": 0\n    },\n    {\n      \"token\": \"dog\",\n      \"start_offset\": 8,\n      \"end_offset\": 11,\n      \"type\": \"word\",\n      \"position\": 1\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/remove-duplicates-tokenfilter.asciidoc",
      "line": 136
    },
    "digest": "198d39435b00b938cc2fa8f98c92e135",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_custom_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"keyword_repeat\",\n            \"stemmer\",\n            \"remove_duplicates\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_custom_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "keyword_repeat",
                    "stemmer",
                    "remove_duplicates"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/reverse-tokenfilter.asciidoc",
      "line": 24
    },
    "digest": "e09d30195108bd6a1f6857394a6123ea",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"reverse\"],\n  \"text\" : \"quick fox jumps\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "reverse"
          ],
          "text": "quick fox jumps"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/reverse-tokenfilter.asciidoc",
      "line": 79
    },
    "digest": "aa5fbb68d3a8e0d0c894791cb6cf0b13",
    "lang": "console",
    "found": [],
    "source": "PUT reverse_example\n{\n  \"settings\" : {\n    \"analysis\" : {\n      \"analyzer\" : {\n        \"whitespace_reverse\" : {\n          \"tokenizer\" : \"whitespace\",\n          \"filter\" : [\"reverse\"]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/reverse_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_reverse": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "reverse"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "reverse_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/snowball-tokenfilter.asciidoc",
      "line": 17
    },
    "digest": "e776311ef67c972f322b669dc4ab9926",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"settings\": {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"lowercase\", \"my_snow\"]\n                }\n            },\n            \"filter\" : {\n                \"my_snow\" : {\n                    \"type\" : \"snowball\",\n                    \"language\" : \"Lovins\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "my_snow"
                  ]
                }
              },
              "filter": {
                "my_snow": {
                  "type": "snowball",
                  "language": "Lovins"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stemmer-tokenfilter.asciidoc",
      "line": 17
    },
    "digest": "1ca618e7d72ec73c1064fa6eae3086d1",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"settings\": {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"lowercase\", \"my_stemmer\"]\n                }\n            },\n            \"filter\" : {\n                \"my_stemmer\" : {\n                    \"type\" : \"stemmer\",\n                    \"name\" : \"light_german\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "my_stemmer"
                  ]
                }
              },
              "filter": {
                "my_stemmer": {
                  "type": "stemmer",
                  "name": "light_german"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stemmer-override-tokenfilter.asciidoc",
      "line": 25
    },
    "digest": "8995e7cf49c4d870aea334645b70ed13",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"settings\": {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"lowercase\", \"custom_stems\", \"porter_stem\"]\n                }\n            },\n            \"filter\" : {\n                \"custom_stems\" : {\n                    \"type\" : \"stemmer_override\",\n                    \"rules_path\" : \"analysis/stemmer_override.txt\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "custom_stems",
                    "porter_stem"
                  ]
                }
              },
              "filter": {
                "custom_stems": {
                  "type": "stemmer_override",
                  "rules_path": "analysis/stemmer_override.txt"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stemmer-override-tokenfilter.asciidoc",
      "line": 57
    },
    "digest": "35e24a98b35cadd0b1b370ada79249e1",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"settings\": {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"my_analyzer\" : {\n                    \"tokenizer\" : \"standard\",\n                    \"filter\" : [\"lowercase\", \"custom_stems\", \"porter_stem\"]\n                }\n            },\n            \"filter\" : {\n                \"custom_stems\" : {\n                    \"type\" : \"stemmer_override\",\n                    \"rules\" : [\n                        \"running => run\",\n                        \"stemmer => stemmer\"\n                    ]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase",
                    "custom_stems",
                    "porter_stem"
                  ]
                }
              },
              "filter": {
                "custom_stems": {
                  "type": "stemmer_override",
                  "rules": [
                    "running => run",
                    "stemmer => stemmer"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stop-tokenfilter.asciidoc",
      "line": 31
    },
    "digest": "e9738fe09a99080506a07945795e8eda",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"standard\",\n  \"filter\": [ \"stop\" ],\n  \"text\": \"a quick fox jumps over the lazy dog\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "stop"
          ],
          "text": "a quick fox jumps over the lazy dog"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stop-tokenfilter.asciidoc",
      "line": 106
    },
    "digest": "23dc8c9e5e664cced2d3f876f6f70536",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"stop\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "stop"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stop-tokenfilter.asciidoc",
      "line": 183
    },
    "digest": "b683b2aa02f50d62a8b73d1f3603f738",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"my_custom_stop_words_filter\" ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_stop_words_filter\": {\n          \"type\": \"stop\",\n          \"ignore_case\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "my_custom_stop_words_filter"
                  ]
                }
              },
              "filter": {
                "my_custom_stop_words_filter": {
                  "type": "stop",
                  "ignore_case": true
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/stop-tokenfilter.asciidoc",
      "line": 210
    },
    "digest": "99cde757233651f95081224683960b0e",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"default\": {\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [ \"my_custom_stop_words_filter\" ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_stop_words_filter\": {\n          \"type\": \"stop\",\n          \"ignore_case\": true,\n          \"stopwords\": [ \"and\", \"is\", \"the\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "default": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "my_custom_stop_words_filter"
                  ]
                }
              },
              "filter": {
                "my_custom_stop_words_filter": {
                  "type": "stop",
                  "ignore_case": true,
                  "stopwords": [
                    "and",
                    "is",
                    "the"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-tokenfilter.asciidoc",
      "line": 12
    },
    "digest": "09f74df1d07d84ee133ce90f7832e712",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"analyzer\" : {\n                    \"synonym\" : {\n                        \"tokenizer\" : \"whitespace\",\n                        \"filter\" : [\"synonym\"]\n                    }\n                },\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym\",\n                        \"synonyms_path\" : \"analysis/synonym.txt\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "analyzer": {
                  "synonym": {
                    "tokenizer": "whitespace",
                    "filter": [
                      "synonym"
                    ]
                  }
                },
                "filter": {
                  "synonym": {
                    "type": "synonym",
                    "synonyms_path": "analysis/synonym.txt"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-tokenfilter.asciidoc",
      "line": 51
    },
    "digest": "bcc57126b24c408b5d944928b6f08c94",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"analyzer\" : {\n                    \"synonym\" : {\n                        \"tokenizer\" : \"standard\",\n                        \"filter\" : [\"my_stop\", \"synonym\"]\n                    }\n                },\n                \"filter\" : {\n                    \"my_stop\": {\n                        \"type\" : \"stop\",\n                        \"stopwords\": [\"bar\"]\n                    },\n                    \"synonym\" : {\n                        \"type\" : \"synonym\",\n                        \"lenient\": true,\n                        \"synonyms\" : [\"foo, bar => baz\"]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "analyzer": {
                  "synonym": {
                    "tokenizer": "standard",
                    "filter": [
                      "my_stop",
                      "synonym"
                    ]
                  }
                },
                "filter": {
                  "my_stop": {
                    "type": "stop",
                    "stopwords": [
                      "bar"
                    ]
                  },
                  "synonym": {
                    "type": "synonym",
                    "lenient": true,
                    "synonyms": [
                      "foo, bar => baz"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-tokenfilter.asciidoc",
      "line": 112
    },
    "digest": "9fb5e28535f396ab2eb8bc710eebc1e6",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym\",\n                        \"synonyms\" : [\n                            \"i-pod, i pod => ipod\",\n                            \"universe, cosmos\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "filter": {
                  "synonym": {
                    "type": "synonym",
                    "synonyms": [
                      "i-pod, i pod => ipod",
                      "universe, cosmos"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-tokenfilter.asciidoc",
      "line": 143
    },
    "digest": "0c0f37e409459dcd40d29ea684db4706",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym\",\n                        \"format\" : \"wordnet\",\n                        \"synonyms\" : [\n                            \"s(100000001,1,'abstain',v,1,0).\",\n                            \"s(100000001,2,'refrain',v,1,0).\",\n                            \"s(100000001,3,'desist',v,1,0).\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "filter": {
                  "synonym": {
                    "type": "synonym",
                    "format": "wordnet",
                    "synonyms": [
                      "s(100000001,1,'abstain',v,1,0).",
                      "s(100000001,2,'refrain',v,1,0).",
                      "s(100000001,3,'desist',v,1,0)."
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-graph-tokenfilter.asciidoc",
      "line": 26
    },
    "digest": "2f071d36aa4aff5a2fafb3dadaa38b82",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"analyzer\" : {\n                    \"search_synonyms\" : {\n                        \"tokenizer\" : \"whitespace\",\n                        \"filter\" : [\"graph_synonyms\"]\n                    }\n                },\n                \"filter\" : {\n                    \"graph_synonyms\" : {\n                        \"type\" : \"synonym_graph\",\n                        \"synonyms_path\" : \"analysis/synonym.txt\"\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "analyzer": {
                  "search_synonyms": {
                    "tokenizer": "whitespace",
                    "filter": [
                      "graph_synonyms"
                    ]
                  }
                },
                "filter": {
                  "graph_synonyms": {
                    "type": "synonym_graph",
                    "synonyms_path": "analysis/synonym.txt"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-graph-tokenfilter.asciidoc",
      "line": 61
    },
    "digest": "3d253e5a0029bc96cce484302319b772",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"analyzer\" : {\n                    \"synonym\" : {\n                        \"tokenizer\" : \"standard\",\n                        \"filter\" : [\"my_stop\", \"synonym_graph\"]\n                    }\n                },\n                \"filter\" : {\n                    \"my_stop\": {\n                        \"type\" : \"stop\",\n                        \"stopwords\": [\"bar\"]\n                    },\n                    \"synonym_graph\" : {\n                        \"type\" : \"synonym_graph\",\n                        \"lenient\": true,\n                        \"synonyms\" : [\"foo, bar => baz\"]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "analyzer": {
                  "synonym": {
                    "tokenizer": "standard",
                    "filter": [
                      "my_stop",
                      "synonym_graph"
                    ]
                  }
                },
                "filter": {
                  "my_stop": {
                    "type": "stop",
                    "stopwords": [
                      "bar"
                    ]
                  },
                  "synonym_graph": {
                    "type": "synonym_graph",
                    "lenient": true,
                    "synonyms": [
                      "foo, bar => baz"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-graph-tokenfilter.asciidoc",
      "line": 121
    },
    "digest": "1a14fd905941ecbdbc943b05875afc6f",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym_graph\",\n                        \"synonyms\" : [\n                            \"lol, laughing out loud\",\n                            \"universe, cosmos\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "filter": {
                  "synonym": {
                    "type": "synonym_graph",
                    "synonyms": [
                      "lol, laughing out loud",
                      "universe, cosmos"
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/synonym-graph-tokenfilter.asciidoc",
      "line": 152
    },
    "digest": "f0d7d6d5c878211704d4a5f1b2f6a247",
    "lang": "console",
    "found": [],
    "source": "PUT /test_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym_graph\",\n                        \"format\" : \"wordnet\",\n                        \"synonyms\" : [\n                            \"s(100000001,1,'abstain',v,1,0).\",\n                            \"s(100000001,2,'refrain',v,1,0).\",\n                            \"s(100000001,3,'desist',v,1,0).\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "filter": {
                  "synonym": {
                    "type": "synonym_graph",
                    "format": "wordnet",
                    "synonyms": [
                      "s(100000001,1,'abstain',v,1,0).",
                      "s(100000001,2,'refrain',v,1,0).",
                      "s(100000001,3,'desist',v,1,0)."
                    ]
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/trim-tokenfilter.asciidoc",
      "line": 34
    },
    "digest": "c318fde926842722825a51e5c9c326a9",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"keyword\",\n  \"text\" : \" fox \"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "text": " fox "
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/trim-tokenfilter.asciidoc",
      "line": 47
    },
    "digest": "63cffa23f7a230f837f07ceb83dc284e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \" fox \",\n      \"start_offset\": 0,\n      \"end_offset\": 5,\n      \"type\": \"word\",\n      \"position\": 0\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/trim-tokenfilter.asciidoc",
      "line": 65
    },
    "digest": "a3a14f7f0e80725f695a901a7e1d579d",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"keyword\",\n  \"filter\" : [\"trim\"],\n  \"text\" : \" fox \"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "trim"
          ],
          "text": " fox "
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/trim-tokenfilter.asciidoc",
      "line": 78
    },
    "digest": "b38a60d5f2b2caf2134d5963558b78b6",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"tokens\": [\n    {\n      \"token\": \"fox\",\n      \"start_offset\": 0,\n      \"end_offset\": 5,\n      \"type\": \"word\",\n      \"position\": 0\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/trim-tokenfilter.asciidoc",
      "line": 99
    },
    "digest": "fd26bfdbe95b2d2db374385d12849f77",
    "lang": "console",
    "found": [],
    "source": "PUT trim_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"keyword_trim\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [ \"trim\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/trim_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "keyword_trim": {
                  "tokenizer": "keyword",
                  "filter": [
                    "trim"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "trim_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/truncate-tokenfilter.asciidoc",
      "line": 24
    },
    "digest": "ee2d97090d617ed8aa2a87ea33556dd7",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"truncate\"],\n  \"text\" : \"the quinquennial extravaganza carried on\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "truncate"
          ],
          "text": "the quinquennial extravaganza carried on"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/truncate-tokenfilter.asciidoc",
      "line": 93
    },
    "digest": "f8651356ce2e7e93fa306c30f57ed588",
    "lang": "console",
    "found": [],
    "source": "PUT custom_truncate_example\n{\n  \"settings\" : {\n    \"analysis\" : {\n      \"analyzer\" : {\n        \"standard_truncate\" : {\n        \"tokenizer\" : \"standard\",\n        \"filter\" : [\"truncate\"]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/custom_truncate_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_truncate": {
                  "tokenizer": "standard",
                  "filter": [
                    "truncate"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "custom_truncate_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/truncate-tokenfilter.asciidoc",
      "line": 128
    },
    "digest": "af84b3995564a7ca84360a526a4ac896",
    "lang": "console",
    "found": [],
    "source": "PUT 5_char_words_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"lowercase_5_char\": {\n          \"tokenizer\": \"lowercase\",\n          \"filter\": [ \"5_char_trunc\" ]\n        }\n      },\n      \"filter\": {\n        \"5_char_trunc\": {\n          \"type\": \"truncate\",\n          \"length\": 5\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/5_char_words_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "lowercase_5_char": {
                  "tokenizer": "lowercase",
                  "filter": [
                    "5_char_trunc"
                  ]
                }
              },
              "filter": {
                "5_char_trunc": {
                  "type": "truncate",
                  "length": 5
                }
              }
            }
          }
        },
        "params": {
          "index": "5_char_words_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/unique-tokenfilter.asciidoc",
      "line": 26
    },
    "digest": "50d5c5b7e8ed9a95b8d9a25a32a77425",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"unique\"],\n  \"text\" : \"the quick fox jumps the lazy fox\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "unique"
          ],
          "text": "the quick fox jumps the lazy fox"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/unique-tokenfilter.asciidoc",
      "line": 95
    },
    "digest": "a428d518162918733d49261ffd65cfc1",
    "lang": "console",
    "found": [],
    "source": "PUT custom_unique_example\n{\n  \"settings\" : {\n    \"analysis\" : {\n      \"analyzer\" : {\n        \"standard_truncate\" : {\n        \"tokenizer\" : \"standard\",\n        \"filter\" : [\"unique\"]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/custom_unique_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "standard_truncate": {
                  "tokenizer": "standard",
                  "filter": [
                    "unique"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "custom_unique_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/unique-tokenfilter.asciidoc",
      "line": 130
    },
    "digest": "6e1157f3184fa192d47a3d0e3ea17a6c",
    "lang": "console",
    "found": [],
    "source": "PUT letter_unique_pos_example\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"letter_unique_pos\": {\n          \"tokenizer\": \"letter\",\n          \"filter\": [ \"unique_pos\" ]\n        }\n      },\n      \"filter\": {\n        \"unique_pos\": {\n          \"type\": \"unique\",\n          \"only_on_same_position\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/letter_unique_pos_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "letter_unique_pos": {
                  "tokenizer": "letter",
                  "filter": [
                    "unique_pos"
                  ]
                }
              },
              "filter": {
                "unique_pos": {
                  "type": "unique",
                  "only_on_same_position": true
                }
              }
            }
          }
        },
        "params": {
          "index": "letter_unique_pos_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/uppercase-tokenfilter.asciidoc",
      "line": 30
    },
    "digest": "9f7671119236423e0e40801ef6485af1",
    "lang": "console",
    "found": [],
    "source": "GET _analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"uppercase\"],\n  \"text\" : \"the Quick FoX JUMPs\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "uppercase"
          ],
          "text": "the Quick FoX JUMPs"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/uppercase-tokenfilter.asciidoc",
      "line": 92
    },
    "digest": "9db72fe811ee61ee3f7baa45916d20e0",
    "lang": "console",
    "found": [],
    "source": "PUT uppercase_example\n{\n    \"settings\" : {\n        \"analysis\" : {\n            \"analyzer\" : {\n                \"whitespace_uppercase\" : {\n                    \"tokenizer\" : \"whitespace\",\n                    \"filter\" : [\"uppercase\"]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/uppercase_example",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "whitespace_uppercase": {
                  "tokenizer": "whitespace",
                  "filter": [
                    "uppercase"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "uppercase_example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-tokenfilter.asciidoc",
      "line": 58
    },
    "digest": "c42bc6e74afc3d43cd032ec2bfd77385",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"filter\": [ \"word_delimiter\" ],\n  \"text\": \"Neil's-Super-Duper-XL500--42+AutoCoder\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "word_delimiter"
          ],
          "text": "Neil's-Super-Duper-XL500--42+AutoCoder"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-tokenfilter.asciidoc",
      "line": 148
    },
    "digest": "0daa91e512cb2009925b5efb49e926f7",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [ \"word_delimiter\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "filter": [
                    "word_delimiter"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-tokenfilter.asciidoc",
      "line": 359
    },
    "digest": "83a1cb2fd02a76f2766d7b186002859e",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [ \"my_custom_word_delimiter_filter\" ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_word_delimiter_filter\": {\n          \"type\": \"word_delimiter\",\n          \"type_table\": [ \"- => ALPHA\" ],\n          \"split_on_case_change\": false,\n          \"split_on_numerics\": false,\n          \"stem_english_possessive\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "filter": [
                    "my_custom_word_delimiter_filter"
                  ]
                }
              },
              "filter": {
                "my_custom_word_delimiter_filter": {
                  "type": "word_delimiter",
                  "type_table": [
                    "- => ALPHA"
                  ],
                  "split_on_case_change": false,
                  "split_on_numerics": false,
                  "stem_english_possessive": true
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-graph-tokenfilter.asciidoc",
      "line": 47
    },
    "digest": "ffcf80e1094aa2d774f56f6b0bc54827",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\": \"keyword\",\n  \"filter\": [ \"word_delimiter_graph\" ],\n  \"text\": \"Neil's-Super-Duper-XL500--42+AutoCoder\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "word_delimiter_graph"
          ],
          "text": "Neil's-Super-Duper-XL500--42+AutoCoder"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-graph-tokenfilter.asciidoc",
      "line": 137
    },
    "digest": "4620e88aa70944db528af43fead2b9ab",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [ \"word_delimiter_graph\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "filter": [
                    "word_delimiter_graph"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/tokenfilters/word-delimiter-graph-tokenfilter.asciidoc",
      "line": 404
    },
    "digest": "aee2ef858cd6bcc75ef97563cbe5ca5f",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"filter\": [ \"my_custom_word_delimiter_graph_filter\" ]\n        }\n      },\n      \"filter\": {\n        \"my_custom_word_delimiter_graph_filter\": {\n          \"type\": \"word_delimiter_graph\",\n          \"type_table\": [ \"- => ALPHA\" ],\n          \"split_on_case_change\": false,\n          \"split_on_numerics\": false,\n          \"stem_english_possessive\": true\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "filter": [
                    "my_custom_word_delimiter_graph_filter"
                  ]
                }
              },
              "filter": {
                "my_custom_word_delimiter_graph_filter": {
                  "type": "word_delimiter_graph",
                  "type_table": [
                    "- => ALPHA"
                  ],
                  "split_on_case_change": false,
                  "split_on_numerics": false,
                  "stem_english_possessive": true
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/htmlstrip-charfilter.asciidoc",
      "line": 12
    },
    "digest": "d6de3491f5787f739d5cd8c2ff3dddfa",
    "lang": "console",
    "found": [],
    "source": "POST _analyze\n{\n  \"tokenizer\":      \"keyword\", <1>\n  \"char_filter\":  [ \"html_strip\" ],\n  \"text\": \"<p>I&apos;m so <b>happy</b>!</p>\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "char_filter": [
            "html_strip"
          ],
          "text": "I&apos;m so happy</b>!</p>"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/htmlstrip-charfilter.asciidoc",
      "line": 74
    },
    "digest": "426f95b13a5b6042b5273d74ad8ee708",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"char_filter\": [\"my_char_filter\"]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"html_strip\",\n          \"escaped_tags\": [\"b\"]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"<p>I&apos;m so <b>happy</b>!</p>\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "char_filter": [
                    "my_char_filter"
                  ]
                }
              },
              "char_filter": {
                "my_char_filter": {
                  "type": "html_strip",
                  "escaped_tags": [
                    "b"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "I&apos;m so happy</b>!</p>"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/mapping-charfilter.asciidoc",
      "line": 35
    },
    "digest": "f9518803f0368e326ce2f46bd213bde9",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"keyword\",\n          \"char_filter\": [\n            \"my_char_filter\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"mapping\",\n          \"mappings\": [\n            \"٠ => 0\",\n            \"١ => 1\",\n            \"٢ => 2\",\n            \"٣ => 3\",\n            \"٤ => 4\",\n            \"٥ => 5\",\n            \"٦ => 6\",\n            \"٧ => 7\",\n            \"٨ => 8\",\n            \"٩ => 9\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"My license plate is ٢٥٠١٥\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "keyword",
                  "char_filter": [
                    "my_char_filter"
                  ]
                }
              },
              "char_filter": {
                "my_char_filter": {
                  "type": "mapping",
                  "mappings": [
                    "٠ => 0",
                    "١ => 1",
                    "٢ => 2",
                    "٣ => 3",
                    "٤ => 4",
                    "٥ => 5",
                    "٦ => 6",
                    "٧ => 7",
                    "٨ => 8",
                    "٩ => 9"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "My license plate is ٢٥٠١٥"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/mapping-charfilter.asciidoc",
      "line": 107
    },
    "digest": "8d5c32d86f00cf27d3f52a5fc493ea30",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"char_filter\": [\n            \"my_char_filter\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"mapping\",\n          \"mappings\": [\n            \":) => _happy_\",\n            \":( => _sad_\"\n          ]\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"I'm delighted about it :(\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "char_filter": [
                    "my_char_filter"
                  ]
                }
              },
              "char_filter": {
                "my_char_filter": {
                  "type": "mapping",
                  "mappings": [
                    ":) => _happy_",
                    ":( => _sad_"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "I'm delighted about it :("
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/pattern-replace-charfilter.asciidoc",
      "line": 51
    },
    "digest": "2b8ba109999fc87712433cea92c99ebe",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"char_filter\": [\n            \"my_char_filter\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(\\\\d+)-(?=\\\\d)\",\n          \"replacement\": \"$1_\"\n        }\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"My credit card is 123-456-789\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "char_filter": [
                    "my_char_filter"
                  ]
                }
              },
              "char_filter": {
                "my_char_filter": {
                  "type": "pattern_replace",
                  "pattern": "(\\d+)-(?=\\d)",
                  "replacement": "$1_"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "My credit card is 123-456-789"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/pattern-replace-charfilter.asciidoc",
      "line": 101
    },
    "digest": "1e1f0d83b1ca672396341af5dcfd2603",
    "lang": "console",
    "found": [],
    "source": "PUT my_index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"my_analyzer\": {\n          \"tokenizer\": \"standard\",\n          \"char_filter\": [\n            \"my_char_filter\"\n          ],\n          \"filter\": [\n            \"lowercase\"\n          ]\n        }\n      },\n      \"char_filter\": {\n        \"my_char_filter\": {\n          \"type\": \"pattern_replace\",\n          \"pattern\": \"(?<=\\\\p{Lower})(?=\\\\p{Upper})\",\n          \"replacement\": \" \"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"analyzer\": \"my_analyzer\"\n      }\n    }\n  }\n}\n\nPOST my_index/_analyze\n{\n  \"analyzer\": \"my_analyzer\",\n  \"text\": \"The fooBarBaz method\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "my_analyzer": {
                  "tokenizer": "standard",
                  "char_filter": [
                    "my_char_filter"
                  ],
                  "filter": [
                    "lowercase"
                  ]
                }
              },
              "char_filter": {
                "my_char_filter": {
                  "type": "pattern_replace",
                  "pattern": "(?<=\\p{Lower})(?=\\p{Upper})",
                  "replacement": " "
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "analyzer": "my_analyzer"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/my_index/_analyze",
        "query": null,
        "body": {
          "analyzer": "my_analyzer",
          "text": "The fooBarBaz method"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/pattern-replace-charfilter.asciidoc",
      "line": 202
    },
    "digest": "32afaee3f1326785b4009ff48576d42f",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_doc/1?refresh\n{\n  \"text\": \"The fooBarBaz method\"\n}\n\nGET my_index/_search\n{\n  \"query\": {\n    \"match\": {\n      \"text\": \"bar\"\n    }\n  },\n  \"highlight\": {\n    \"fields\": {\n      \"text\": {}\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "The fooBarBaz method"
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "text": "bar"
            }
          },
          "highlight": {
            "fields": {
              "text": {}
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "analysis/charfilters/pattern-replace-charfilter.asciidoc",
      "line": 227
    },
    "digest": "46ac4a940f3218a504b651e65c4ec3c5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"timed_out\": false,\n  \"took\": $body.took,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.2876821,\n    \"hits\": [\n      {\n        \"_index\": \"my_index\",\n        \"_id\": \"1\",\n        \"_score\": 0.2876821,\n        \"_source\": {\n          \"text\": \"The fooBarBaz method\"\n        },\n        \"highlight\": {\n          \"text\": [\n            \"The foo<em>Ba</em>rBaz method\" <1>\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "analysis/normalizers.asciidoc",
      "line": 27
    },
    "digest": "966ff3a4c5b61ed1a36d44c17ce06157",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"char_filter\": {\n        \"quote\": {\n          \"type\": \"mapping\",\n          \"mappings\": [\n            \"« => \\\"\",\n            \"» => \\\"\"\n          ]\n        }\n      },\n      \"normalizer\": {\n        \"my_normalizer\": {\n          \"type\": \"custom\",\n          \"char_filter\": [\"quote\"],\n          \"filter\": [\"lowercase\", \"asciifolding\"]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"keyword\",\n        \"normalizer\": \"my_normalizer\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "char_filter": {
                "quote": {
                  "type": "mapping",
                  "mappings": [
                    "« => \"",
                    "» => \""
                  ]
                }
              },
              "normalizer": {
                "my_normalizer": {
                  "type": "custom",
                  "char_filter": [
                    "quote"
                  ],
                  "filter": [
                    "lowercase",
                    "asciifolding"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "foo": {
                "type": "keyword",
                "normalizer": "my_normalizer"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/discovery/voting.asciidoc",
      "line": 31
    },
    "digest": "1605be45a5711d1929d6ad2d1ae0f797",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state?filter_path=metadata.cluster_coordination.last_committed_config",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state",
        "query": {
          "filter_path": "metadata.cluster_coordination.last_committed_config"
        },
        "body": null,
        "params": null,
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/discovery/adding-removing-nodes.asciidoc",
      "line": 64
    },
    "digest": "abcc9f98c6bbaf70aa0b1abf8011d2a4",
    "lang": "console",
    "found": [],
    "source": "# Add node to voting configuration exclusions list and wait for the system\n# to auto-reconfigure the node out of the voting configuration up to the\n# default timeout of 30 seconds\nPOST /_cluster/voting_config_exclusions/node_name\n\n# Add node to voting configuration exclusions list and wait for\n# auto-reconfiguration up to one minute\nPOST /_cluster/voting_config_exclusions/node_name?timeout=1m",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "modules/discovery/adding-removing-nodes.asciidoc",
      "line": 107
    },
    "digest": "92f073762634a4b2274f71002494192e",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state?filter_path=metadata.cluster_coordination.voting_config_exclusions",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state",
        "query": {
          "filter_path": "metadata.cluster_coordination.voting_config_exclusions"
        },
        "body": null,
        "params": null,
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/discovery/adding-removing-nodes.asciidoc",
      "line": 125
    },
    "digest": "ead4d875877d618594d0cdbdd9b7998b",
    "lang": "console",
    "found": [],
    "source": "# Wait for all the nodes with voting configuration exclusions to be removed from\n# the cluster and then remove all the exclusions, allowing any node to return to\n# the voting configuration in the future.\nDELETE /_cluster/voting_config_exclusions\n\n# Immediately remove all the voting configuration exclusions, allowing any node\n# to return to the voting configuration in the future.\nDELETE /_cluster/voting_config_exclusions?wait_for_removal=false",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "modules/cluster/disk_allocator.asciidoc",
      "line": 55
    },
    "digest": "aaaa9a186db96077879ddfcfbd625fdb",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n  \"index.blocks.read_only_allow_delete\": null\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index.blocks.read_only_allow_delete": null
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cluster/disk_allocator.asciidoc",
      "line": 79
    },
    "digest": "4fe5a9e99dc9400d67a5a2f6f6752c07",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"transient\": {\n    \"cluster.routing.allocation.disk.watermark.low\": \"100gb\",\n    \"cluster.routing.allocation.disk.watermark.high\": \"50gb\",\n    \"cluster.routing.allocation.disk.watermark.flood_stage\": \"10gb\",\n    \"cluster.info.update.interval\": \"1m\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "cluster.routing.allocation.disk.watermark.low": "100gb",
            "cluster.routing.allocation.disk.watermark.high": "50gb",
            "cluster.routing.allocation.disk.watermark.flood_stage": "10gb",
            "cluster.info.update.interval": "1m"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cluster/allocation_filtering.asciidoc",
      "line": 22
    },
    "digest": "281ae12918af10b6377ec760eaa844ce",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"transient\" : {\n    \"cluster.routing.allocation.exclude._ip\" : \"10.0.0.1\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "cluster.routing.allocation.exclude._ip": "10.0.0.1"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cluster/allocation_filtering.asciidoc",
      "line": 65
    },
    "digest": "07474768b8f9d532b524c15e512736f4",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"transient\": {\n    \"cluster.routing.allocation.exclude._ip\": \"192.168.2.*\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "cluster.routing.allocation.exclude._ip": "192.168.2.*"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cluster/misc.asciidoc",
      "line": 79
    },
    "digest": "4207219a892339e8f3abe0df8723dd27",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n  \"persistent\": {\n    \"cluster.metadata.administrator\": \"sysadmin@example.com\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.metadata.administrator": "sysadmin@example.com"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/cluster/misc.asciidoc",
      "line": 119
    },
    "digest": "c3fa14da3d0b0f93fb59bb5386b7e776",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n  \"transient\": {\n    \"logger.org.elasticsearch.indices.recovery\": \"DEBUG\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "logger.org.elasticsearch.indices.recovery": "DEBUG"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/http.asciidoc",
      "line": 119
    },
    "digest": "45df8177c5f8a3cc4e36867742e8250c",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n   \"transient\" : {\n      \"logger.org.elasticsearch.http.HttpTracer\" : \"TRACE\"\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "logger.org.elasticsearch.http.HttpTracer": "TRACE"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/http.asciidoc",
      "line": 132
    },
    "digest": "fa4e5b5cd144dd03cd507ffa9dec5b7e",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n   \"transient\" : {\n      \"http.tracer.include\" : \"*\",\n      \"http.tracer.exclude\" : \"\"\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "http.tracer.include": "*",
            "http.tracer.exclude": ""
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/transport.asciidoc",
      "line": 157
    },
    "digest": "939e79dee613238f9512fb9cbf0be816",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n   \"transient\" : {\n      \"logger.org.elasticsearch.transport.TransportService.tracer\" : \"TRACE\"\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "logger.org.elasticsearch.transport.TransportService.tracer": "TRACE"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "modules/transport.asciidoc",
      "line": 170
    },
    "digest": "cecbbd7b4ec1bf82fd84ae96099febcc",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n   \"transient\" : {\n      \"transport.tracer.include\" : \"*\",\n      \"transport.tracer.exclude\" : \"internal:coordination/fault_detection/*\"\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "transport.tracer.include": "*",
            "transport.tracer.exclude": "internal:coordination/fault_detection/*"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/filtering.asciidoc",
      "line": 54
    },
    "digest": "dad2d4add751fde5c39475ca709cc14b",
    "lang": "console",
    "found": [],
    "source": "PUT test/_settings\n{\n  \"index.routing.allocation.include.size\": \"big,medium\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_settings",
        "query": null,
        "body": {
          "index.routing.allocation.include.size": "big,medium"
        },
        "params": {
          "index": "test"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/filtering.asciidoc",
      "line": 67
    },
    "digest": "b8b198ede3d08f315348e2a857e47773",
    "lang": "console",
    "found": [],
    "source": "PUT test/_settings\n{\n  \"index.routing.allocation.include.size\": \"big\",\n  \"index.routing.allocation.include.rack\": \"rack1\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_settings",
        "query": null,
        "body": {
          "index.routing.allocation.include.size": "big",
          "index.routing.allocation.include.rack": "rack1"
        },
        "params": {
          "index": "test"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/filtering.asciidoc",
      "line": 109
    },
    "digest": "28ac880057135e46b3b00c7f3976538c",
    "lang": "console",
    "found": [],
    "source": "PUT test/_settings\n{\n  \"index.routing.allocation.include._ip\": \"192.168.2.*\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_settings",
        "query": null,
        "body": {
          "index.routing.allocation.include._ip": "192.168.2.*"
        },
        "params": {
          "index": "test"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/delayed.asciidoc",
      "line": 40
    },
    "digest": "17e6f3fac556f08a78f7a876e71acb89",
    "lang": "console",
    "found": [],
    "source": "PUT _all/_settings\n{\n  \"settings\": {\n    \"index.unassigned.node_left.delayed_timeout\": \"5m\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_all/_settings",
        "query": null,
        "body": {
          "settings": {
            "index.unassigned.node_left.delayed_timeout": "5m"
          }
        },
        "params": {
          "index": "_all"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/delayed.asciidoc",
      "line": 82
    },
    "digest": "a38f29375eabd0103f8d7c00b17bb0ab",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/health <1>",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/delayed.asciidoc",
      "line": 95
    },
    "digest": "25d40d3049e57e2bb70c2c5b88bd7b87",
    "lang": "console",
    "found": [],
    "source": "PUT _all/_settings\n{\n  \"settings\": {\n    \"index.unassigned.node_left.delayed_timeout\": \"0\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_all/_settings",
        "query": null,
        "body": {
          "settings": {
            "index.unassigned.node_left.delayed_timeout": "0"
          }
        },
        "params": {
          "index": "_all"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/prioritization.asciidoc",
      "line": 17
    },
    "digest": "8703f3b1b3895543abc36e2a7a0013d3",
    "lang": "console",
    "found": [],
    "source": "PUT index_1\n\nPUT index_2\n\nPUT index_3\n{\n  \"settings\": {\n    \"index.priority\": 10\n  }\n}\n\nPUT index_4\n{\n  \"settings\": {\n    \"index.priority\": 5\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_1",
        "query": null,
        "body": null,
        "params": {
          "index": "index_1"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index_2",
        "query": null,
        "body": null,
        "params": {
          "index": "index_2"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index_3",
        "query": null,
        "body": {
          "settings": {
            "index.priority": 10
          }
        },
        "params": {
          "index": "index_3"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index_4",
        "query": null,
        "body": {
          "settings": {
            "index.priority": 5
          }
        },
        "params": {
          "index": "index_4"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/allocation/prioritization.asciidoc",
      "line": 48
    },
    "digest": "a425fcab60f603504becee7d001f0a4b",
    "lang": "console",
    "found": [],
    "source": "PUT index_4/_settings\n{\n  \"index.priority\": 1\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_4/_settings",
        "query": null,
        "body": {
          "index.priority": 1
        },
        "params": {
          "index": "index_4"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 22
    },
    "digest": "2342a56279106ea643026df657bf7f88",
    "lang": "console",
    "found": [],
    "source": "PUT /index\n{\n  \"settings\": {\n    \"index\": {\n      \"similarity\": {\n        \"my_similarity\": {\n          \"type\": \"DFR\",\n          \"basic_model\": \"g\",\n          \"after_effect\": \"l\",\n          \"normalization\": \"h2\",\n          \"normalization.h2.c\": \"3.0\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "similarity": {
                "my_similarity": {
                  "type": "DFR",
                  "basic_model": "g",
                  "after_effect": "l",
                  "normalization": "h2",
                  "normalization.h2.c": "3.0"
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 45
    },
    "digest": "528e5f1c345c3769248cc6889e8cf552",
    "lang": "console",
    "found": [],
    "source": "PUT /index/_mapping\n{\n  \"properties\" : {\n    \"title\" : { \"type\" : \"text\", \"similarity\" : \"my_similarity\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "title": {
              "type": "text",
              "similarity": "my_similarity"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 192
    },
    "digest": "dfa16b7300d225e013f23625f44c087b",
    "lang": "console",
    "found": [],
    "source": "PUT /index\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"similarity\": {\n      \"scripted_tfidf\": {\n        \"type\": \"scripted\",\n        \"script\": {\n          \"source\": \"double tf = Math.sqrt(doc.freq); double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; double norm = 1/Math.sqrt(doc.length); return query.boost * tf * idf * norm;\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"field\": {\n        \"type\": \"text\",\n        \"similarity\": \"scripted_tfidf\"\n      }\n    }\n  }\n}\n\nPUT /index/_doc/1\n{\n  \"field\": \"foo bar foo\"\n}\n\nPUT /index/_doc/2\n{\n  \"field\": \"bar baz\"\n}\n\nPOST /index/_refresh\n\nGET /index/_search?explain=true\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"foo^1.7\",\n      \"default_field\": \"field\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 1,
            "similarity": {
              "scripted_tfidf": {
                "type": "scripted",
                "script": {
                  "source": "double tf = Math.sqrt(doc.freq); double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; double norm = 1/Math.sqrt(doc.length); return query.boost * tf * idf * norm;"
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "field": {
                "type": "text",
                "similarity": "scripted_tfidf"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "field": "foo bar foo"
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/2",
        "query": null,
        "body": {
          "field": "bar baz"
        },
        "params": {
          "index": "index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/index/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "index"
        },
        "api": "indices.refresh"
      },
      {
        "method": "GET",
        "url": "/index/_search",
        "query": {
          "explain": "true"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "foo^1.7",
              "default_field": "field"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 242
    },
    "digest": "df8b1a4d943bd74796fceec5133e995b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 12,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\": 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\": {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 1.9508477,\n    \"hits\": [\n      {\n        \"_shard\": \"[index][0]\",\n        \"_node\": \"OzrdjxNtQGaqs4DmioFw9A\",\n        \"_index\": \"index\",\n        \"_id\": \"1\",\n        \"_score\": 1.9508477,\n        \"_source\": {\n          \"field\": \"foo bar foo\"\n        },\n        \"_explanation\": {\n          \"value\": 1.9508477,\n          \"description\": \"weight(field:foo in 0) [PerFieldSimilarity], result of:\",\n          \"details\": [\n            {\n              \"value\": 1.9508477,\n              \"description\": \"score from ScriptedSimilarity(weightScript=[null], script=[Script{type=inline, lang='painless', idOrCode='double tf = Math.sqrt(doc.freq); double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; double norm = 1/Math.sqrt(doc.length); return query.boost * tf * idf * norm;', options={}, params={}}]) computed from:\",\n              \"details\": [\n                {\n                  \"value\": 1.0,\n                  \"description\": \"weight\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 1.7,\n                  \"description\": \"query.boost\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 2,\n                  \"description\": \"field.docCount\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 4,\n                  \"description\": \"field.sumDocFreq\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 5,\n                  \"description\": \"field.sumTotalTermFreq\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 1,\n                  \"description\": \"term.docFreq\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 2,\n                  \"description\": \"term.totalTermFreq\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 2.0,\n                  \"description\": \"doc.freq\",\n                  \"details\": []\n                },\n                {\n                  \"value\": 3,\n                  \"description\": \"doc.length\",\n                  \"details\": []\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 357
    },
    "digest": "5f8fb5513d4f725434db2f517ad4298f",
    "lang": "console",
    "found": [],
    "source": "PUT /index\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"similarity\": {\n      \"scripted_tfidf\": {\n        \"type\": \"scripted\",\n        \"weight_script\": {\n          \"source\": \"double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; return query.boost * idf;\"\n        },\n        \"script\": {\n          \"source\": \"double tf = Math.sqrt(doc.freq); double norm = 1/Math.sqrt(doc.length); return weight * tf * norm;\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"field\": {\n        \"type\": \"text\",\n        \"similarity\": \"scripted_tfidf\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 1,
            "similarity": {
              "scripted_tfidf": {
                "type": "scripted",
                "weight_script": {
                  "source": "double idf = Math.log((field.docCount+1.0)/(term.docFreq+1.0)) + 1.0; return query.boost * idf;"
                },
                "script": {
                  "source": "double tf = Math.sqrt(doc.freq); double norm = 1/Math.sqrt(doc.length); return weight * tf * norm;"
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "field": {
                "type": "text",
                "similarity": "scripted_tfidf"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 520
    },
    "digest": "553d79817bb1333970e99507c37a159a",
    "lang": "console",
    "found": [],
    "source": "PUT /index\n{\n  \"settings\": {\n    \"index\": {\n      \"similarity\": {\n        \"default\": {\n          \"type\": \"boolean\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "similarity": {
                "default": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/similarity.asciidoc",
      "line": 540
    },
    "digest": "48de51de87a8ad9fd8b8db1ca25b85c1",
    "lang": "console",
    "found": [],
    "source": "POST /index/_close\n\nPUT /index/_settings\n{\n  \"index\": {\n    \"similarity\": {\n      \"default\": {\n        \"type\": \"boolean\"\n      }\n    }\n  }\n}\n\nPOST /index/_open",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/index/_close",
        "query": null,
        "body": null,
        "params": {
          "index": "index"
        },
        "api": "indices.close"
      },
      {
        "method": "PUT",
        "url": "/index/_settings",
        "query": null,
        "body": {
          "index": {
            "similarity": {
              "default": {
                "type": "boolean"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.put_settings"
      },
      {
        "method": "POST",
        "url": "/index/_open",
        "query": null,
        "body": null,
        "params": {
          "index": "index"
        },
        "api": "indices.open"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/slowlog.asciidoc",
      "line": 33
    },
    "digest": "fa0b341d790a4da480b47bf501835359",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index.search.slowlog.threshold.query.warn\": \"10s\",\n    \"index.search.slowlog.threshold.query.info\": \"5s\",\n    \"index.search.slowlog.threshold.query.debug\": \"2s\",\n    \"index.search.slowlog.threshold.query.trace\": \"500ms\",\n    \"index.search.slowlog.threshold.fetch.warn\": \"1s\",\n    \"index.search.slowlog.threshold.fetch.info\": \"800ms\",\n    \"index.search.slowlog.threshold.fetch.debug\": \"500ms\",\n    \"index.search.slowlog.threshold.fetch.trace\": \"200ms\",\n    \"index.search.slowlog.level\": \"info\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index.search.slowlog.threshold.query.warn": "10s",
          "index.search.slowlog.threshold.query.info": "5s",
          "index.search.slowlog.threshold.query.debug": "2s",
          "index.search.slowlog.threshold.query.trace": "500ms",
          "index.search.slowlog.threshold.fetch.warn": "1s",
          "index.search.slowlog.threshold.fetch.info": "800ms",
          "index.search.slowlog.threshold.fetch.debug": "500ms",
          "index.search.slowlog.threshold.fetch.trace": "200ms",
          "index.search.slowlog.level": "info"
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/slowlog.asciidoc",
      "line": 143
    },
    "digest": "44a16db65121edaf099d944819356e2c",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index.indexing.slowlog.threshold.index.warn\": \"10s\",\n    \"index.indexing.slowlog.threshold.index.info\": \"5s\",\n    \"index.indexing.slowlog.threshold.index.debug\": \"2s\",\n    \"index.indexing.slowlog.threshold.index.trace\": \"500ms\",\n    \"index.indexing.slowlog.level\": \"info\",\n    \"index.indexing.slowlog.source\": \"1000\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index.indexing.slowlog.threshold.index.warn": "10s",
          "index.indexing.slowlog.threshold.index.info": "5s",
          "index.indexing.slowlog.threshold.index.debug": "2s",
          "index.indexing.slowlog.threshold.index.trace": "500ms",
          "index.indexing.slowlog.level": "info",
          "index.indexing.slowlog.source": "1000"
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/store.asciidoc",
      "line": 30
    },
    "digest": "fba99da14d4323c91794703438979912",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"index.store.type\": \"hybridfs\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index.store.type": "hybridfs"
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/store.asciidoc",
      "line": 120
    },
    "digest": "9ba2e779fe3e9d12ed5fca1ba3f8be97",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n  \"settings\": {\n    \"index.store.preload\": [\"nvd\", \"dvd\"]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index.store.preload": [
              "nvd",
              "dvd"
            ]
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 16
    },
    "digest": "fea339c85b60ccefa6a163a70b86ca82",
    "lang": "console",
    "found": [],
    "source": "PUT twitter\n{\n    \"settings\" : {\n        \"index\" : {\n            \"sort.field\" : \"date\", <1>\n            \"sort.order\" : \"desc\" <2>\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"date\": {\n                \"type\": \"date\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "sort.field": "date",
              "sort.order": "desc"
            }
          },
          "mappings": {
            "properties": {
              "date": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 41
    },
    "digest": "a69f1a67cdc141e8dde5abb437c76959",
    "lang": "console",
    "found": [],
    "source": "PUT twitter\n{\n    \"settings\" : {\n        \"index\" : {\n            \"sort.field\" : [\"username\", \"date\"], <1>\n            \"sort.order\" : [\"asc\", \"desc\"] <2>\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"username\": {\n                \"type\": \"keyword\",\n                \"doc_values\": true\n            },\n            \"date\": {\n                \"type\": \"date\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "sort.field": [
                "username",
                "date"
              ],
              "sort.order": [
                "asc",
                "desc"
              ]
            }
          },
          "mappings": {
            "properties": {
              "username": {
                "type": "keyword",
                "doc_values": true
              },
              "date": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 114
    },
    "digest": "e01a82a0a809a4770ddc84c2cfc1ec85",
    "lang": "console",
    "found": [],
    "source": "PUT events\n{\n    \"settings\" : {\n        \"index\" : {\n            \"sort.field\" : \"timestamp\",\n            \"sort.order\" : \"desc\" <1>\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"timestamp\": {\n                \"type\": \"date\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/events",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "sort.field": "timestamp",
              "sort.order": "desc"
            }
          },
          "mappings": {
            "properties": {
              "timestamp": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "events"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 138
    },
    "digest": "46a3694ee4a7bbd4973565e5886782bb",
    "lang": "console",
    "found": [],
    "source": "GET /events/_search\n{\n    \"size\": 10,\n    \"sort\": [\n        { \"timestamp\": \"desc\" }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/events/_search",
        "query": null,
        "body": {
          "size": 10,
          "sort": [
            {
              "timestamp": "desc"
            }
          ]
        },
        "params": {
          "index": "events"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 159
    },
    "digest": "2e8ba1e0b2a18dd276bbbe64f2b86338",
    "lang": "console",
    "found": [],
    "source": "GET /events/_search\n{\n    \"size\": 10,\n    \"sort\": [ <1>\n        { \"timestamp\": \"desc\" }\n    ],\n    \"track_total_hits\": false\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/events/_search",
        "query": null,
        "body": {
          "size": 10,
          "sort": [
            {
              "timestamp": "desc"
            }
          ],
          "track_total_hits": false
        },
        "params": {
          "index": "events"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "index-modules/index-sorting.asciidoc",
      "line": 177
    },
    "digest": "44a1acf9f77e74727d4847090036bd6c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\": ...\n   \"hits\" : {  <1>\n      \"max_score\" : null,\n      \"hits\" : []\n  },\n  \"took\": 20,\n  \"timed_out\": false\n}"
  },
  {
    "source_location": {
      "file": "ingest.asciidoc",
      "line": 32
    },
    "digest": "55704b69b03239fe13293fc7622d27da",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/my_pipeline_id\n{\n  \"description\" : \"describe pipeline\",\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"foo\",\n        \"value\": \"new\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my_pipeline_id",
        "query": null,
        "body": {
          "description": "describe pipeline",
          "processors": [
            {
              "set": {
                "field": "foo",
                "value": "new"
              }
            }
          ]
        },
        "params": {
          "id": "my_pipeline_id"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest.asciidoc",
      "line": 50
    },
    "digest": "6f3a4b4a01b6fae193897f00cb4855d0",
    "lang": "console",
    "found": [],
    "source": "PUT my-index/_doc/my-id?pipeline=my_pipeline_id\n{\n  \"foo\": \"bar\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my-index/_doc/my-id",
        "query": {
          "pipeline": "my_pipeline_id"
        },
        "body": {
          "foo": "bar"
        },
        "params": {
          "index": "my-index",
          "id": "my-id"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest.asciidoc",
      "line": 61
    },
    "digest": "774147a82be722cd9e2895a001a71d42",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"my-index\",\n  \"_id\" : \"my-id\",\n  \"_version\" : 1,\n  \"result\" : \"created\",\n  \"_shards\" : {\n    \"total\" : 2,\n    \"successful\" : 2,\n    \"failed\" : 0\n  },\n  \"_seq_no\" : 0,\n  \"_primary_term\" : 1\n}"
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 171
    },
    "digest": "841306ff1ac69cceb5bf1c28e2f26dd3",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/drop_guests_network\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"if\": \"ctx.network_name == 'Guest'\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/drop_guests_network",
        "query": null,
        "body": {
          "processors": [
            {
              "drop": {
                "if": "ctx.network_name == 'Guest'"
              }
            }
          ]
        },
        "params": {
          "id": "drop_guests_network"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 187
    },
    "digest": "027ee5302d967b530123886906c42a90",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/1?pipeline=drop_guests_network\n{\n  \"network_name\" : \"Guest\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/1",
        "query": {
          "pipeline": "drop_guests_network"
        },
        "body": {
          "network_name": "Guest"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 198
    },
    "digest": "7d19f1f8917dda24c23ada23a7fb6ca8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"test\",\n  \"_id\": \"1\",\n  \"_version\": -3,\n  \"result\": \"noop\",\n  \"_shards\": {\n    \"total\": 0,\n    \"successful\": 0,\n    \"failed\": 0\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 227
    },
    "digest": "9a5f1f590791012d32d29605daf82135",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/drop_guests_network\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"if\": \"ctx.network?.name == 'Guest'\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/drop_guests_network",
        "query": null,
        "body": {
          "processors": [
            {
              "drop": {
                "if": "ctx.network?.name == 'Guest'"
              }
            }
          ]
        },
        "params": {
          "id": "drop_guests_network"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 243
    },
    "digest": "f8a8b78caaf69d44c71c476ea2a178aa",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/1?pipeline=drop_guests_network\n{\n  \"network\": {\n    \"name\": \"Guest\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/1",
        "query": {
          "pipeline": "drop_guests_network"
        },
        "body": {
          "network": {
            "name": "Guest"
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 258
    },
    "digest": "3eb75cee4c802d99bb526386349ee36b",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/2?pipeline=drop_guests_network\n{\n  \"foo\" : \"bar\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/2",
        "query": {
          "pipeline": "drop_guests_network"
        },
        "body": {
          "foo": "bar"
        },
        "params": {
          "index": "test",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 318
    },
    "digest": "089ca88d7fd064a474e156d773211bc5",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/drop_guests_network\n{\n  \"processors\": [\n    {\n      \"dot_expander\": {\n        \"field\": \"network.name\"\n      }\n    },\n    {\n      \"drop\": {\n        \"if\": \"ctx.network?.name == 'Guest'\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/drop_guests_network",
        "query": null,
        "body": {
          "processors": [
            {
              "dot_expander": {
                "field": "network.name"
              }
            },
            {
              "drop": {
                "if": "ctx.network?.name == 'Guest'"
              }
            }
          ]
        },
        "params": {
          "id": "drop_guests_network"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 339
    },
    "digest": "8f6cec77f890027ad2e01f06e1290e25",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/3?pipeline=drop_guests_network\n{\n  \"network.name\": \"Guest\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/3",
        "query": {
          "pipeline": "drop_guests_network"
        },
        "body": {
          "network.name": "Guest"
        },
        "params": {
          "index": "test",
          "id": "3"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 386
    },
    "digest": "3b54be0a1a020edb8943f063f05b5cd7",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/not_prod_dropper\n{\n  \"processors\": [\n    {\n      \"drop\": {\n        \"if\": \"Collection tags = ctx.tags;if(tags != null){for (String tag : tags) {if (tag.toLowerCase().contains('prod')) { return false;}}} return true;\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/not_prod_dropper",
        "query": null,
        "body": {
          "processors": [
            {
              "drop": {
                "if": "Collection tags = ctx.tags;if(tags != null){for (String tag : tags) {if (tag.toLowerCase().contains('prod')) { return false;}}} return true;"
              }
            }
          ]
        },
        "params": {
          "id": "not_prod_dropper"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 431
    },
    "digest": "da19607976c3740945300c18e692bc49",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/1?pipeline=not_prod_dropper\n{\n  \"tags\": [\"application:myapp\", \"env:Stage\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/1",
        "query": {
          "pipeline": "not_prod_dropper"
        },
        "body": {
          "tags": [
            "application:myapp",
            "env:Stage"
          ]
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 446
    },
    "digest": "784dcf96b4970ce6c90d999cdfc2ef0b",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/2?pipeline=not_prod_dropper\n{\n  \"tags\": [\"application:myapp\", \"env:Production\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/2",
        "query": {
          "pipeline": "not_prod_dropper"
        },
        "body": {
          "tags": [
            "application:myapp",
            "env:Production"
          ]
        },
        "params": {
          "index": "test",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 498
    },
    "digest": "7cc6435cb7508e532df1e761934f1683",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/logs_pipeline\n{\n  \"description\": \"A pipeline of pipelines for log files\",\n  \"version\": 1,\n  \"processors\": [\n    {\n      \"pipeline\": {\n        \"if\": \"ctx.service?.name == 'apache_httpd'\",\n        \"name\": \"httpd_pipeline\"\n      }\n    },\n    {\n      \"pipeline\": {\n        \"if\": \"ctx.service?.name == 'syslog'\",\n        \"name\": \"syslog_pipeline\"\n      }\n    },\n    {\n      \"fail\": {\n        \"if\": \"ctx.service?.name != 'apache_httpd' && ctx.service?.name != 'syslog'\",\n        \"message\": \"This pipeline requires service.name to be either `syslog` or `apache_httpd`\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/logs_pipeline",
        "query": null,
        "body": {
          "description": "A pipeline of pipelines for log files",
          "version": 1,
          "processors": [
            {
              "pipeline": {
                "if": "ctx.service?.name == 'apache_httpd'",
                "name": "httpd_pipeline"
              }
            },
            {
              "pipeline": {
                "if": "ctx.service?.name == 'syslog'",
                "name": "syslog_pipeline"
              }
            },
            {
              "fail": {
                "if": "ctx.service?.name != 'apache_httpd' && ctx.service?.name != 'syslog'",
                "message": "This pipeline requires service.name to be either `syslog` or `apache_httpd`"
              }
            }
          ]
        },
        "params": {
          "id": "logs_pipeline"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 545
    },
    "digest": "fe2d94eba550076cc27ee21a711fdb5c",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/check_url\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"if\": \"ctx.href?.url =~ /^http[^s]/\",\n        \"field\": \"href.insecure\",\n        \"value\": true\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/check_url",
        "query": null,
        "body": {
          "processors": [
            {
              "set": {
                "if": "ctx.href?.url =~ /^http[^s]/",
                "field": "href.insecure",
                "value": true
              }
            }
          ]
        },
        "params": {
          "id": "check_url"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 561
    },
    "digest": "bfc92c930234ada7a3f394263b0deb1e",
    "lang": "console",
    "found": [],
    "source": "POST test/_doc/1?pipeline=check_url\n{\n  \"href\": {\n    \"url\": \"http://www.elastic.co/\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/1",
        "query": {
          "pipeline": "check_url"
        },
        "body": {
          "href": {
            "url": "http://www.elastic.co/"
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 583
    },
    "digest": "229eccca4c5d8f5ad0d704c8eb43c3b9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"test\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"_seq_no\": 60,\n  \"_primary_term\": 1,\n  \"found\": true,\n  \"_source\": {\n    \"href\": {\n      \"insecure\": true,\n      \"url\": \"http://www.elastic.co/\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/ingest-node.asciidoc",
      "line": 609
    },
    "digest": "2ad6189aef1ecbb52bf0ddbd4e7a80cb",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/check_url\n{\n  \"processors\": [\n    {\n      \"set\": {\n        \"if\": \"ctx.href?.url != null && ctx.href.url.startsWith('http://')\",\n        \"field\": \"href.insecure\",\n        \"value\": true\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/check_url",
        "query": null,
        "body": {
          "processors": [
            {
              "set": {
                "if": "ctx.href?.url != null && ctx.href.url.startsWith('http://')",
                "field": "href.insecure",
                "value": true
              }
            }
          ]
        },
        "params": {
          "id": "check_url"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 321
    },
    "digest": "0c8bce944c1189a8551e8dbd99c365f2",
    "lang": "console",
    "found": [],
    "source": "PUT /postal_codes\n{\n    \"mappings\": {\n        \"properties\": {\n            \"location\": {\n                \"type\": \"geo_shape\"\n            },\n            \"postal_code\": {\n                \"type\": \"keyword\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/postal_codes",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "location": {
                "type": "geo_shape"
              },
              "postal_code": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "postal_codes"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 340
    },
    "digest": "497a51622ef123efc44e54ba2106385e",
    "lang": "console",
    "found": [],
    "source": "PUT /postal_codes/_doc/1?refresh=wait_for\n{\n    \"location\": {\n        \"type\": \"envelope\",\n        \"coordinates\": [[13.0, 53.0], [14.0, 52.0]]\n    },\n    \"postal_code\": \"96598\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/postal_codes/_doc/1",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "location": {
            "type": "envelope",
            "coordinates": [
              [
                13,
                53
              ],
              [
                14,
                52
              ]
            ]
          },
          "postal_code": "96598"
        },
        "params": {
          "index": "postal_codes",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 362
    },
    "digest": "99da25a3d63f98c16df47f21acbf37e7",
    "lang": "console",
    "found": [],
    "source": "PUT /_enrich/policy/postal_policy\n{\n    \"geo_match\": {\n        \"indices\": \"postal_codes\",\n        \"match_field\": \"location\",\n        \"enrich_fields\": [\"location\",\"postal_code\"]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_enrich/policy/postal_policy",
        "query": null,
        "body": {
          "geo_match": {
            "indices": "postal_codes",
            "match_field": "location",
            "enrich_fields": [
              "location",
              "postal_code"
            ]
          }
        },
        "params": {
          "name": "postal_policy"
        },
        "api": "enrich.put_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 378
    },
    "digest": "207c04ccbdce0e8a289070a3b0a79ecb",
    "lang": "console",
    "found": [],
    "source": "POST /_enrich/policy/postal_policy/_execute",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 397
    },
    "digest": "83b4a737514a047d31f12f110bed0b5e",
    "lang": "console",
    "found": [],
    "source": "PUT /_ingest/pipeline/postal_lookup\n{\n  \"description\": \"Enrich postal codes\",\n  \"processors\": [\n    {\n      \"enrich\": {\n        \"policy_name\": \"postal_policy\",\n        \"field\": \"geo_location\",\n        \"target_field\": \"geo_data\",\n        \"shape_relation\": \"INTERSECTS\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/postal_lookup",
        "query": null,
        "body": {
          "description": "Enrich postal codes",
          "processors": [
            {
              "enrich": {
                "policy_name": "postal_policy",
                "field": "geo_location",
                "target_field": "geo_data",
                "shape_relation": "INTERSECTS"
              }
            }
          ]
        },
        "params": {
          "id": "postal_lookup"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 419
    },
    "digest": "ad3b9d676187bebdb62e0f1de9a202e0",
    "lang": "console",
    "found": [],
    "source": "PUT /users/_doc/0?pipeline=postal_lookup\n{\n    \"first_name\": \"Mardy\",\n    \"last_name\": \"Brown\",\n    \"geo_location\": \"POINT (13.5 52.5)\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/users/_doc/0",
        "query": {
          "pipeline": "postal_lookup"
        },
        "body": {
          "first_name": "Mardy",
          "last_name": "Brown",
          "geo_location": "POINT (13.5 52.5)"
        },
        "params": {
          "index": "users",
          "id": "0"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 433
    },
    "digest": "a3f3c1f3f31dbd225da5fd14633bc4a0",
    "lang": "console",
    "found": [],
    "source": "GET /users/_doc/0",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/users/_doc/0",
        "query": null,
        "body": null,
        "params": {
          "index": "users",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 441
    },
    "digest": "1fabc3706c34195873abecc44203073a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"users\",\n  \"_id\": \"0\",\n  \"_version\": 1,\n  \"_seq_no\": 55,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"geo_data\": {\n      \"location\": {\n        \"type\": \"envelope\",\n        \"coordinates\": [[13.0, 53.0], [14.0, 52.0]]\n      },\n      \"postal_code\": \"96598\"\n    },\n    \"first_name\": \"Mardy\",\n    \"last_name\": \"Brown\",\n    \"geo_location\": \"POINT (13.5 52.5)\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 494
    },
    "digest": "927dd38daa489175a5008799452e870a",
    "lang": "console",
    "found": [],
    "source": "PUT /users/_doc/1?refresh=wait_for\n{\n    \"email\": \"mardy.brown@asciidocsmith.com\",\n    \"first_name\": \"Mardy\",\n    \"last_name\": \"Brown\",\n    \"city\": \"New Orleans\",\n    \"county\": \"Orleans\",\n    \"state\": \"LA\",\n    \"zip\": 70116,\n    \"web\": \"mardy.asciidocsmith.com\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/users/_doc/1",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "email": "mardy.brown@asciidocsmith.com",
          "first_name": "Mardy",
          "last_name": "Brown",
          "city": "New Orleans",
          "county": "Orleans",
          "state": "LA",
          "zip": 70116,
          "web": "mardy.asciidocsmith.com"
        },
        "params": {
          "index": "users",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 518
    },
    "digest": "9ab4e8a564e13475cb3a0376be56bb8e",
    "lang": "console",
    "found": [],
    "source": "PUT /_enrich/policy/users-policy\n{\n    \"match\": {\n        \"indices\": \"users\",\n        \"match_field\": \"email\",\n        \"enrich_fields\": [\"first_name\", \"last_name\", \"city\", \"zip\", \"state\"]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_enrich/policy/users-policy",
        "query": null,
        "body": {
          "match": {
            "indices": "users",
            "match_field": "email",
            "enrich_fields": [
              "first_name",
              "last_name",
              "city",
              "zip",
              "state"
            ]
          }
        },
        "params": {
          "name": "users-policy"
        },
        "api": "enrich.put_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 534
    },
    "digest": "af4f82ce86672a9bafd834f334c8e1c9",
    "lang": "console",
    "found": [],
    "source": "POST /_enrich/policy/users-policy/_execute",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 551
    },
    "digest": "958b661d89b2beeb0cfefe8edbe3e408",
    "lang": "console",
    "found": [],
    "source": "PUT /_ingest/pipeline/user_lookup\n{\n  \"description\" : \"Enriching user details to messages\",\n  \"processors\" : [\n    {\n      \"enrich\" : {\n        \"policy_name\": \"users-policy\",\n        \"field\" : \"email\",\n        \"target_field\": \"user\",\n        \"max_matches\": \"1\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/user_lookup",
        "query": null,
        "body": {
          "description": "Enriching user details to messages",
          "processors": [
            {
              "enrich": {
                "policy_name": "users-policy",
                "field": "email",
                "target_field": "user",
                "max_matches": "1"
              }
            }
          ]
        },
        "params": {
          "id": "user_lookup"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 573
    },
    "digest": "7495d7e8d99e4f5ac8034988b706e09d",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index/_doc/my_id?pipeline=user_lookup\n{\n  \"email\": \"mardy.brown@asciidocsmith.com\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/my_id",
        "query": {
          "pipeline": "user_lookup"
        },
        "body": {
          "email": "mardy.brown@asciidocsmith.com"
        },
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 585
    },
    "digest": "ce20ab8067b6e4ad68e8ad7a5a0b73fd",
    "lang": "console",
    "found": [],
    "source": "GET /my_index/_doc/my_id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_doc/my_id",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/enrich.asciidoc",
      "line": 593
    },
    "digest": "51c5541ef8f46d02fe0a82a77fd10381",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"my_index\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 55,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"user\": {\n      \"email\": \"mardy.brown@asciidocsmith.com\",\n      \"first_name\": \"Mardy\",\n      \"last_name\": \"Brown\",\n      \"zip\": 70116,\n      \"city\": \"New Orleans\",\n      \"state\": \"LA\"\n    },\n    \"email\": \"mardy.brown@asciidocsmith.com\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/circle.asciidoc",
      "line": 24
    },
    "digest": "92223bd2873546d7efb557de81b9f75d",
    "lang": "console",
    "found": [],
    "source": "PUT circles\n{\n  \"mappings\": {\n    \"properties\": {\n      \"circle\": {\n        \"type\": \"geo_shape\"\n      }\n    }\n  }\n}\n\nPUT _ingest/pipeline/polygonize_circles\n{\n    \"description\": \"translate circle to polygon\",\n    \"processors\": [\n      {\n        \"circle\": {\n          \"field\": \"circle\",\n          \"error_distance\": 28.0,\n          \"shape_type\": \"geo_shape\"\n        }\n      }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/circles",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "circle": {
                "type": "geo_shape"
              }
            }
          }
        },
        "params": {
          "index": "circles"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/polygonize_circles",
        "query": null,
        "body": {
          "description": "translate circle to polygon",
          "processors": [
            {
              "circle": {
                "field": "circle",
                "error_distance": 28,
                "shape_type": "geo_shape"
              }
            }
          ]
        },
        "params": {
          "id": "polygonize_circles"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/circle.asciidoc",
      "line": 61
    },
    "digest": "b0b1ae9582599f501f3b3ed8a42ea2af",
    "lang": "console",
    "found": [],
    "source": "PUT circles/_doc/1?pipeline=polygonize_circles\n{\n  \"circle\": \"CIRCLE (30 10 40)\"\n}\n\nGET circles/_doc/1",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/circles/_doc/1",
        "query": {
          "pipeline": "polygonize_circles"
        },
        "body": {
          "circle": "CIRCLE (30 10 40)"
        },
        "params": {
          "index": "circles",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/circles/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "circles",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/circle.asciidoc",
      "line": 74
    },
    "digest": "0cec3cd5ad68774be62c362e10bab293",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": \"POLYGON ((30.000365257263184 10.0, 30.000111397193788 10.00034284530941, 29.999706043744222 10.000213571721195, 29.999706043744222 9.999786428278805, 30.000111397193788 9.99965715469059, 30.000365257263184 10.0))\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/circle.asciidoc",
      "line": 94
    },
    "digest": "415b46bc2b7a7b4dcf9a73ac67ea20e9",
    "lang": "console",
    "found": [],
    "source": "PUT circles/_doc/2?pipeline=polygonize_circles\n{\n  \"circle\": {\n    \"type\": \"circle\",\n    \"radius\": \"40m\",\n    \"coordinates\": [30, 10]\n  }\n}\n\nGET circles/_doc/2",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/circles/_doc/2",
        "query": {
          "pipeline": "polygonize_circles"
        },
        "body": {
          "circle": {
            "type": "circle",
            "radius": "40m",
            "coordinates": [
              30,
              10
            ]
          }
        },
        "params": {
          "index": "circles",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/circles/_doc/2",
        "query": null,
        "body": null,
        "params": {
          "index": "circles",
          "id": "2"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/circle.asciidoc",
      "line": 111
    },
    "digest": "0c8975f6497b2f06e68077b613427d41",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"circles\",\n  \"_id\": \"2\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"circle\": {\n      \"coordinates\": [\n        [\n          [30.000365257263184, 10.0],\n          [30.000111397193788, 10.00034284530941],\n          [29.999706043744222, 10.000213571721195],\n          [29.999706043744222, 9.999786428278805],\n          [30.000111397193788, 9.99965715469059],\n          [30.000365257263184, 10.0]\n        ]\n      ],\n      \"type\": \"Polygon\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/date-index-name.asciidoc",
      "line": 20
    },
    "digest": "83c8cce0372677857609a2e80e8eb1c4",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/monthlyindex\n{\n  \"description\": \"monthly date-time index naming\",\n  \"processors\" : [\n    {\n      \"date_index_name\" : {\n        \"field\" : \"date1\",\n        \"index_name_prefix\" : \"myindex-\",\n        \"date_rounding\" : \"M\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/monthlyindex",
        "query": null,
        "body": {
          "description": "monthly date-time index naming",
          "processors": [
            {
              "date_index_name": {
                "field": "date1",
                "index_name_prefix": "myindex-",
                "date_rounding": "M"
              }
            }
          ]
        },
        "params": {
          "id": "monthlyindex"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/date-index-name.asciidoc",
      "line": 40
    },
    "digest": "9f3f1b6bd431f6fa40fc17ce9a5a89b8",
    "lang": "console",
    "found": [],
    "source": "PUT /myindex/_doc/1?pipeline=monthlyindex\n{\n  \"date1\" : \"2016-04-25T12:02:01.789Z\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/myindex/_doc/1",
        "query": {
          "pipeline": "monthlyindex"
        },
        "body": {
          "date1": "2016-04-25T12:02:01.789Z"
        },
        "params": {
          "index": "myindex",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/date-index-name.asciidoc",
      "line": 49
    },
    "digest": "2a1fdfaf9024667c454f5770786bb100",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"myindex-2016-04-01\",\n  \"_id\" : \"1\",\n  \"_version\" : 1,\n  \"result\" : \"created\",\n  \"_shards\" : {\n    \"total\" : 2,\n    \"successful\" : 1,\n    \"failed\" : 0\n  },\n  \"_seq_no\" : 55,\n  \"_primary_term\" : 1\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/date-index-name.asciidoc",
      "line": 75
    },
    "digest": "44f672df54c28327070b4ca09999718c",
    "lang": "console",
    "found": [],
    "source": "POST _ingest/pipeline/_simulate\n{\n  \"pipeline\" :\n  {\n    \"description\": \"monthly date-time index naming\",\n    \"processors\" : [\n      {\n        \"date_index_name\" : {\n          \"field\" : \"date1\",\n          \"index_name_prefix\" : \"myindex-\",\n          \"date_rounding\" : \"M\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_source\": {\n        \"date1\": \"2016-04-25T12:02:01.789Z\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/_simulate",
        "query": null,
        "body": {
          "pipeline": {
            "description": "monthly date-time index naming",
            "processors": [
              {
                "date_index_name": {
                  "field": "date1",
                  "index_name_prefix": "myindex-",
                  "date_rounding": "M"
                }
              }
            ]
          },
          "docs": [
            {
              "_source": {
                "date1": "2016-04-25T12:02:01.789Z"
              }
            }
          ]
        },
        "params": null,
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/date-index-name.asciidoc",
      "line": 104
    },
    "digest": "bd1860d159b6986340faccaafb869863",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"docs\" : [\n    {\n      \"doc\" : {\n        \"_id\" : \"_id\",\n        \"_index\" : \"<myindex-{2016-04-25||/M{yyyy-MM-dd|UTC}}>\",\n        \"_source\" : {\n          \"date1\" : \"2016-04-25T12:02:01.789Z\"\n        },\n        \"_ingest\" : {\n          \"timestamp\" : \"2016-11-08T19:43:03.850+0000\"\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 46
    },
    "digest": "0b6aa8f2d6916951959d6186b25d2b54",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\"\n      }\n    }\n  ]\n}\nPUT my_index/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"8.8.8.8\"\n}\nGET my_index/_doc/my_id",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/geoip",
        "query": null,
        "body": {
          "description": "Add geoip info",
          "processors": [
            {
              "geoip": {
                "field": "ip"
              }
            }
          ]
        },
        "params": {
          "id": "geoip"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/my_id",
        "query": {
          "pipeline": "geoip"
        },
        "body": {
          "ip": "8.8.8.8"
        },
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/my_id",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 68
    },
    "digest": "e49a98d543ca4c915bca860ba4aa086e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"my_index\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 55,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"ip\": \"8.8.8.8\",\n    \"geoip\": {\n      \"continent_name\": \"North America\",\n      \"country_iso_code\": \"US\",\n      \"location\": { \"lat\": 37.751, \"lon\": -97.822 }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 93
    },
    "digest": "573a466d7a3a8e31194666e2ecc1d92a",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\",\n        \"target_field\" : \"geo\",\n        \"database_file\" : \"GeoLite2-Country.mmdb\"\n      }\n    }\n  ]\n}\nPUT my_index/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"8.8.8.8\"\n}\nGET my_index/_doc/my_id",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/geoip",
        "query": null,
        "body": {
          "description": "Add geoip info",
          "processors": [
            {
              "geoip": {
                "field": "ip",
                "target_field": "geo",
                "database_file": "GeoLite2-Country.mmdb"
              }
            }
          ]
        },
        "params": {
          "id": "geoip"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/my_id",
        "query": {
          "pipeline": "geoip"
        },
        "body": {
          "ip": "8.8.8.8"
        },
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/my_id",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 117
    },
    "digest": "6693dd5a6a7bb3c5670ac5208e0382e5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"my_index\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 65,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"ip\": \"8.8.8.8\",\n    \"geo\": {\n      \"continent_name\": \"North America\",\n      \"country_iso_code\": \"US\",\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 144
    },
    "digest": "c5681f52305e065ef13c3e0ad5393263",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/geoip\n{\n  \"description\" : \"Add geoip info\",\n  \"processors\" : [\n    {\n      \"geoip\" : {\n        \"field\" : \"ip\"\n      }\n    }\n  ]\n}\n\nPUT my_index/_doc/my_id?pipeline=geoip\n{\n  \"ip\": \"80.231.5.0\"\n}\n\nGET my_index/_doc/my_id",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/geoip",
        "query": null,
        "body": {
          "description": "Add geoip info",
          "processors": [
            {
              "geoip": {
                "field": "ip"
              }
            }
          ]
        },
        "params": {
          "id": "geoip"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/my_id",
        "query": {
          "pipeline": "geoip"
        },
        "body": {
          "ip": "80.231.5.0"
        },
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/my_id",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 168
    },
    "digest": "dc4d172710fc0407deddf3d7a752c1e8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"my_index\",\n  \"_id\" : \"my_id\",\n  \"_version\" : 1,\n  \"_seq_no\" : 71,\n  \"_primary_term\": 1,\n  \"found\" : true,\n  \"_source\" : {\n    \"ip\" : \"80.231.5.0\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/geoip.asciidoc",
      "line": 193
    },
    "digest": "0737ebaea33631f001fb3f4226948492",
    "lang": "console",
    "found": [],
    "source": "PUT my_ip_locations\n{\n  \"mappings\": {\n    \"properties\": {\n      \"geoip\": {\n        \"properties\": {\n          \"location\": { \"type\": \"geo_point\" }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_ip_locations",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "geoip": {
                "properties": {
                  "location": {
                    "type": "geo_point"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_ip_locations"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 72
    },
    "digest": "5024c524a7db0d6bb44c1820007cc5f4",
    "lang": "console",
    "found": [],
    "source": "POST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n    \"description\" : \"...\",\n    \"processors\": [\n      {\n        \"grok\": {\n          \"field\": \"message\",\n          \"patterns\": [\"%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes:int} %{NUMBER:duration:double}\"]\n        }\n      }\n    ]\n  },\n  \"docs\":[\n    {\n      \"_source\": {\n        \"message\": \"55.3.244.1 GET /index.html 15824 0.043\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/_simulate",
        "query": null,
        "body": {
          "pipeline": {
            "description": "...",
            "processors": [
              {
                "grok": {
                  "field": "message",
                  "patterns": [
                    "%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes:int} %{NUMBER:duration:double}"
                  ]
                }
              }
            ]
          },
          "docs": [
            {
              "_source": {
                "message": "55.3.244.1 GET /index.html 15824 0.043"
              }
            }
          ]
        },
        "params": null,
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 99
    },
    "digest": "600ab0d13c6197778a413bc29bb5e3ca",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_source\" : {\n          \"duration\" : 0.043,\n          \"request\" : \"/index.html\",\n          \"method\" : \"GET\",\n          \"bytes\" : 15824,\n          \"client\" : \"55.3.244.1\",\n          \"message\" : \"55.3.244.1 GET /index.html 15824 0.043\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2016-11-08T19:43:03.850+0000\"\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 164
    },
    "digest": "77828fcaecc3f058c48b955928198ff6",
    "lang": "console",
    "found": [],
    "source": "POST _ingest/pipeline/_simulate\n{\n  \"pipeline\": {\n  \"description\" : \"parse multiple patterns\",\n  \"processors\": [\n    {\n      \"grok\": {\n        \"field\": \"message\",\n        \"patterns\": [\"%{FAVORITE_DOG:pet}\", \"%{FAVORITE_CAT:pet}\"],\n        \"pattern_definitions\" : {\n          \"FAVORITE_DOG\" : \"beagle\",\n          \"FAVORITE_CAT\" : \"burmese\"\n        }\n      }\n    }\n  ]\n},\n\"docs\":[\n  {\n    \"_source\": {\n      \"message\": \"I love burmese cats!\"\n    }\n  }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/_simulate",
        "query": null,
        "body": {
          "pipeline": {
            "description": "parse multiple patterns",
            "processors": [
              {
                "grok": {
                  "field": "message",
                  "patterns": [
                    "%{FAVORITE_DOG:pet}",
                    "%{FAVORITE_CAT:pet}"
                  ],
                  "pattern_definitions": {
                    "FAVORITE_DOG": "beagle",
                    "FAVORITE_CAT": "burmese"
                  }
                }
              }
            ]
          },
          "docs": [
            {
              "_source": {
                "message": "I love burmese cats!"
              }
            }
          ]
        },
        "params": null,
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 195
    },
    "digest": "eaae18f5701d14f94da7a085805271ca",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_source\": {\n          \"message\": \"I love burmese cats!\",\n          \"pet\": \"burmese\"\n        },\n        \"_ingest\": {\n          \"timestamp\": \"2016-11-08T19:43:03.850+0000\"\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 254
    },
    "digest": "d101a9d043cc8b6a880bbc2c64ca1e8c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"docs\": [\n    {\n      \"doc\": {\n        \"_index\": \"_index\",\n        \"_id\": \"_id\",\n        \"_source\": {\n          \"message\": \"I love burmese cats!\",\n          \"pet\": \"burmese\"\n        },\n        \"_ingest\": {\n          \"_grok_match_index\": \"1\",\n          \"timestamp\": \"2016-11-08T19:43:03.850+0000\"\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/grok.asciidoc",
      "line": 288
    },
    "digest": "98574a419b6be603a0af8f7f22a92d23",
    "lang": "console",
    "found": [],
    "source": "GET _ingest/processor/grok",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ingest/processor/grok",
        "query": null,
        "body": null,
        "params": null,
        "api": "ingest.processor_grok"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/pipeline.asciidoc",
      "line": 31
    },
    "digest": "8494d09c39e109a012094eb9d6ec52ac",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/pipelineA\n{\n  \"description\" : \"inner pipeline\",\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"inner_pipeline_set\",\n        \"value\": \"inner\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/pipelineA",
        "query": null,
        "body": {
          "description": "inner pipeline",
          "processors": [
            {
              "set": {
                "field": "inner_pipeline_set",
                "value": "inner"
              }
            }
          ]
        },
        "params": {
          "id": "pipelineA"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/pipeline.asciidoc",
      "line": 49
    },
    "digest": "02c48d461536709c3fc8a0e8147c3787",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/pipelineB\n{\n  \"description\" : \"outer pipeline\",\n  \"processors\" : [\n    {\n      \"pipeline\" : {\n        \"name\": \"pipelineA\"\n      }\n    },\n    {\n      \"set\" : {\n        \"field\": \"outer_pipeline_set\",\n        \"value\": \"outer\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/pipelineB",
        "query": null,
        "body": {
          "description": "outer pipeline",
          "processors": [
            {
              "pipeline": {
                "name": "pipelineA"
              }
            },
            {
              "set": {
                "field": "outer_pipeline_set",
                "value": "outer"
              }
            }
          ]
        },
        "params": {
          "id": "pipelineB"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/pipeline.asciidoc",
      "line": 74
    },
    "digest": "88647e818ffcbe39e5cf627f5b9a676c",
    "lang": "console",
    "found": [],
    "source": "PUT /myindex/_doc/1?pipeline=pipelineB\n{\n  \"field\": \"value\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/myindex/_doc/1",
        "query": {
          "pipeline": "pipelineB"
        },
        "body": {
          "field": "value"
        },
        "params": {
          "index": "myindex",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/pipeline.asciidoc",
      "line": 85
    },
    "digest": "ffa7b6c079bfe0840f611ddbedf9030f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"myindex\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"result\": \"created\",\n  \"_shards\": {\n    \"total\": 2,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"_seq_no\": 66,\n  \"_primary_term\": 1,\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/script.asciidoc",
      "line": 50
    },
    "digest": "197d87fdb4aeccf3d9a08ae485c12306",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/my_index\n{\n    \"description\": \"use index:my_index\",\n    \"processors\": [\n      {\n        \"script\": {\n          \"source\": \"\"\"\n            ctx._index = 'my_index';\n          \"\"\"\n        }\n      }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my_index",
        "query": null,
        "body": {
          "description": "use index:my_index",
          "processors": [
            {
              "script": {
                "source": "\n            ctx._index = 'my_index';\n          "
              }
            }
          ]
        },
        "params": {
          "id": "my_index"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/script.asciidoc",
      "line": 69
    },
    "digest": "cdc55ad88de55999fe2d79fd4781918b",
    "lang": "console",
    "found": [],
    "source": "PUT any_index/_doc/1?pipeline=my_index\n{\n  \"message\": \"text\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/any_index/_doc/1",
        "query": {
          "pipeline": "my_index"
        },
        "body": {
          "message": "text"
        },
        "params": {
          "index": "any_index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/script.asciidoc",
      "line": 80
    },
    "digest": "54e1bdda2188f2ce04e3a201a78c7331",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"my_index\",\n  \"_id\": \"1\",\n  \"_version\": 1,\n  \"result\": \"created\",\n  \"_shards\": {\n    \"total\": 2,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"_seq_no\": 89,\n  \"_primary_term\": 1,\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/set.asciidoc",
      "line": 32
    },
    "digest": "366b29ef910f12c7fbced35f39000953",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/set_os\n{\n  \"description\": \"sets the value of host.os.name from the field os\",\n  \"processors\": [\n    {\n      \"set\": {\n        \"field\": \"host.os.name\",\n        \"value\": \"{{os}}\"\n      }\n    }\n  ]\n}\n\nPOST _ingest/pipeline/set_os/_simulate\n{\n  \"docs\": [\n    {\n      \"_source\": {\n        \"os\": \"Ubuntu\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/set_os",
        "query": null,
        "body": {
          "description": "sets the value of host.os.name from the field os",
          "processors": [
            {
              "set": {
                "field": "host.os.name",
                "value": "{{os}}"
              }
            }
          ]
        },
        "params": {
          "id": "set_os"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "POST",
        "url": "/_ingest/pipeline/set_os/_simulate",
        "query": null,
        "body": {
          "docs": [
            {
              "_source": {
                "os": "Ubuntu"
              }
            }
          ]
        },
        "params": {
          "id": "set_os"
        },
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/set.asciidoc",
      "line": 61
    },
    "digest": "11d6095110e3c41055edd75fa881e742",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"docs\" : [\n    {\n      \"doc\" : {\n        \"_index\" : \"_index\",\n        \"_id\" : \"_id\",\n        \"_source\" : {\n          \"host\" : {\n            \"os\" : {\n              \"name\" : \"Ubuntu\"\n            }\n          },\n          \"os\" : \"Ubuntu\"\n        },\n        \"_ingest\" : {\n          \"timestamp\" : \"2019-03-11T21:54:37.909224Z\"\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/processors/user-agent.asciidoc",
      "line": 27
    },
    "digest": "9c504b5c486d9df689a22b11412e61a3",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/user_agent\n{\n  \"description\" : \"Add user agent information\",\n  \"processors\" : [\n    {\n      \"user_agent\" : {\n        \"field\" : \"agent\"\n      }\n    }\n  ]\n}\nPUT my_index/_doc/my_id?pipeline=user_agent\n{\n  \"agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\"\n}\nGET my_index/_doc/my_id",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/user_agent",
        "query": null,
        "body": {
          "description": "Add user agent information",
          "processors": [
            {
              "user_agent": {
                "field": "agent"
              }
            }
          ]
        },
        "params": {
          "id": "user_agent"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "PUT",
        "url": "/my_index/_doc/my_id",
        "query": {
          "pipeline": "user_agent"
        },
        "body": {
          "agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
        },
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/my_index/_doc/my_id",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index",
          "id": "my_id"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/processors/user-agent.asciidoc",
      "line": 49
    },
    "digest": "d6031f0550f6f3a0102210637301b121",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_index\": \"my_index\",\n  \"_id\": \"my_id\",\n  \"_version\": 1,\n  \"_seq_no\": 22,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n    \"user_agent\": {\n      \"name\": \"Chrome\",\n      \"original\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\",\n      \"version\": \"51.0.2704.103\",\n      \"os\": {\n        \"name\": \"Mac OS X\",\n        \"version\": \"10.10.5\",\n        \"full\": \"Mac OS X 10.10.5\"\n      },\n      \"device\" : {\n        \"name\" : \"Other\"\n      },\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/getting-started-ilm.asciidoc",
      "line": 46
    },
    "digest": "080b3362db1fa14e1ca4e290d6e6447d",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/timeseries_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {                      <1>\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"50GB\",     <2>\n            \"max_age\": \"30d\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"90d\",           <3>\n        \"actions\": {\n          \"delete\": {}              <4>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/timeseries_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "50GB",
                    "max_age": "30d"
                  }
                }
              },
              "delete": {
                "min_age": "90d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "timeseries_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/getting-started-ilm.asciidoc",
      "line": 93
    },
    "digest": "4d01c243f7406c98546311ec1ff6b7e6",
    "lang": "console",
    "found": [],
    "source": "PUT _template/timeseries_template\n{\n  \"index_patterns\": [\"timeseries-*\"],                 <1>\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index.lifecycle.name\": \"timeseries_policy\",      <2>\n    \"index.lifecycle.rollover_alias\": \"timeseries\"    <3>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/timeseries_template",
        "query": null,
        "body": {
          "index_patterns": [
            "timeseries-*"
          ],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1,
            "index.lifecycle.name": "timeseries_policy",
            "index.lifecycle.rollover_alias": "timeseries"
          }
        },
        "params": {
          "name": "timeseries_template"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/getting-started-ilm.asciidoc",
      "line": 135
    },
    "digest": "7148c8512079d378af70302e65502dd2",
    "lang": "console",
    "found": [],
    "source": "PUT timeseries-000001\n{\n  \"aliases\": {\n    \"timeseries\": {\n      \"is_write_index\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/timeseries-000001",
        "query": null,
        "body": {
          "aliases": {
            "timeseries": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "timeseries-000001"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/getting-started-ilm.asciidoc",
      "line": 173
    },
    "digest": "2ffa953b29ed0156c9e610daf66b8e48",
    "lang": "console",
    "found": [],
    "source": "GET timeseries-*/_ilm/explain",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/timeseries-*/_ilm/explain",
        "query": null,
        "body": null,
        "params": {
          "index": "timeseries-*"
        },
        "api": "ilm.explain_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/getting-started-ilm.asciidoc",
      "line": 184
    },
    "digest": "d679eaaaf8cc560cb7b999b3c31f43fc",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"timeseries-000001\": {\n      \"index\": \"timeseries-000001\",\n      \"managed\": true,\n      \"policy\": \"timeseries_policy\",             <1>\n      \"lifecycle_date_millis\": 1538475653281,\n      \"age\": \"30s\",                              <2>\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"step\": \"attempt-rollover\",                <3>\n      \"step_time_millis\": 1538475653317,\n      \"phase_execution\": {\n        \"policy\": \"timeseries_policy\",\n        \"phase_definition\": {                    <4>\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_size\": \"50gb\",\n              \"max_age\": \"30d\"\n            }\n          }\n        },\n        \"version\": 1,\n        \"modified_date_in_millis\": 1539609701576\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 34
    },
    "digest": "b53e3314eb39b667a9ba87fb3a286e6b",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"allocate\": {\n            \"number_of_replicas\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "1d",
                "actions": {
                  "allocate": {
                    "number_of_replicas": 1
                  }
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 167
    },
    "digest": "1116c769f39f0c7fe86ec2a4871efcd5",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"allocate\" : {\n            \"number_of_replicas\" : 2\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "allocate": {
                    "number_of_replicas": 2
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 189
    },
    "digest": "0518c673094fb18ecb491a3b78af4695",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"allocate\" : {\n            \"include\" : {\n              \"box_type\": \"hot,warm\"\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "allocate": {
                    "include": {
                      "box_type": "hot,warm"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 216
    },
    "digest": "9d461ae140ddc018efd2650559800cd1",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"allocate\" : {\n            \"number_of_replicas\": 1,\n            \"require\" : {\n              \"box_type\": \"cold\"\n            }\n        }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "allocate": {
                    "number_of_replicas": 1,
                    "require": {
                      "box_type": "cold"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 253
    },
    "digest": "83062a543163370328cf2e21a68c1bd3",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"delete\": {\n        \"actions\": {\n          \"wait_for_snapshot\" : {\n            \"policy\": \"slm-policy-name\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "delete": {
                "actions": {
                  "wait_for_snapshot": {
                    "policy": "slm-policy-name"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 288
    },
    "digest": "053497b6960f80fd7b005b7c6d54358f",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"delete\": {\n        \"actions\": {\n          \"delete\" : { }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "delete": {
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 335
    },
    "digest": "eb5486d2fe4283475bf9e0e09280be16",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"forcemerge\" : {\n            \"max_num_segments\": 1\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 361
    },
    "digest": "0345fbd95c4516a89ac5ad261a16be8f",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"cold\": {\n        \"actions\": {\n          \"freeze\" : { }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "cold": {
                "actions": {
                  "freeze": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 395
    },
    "digest": "fc9a1b1173690a911725cff3912e9755",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"readonly\" : { }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "readonly": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 433
    },
    "digest": "d7e7489b7d176aa854dfc785a12feab3",
    "lang": "console",
    "found": [],
    "source": "PUT my_index-000001\n{\n  \"settings\": {\n    \"index.lifecycle.name\": \"my_policy\",\n    \"index.lifecycle.rollover_alias\": \"my_data\"\n  },\n  \"aliases\": {\n    \"my_data\": {\n      \"is_write_index\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index-000001",
        "query": null,
        "body": {
          "settings": {
            "index.lifecycle.name": "my_policy",
            "index.lifecycle.rollover_alias": "my_data"
          },
          "aliases": {
            "my_data": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "my_index-000001"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 477
    },
    "digest": "19211ccf772f1dee7b500c21f4a9a805",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_size\": \"100GB\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "100GB"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 500
    },
    "digest": "cfd4b34f35e531a20739a3b308d57134",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_docs\": 100000000\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_docs": 100000000
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 523
    },
    "digest": "d4a41fb74b41b41a0ee114a2311f2815",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_age\": \"7d\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_age": "7d"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 547
    },
    "digest": "8940f2b911220acc9afef6360b6c13c4",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\" : {\n            \"max_age\": \"7d\",\n            \"max_size\": \"100GB\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_age": "7d",
                    "max_size": "100GB"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 572
    },
    "digest": "f6c79fa1c01bb4539d0cba0bd62c1ce0",
    "lang": "console",
    "found": [],
    "source": "PUT /_ilm/policy/rollover_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"50G\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/rollover_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "50G"
                  }
                }
              },
              "delete": {
                "min_age": "1d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "rollover_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 620
    },
    "digest": "3f2e5132e35b9e8b3203a4a0541cf0d4",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"cold\": {\n        \"actions\": {\n          \"searchable_snapshot\" : {\n            \"snapshot_repository\" : \"backing_repo\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "cold": {
                "actions": {
                  "searchable_snapshot": {
                    "snapshot_repository": "backing_repo"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 660
    },
    "digest": "149a0eea54cdf6ea3052af6dba2d2a63",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"set_priority\" : {\n            \"priority\": 50\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "set_priority": {
                    "priority": 50
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 712
    },
    "digest": "f3b4ddce8ff21fc1a76a7c0d9c36650e",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"actions\": {\n          \"shrink\" : {\n            \"number_of_shards\": 1\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "actions": {
                  "shrink": {
                    "number_of_shards": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 769
    },
    "digest": "a5a58e8ad66afe831bc295500e3e8739",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"unfollow\" : {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "unfollow": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/policy-definitions.asciidoc",
      "line": 794
    },
    "digest": "d14a2a6c2a8b084495b8a64708226650",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/full_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"7d\",\n            \"max_size\": \"50G\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          },\n          \"shrink\": {\n            \"number_of_shards\": 1\n          },\n          \"allocate\": {\n            \"number_of_replicas\": 2\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"60d\",\n        \"actions\": {\n          \"allocate\": {\n            \"require\": {\n              \"type\": \"cold\"\n            }\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"90d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/full_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_age": "7d",
                    "max_size": "50G"
                  }
                }
              },
              "warm": {
                "min_age": "30d",
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  },
                  "shrink": {
                    "number_of_shards": 1
                  },
                  "allocate": {
                    "number_of_replicas": 2
                  }
                }
              },
              "cold": {
                "min_age": "60d",
                "actions": {
                  "allocate": {
                    "require": {
                      "type": "cold"
                    }
                  }
                }
              },
              "delete": {
                "min_age": "90d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "full_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/set-up-lifecycle-policy.asciidoc",
      "line": 12
    },
    "digest": "7ecf197610e30c20f7206513ce393822",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"25GB\" <1>\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {} <2>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "25GB"
                  }
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/set-up-lifecycle-policy.asciidoc",
      "line": 59
    },
    "digest": "3c9d99215a7020ab478bdf5c8287a14f",
    "lang": "console",
    "found": [],
    "source": "PUT _template/my_template\n{\n  \"index_patterns\": [\"test-*\"], <1>\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index.lifecycle.name\": \"my_policy\", <2>\n    \"index.lifecycle.rollover_alias\": \"test-alias\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/my_template",
        "query": null,
        "body": {
          "index_patterns": [
            "test-*"
          ],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1,
            "index.lifecycle.name": "my_policy",
            "index.lifecycle.rollover_alias": "test-alias"
          }
        },
        "params": {
          "name": "my_template"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/set-up-lifecycle-policy.asciidoc",
      "line": 90
    },
    "digest": "25737fd456fd317cc4cc2db76b6cf28e",
    "lang": "console",
    "found": [],
    "source": "PUT test-000001\n{\n  \"aliases\": {\n    \"test-alias\":{\n      \"is_write_index\": true <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test-000001",
        "query": null,
        "body": {
          "aliases": {
            "test-alias": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "test-000001"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/set-up-lifecycle-policy.asciidoc",
      "line": 113
    },
    "digest": "160d259243d0800900b065c4b9d2b187",
    "lang": "console",
    "found": [],
    "source": "PUT test-index\n{\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index.lifecycle.name\": \"my_policy\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test-index",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1,
            "index.lifecycle.name": "my_policy"
          }
        },
        "params": {
          "index": "test-index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 29
    },
    "digest": "0c44088f251488432966131135f1bd1c",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"25GB\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "25GB"
                  }
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 60
    },
    "digest": "2c37ed0b33658d73a712e7942ea7433a",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"25GB\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"10d\", <1>\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "25GB"
                  }
                }
              },
              "delete": {
                "min_age": "10d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 98
    },
    "digest": "3f5f331ad51d398fbe349923fe8ce611",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_policy\": {\n    \"version\": 2, <1>\n    \"modified_date\": 82392349, <2>\n    \"policy\": {\n      \"phases\": {\n        \"hot\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_size\": \"25gb\"\n            }\n          }\n        },\n        \"delete\": {\n          \"min_age\": \"10d\",\n          \"actions\": {\n            \"delete\": {\n              \"delete_searchable_snapshot\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 144
    },
    "digest": "fc541f5741c1fe052439ededa84ffe8a",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_executing_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_docs\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"10d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_executing_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_docs": 1
                  }
                }
              },
              "delete": {
                "min_age": "10d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_executing_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 184
    },
    "digest": "0f6fa3a706a7c17858d3dbe329839ea6",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_ilm/explain",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_ilm/explain",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "ilm.explain_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 190
    },
    "digest": "d5e55676f5242766ebb035b87ce660e2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"my_index\": {\n      \"index\": \"my_index\",\n      \"managed\": true,\n      \"policy\": \"my_executing_policy\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"age\": \"30s\",\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"step\": \"check-rollover-ready\",\n      \"step_time_millis\": 1538475653317,\n      \"phase_execution\": {\n        \"policy\": \"my_executing_policy\",\n        \"modified_date_in_millis\": 1538475653317,\n        \"version\": 1,\n        \"phase_definition\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_docs\": 1\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 227
    },
    "digest": "f94601bc9cd640adb939af67116a40c8",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_executing_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"min_age\": \"1d\", <1>\n        \"actions\": {\n          \"rollover\": {\n            \"max_docs\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"10d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_executing_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "min_age": "1d",
                "actions": {
                  "rollover": {
                    "max_docs": 1
                  }
                }
              },
              "delete": {
                "min_age": "10d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_executing_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 266
    },
    "digest": "aada9dd17e7b08f3c5a279920c84333e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"my_index\": {\n      \"index\": \"my_index\",\n      \"managed\": true,\n      \"policy\": \"my_executing_policy\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"age\": \"30s\",\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"step\": \"check-rollover-ready\",\n      \"step_time_millis\": 1538475653317,\n      \"phase_execution\": {\n        \"policy\": \"my_executing_policy\",\n        \"modified_date_in_millis\": 1538475653317,\n        \"version\": 1, <1>\n        \"phase_definition\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_docs\": 1\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 306
    },
    "digest": "416c65c55a53d0161426cc09ae999c72",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_executing_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"10d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_executing_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "1d",
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  }
                }
              },
              "delete": {
                "min_age": "10d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_executing_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 344
    },
    "digest": "aada9dd17e7b08f3c5a279920c84333e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"my_index\": {\n      \"index\": \"my_index\",\n      \"managed\": true,\n      \"policy\": \"my_executing_policy\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"age\": \"30s\",\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"step\": \"check-rollover-ready\",\n      \"step_time_millis\": 1538475653317,\n      \"phase_execution\": {\n        \"policy\": \"my_executing_policy\",\n        \"modified_date_in_millis\": 1538475653317,\n        \"version\": 1, <1>\n        \"phase_definition\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_docs\": 1\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 398
    },
    "digest": "84935bf612d1aa402a7e16dae1ab99f5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"my_index\": {\n      \"index\": \"my_index\",\n      \"managed\": true,\n      \"policy\": \"my_executing_policy\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"age\": \"30s\",\n      \"phase\": \"warm\",\n      \"phase_time_millis\": 1538475653317,\n      \"action\": \"forcemerge\",\n      \"action_time_millis\": 1538475653317,\n      \"step\": \"forcemerge\",\n      \"step_time_millis\": 1538475653317,\n      \"phase_execution\": {\n        \"policy\": \"my_executing_policy\",\n        \"modified_date_in_millis\": 1538475653317,\n        \"version\": 3, <1>\n        \"phase_definition\": {\n          \"min_age\": \"1d\",\n          \"actions\": {\n            \"forcemerge\": {\n              \"max_num_segments\": 1\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/update-lifecycle-policy.asciidoc",
      "line": 496
    },
    "digest": "552b6761ef052efa1e83f8a3c30d6f78",
    "lang": "console",
    "found": [],
    "source": "PUT my_index/_settings\n{\n  \"lifecycle.name\": \"my_other_policy\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_settings",
        "query": null,
        "body": {
          "lifecycle.name": "my_other_policy"
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 16
    },
    "digest": "9d211c6226d0b4434f01cceb76ab6ffa",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/shrink-the-index\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"5d\",\n        \"actions\": {\n          \"shrink\": {\n            \"number_of_shards\": 4\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/shrink-the-index",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "5d",
                "actions": {
                  "shrink": {
                    "number_of_shards": 4
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "shrink-the-index"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 42
    },
    "digest": "3d0b9acdacc7ecec380c57e814256472",
    "lang": "console",
    "found": [],
    "source": "PUT /myindex\n{\n  \"settings\": {\n    \"index.number_of_shards\": 2,\n    \"index.lifecycle.name\": \"shrink-the-index\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/myindex",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_shards": 2,
            "index.lifecycle.name": "shrink-the-index"
          }
        },
        "params": {
          "index": "myindex"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 60
    },
    "digest": "943f92e1d3fa566ef23659be2d96f222",
    "lang": "console",
    "found": [],
    "source": "GET /myindex/_ilm/explain",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/myindex/_ilm/explain",
        "query": null,
        "body": null,
        "params": {
          "index": "myindex"
        },
        "api": "ilm.explain_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 68
    },
    "digest": "e29f69a4bcfe27332cb2bb994a2cb5bf",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\" : {\n    \"myindex\" : {\n      \"index\" : \"myindex\",\n      \"managed\" : true,                         <1>\n      \"policy\" : \"shrink-the-index\",            <2>\n      \"lifecycle_date_millis\" : 1541717265865,\n      \"age\": \"5.1d\",                            <3>\n      \"phase\" : \"warm\",                         <4>\n      \"phase_time_millis\" : 1541717272601,\n      \"action\" : \"shrink\",                      <5>\n      \"action_time_millis\" : 1541717272601,\n      \"step\" : \"ERROR\",                         <6>\n      \"step_time_millis\" : 1541717272688,\n      \"failed_step\" : \"shrink\",                 <7>\n      \"step_info\" : {\n        \"type\" : \"illegal_argument_exception\",   <8>\n        \"reason\" : \"the number of target shards [4] must be less that the number of source shards [2]\" <9>\n      },\n      \"phase_execution\" : {\n        \"policy\" : \"shrink-the-index\",\n        \"phase_definition\" : {                   <10>\n          \"min_age\" : \"5d\",\n          \"actions\" : {\n            \"shrink\" : {\n              \"number_of_shards\" : 4\n            }\n          }\n        },\n        \"version\" : 1,\n        \"modified_date_in_millis\" : 1541717264230\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 124
    },
    "digest": "7bee02e8962e355a23559b6eaa6678f2",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/shrink-the-index\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"5d\",\n        \"actions\": {\n          \"shrink\": {\n            \"number_of_shards\": 1\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/shrink-the-index",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "5d",
                "actions": {
                  "shrink": {
                    "number_of_shards": 1
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "shrink-the-index"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/error-handling.asciidoc",
      "line": 151
    },
    "digest": "235513edcb5ce3fe2e38a781eeefa6a0",
    "lang": "console",
    "found": [],
    "source": "POST /myindex/_ilm/retry",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/myindex/_ilm/retry",
        "query": null,
        "body": null,
        "params": {
          "index": "myindex"
        },
        "api": "ilm.retry"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 56
    },
    "digest": "182df084f028479ecbe8d7648ddad892",
    "lang": "console",
    "found": [],
    "source": "GET _ilm/status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ilm/status",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.get_status"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 63
    },
    "digest": "99e0bec31e49636bc0053ac66bc29352",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"RUNNING\"\n}"
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 88
    },
    "digest": "585a34ad79aee16678b37da785933ac8",
    "lang": "console",
    "found": [],
    "source": "POST _ilm/stop",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ilm/stop",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.stop"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 105
    },
    "digest": "8de1c258461189d65cba97dbc94600cd",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"STOPPING\"\n}"
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 127
    },
    "digest": "db8563ab7fe37081a9bb66c91d65d673",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"STOPPED\"\n}"
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 141
    },
    "digest": "72ae3851160fcf02b8e2cdfd4e57d238",
    "lang": "console",
    "found": [],
    "source": "POST _ilm/start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ilm/start",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.start"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/start-stop-ilm.asciidoc",
      "line": 158
    },
    "digest": "99e0bec31e49636bc0053ac66bc29352",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"RUNNING\"\n}"
  },
  {
    "source_location": {
      "file": "ilm/using-policies-rollover.asciidoc",
      "line": 59
    },
    "digest": "aed01ec7b6368fa2c8f86434e176c907",
    "lang": "console",
    "found": [],
    "source": "PUT /_ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"25GB\"\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "25GB"
                  }
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/using-policies-rollover.asciidoc",
      "line": 87
    },
    "digest": "f29c02d259065033bd557519d1b21481",
    "lang": "console",
    "found": [],
    "source": "PUT _template/my_template\n{\n  \"index_patterns\": [\"test-*\"], <1>\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index.lifecycle.name\": \"my_policy\", <2>\n    \"index.lifecycle.rollover_alias\": \"test-alias\" <3>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/my_template",
        "query": null,
        "body": {
          "index_patterns": [
            "test-*"
          ],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1,
            "index.lifecycle.name": "my_policy",
            "index.lifecycle.rollover_alias": "test-alias"
          }
        },
        "params": {
          "name": "my_template"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/using-policies-rollover.asciidoc",
      "line": 118
    },
    "digest": "454e0e11e2bbb4718109a53662f8c45d",
    "lang": "console",
    "found": [],
    "source": "PUT test-000001 <1>\n{\n  \"aliases\": {\n    \"test-alias\":{\n      \"is_write_index\": true <2>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test-000001",
        "query": null,
        "body": {
          "aliases": {
            "test-alias": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "test-000001"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 24
    },
    "digest": "4e2027438393cf93b9c9402b8511eab5",
    "lang": "console",
    "found": [],
    "source": "PUT _template/mylogs_template\n{\n  \"index_patterns\": [\n    \"mylogs-*\"\n  ],\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"message\": {\n        \"type\": \"text\"\n      },\n      \"@timestamp\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/mylogs_template",
        "query": null,
        "body": {
          "index_patterns": [
            "mylogs-*"
          ],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1
          },
          "mappings": {
            "properties": {
              "message": {
                "type": "text"
              },
              "@timestamp": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "name": "mylogs_template"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 50
    },
    "digest": "8502a9281f5393a7160e4e46988da672",
    "lang": "console",
    "found": [],
    "source": "POST mylogs-pre-ilm-2019.06.24/_doc\n{\n  \"@timestamp\": \"2019-06-24T10:34:00\",\n  \"message\": \"this is one log message\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/mylogs-pre-ilm-2019.06.24/_doc",
        "query": null,
        "body": {
          "@timestamp": "2019-06-24T10:34:00",
          "message": "this is one log message"
        },
        "params": {
          "index": "mylogs-pre-ilm-2019.06.24"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 60
    },
    "digest": "7d51f0436e87dec4274133856866b07d",
    "lang": "console",
    "found": [],
    "source": "POST mylogs-pre-ilm-2019.06.25/_doc\n{\n  \"@timestamp\": \"2019-06-25T17:42:00\",\n  \"message\": \"this is another log message\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/mylogs-pre-ilm-2019.06.25/_doc",
        "query": null,
        "body": {
          "@timestamp": "2019-06-25T17:42:00",
          "message": "this is another log message"
        },
        "params": {
          "index": "mylogs-pre-ilm-2019.06.25"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 129
    },
    "digest": "75097f73665235b20df09739c820ad35",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/mylogs_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_size\": \"25GB\"\n          }\n        }\n      },\n      \"warm\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"7d\",\n        \"actions\": {\n          \"freeze\": {}\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/mylogs_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_size": "25GB"
                  }
                }
              },
              "warm": {
                "min_age": "1d",
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  }
                }
              },
              "cold": {
                "min_age": "7d",
                "actions": {
                  "freeze": {}
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "mylogs_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 172
    },
    "digest": "3feab5c602192b8dc58435654b17d3fe",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/mylogs_policy_existing\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"1d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"cold\": {\n        \"min_age\": \"7d\",\n        \"actions\": {\n          \"freeze\": {}\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/mylogs_policy_existing",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "1d",
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  }
                }
              },
              "cold": {
                "min_age": "7d",
                "actions": {
                  "freeze": {}
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "mylogs_policy_existing"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 214
    },
    "digest": "ec195297eb804cba1cb19c9926773059",
    "lang": "console",
    "found": [],
    "source": "PUT mylogs-pre-ilm*/_settings <1>\n{\n  \"index\": {\n    \"lifecycle\": {\n      \"name\": \"mylogs_policy_existing\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/mylogs-pre-ilm*/_settings",
        "query": null,
        "body": {
          "index": {
            "lifecycle": {
              "name": "mylogs_policy_existing"
            }
          }
        },
        "params": {
          "index": "mylogs-pre-ilm*"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 256
    },
    "digest": "8d39a0f0116702e981545d13371cd0eb",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/mylogs_condensed_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"hot\": {\n        \"actions\": {\n          \"rollover\": {\n            \"max_age\": \"7d\",\n            \"max_size\": \"50G\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/mylogs_condensed_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "hot": {
                "actions": {
                  "rollover": {
                    "max_age": "7d",
                    "max_size": "50G"
                  }
                }
              }
            }
          }
        },
        "params": {
          "policy": "mylogs_condensed_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 279
    },
    "digest": "bce0d86353e212cee466ccbc90bdc6e7",
    "lang": "console",
    "found": [],
    "source": "PUT _template/mylogs_template\n{\n  \"index_patterns\": [\n    \"ilm-mylogs-*\" <1>\n  ],\n  \"settings\": {\n    \"number_of_shards\": 1,\n    \"number_of_replicas\": 1,\n    \"index\": {\n      \"lifecycle\": {\n        \"name\": \"mylogs_condensed_policy\", <2>\n        \"rollover_alias\": \"mylogs\" <3>\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"message\": {\n        \"type\": \"text\"\n      },\n      \"@timestamp\": {\n        \"type\": \"date\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/mylogs_template",
        "query": null,
        "body": {
          "index_patterns": [
            "ilm-mylogs-*"
          ],
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 1,
            "index": {
              "lifecycle": {
                "name": "mylogs_condensed_policy",
                "rollover_alias": "mylogs"
              }
            }
          },
          "mappings": {
            "properties": {
              "message": {
                "type": "text"
              },
              "@timestamp": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "name": "mylogs_template"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 318
    },
    "digest": "89115f8d40d9a13b0b01dc7c33ffd1cc",
    "lang": "console",
    "found": [],
    "source": "PUT ilm-mylogs-000001\n{\n  \"aliases\": {\n    \"mylogs\": {\n      \"is_write_index\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/ilm-mylogs-000001",
        "query": null,
        "body": {
          "aliases": {
            "mylogs": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "ilm-mylogs-000001"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 357
    },
    "digest": "5df1ed33b5fcf3b9d85c20d100780d43",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"transient\": {\n    \"indices.lifecycle.poll_interval\": \"1m\" <1>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "indices.lifecycle.poll_interval": "1m"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 388
    },
    "digest": "41f211cc838f1bee7eac264784f905e2",
    "lang": "console",
    "found": [],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"mylogs-*\", <1>\n    \"sort\": { \"@timestamp\": \"desc\" }\n  },\n  \"dest\": {\n    \"index\": \"mylogs\", <2>\n    \"op_type\": \"create\" <3>\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "mylogs-*",
            "sort": {
              "@timestamp": "desc"
            }
          },
          "dest": {
            "index": "mylogs",
            "op_type": "create"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/ilm-with-existing-indices.asciidoc",
      "line": 418
    },
    "digest": "227e19aecb349f31e74898384322ae01",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"transient\": {\n    \"indices.lifecycle.poll_interval\": null\n  }\n}\n",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "indices.lifecycle.poll_interval": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 17
    },
    "digest": "423f422b18fea34486a77579b2b12d72",
    "lang": "console",
    "found": [],
    "source": "PUT sec_logs/_bulk?refresh\n{\"index\":{\"_index\" : \"sec_logs\", \"_id\" : \"1\"}}\n{ \"@timestamp\": \"2020-12-06T11:04:05.000Z\", \"agent\": { \"id\": \"8a4f500d\" }, \"event\": { \"category\": \"process\" }, \"process\": { \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\" } }\n{\"index\":{\"_index\" : \"sec_logs\", \"_id\" : \"2\"}}\n{ \"@timestamp\": \"2020-12-06T11:04:07.000Z\", \"agent\": { \"id\": \"8a4f500d\" }, \"event\": { \"category\": \"file\" }, \"file\": { \"accessed\": \"2020-12-07T11:07:08.000Z\", \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\", \"type\": \"file\", \"size\": 16384 }, \"process\": { \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\" } }\n{\"index\":{\"_index\" : \"sec_logs\", \"_id\" : \"3\"}}\n{ \"@timestamp\": \"2020-12-07T11:06:07.000Z\", \"agent\": { \"id\": \"8a4f500d\" }, \"event\": { \"category\": \"process\" }, \"process\": { \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\" } }\n{\"index\":{\"_index\" : \"sec_logs\", \"_id\" : \"4\"}}\n{ \"@timestamp\": \"2020-12-07T11:07:08.000Z\", \"agent\": { \"id\": \"8a4f500d\" }, \"event\": { \"category\": \"file\" }, \"file\": { \"accessed\": \"2020-12-07T11:07:08.000Z\", \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\", \"type\": \"file\", \"size\": 16384 }, \"process\": { \"name\": \"cmd.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\" } }\n{\"index\":{\"_index\" : \"sec_logs\", \"_id\" : \"5\"}}\n{ \"@timestamp\": \"2020-12-07T11:07:09.000Z\", \"agent\": { \"id\": \"8a4f500d\" }, \"event\": { \"category\": \"process\" }, \"process\": { \"name\": \"regsvr32.exe\", \"path\": \"C:\\\\Windows\\\\System32\\\\regsvr32.exe\" } }",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/sec_logs/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_index": "sec_logs",
              "_id": "1"
            }
          },
          {
            "@timestamp": "2020-12-06T11:04:05.000Z",
            "agent": {
              "id": "8a4f500d"
            },
            "event": {
              "category": "process"
            },
            "process": {
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe"
            }
          },
          {
            "index": {
              "_index": "sec_logs",
              "_id": "2"
            }
          },
          {
            "@timestamp": "2020-12-06T11:04:07.000Z",
            "agent": {
              "id": "8a4f500d"
            },
            "event": {
              "category": "file"
            },
            "file": {
              "accessed": "2020-12-07T11:07:08.000Z",
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe",
              "type": "file",
              "size": 16384
            },
            "process": {
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe"
            }
          },
          {
            "index": {
              "_index": "sec_logs",
              "_id": "3"
            }
          },
          {
            "@timestamp": "2020-12-07T11:06:07.000Z",
            "agent": {
              "id": "8a4f500d"
            },
            "event": {
              "category": "process"
            },
            "process": {
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe"
            }
          },
          {
            "index": {
              "_index": "sec_logs",
              "_id": "4"
            }
          },
          {
            "@timestamp": "2020-12-07T11:07:08.000Z",
            "agent": {
              "id": "8a4f500d"
            },
            "event": {
              "category": "file"
            },
            "file": {
              "accessed": "2020-12-07T11:07:08.000Z",
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe",
              "type": "file",
              "size": 16384
            },
            "process": {
              "name": "cmd.exe",
              "path": "C:\\Windows\\System32\\cmd.exe"
            }
          },
          {
            "index": {
              "_index": "sec_logs",
              "_id": "5"
            }
          },
          {
            "@timestamp": "2020-12-07T11:07:09.000Z",
            "agent": {
              "id": "8a4f500d"
            },
            "event": {
              "category": "process"
            },
            "process": {
              "name": "regsvr32.exe",
              "path": "C:\\Windows\\System32\\regsvr32.exe"
            }
          }
        ],
        "params": {
          "index": "sec_logs"
        },
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 48
    },
    "digest": "39e711af23a7eee61a1e13cf2ef7c360",
    "lang": "console",
    "found": [],
    "source": "GET sec_logs/_eql/search\n{\n  \"query\": \"\"\"\n    process where process.name == \"cmd.exe\"\n  \"\"\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sec_logs/_eql/search",
        "query": null,
        "body": {
          "query": "\n    process where process.name == \"cmd.exe\"\n  "
        },
        "params": {
          "index": "sec_logs"
        },
        "api": "eql.search"
      }
    ]
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 66
    },
    "digest": "c0b5993a215149ef5f176b688a8c8b58",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 60,\n  \"timed_out\": false,\n  \"hits\": {\n    \"total\": {\n      \"value\": 2,\n      \"relation\": \"eq\"\n    },\n    \"events\": [\n      {\n        \"_index\": \"sec_logs\",\n        \"_id\": \"1\",\n        \"_score\": null,\n        \"_source\": {\n          \"@timestamp\": \"2020-12-06T11:04:05.000Z\",\n          \"agent\": {\n            \"id\": \"8a4f500d\"\n          },\n          \"event\": {\n            \"category\": \"process\"\n          },\n          \"process\": {\n            \"name\": \"cmd.exe\",\n            \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n          }\n        },\n        \"sort\": [\n          1607252645000\n        ]\n      },\n      {\n        \"_index\": \"sec_logs\",\n        \"_id\": \"3\",\n        \"_score\": null,\n        \"_source\": {\n          \"@timestamp\": \"2020-12-07T11:06:07.000Z\",\n          \"agent\": {\n            \"id\": \"8a4f500d\"\n          },\n          \"event\": {\n            \"category\": \"process\"\n          },\n          \"process\": {\n            \"name\": \"cmd.exe\",\n            \"path\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\"\n          }\n        },\n        \"sort\": [\n          1607339167000\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 136
    },
    "digest": "6f915983b4c12bcd1a8ca1c9cf8feed1",
    "lang": "console",
    "found": [],
    "source": "GET sec_logs/_eql/search\n{\n   \"event_category_field\": \"file.type\",\n  \"query\": \"\"\"\n    file where agent.id == \"8a4f500d\"\n  \"\"\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sec_logs/_eql/search",
        "query": null,
        "body": {
          "event_category_field": "file.type",
          "query": "\n    file where agent.id == \"8a4f500d\"\n  "
        },
        "params": {
          "index": "sec_logs"
        },
        "api": "eql.search"
      }
    ]
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 158
    },
    "digest": "382f6056cfbc3a113f675c0fbc59aaf3",
    "lang": "console",
    "found": [],
    "source": "GET sec_logs/_eql/search\n{\n  \"timestamp_field\": \"file.accessed\",\n  \"query\": \"\"\"\n    file where (file.size > 1 and file.type == \"file\")\n  \"\"\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sec_logs/_eql/search",
        "query": null,
        "body": {
          "timestamp_field": "file.accessed",
          "query": "\n    file where (file.size > 1 and file.type == \"file\")\n  "
        },
        "params": {
          "index": "sec_logs"
        },
        "api": "eql.search"
      }
    ]
  },
  {
    "source_location": {
      "file": "eql/search.asciidoc",
      "line": 182
    },
    "digest": "bfdf5997fe6e1fc4e938a28fcd6c8683",
    "lang": "console",
    "found": [],
    "source": "GET sec_logs/_eql/search\n{\n  \"filter\": {\n    \"range\" : {\n      \"file.size\" : {\n        \"gte\" : 1,\n        \"lte\" : 1000000\n      }\n    }\n  },\n  \"query\": \"\"\"\n    file where (file.type == \"file\" and file.name == \"cmd.exe\")\n  \"\"\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sec_logs/_eql/search",
        "query": null,
        "body": {
          "filter": {
            "range": {
              "file.size": {
                "gte": 1,
                "lte": 1000000
              }
            }
          },
          "query": "\n    file where (file.type == \"file\" and file.name == \"cmd.exe\")\n  "
        },
        "params": {
          "index": "sec_logs"
        },
        "api": "eql.search"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/getting-started.asciidoc",
      "line": 10
    },
    "digest": "0a46ac2968a574ce145f197f10d30152",
    "lang": "console",
    "found": [],
    "source": "PUT /library/_bulk?refresh\n{\"index\":{\"_id\": \"Leviathan Wakes\"}}\n{\"name\": \"Leviathan Wakes\", \"author\": \"James S.A. Corey\", \"release_date\": \"2011-06-02\", \"page_count\": 561}\n{\"index\":{\"_id\": \"Hyperion\"}}\n{\"name\": \"Hyperion\", \"author\": \"Dan Simmons\", \"release_date\": \"1989-05-26\", \"page_count\": 482}\n{\"index\":{\"_id\": \"Dune\"}}\n{\"name\": \"Dune\", \"author\": \"Frank Herbert\", \"release_date\": \"1965-06-01\", \"page_count\": 604}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/library/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": "Leviathan Wakes"
            }
          },
          {
            "name": "Leviathan Wakes",
            "author": "James S.A. Corey",
            "release_date": "2011-06-02",
            "page_count": 561
          },
          {
            "index": {
              "_id": "Hyperion"
            }
          },
          {
            "name": "Hyperion",
            "author": "Dan Simmons",
            "release_date": "1989-05-26",
            "page_count": 482
          },
          {
            "index": {
              "_id": "Dune"
            }
          },
          {
            "name": "Dune",
            "author": "Frank Herbert",
            "release_date": "1965-06-01",
            "page_count": 604
          }
        ],
        "params": {
          "index": "library"
        },
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/getting-started.asciidoc",
      "line": 23
    },
    "digest": "53b14d640c4c48a5e7ea86ddc26bee64",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n    \"query\": \"SELECT * FROM library WHERE release_date < '2000-01-01'\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT * FROM library WHERE release_date < '2000-01-01'"
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 22
    },
    "digest": "4870ece3455f2b5c34eccaa9492f3894",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC LIMIT 5\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC LIMIT 5"
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 114
    },
    "digest": "b649c4dc7d187a27d2112f59e62cecea",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=csv\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "csv"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 139
    },
    "digest": "8b8c48b5fcfaaec794875537d3be2e62",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=json\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "json"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 151
    },
    "digest": "e47728a317fe6f33854f328847cd3881",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"columns\": [\n        {\"name\": \"author\",       \"type\": \"text\"},\n        {\"name\": \"name\",         \"type\": \"text\"},\n        {\"name\": \"page_count\",   \"type\": \"short\"},\n        {\"name\": \"release_date\", \"type\": \"datetime\"}\n    ],\n    \"rows\": [\n        [\"Peter F. Hamilton\",  \"Pandora's Star\",       768, \"2004-03-02T00:00:00.000Z\"],\n        [\"Vernor Vinge\",       \"A Fire Upon the Deep\", 613, \"1992-06-01T00:00:00.000Z\"],\n        [\"Frank Herbert\",      \"Dune\",                 604, \"1965-06-01T00:00:00.000Z\"],\n        [\"Alastair Reynolds\",  \"Revelation Space\",     585, \"2000-03-15T00:00:00.000Z\"],\n        [\"James S.A. Corey\",   \"Leviathan Wakes\",      561, \"2011-06-02T00:00:00.000Z\"]\n    ],\n    \"cursor\": \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWWWdrRlVfSS1TbDYtcW9lc1FJNmlYdw==:BAFmBmF1dGhvcgFmBG5hbWUBZgpwYWdlX2NvdW50AWYMcmVsZWFzZV9kYXRl+v///w8=\"\n}"
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 174
    },
    "digest": "92d82b9d1bda5a8ae1117d03413f4e67",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=tsv\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "tsv"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 200
    },
    "digest": "a972c38ee41dc899708825790a113cb8",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 227
    },
    "digest": "d38b8ef18ca89eafb1e175ec9a393259",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=yaml\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "yaml"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 282
    },
    "digest": "212042898296f208dbf957f33c07e3b2",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=json\n{\n    \"cursor\": \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWYUpOYklQMHhRUEtld3RsNnFtYU1hQQ==:BAFmBGRhdGUBZgVsaWtlcwFzB21lc3NhZ2UBZgR1c2Vy9f///w8=\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "json"
        },
        "body": {
          "cursor": "sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWYUpOYklQMHhRUEtld3RsNnFtYU1hQQ==:BAFmBGRhdGUBZgVsaWtlcwFzB21lc3NhZ2UBZgR1c2Vy9f///w8="
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 294
    },
    "digest": "96d85cb20318cdd8edb5c1c7611d3e6f",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"rows\" : [\n        [\"Dan Simmons\",        \"Hyperion\",             482,  \"1989-05-26T00:00:00.000Z\"],\n        [\"Iain M. Banks\",      \"Consider Phlebas\",     471,  \"1987-04-23T00:00:00.000Z\"],\n        [\"Neal Stephenson\",    \"Snow Crash\",           470,  \"1992-06-01T00:00:00.000Z\"],\n        [\"Frank Herbert\",      \"God Emperor of Dune\",  454,  \"1981-05-28T00:00:00.000Z\"],\n        [\"Frank Herbert\",      \"Children of Dune\",     408,  \"1976-04-21T00:00:00.000Z\"]\n    ],\n    \"cursor\" : \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWODRMaXBUaVlRN21iTlRyWHZWYUdrdw==:BAFmBmF1dGhvcgFmBG5hbWUBZgpwYWdlX2NvdW50AWYMcmVsZWFzZV9kYXRl9f///w8=\"\n}"
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 319
    },
    "digest": "cc5dfc9aa125e3fd03f523fc2c356f63",
    "lang": "console",
    "found": [],
    "source": "POST /_sql/close\n{\n    \"cursor\": \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWYUpOYklQMHhRUEtld3RsNnFtYU1hQQ==:BAFmBGRhdGUBZgVsaWtlcwFzB21lc3NhZ2UBZgR1c2Vy9f///w8=\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql/close",
        "query": null,
        "body": {
          "cursor": "sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWYUpOYklQMHhRUEtld3RsNnFtYU1hQQ==:BAFmBGRhdGUBZgVsaWtlcwFzB21lc3NhZ2UBZgR1c2Vy9f///w8="
        },
        "params": null,
        "api": "sql.clear_cursor"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 331
    },
    "digest": "56e5e91d300c0102055e478162f304af",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"succeeded\" : true\n}"
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 346
    },
    "digest": "683da0a8624bc03c79a3db8ffab43f0b",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"filter\": {\n        \"range\": {\n            \"page_count\": {\n                \"gte\" : 100,\n                \"lte\" : 200\n            }\n        }\n    },\n    \"fetch_size\": 5\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "filter": {
            "range": {
              "page_count": {
                "gte": 100,
                "lte": 200
              }
            }
          },
          "fetch_size": 5
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 380
    },
    "digest": "acc0bf5e777f8fc833b7928fdd17ea3e",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n    \"query\": \"SELECT * FROM library\",\n    \"filter\": {\n        \"terms\": {\n            \"_routing\": [\"abc\"]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT * FROM library",
          "filter": {
            "terms": {
              "_routing": [
                "abc"
              ]
            }
          }
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 404
    },
    "digest": "c11dc94839b861235b4943f046e15997",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=json\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 5,\n    \"columnar\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "json"
        },
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 5,
          "columnar": true
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 417
    },
    "digest": "4b810caadb3079f3a9420d4e108722e7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"columns\": [\n        {\"name\": \"author\", \"type\": \"text\"},\n        {\"name\": \"name\", \"type\": \"text\"},\n        {\"name\": \"page_count\", \"type\": \"short\"},\n        {\"name\": \"release_date\", \"type\": \"datetime\"}\n    ],\n    \"values\": [\n        [\"Peter F. Hamilton\", \"Vernor Vinge\", \"Frank Herbert\", \"Alastair Reynolds\", \"James S.A. Corey\"],\n        [\"Pandora's Star\", \"A Fire Upon the Deep\", \"Dune\", \"Revelation Space\", \"Leviathan Wakes\"],\n        [768, 613, 604, 585, 561],\n        [\"2004-03-02T00:00:00.000Z\", \"1992-06-01T00:00:00.000Z\", \"1965-06-01T00:00:00.000Z\", \"2000-03-15T00:00:00.000Z\", \"2011-06-02T00:00:00.000Z\"]\n    ],\n    \"cursor\": \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWWWdrRlVfSS1TbDYtcW9lc1FJNmlYdw==:BAFmBmF1dGhvcgFmBG5hbWUBZgpwYWdlX2NvdW50AWYMcmVsZWFzZV9kYXRl+v///w8=\"\n}"
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 440
    },
    "digest": "15089efd5a5a72234fdb91c111adb3c1",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=json\n{\n    \"cursor\": \"sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWWWdrRlVfSS1TbDYtcW9lc1FJNmlYdw==:BAFmBmF1dGhvcgFmBG5hbWUBZgpwYWdlX2NvdW50AWYMcmVsZWFzZV9kYXRl+v///w8=\",\n    \"columnar\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "json"
        },
        "body": {
          "cursor": "sDXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAAEWWWdrRlVfSS1TbDYtcW9lc1FJNmlYdw==:BAFmBmF1dGhvcgFmBG5hbWUBZgpwYWdlX2NvdW50AWYMcmVsZWFzZV9kYXRl+v///w8=",
          "columnar": true
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 453
    },
    "digest": "efe6a7998fffc2a7289335f9b5643bc2",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"values\": [\n        [\"Dan Simmons\", \"Iain M. Banks\", \"Neal Stephenson\", \"Frank Herbert\", \"Frank Herbert\"],\n        [\"Hyperion\", \"Consider Phlebas\", \"Snow Crash\", \"God Emperor of Dune\", \"Children of Dune\"],\n        [482, 471, 470, 454, 408],\n        [\"1989-05-26T00:00:00.000Z\", \"1987-04-23T00:00:00.000Z\", \"1992-06-01T00:00:00.000Z\", \"1981-05-28T00:00:00.000Z\", \"1976-04-21T00:00:00.000Z\"]\n    ],\n    \"cursor\": \"46ToAwFzQERYRjFaWEo1UVc1a1JtVjBZMmdCQUFBQUFBQUFBQUVXWjBaNlFXbzNOV0pVY21Wa1NUZDJhV2t3V2xwblp3PT3/////DwQBZgZhdXRob3IBBHRleHQAAAFmBG5hbWUBBHRleHQAAAFmCnBhZ2VfY291bnQBBGxvbmcBAAFmDHJlbGVhc2VfZGF0ZQEIZGF0ZXRpbWUBAAEP\"\n}"
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 473
    },
    "digest": "172d150e56a225155a62c7b18bf8da67",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n\t\"query\": \"SELECT YEAR(release_date) AS year FROM library WHERE page_count > 300 AND author = 'Frank Herbert' GROUP BY year HAVING COUNT(*) > 0\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT YEAR(release_date) AS year FROM library WHERE page_count > 300 AND author = 'Frank Herbert' GROUP BY year HAVING COUNT(*) > 0"
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/rest.asciidoc",
      "line": 484
    },
    "digest": "d9e0cba8e150681d861f5fd1545514e2",
    "lang": "console",
    "found": [],
    "source": "POST /_sql?format=txt\n{\n\t\"query\": \"SELECT YEAR(release_date) AS year FROM library WHERE page_count > ? AND author = ? GROUP BY year HAVING COUNT(*) > ?\",\n\t\"params\": [300, \"Frank Herbert\", 0]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql",
        "query": {
          "format": "txt"
        },
        "body": {
          "query": "SELECT YEAR(release_date) AS year FROM library WHERE page_count > ? AND author = ? GROUP BY year HAVING COUNT(*) > ?",
          "params": [
            300,
            "Frank Herbert",
            0
          ]
        },
        "params": null,
        "api": "sql.query"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/translate.asciidoc",
      "line": 10
    },
    "digest": "8097472be12fcbe8652f03e398e49972",
    "lang": "console",
    "found": [],
    "source": "POST /_sql/translate\n{\n    \"query\": \"SELECT * FROM library ORDER BY page_count DESC\",\n    \"fetch_size\": 10\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_sql/translate",
        "query": null,
        "body": {
          "query": "SELECT * FROM library ORDER BY page_count DESC",
          "fetch_size": 10
        },
        "params": null,
        "api": "sql.translate"
      }
    ]
  },
  {
    "source_location": {
      "file": "sql/endpoints/translate.asciidoc",
      "line": 22
    },
    "digest": "8b1e1a7c16b57df49f15d070d6200a89",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"size\" : 10,\n    \"docvalue_fields\" : [\n        {\n            \"field\": \"release_date\",\n            \"format\": \"epoch_millis\"\n        }\n    ],\n    \"_source\": {\n        \"includes\": [\n            \"author\",\n            \"name\",\n            \"page_count\"\n        ],\n        \"excludes\": []\n    },\n    \"sort\" : [\n        {\n            \"page_count\" : {\n                \"order\" : \"desc\",\n                \"missing\" : \"_first\",\n                \"unmapped_type\" : \"short\"\n            }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "monitoring/production.asciidoc",
      "line": 50
    },
    "digest": "a941fd568f2e20e13df909ab24506073",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.collection.enabled\": false\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.collection.enabled": false
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/production.asciidoc",
      "line": 88
    },
    "digest": "0b47b0bef81b9b5eecfb3775695bd6ad",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/remote_monitor\n{\n  \"password\" : \"changeme\",\n  \"roles\" : [ \"remote_monitoring_agent\"],\n  \"full_name\" : \"Internal Agent For Remote Monitoring\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/remote_monitor",
        "query": null,
        "body": {
          "password": "changeme",
          "roles": [
            "remote_monitoring_agent"
          ],
          "full_name": "Internal Agent For Remote Monitoring"
        },
        "params": {
          "username": "remote_monitor"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/esms.asciidoc",
      "line": 34
    },
    "digest": "fb2b8d642e16132eebcff4f8b6d592d1",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.collection.enabled\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.collection.enabled": true
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/esms.asciidoc",
      "line": 43
    },
    "digest": "519603821dc5b883fc2cf50e3d164084",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.elasticsearch.collection.enabled\": false\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.elasticsearch.collection.enabled": false
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/collecting-monitoring-data.asciidoc",
      "line": 61
    },
    "digest": "fb2b8d642e16132eebcff4f8b6d592d1",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.collection.enabled\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.collection.enabled": true
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/configuring-metricbeat.asciidoc",
      "line": 29
    },
    "digest": "fb2b8d642e16132eebcff4f8b6d592d1",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.collection.enabled\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.collection.enabled": true
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/configuring-metricbeat.asciidoc",
      "line": 194
    },
    "digest": "519603821dc5b883fc2cf50e3d164084",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.elasticsearch.collection.enabled\": false\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.elasticsearch.collection.enabled": false
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/configuring-filebeat.asciidoc",
      "line": 39
    },
    "digest": "fb2b8d642e16132eebcff4f8b6d592d1",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings\n\nPUT _cluster/settings\n{\n  \"persistent\": {\n    \"xpack.monitoring.collection.enabled\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.monitoring.collection.enabled": true
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/indices.asciidoc",
      "line": 12
    },
    "digest": "83dfd0852101eca3ba8174c9c38b4e73",
    "lang": "console",
    "found": [],
    "source": "GET /_template/.monitoring-*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template/.monitoring-*",
        "query": null,
        "body": null,
        "params": {
          "name": ".monitoring-*"
        },
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "monitoring/indices.asciidoc",
      "line": 29
    },
    "digest": "a63906c63a8681c72d53ee0fcf2ffd35",
    "lang": "console",
    "found": [],
    "source": "PUT /_template/custom_monitoring\n{\n    \"index_patterns\": \".monitoring-*\",\n    \"order\": 1,\n    \"settings\": {\n        \"number_of_shards\": 5,\n        \"number_of_replicas\": 2\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/custom_monitoring",
        "query": null,
        "body": {
          "index_patterns": ".monitoring-*",
          "order": 1,
          "settings": {
            "number_of_shards": 5,
            "number_of_replicas": 2
          }
        },
        "params": {
          "name": "custom_monitoring"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "frozen-indices.asciidoc",
      "line": 66
    },
    "digest": "f9018c483fb6b810d8a921668addfc71",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_forcemerge?max_num_segments=1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_forcemerge",
        "query": {
          "max_num_segments": "1"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "frozen-indices.asciidoc",
      "line": 83
    },
    "digest": "0652fc9f77639fce67a87dc2e33cef51",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search?q=user:kimchy&ignore_throttled=false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "q": "user:kimchy",
          "ignore_throttled": "false"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "frozen-indices.asciidoc",
      "line": 97
    },
    "digest": "9ff10591660890ba9d00eb14168c3b67",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/indices/twitter?v&h=i,sth",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/indices/twitter",
        "query": {
          "v": true,
          "h": "i,sth"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "cat.indices"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 35
    },
    "digest": "3acad8c67832b281b9f15349492b8328",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"60m\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "60m"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor"
        },
        "api": "rollup.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 124
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 139
    },
    "digest": "618c9d42284c067891fb57034a4fd834",
    "lang": "console",
    "found": [],
    "source": "POST _rollup/job/sensor/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_rollup/job/sensor/_start",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor"
        },
        "api": "rollup.start_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 153
    },
    "digest": "4e63a0fd56cc5d59595baa0b0721f971",
    "lang": "console",
    "found": [],
    "source": "GET /sensor_rollup/_rollup_search\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"max_temperature\": {\n            \"max\": {\n                \"field\": \"temperature\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "max_temperature": {
              "max": {
                "field": "temperature"
              }
            }
          }
        },
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 175
    },
    "digest": "82742a24e16fbaffa950867499a39b97",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 210
    },
    "digest": "e0f8ecc665f547d5365699ab8773e298",
    "lang": "console",
    "found": [],
    "source": "GET /sensor_rollup/_rollup_search\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"timeline\": {\n            \"date_histogram\": {\n                \"field\": \"timestamp\",\n                \"fixed_interval\": \"7d\"\n            },\n            \"aggs\": {\n                \"nodes\": {\n                    \"terms\": {\n                        \"field\": \"node\"\n                    },\n                    \"aggs\": {\n                        \"max_temperature\": {\n                            \"max\": {\n                                \"field\": \"temperature\"\n                            }\n                        },\n                        \"avg_voltage\": {\n                            \"avg\": {\n                                \"field\": \"voltage\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "timeline": {
              "date_histogram": {
                "field": "timestamp",
                "fixed_interval": "7d"
              },
              "aggs": {
                "nodes": {
                  "terms": {
                    "field": "node"
                  },
                  "aggs": {
                    "max_temperature": {
                      "max": {
                        "field": "temperature"
                      }
                    },
                    "avg_voltage": {
                      "avg": {
                        "field": "voltage"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-getting-started.asciidoc",
      "line": 248
    },
    "digest": "0d4cb421d11583bbf5d139ee669930db",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\" : 93,\n   \"timed_out\" : false,\n   \"terminated_early\" : false,\n   \"_shards\" : ... ,\n   \"hits\" : {\n     \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n     },\n     \"max_score\" : 0.0,\n     \"hits\" : [ ]\n   },\n   \"aggregations\" : {\n     \"timeline\" : {\n       \"meta\" : { },\n       \"buckets\" : [\n         {\n           \"key_as_string\" : \"2018-01-18T00:00:00.000Z\",\n           \"key\" : 1516233600000,\n           \"doc_count\" : 6,\n           \"nodes\" : {\n             \"doc_count_error_upper_bound\" : 0,\n             \"sum_other_doc_count\" : 0,\n             \"buckets\" : [\n               {\n                 \"key\" : \"a\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 202.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 5.1499998569488525\n                 }\n               },\n               {\n                 \"key\" : \"b\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 201.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 5.700000047683716\n                 }\n               },\n               {\n                 \"key\" : \"c\",\n                 \"doc_count\" : 2,\n                 \"max_temperature\" : {\n                   \"value\" : 202.0\n                 },\n                 \"avg_voltage\" : {\n                   \"value\" : 4.099999904632568\n                 }\n               }\n             ]\n           }\n         }\n       ]\n     }\n   }\n}\n"
  },
  {
    "source_location": {
      "file": "rollup/rollup-search-limitations.asciidoc",
      "line": 45
    },
    "digest": "3d1cea1ad861d1ee62e5f34b84371943",
    "lang": "console",
    "found": [],
    "source": "GET sensor_rollup/_rollup_search\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"avg_temperature\": {\n            \"avg\": {\n                \"field\": \"temperature\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "avg_temperature": {
              "avg": {
                "field": "temperature"
              }
            }
          }
        },
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/rollup-search-limitations.asciidoc",
      "line": 64
    },
    "digest": "b010489cc7d519a628dcbc1ce81adb3c",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"error\" : {\n        \"root_cause\" : [\n            {\n                \"type\" : \"illegal_argument_exception\",\n                \"reason\" : \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n                \"stack_trace\": ...\n            }\n        ],\n        \"type\" : \"illegal_argument_exception\",\n        \"reason\" : \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n        \"stack_trace\": ...\n    },\n    \"status\": 400\n}"
  },
  {
    "source_location": {
      "file": "transform/ecommerce-tutorial.asciidoc",
      "line": 78
    },
    "digest": "8345d2615f43a934fe1871a5120eca1d",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_ecommerce\",\n    \"query\": {\n      \"bool\": {\n        \"filter\": {\n          \"term\": {\"currency\": \"EUR\"}\n        }\n      }\n    }\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"customer_id\": {\n        \"terms\": {\n          \"field\": \"customer_id\"\n        }\n      }\n    },\n    \"aggregations\": {\n      \"total_quantity.sum\": {\n        \"sum\": {\n          \"field\": \"total_quantity\"\n        }\n      },\n      \"taxless_total_price.sum\": {\n        \"sum\": {\n          \"field\": \"taxless_total_price\"\n        }\n      },\n      \"total_quantity.max\": {\n        \"max\": {\n          \"field\": \"total_quantity\"\n        }\n      },\n      \"order_id.cardinality\": {\n        \"cardinality\": {\n          \"field\": \"order_id\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_ecommerce",
            "query": {
              "bool": {
                "filter": {
                  "term": {
                    "currency": "EUR"
                  }
                }
              }
            }
          },
          "pivot": {
            "group_by": {
              "customer_id": {
                "terms": {
                  "field": "customer_id"
                }
              }
            },
            "aggregations": {
              "total_quantity.sum": {
                "sum": {
                  "field": "total_quantity"
                }
              },
              "taxless_total_price.sum": {
                "sum": {
                  "field": "taxless_total_price"
                }
              },
              "total_quantity.max": {
                "max": {
                  "field": "total_quantity"
                }
              },
              "order_id.cardinality": {
                "cardinality": {
                  "field": "order_id"
                }
              }
            }
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/ecommerce-tutorial.asciidoc",
      "line": 154
    },
    "digest": "c68404749f090ab191c0fd5f651635cf",
    "lang": "console",
    "found": [],
    "source": "PUT _transform/ecommerce-customer-transform\n{\n  \"source\": {\n    \"index\": [\n      \"kibana_sample_data_ecommerce\"\n    ],\n    \"query\": {\n      \"bool\": {\n        \"filter\": {\n          \"term\": {\n            \"currency\": \"EUR\"\n          }\n        }\n      }\n    }\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"customer_id\": {\n        \"terms\": {\n          \"field\": \"customer_id\"\n        }\n      }\n    },\n    \"aggregations\": {\n      \"total_quantity.sum\": {\n        \"sum\": {\n          \"field\": \"total_quantity\"\n        }\n      },\n      \"taxless_total_price.sum\": {\n        \"sum\": {\n          \"field\": \"taxless_total_price\"\n        }\n      },\n      \"total_quantity.max\": {\n        \"max\": {\n          \"field\": \"total_quantity\"\n        }\n      },\n      \"order_id.cardinality\": {\n        \"cardinality\": {\n          \"field\": \"order_id\"\n        }\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"ecommerce-customers\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_transform/ecommerce-customer-transform",
        "query": null,
        "body": {
          "source": {
            "index": [
              "kibana_sample_data_ecommerce"
            ],
            "query": {
              "bool": {
                "filter": {
                  "term": {
                    "currency": "EUR"
                  }
                }
              }
            }
          },
          "pivot": {
            "group_by": {
              "customer_id": {
                "terms": {
                  "field": "customer_id"
                }
              }
            },
            "aggregations": {
              "total_quantity.sum": {
                "sum": {
                  "field": "total_quantity"
                }
              },
              "taxless_total_price.sum": {
                "sum": {
                  "field": "taxless_total_price"
                }
              },
              "total_quantity.max": {
                "max": {
                  "field": "total_quantity"
                }
              },
              "order_id.cardinality": {
                "cardinality": {
                  "field": "order_id"
                }
              }
            }
          },
          "dest": {
            "index": "ecommerce-customers"
          }
        },
        "params": {
          "transform_id": "ecommerce-customer-transform"
        },
        "api": "transform.put_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/ecommerce-tutorial.asciidoc",
      "line": 233
    },
    "digest": "4ded8ad815ac0e83b1c21a6c18fd0763",
    "lang": "console",
    "found": [],
    "source": "POST _transform/ecommerce-customer-transform/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/ecommerce-customer-transform/_start",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce-customer-transform"
        },
        "api": "transform.start_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/examples.asciidoc",
      "line": 29
    },
    "digest": "88341b4eba71ec722f3e38fa1696fe87",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_ecommerce\"\n  },\n  \"dest\" : { <1>\n    \"index\" : \"sample_ecommerce_orders_by_customer\"\n  },\n  \"pivot\": {\n    \"group_by\": { <2>\n      \"user\": { \"terms\": { \"field\": \"user\" }},\n      \"customer_id\": { \"terms\": { \"field\": \"customer_id\" }}\n    },\n    \"aggregations\": {\n      \"order_count\": { \"value_count\": { \"field\": \"order_id\" }},\n      \"total_order_amt\": { \"sum\": { \"field\": \"taxful_total_price\" }},\n      \"avg_amt_per_order\": { \"avg\": { \"field\": \"taxful_total_price\" }},\n      \"avg_unique_products_per_order\": { \"avg\": { \"field\": \"total_unique_products\" }},\n      \"total_unique_products\": { \"cardinality\": { \"field\": \"products.product_id\" }}\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_ecommerce"
          },
          "dest": {
            "index": "sample_ecommerce_orders_by_customer"
          },
          "pivot": {
            "group_by": {
              "user": {
                "terms": {
                  "field": "user"
                }
              },
              "customer_id": {
                "terms": {
                  "field": "customer_id"
                }
              }
            },
            "aggregations": {
              "order_count": {
                "value_count": {
                  "field": "order_id"
                }
              },
              "total_order_amt": {
                "sum": {
                  "field": "taxful_total_price"
                }
              },
              "avg_amt_per_order": {
                "avg": {
                  "field": "taxful_total_price"
                }
              },
              "avg_unique_products_per_order": {
                "avg": {
                  "field": "total_unique_products"
                }
              },
              "total_unique_products": {
                "cardinality": {
                  "field": "products.product_id"
                }
              }
            }
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/examples.asciidoc",
      "line": 115
    },
    "digest": "be9376b1e354ad9c6bdad83f6a0ce5ad",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_flights\",\n    \"query\": { <1>\n      \"bool\": {\n        \"filter\": [\n          { \"term\":  { \"Cancelled\": false } }\n        ]\n      }\n    }\n  },\n  \"dest\" : { <2>\n    \"index\" : \"sample_flight_delays_by_carrier\"\n  },\n  \"pivot\": {\n    \"group_by\": { <3>\n      \"carrier\": { \"terms\": { \"field\": \"Carrier\" }}\n    },\n    \"aggregations\": {\n      \"flights_count\": { \"value_count\": { \"field\": \"FlightNum\" }},\n      \"delay_mins_total\": { \"sum\": { \"field\": \"FlightDelayMin\" }},\n      \"flight_mins_total\": { \"sum\": { \"field\": \"FlightTimeMin\" }},\n      \"delay_time_percentage\": { <4>\n        \"bucket_script\": {\n          \"buckets_path\": {\n            \"delay_time\": \"delay_mins_total.value\",\n            \"flight_time\": \"flight_mins_total.value\"\n          },\n          \"script\": \"(params.delay_time / params.flight_time) * 100\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_flights",
            "query": {
              "bool": {
                "filter": [
                  {
                    "term": {
                      "Cancelled": false
                    }
                  }
                ]
              }
            }
          },
          "dest": {
            "index": "sample_flight_delays_by_carrier"
          },
          "pivot": {
            "group_by": {
              "carrier": {
                "terms": {
                  "field": "Carrier"
                }
              }
            },
            "aggregations": {
              "flights_count": {
                "value_count": {
                  "field": "FlightNum"
                }
              },
              "delay_mins_total": {
                "sum": {
                  "field": "FlightDelayMin"
                }
              },
              "flight_mins_total": {
                "sum": {
                  "field": "FlightTimeMin"
                }
              },
              "delay_time_percentage": {
                "bucket_script": {
                  "buckets_path": {
                    "delay_time": "delay_mins_total.value",
                    "flight_time": "flight_mins_total.value"
                  },
                  "script": "(params.delay_time / params.flight_time) * 100"
                }
              }
            }
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/examples.asciidoc",
      "line": 202
    },
    "digest": "7bc36ea4a24937de6c009397861baf05",
    "lang": "console",
    "found": [],
    "source": "PUT _transform/suspicious_client_ips\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_logs\"\n  },\n  \"dest\" : { <1>\n    \"index\" : \"sample_weblogs_by_clientip\"\n  },\n  \"sync\" : { <2>\n    \"time\": {\n      \"field\": \"timestamp\",\n      \"delay\": \"60s\"\n    }\n  },\n  \"pivot\": {\n    \"group_by\": {  <3>\n      \"clientip\": { \"terms\": { \"field\": \"clientip\" } }\n      },\n    \"aggregations\": {\n      \"url_dc\": { \"cardinality\": { \"field\": \"url.keyword\" }},\n      \"bytes_sum\": { \"sum\": { \"field\": \"bytes\" }},\n      \"geo.src_dc\": { \"cardinality\": { \"field\": \"geo.src\" }},\n      \"agent_dc\": { \"cardinality\": { \"field\": \"agent.keyword\" }},\n      \"geo.dest_dc\": { \"cardinality\": { \"field\": \"geo.dest\" }},\n      \"responses.total\": { \"value_count\": { \"field\": \"timestamp\" }},\n      \"success\" : { <4>\n         \"filter\": {\n            \"term\": { \"response\" : \"200\"}}\n        },\n      \"error404\" : {\n         \"filter\": {\n            \"term\": { \"response\" : \"404\"}}\n        },\n      \"error503\" : {\n         \"filter\": {\n            \"term\": { \"response\" : \"503\"}}\n        },\n      \"timestamp.min\": { \"min\": { \"field\": \"timestamp\" }},\n      \"timestamp.max\": { \"max\": { \"field\": \"timestamp\" }},\n      \"timestamp.duration_ms\": { <5>\n        \"bucket_script\": {\n          \"buckets_path\": {\n            \"min_time\": \"timestamp.min.value\",\n            \"max_time\": \"timestamp.max.value\"\n          },\n          \"script\": \"(params.max_time - params.min_time)\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_transform/suspicious_client_ips",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_logs"
          },
          "dest": {
            "index": "sample_weblogs_by_clientip"
          },
          "sync": {
            "time": {
              "field": "timestamp",
              "delay": "60s"
            }
          },
          "pivot": {
            "group_by": {
              "clientip": {
                "terms": {
                  "field": "clientip"
                }
              }
            },
            "aggregations": {
              "url_dc": {
                "cardinality": {
                  "field": "url.keyword"
                }
              },
              "bytes_sum": {
                "sum": {
                  "field": "bytes"
                }
              },
              "geo.src_dc": {
                "cardinality": {
                  "field": "geo.src"
                }
              },
              "agent_dc": {
                "cardinality": {
                  "field": "agent.keyword"
                }
              },
              "geo.dest_dc": {
                "cardinality": {
                  "field": "geo.dest"
                }
              },
              "responses.total": {
                "value_count": {
                  "field": "timestamp"
                }
              },
              "success": {
                "filter": {
                  "term": {
                    "response": "200"
                  }
                }
              },
              "error404": {
                "filter": {
                  "term": {
                    "response": "404"
                  }
                }
              },
              "error503": {
                "filter": {
                  "term": {
                    "response": "503"
                  }
                }
              },
              "timestamp.min": {
                "min": {
                  "field": "timestamp"
                }
              },
              "timestamp.max": {
                "max": {
                  "field": "timestamp"
                }
              },
              "timestamp.duration_ms": {
                "bucket_script": {
                  "buckets_path": {
                    "min_time": "timestamp.min.value",
                    "max_time": "timestamp.max.value"
                  },
                  "script": "(params.max_time - params.min_time)"
                }
              }
            }
          }
        },
        "params": {
          "transform_id": "suspicious_client_ips"
        },
        "api": "transform.put_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/examples.asciidoc",
      "line": 272
    },
    "digest": "4bd42e31ac4a5cf237777f1a0e97aba8",
    "lang": "console",
    "found": [],
    "source": "POST _transform/suspicious_client_ips/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/suspicious_client_ips/_start",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "suspicious_client_ips"
        },
        "api": "transform.start_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/examples.asciidoc",
      "line": 282
    },
    "digest": "14f2dab0583c5a9fcc39931d33194872",
    "lang": "console",
    "found": [],
    "source": "GET sample_weblogs_by_clientip/_search",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sample_weblogs_by_clientip/_search",
        "query": null,
        "body": null,
        "params": {
          "index": "sample_weblogs_by_clientip"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/painless-examples.asciidoc",
      "line": 160
    },
    "digest": "8ce484cceef334f0a8ad3a40570b3425",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"source\": {\n    \"index\": [ <1>\n      \"kibana_sample_data_logs\"\n    ]\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"agent\": {\n        \"terms\": {\n          \"script\": { <2>\n            \"source\": \"\"\"String agent = doc['agent.keyword'].value;\n            if (agent.contains(\"MSIE\")) {\n              return \"internet explorer\";\n            } else if (agent.contains(\"AppleWebKit\")) {\n              return \"safari\";\n            } else if (agent.contains('Firefox')) {\n              return \"firefox\";\n            } else { return agent }\"\"\",\n            \"lang\": \"painless\"\n          }\n        }\n      }\n    },\n    \"aggregations\": { <3>\n      \"200\": {\n        \"filter\": {\n          \"term\": {\n            \"response\": \"200\"\n          }\n        }\n      },\n      \"404\": {\n        \"filter\": {\n          \"term\": {\n            \"response\": \"404\"\n          }\n        }\n      },\n      \"503\": {\n        \"filter\": {\n          \"term\": {\n            \"response\": \"503\"\n          }\n        }\n      }\n    }\n  },\n  \"dest\": { <4>\n    \"index\": \"pivot_logs\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "source": {
            "index": [
              "kibana_sample_data_logs"
            ]
          },
          "pivot": {
            "group_by": {
              "agent": {
                "terms": {
                  "script": {
                    "source": "String agent = doc['agent.keyword'].value;\n            if (agent.contains(\"MSIE\")) {\n              return \"internet explorer\";\n            } else if (agent.contains(\"AppleWebKit\")) {\n              return \"safari\";\n            } else if (agent.contains('Firefox')) {\n              return \"firefox\";\n            } else { return agent }",
                    "lang": "painless"
                  }
                }
              }
            },
            "aggregations": {
              "200": {
                "filter": {
                  "term": {
                    "response": "200"
                  }
                }
              },
              "404": {
                "filter": {
                  "term": {
                    "response": "404"
                  }
                }
              },
              "503": {
                "filter": {
                  "term": {
                    "response": "503"
                  }
                }
              }
            }
          },
          "dest": {
            "index": "pivot_logs"
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/painless-examples.asciidoc",
      "line": 298
    },
    "digest": "d6e0be8357b50f7d5b9dd8dadf1567b1",
    "lang": "console",
    "found": [],
    "source": "PUT _data_frame/transforms/data_log\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_logs\"\n  },\n  \"dest\": {\n    \"index\": \"data-logs-by-client\"\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"machine.os\": {\"terms\": {\"field\": \"machine.os.keyword\"}},\n      \"machine.ip\": {\"terms\": {\"field\": \"clientip\"}}\n    },\n    \"aggregations\": {\n      \"time_frame.lte\": {\n        \"max\": {\n          \"field\": \"timestamp\"\n        }\n      },\n      \"time_frame.gte\": {\n        \"min\": {\n          \"field\": \"timestamp\"\n        }\n      },\n      \"time_length\": { <1>\n        \"bucket_script\": {\n          \"buckets_path\": { <2>\n            \"min\": \"time_frame.gte.value\",\n            \"max\": \"time_frame.lte.value\"\n          },\n          \"script\": \"params.max - params.min\" <3>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_data_frame/transforms/data_log",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_logs"
          },
          "dest": {
            "index": "data-logs-by-client"
          },
          "pivot": {
            "group_by": {
              "machine.os": {
                "terms": {
                  "field": "machine.os.keyword"
                }
              },
              "machine.ip": {
                "terms": {
                  "field": "clientip"
                }
              }
            },
            "aggregations": {
              "time_frame.lte": {
                "max": {
                  "field": "timestamp"
                }
              },
              "time_frame.gte": {
                "min": {
                  "field": "timestamp"
                }
              },
              "time_length": {
                "bucket_script": {
                  "buckets_path": {
                    "min": "time_frame.gte.value",
                    "max": "time_frame.lte.value"
                  },
                  "script": "params.max - params.min"
                }
              }
            }
          }
        },
        "params": {
          "transform_id": "data_log"
        },
        "api": "data_frame_transform_deprecated.put_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/painless-examples.asciidoc",
      "line": 414
    },
    "digest": "22908e2f01460917d3145a53e3fb7546",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"id\" : \"index_compare\",\n  \"source\" : { <1>\n    \"index\" : [\n      \"index1\",\n      \"index2\"\n    ],\n    \"query\" : {\n      \"match_all\" : { }\n    }\n  },\n  \"dest\" : { <2>\n    \"index\" : \"compare\"\n  },\n  \"pivot\" : {\n    \"group_by\" : {\n      \"unique-id\" : {\n        \"terms\" : {\n          \"field\" : \"<unique-id-field>\" <3>\n        }\n      }\n    },\n    \"aggregations\" : {\n      \"compare\" : { <4>\n        \"scripted_metric\" : {\n          \"init_script\" : \"\",\n          \"map_script\" : \"state.doc = new HashMap(params['_source'])\", <5>\n          \"combine_script\" : \"return state\", <6>\n          \"reduce_script\" : \"\"\" <7>\n            if (states.size() != 2) {\n              return \"count_mismatch\"\n            }\n            if (states.get(0).equals(states.get(1))) {\n              return \"match\"\n            } else {\n              return \"mismatch\"\n            }\n            \"\"\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "id": "index_compare",
          "source": {
            "index": [
              "index1",
              "index2"
            ],
            "query": {
              "match_all": {}
            }
          },
          "dest": {
            "index": "compare"
          },
          "pivot": {
            "group_by": {
              "unique-id": {
                "terms": {
                  "field": "<unique-id-field>"
                }
              }
            },
            "aggregations": {
              "compare": {
                "scripted_metric": {
                  "init_script": "",
                  "map_script": "state.doc = new HashMap(params['_source'])",
                  "combine_script": "return state",
                  "reduce_script": " \n            if (states.size() != 2) {\n              return \"count_mismatch\"\n            }\n            if (states.get(0).equals(states.get(1))) {\n              return \"match\"\n            } else {\n              return \"mismatch\"\n            }\n            "
                }
              }
            }
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-cluster-config.asciidoc",
      "line": 41
    },
    "digest": "ee79edafcbc80dfda496e3a26506dcbc",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/settings?pretty&flat_settings&filter_path=persistent",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/settings",
        "query": {
          "pretty": true,
          "flat_settings": true,
          "filter_path": "persistent"
        },
        "body": null,
        "params": null,
        "api": "cluster.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-and-restore-security-config.asciidoc",
      "line": 79
    },
    "digest": "92b3749a473cf2e7ff4055316662a4fe",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_backup\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_backup_location\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup",
        "query": null,
        "body": {
          "type": "fs",
          "settings": {
            "location": "my_backup_location"
          }
        },
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-and-restore-security-config.asciidoc",
      "line": 102
    },
    "digest": "43a7b43711eab81ad093e67ecc221327",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/snapshot_user\n{\n  \"password\" : \"secret\",\n  \"roles\" : [ \"snapshot_user\" ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/snapshot_user",
        "query": null,
        "body": {
          "password": "secret",
          "roles": [
            "snapshot_user"
          ]
        },
        "params": {
          "username": "snapshot_user"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-and-restore-security-config.asciidoc",
      "line": 120
    },
    "digest": "7acf1099282366553cb8b093ed4fcd00",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_backup/snapshot_1\n{\n  \"indices\": \".security\",\n  \"include_global_state\": true <1>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": null,
        "body": {
          "indices": ".security",
          "include_global_state": true
        },
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-and-restore-security-config.asciidoc",
      "line": 190
    },
    "digest": "ff930e6409b6a923ef1c9e7fc99f24cc",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.get_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "high-availability/backup-and-restore-security-config.asciidoc",
      "line": 196
    },
    "digest": "020c56e520ff6556ebfaf98efaef56aa",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/overview.asciidoc",
      "line": 205
    },
    "digest": "7c5e41a7c0075d87b8f8348a6efa990c",
    "lang": "console",
    "found": [],
    "source": "POST /follower_index/_ccr/pause_follow\n\nPOST /follower_index/_close\n\nPUT /follower_index/_ccr/follow?wait_for_active_shards=1\n{\n  \"remote_cluster\" : \"remote_cluster\",\n  \"leader_index\" : \"leader_index\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/follower_index/_ccr/pause_follow",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.pause_follow"
      },
      {
        "method": "POST",
        "url": "/follower_index/_close",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "indices.close"
      },
      {
        "method": "PUT",
        "url": "/follower_index/_ccr/follow",
        "query": {
          "wait_for_active_shards": "1"
        },
        "body": {
          "remote_cluster": "remote_cluster",
          "leader_index": "leader_index"
        },
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.follow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 94
    },
    "digest": "9ad38ab4d9c3983e97e8c38fec611f10",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n  \"persistent\" : {\n    \"cluster\" : {\n      \"remote\" : {\n        \"leader\" : {\n          \"seeds\" : [\n            \"127.0.0.1:9300\" <1>\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "leader": {
                  "seeds": [
                    "127.0.0.1:9300"
                  ]
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 119
    },
    "digest": "cc0cca5556ec6224c7134c233734beed",
    "lang": "console",
    "found": [],
    "source": "GET /_remote/info",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_remote/info",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.remote_info"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 128
    },
    "digest": "741e6e2a7786f6c5ad12ee6f3ca35160",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"leader\" : {\n    \"seeds\" : [\n      \"127.0.0.1:9300\"\n    ],\n    \"connected\" : true, <1>\n    \"num_nodes_connected\" : 1, <2>\n    \"max_connections_per_cluster\" : 3,\n    \"initial_connect_timeout\" : \"30s\",\n    \"skip_unavailable\" : false,\n    \"mode\" : \"sniff\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 165
    },
    "digest": "74ed3197e0e77750f5255c6df0cc0fe5",
    "lang": "console",
    "found": [],
    "source": "PUT /server-metrics\n{\n  \"settings\" : {\n    \"index\" : {\n      \"number_of_shards\" : 1,\n      \"number_of_replicas\" : 0\n    }\n  },\n  \"mappings\" : {\n    \"properties\" : {\n      \"@timestamp\" : {\n        \"type\" : \"date\"\n      },\n      \"accept\" : {\n        \"type\" : \"long\"\n      },\n      \"deny\" : {\n        \"type\" : \"long\"\n      },\n      \"host\" : {\n        \"type\" : \"keyword\"\n      },\n      \"response\" : {\n        \"type\" : \"float\"\n      },\n      \"service\" : {\n        \"type\" : \"keyword\"\n      },\n      \"total\" : {\n        \"type\" : \"long\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/server-metrics",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "number_of_shards": 1,
              "number_of_replicas": 0
            }
          },
          "mappings": {
            "properties": {
              "@timestamp": {
                "type": "date"
              },
              "accept": {
                "type": "long"
              },
              "deny": {
                "type": "long"
              },
              "host": {
                "type": "keyword"
              },
              "response": {
                "type": "float"
              },
              "service": {
                "type": "keyword"
              },
              "total": {
                "type": "long"
              }
            }
          }
        },
        "params": {
          "index": "server-metrics"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 214
    },
    "digest": "278da0495c9008e6d9f25a5d5f0339b7",
    "lang": "console",
    "found": [],
    "source": "PUT /server-metrics-copy/_ccr/follow?wait_for_active_shards=1\n{\n  \"remote_cluster\" : \"leader\",\n  \"leader_index\" : \"server-metrics\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/server-metrics-copy/_ccr/follow",
        "query": {
          "wait_for_active_shards": "1"
        },
        "body": {
          "remote_cluster": "leader",
          "leader_index": "server-metrics"
        },
        "params": {
          "index": "server-metrics-copy"
        },
        "api": "ccr.follow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/getting-started.asciidoc",
      "line": 276
    },
    "digest": "6b104a66ab47fc1e1f24a5738f82feb4",
    "lang": "console",
    "found": [],
    "source": "PUT /_ccr/auto_follow/beats\n{\n  \"remote_cluster\" : \"leader\",\n  \"leader_index_patterns\" :\n  [\n    \"metricbeat-*\", <1>\n    \"packetbeat-*\" <2>\n  ],\n  \"follow_index_pattern\" : \"{{leader_index}}-copy\" <3>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ccr/auto_follow/beats",
        "query": null,
        "body": {
          "remote_cluster": "leader",
          "leader_index_patterns": [
            "metricbeat-*",
            "packetbeat-*"
          ],
          "follow_index_pattern": "{{leader_index}}-copy"
        },
        "params": {
          "name": "beats"
        },
        "api": "ccr.put_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 24
    },
    "digest": "92b3749a473cf2e7ff4055316662a4fe",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_backup\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_backup_location\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup",
        "query": null,
        "body": {
          "type": "fs",
          "settings": {
            "location": "my_backup_location"
          }
        },
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 38
    },
    "digest": "ff930e6409b6a923ef1c9e7fc99f24cc",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.get_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 45
    },
    "digest": "321f12509469d89609b6d398b8d94e45",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_backup\": {\n    \"type\": \"fs\",\n    \"settings\": {\n      \"location\": \"my_backup_location\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 63
    },
    "digest": "b9e4f7a80d21c85f88f578219df8e192",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/repo*,*backup*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/repo*,*backup*",
        "query": null,
        "body": null,
        "params": {
          "repository": "repo*,*backup*"
        },
        "api": "snapshot.get_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 71
    },
    "digest": "0d754b0d8d13c6d39ea353978dfe5992",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot",
        "query": null,
        "body": null,
        "params": null,
        "api": "snapshot.get_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 78
    },
    "digest": "37432cda12eb63ce59d186b55233c6e1",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/_all",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/_all",
        "query": null,
        "body": null,
        "params": {
          "repository": "_all"
        },
        "api": "snapshot.get_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 111
    },
    "digest": "44b410249d477c640c127bfc7320e365",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_fs_backup\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"/mount/backups/my_fs_backup_location\",\n        \"compress\": true\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_fs_backup",
        "query": null,
        "body": {
          "type": "fs",
          "settings": {
            "location": "/mount/backups/my_fs_backup_location",
            "compress": true
          }
        },
        "params": {
          "repository": "my_fs_backup"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 127
    },
    "digest": "8988215f3a4fc4b7a7ef4a9c5be3391e",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_fs_backup\n{\n    \"type\": \"fs\",\n    \"settings\": {\n        \"location\": \"my_fs_backup_location\",\n        \"compress\": true\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_fs_backup",
        "query": null,
        "body": {
          "type": "fs",
          "settings": {
            "location": "my_fs_backup_location",
            "compress": true
          }
        },
        "params": {
          "repository": "my_fs_backup"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 205
    },
    "digest": "98ee9bfa32b64ca22e4338544b36c370",
    "lang": "console",
    "found": [],
    "source": "PUT _snapshot/my_src_only_repository\n{\n  \"type\": \"source\",\n  \"settings\": {\n    \"delegate_type\": \"fs\",\n    \"location\": \"my_backup_location\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_src_only_repository",
        "query": null,
        "body": {
          "type": "source",
          "settings": {
            "delegate_type": "fs",
            "location": "my_backup_location"
          }
        },
        "params": {
          "repository": "my_src_only_repository"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 236
    },
    "digest": "f1a7cf532da3a8f9a52a401a90e3a998",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_unverified_backup?verify=false\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_unverified_backup_location\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_unverified_backup",
        "query": {
          "verify": "false"
        },
        "body": {
          "type": "fs",
          "settings": {
            "location": "my_unverified_backup_location"
          }
        },
        "params": {
          "repository": "my_unverified_backup"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 250
    },
    "digest": "337cd2c3f9e11665f00786705037f86c",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_unverified_backup/_verify",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_unverified_backup/_verify",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_unverified_backup"
        },
        "api": "snapshot.verify_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 267
    },
    "digest": "6aca241c0361d26f134712821e2d09a9",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_repository/_cleanup",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_repository/_cleanup",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_repository"
        },
        "api": "snapshot.cleanup_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/register-repository.asciidoc",
      "line": 275
    },
    "digest": "5e309dfb203bf2b89cd8a4c353c4b6f5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"results\": {\n    \"deleted_bytes\": 20,\n    \"deleted_blobs\": 5\n  }\n}"
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 27
    },
    "digest": "2ab78817eacb5030a447e7fac6b91591",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_backup/snapshot_1?wait_for_completion=true",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": {
          "wait_for_completion": "true"
        },
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 40
    },
    "digest": "4a0353692bb14c5fccdc97903af0aa13",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_backup/snapshot_2?wait_for_completion=true\n{\n  \"indices\": \"index_1,index_2\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": false,\n  \"metadata\": {\n    \"taken_by\": \"kimchy\",\n    \"taken_because\": \"backup before upgrading\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup/snapshot_2",
        "query": {
          "wait_for_completion": "true"
        },
        "body": {
          "indices": "index_1,index_2",
          "ignore_unavailable": true,
          "include_global_state": false,
          "metadata": {
            "taken_by": "kimchy",
            "taken_because": "backup before upgrading"
          }
        },
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_2"
        },
        "api": "snapshot.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 72
    },
    "digest": "7eb0303e39243fbb9bf51a99270cd022",
    "lang": "console",
    "found": [],
    "source": "# PUT /_snapshot/my_backup/<snapshot-{now/d}>\nPUT /_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_backup/%3Csnapshot-%7Bnow%2Fd%7D%3E",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "%3Csnapshot-%7Bnow%2Fd%7D%3E"
        },
        "api": "snapshot.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 102
    },
    "digest": "020c56e520ff6556ebfaf98efaef56aa",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 139
    },
    "digest": "0b77ebfb06c63ccbad857b39bb4ff851",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_*,some_other_snapshot",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_*,some_other_snapshot",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_*,some_other_snapshot"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 147
    },
    "digest": "fb224f0ae2a03567b6d9b165e7dd24b6",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/_all",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/_all",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "_all"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 167
    },
    "digest": "677fdf84ac97bb107207b6966143144b",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/_all\nGET /_snapshot/my_backup,my_fs_backup\nGET /_snapshot/my*/snap*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/_all",
        "query": null,
        "body": null,
        "params": {
          "repository": "_all"
        },
        "api": "snapshot.get_repository"
      },
      {
        "method": "GET",
        "url": "/_snapshot/my_backup,my_fs_backup",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup,my_fs_backup"
        },
        "api": "snapshot.get_repository"
      },
      {
        "method": "GET",
        "url": "/_snapshot/my*/snap*",
        "query": null,
        "body": null,
        "params": {
          "repository": "my*",
          "snapshot": "snap*"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 177
    },
    "digest": "155c438e215890cdcb4879eaaadf4046",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/_current",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/_current",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "_current"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 185
    },
    "digest": "0784fbe88299be4f02eaa86368e93203",
    "lang": "console",
    "found": [],
    "source": "DELETE /_snapshot/my_backup/snapshot_2",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_snapshot/my_backup/snapshot_2",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_2"
        },
        "api": "snapshot.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/take-snapshot.asciidoc",
      "line": 199
    },
    "digest": "2b8d2065be3002b0be26598d6ad803a6",
    "lang": "console",
    "found": [],
    "source": "DELETE /_snapshot/my_backup",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_snapshot/my_backup",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.delete_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 28
    },
    "digest": "853ca73db9b596cc4ddda66b3ec8faa2",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_backup/snapshot_1/_restore",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_backup/snapshot_1/_restore",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.restore"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 45
    },
    "digest": "47dcf95e3d398b9bdcb0a483f705bb4b",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_backup/snapshot_1/_restore\n{\n  \"indices\": \"index_1,index_2\",\n  \"ignore_unavailable\": true,\n  \"include_global_state\": true,\n  \"rename_pattern\": \"index_(.+)\",\n  \"rename_replacement\": \"restored_index_$1\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_backup/snapshot_1/_restore",
        "query": null,
        "body": {
          "indices": "index_1,index_2",
          "ignore_unavailable": true,
          "include_global_state": true,
          "rename_pattern": "index_(.+)",
          "rename_replacement": "restored_index_$1"
        },
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.restore"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 83
    },
    "digest": "922df55507c66533fcadc850eecabcff",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_backup/snapshot_1/_restore\n{\n  \"indices\": \"index_1\",\n  \"ignore_unavailable\": true,\n  \"index_settings\": {\n    \"index.number_of_replicas\": 0\n  },\n  \"ignore_index_settings\": [\n    \"index.refresh_interval\"\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_backup/snapshot_1/_restore",
        "query": null,
        "body": {
          "indices": "index_1",
          "ignore_unavailable": true,
          "index_settings": {
            "index.number_of_replicas": 0
          },
          "ignore_index_settings": [
            "index.refresh_interval"
          ]
        },
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.restore"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 128
    },
    "digest": "1ae301364751c376b3d26581a36d8975",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/_status",
        "query": null,
        "body": null,
        "params": null,
        "api": "snapshot.status"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 137
    },
    "digest": "db1913b97109b86cfc5efc7cfcd65d93",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/_status",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup"
        },
        "api": "snapshot.status"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 146
    },
    "digest": "e566ca0098be82a2847c17069711a822",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1/_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1/_status",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.status"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 154
    },
    "digest": "fd7dbd4240410907a1d6823eb1ee3b03",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"snapshots\": [\n    {\n      \"snapshot\": \"snapshot_1\",\n      \"repository\": \"my_backup\",\n      \"uuid\": \"XuBo4l4ISYiVg0nYUen9zg\",\n      \"state\": \"SUCCESS\",\n      \"include_global_state\": true,\n      \"shards_stats\": {\n        \"initializing\": 0,\n        \"started\": 0,\n        \"finalizing\": 0,\n        \"done\": 5,\n        \"failed\": 0,\n        \"total\": 5\n      },\n      \"stats\": {\n        \"incremental\": {\n          \"file_count\": 8,\n          \"size_in_bytes\": 4704\n        },\n        \"processed\": {\n          \"file_count\": 7,\n          \"size_in_bytes\": 4254\n        },\n        \"total\": {\n          \"file_count\": 8,\n          \"size_in_bytes\": 4704\n        },\n        \"start_time_in_millis\": 1526280280355,\n        \"time_in_millis\": 358\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "snapshot-restore/restore-snapshot.asciidoc",
      "line": 202
    },
    "digest": "2432f86346177533cabdabbd4eb41b30",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1,snapshot_2/_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1,snapshot_2/_status",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1,snapshot_2"
        },
        "api": "snapshot.status"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/monitor-snapshot-restore.asciidoc",
      "line": 32
    },
    "digest": "020c56e520ff6556ebfaf98efaef56aa",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/monitor-snapshot-restore.asciidoc",
      "line": 43
    },
    "digest": "e566ca0098be82a2847c17069711a822",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_backup/snapshot_1/_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_backup/snapshot_1/_status",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.status"
      }
    ]
  },
  {
    "source_location": {
      "file": "snapshot-restore/monitor-snapshot-restore.asciidoc",
      "line": 72
    },
    "digest": "86c723fc6212d34166661e7dac223491",
    "lang": "console",
    "found": [],
    "source": "DELETE /_snapshot/my_backup/snapshot_1",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_snapshot/my_backup/snapshot_1",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_backup",
          "snapshot": "snapshot_1"
        },
        "api": "snapshot.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/index.asciidoc",
      "line": 38
    },
    "digest": "1d7abeea98f6ed64cc8371794c90a921",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/slm-admin\n{\n  \"cluster\": [\"manage_slm\", \"cluster:admin/snapshot/*\"],\n  \"indices\": [\n    {\n      \"names\": [\".slm-history-*\"],\n      \"privileges\": [\"all\"]\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/slm-admin",
        "query": null,
        "body": {
          "cluster": [
            "manage_slm",
            "cluster:admin/snapshot/*"
          ],
          "indices": [
            {
              "names": [
                ".slm-history-*"
              ],
              "privileges": [
                "all"
              ]
            }
          ]
        },
        "params": {
          "name": "slm-admin"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/index.asciidoc",
      "line": 56
    },
    "digest": "ef76d0e4cdc2881c161a5557a98a3446",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/slm-read-only\n{\n  \"cluster\": [\"read_slm\"],\n  \"indices\": [\n    {\n      \"names\": [\".slm-history-*\"],\n      \"privileges\": [\"read\"]\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/slm-read-only",
        "query": null,
        "body": {
          "cluster": [
            "read_slm"
          ],
          "indices": [
            {
              "names": [
                ".slm-history-*"
              ],
              "privileges": [
                "read"
              ]
            }
          ]
        },
        "params": {
          "name": "slm-read-only"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/getting-started-slm.asciidoc",
      "line": 23
    },
    "digest": "89b72dd7f747f6297c2b089e8bc807be",
    "lang": "console",
    "found": [],
    "source": "PUT /_snapshot/my_repository\n{\n  \"type\": \"fs\",\n  \"settings\": {\n    \"location\": \"my_backup_location\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_snapshot/my_repository",
        "query": null,
        "body": {
          "type": "fs",
          "settings": {
            "location": "my_backup_location"
          }
        },
        "params": {
          "repository": "my_repository"
        },
        "api": "snapshot.create_repository"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/getting-started-slm.asciidoc",
      "line": 48
    },
    "digest": "0da01289c561448254d521504d5122dd",
    "lang": "console",
    "found": [],
    "source": "PUT /_slm/policy/nightly-snapshots\n{\n  \"schedule\": \"0 30 2 * * ?\", <1>\n  \"name\": \"<nightly-snap-{now/d}>\", <2>\n  \"repository\": \"my_repository\", <3>\n  \"config\": { <4>\n    \"indices\": [\"*\"] <5>\n  },\n  \"retention\": { <6>\n    \"expire_after\": \"30d\", <7>\n    \"min_count\": 5, <8>\n    \"max_count\": 50 <9>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_slm/policy/nightly-snapshots",
        "query": null,
        "body": {
          "schedule": "0 30 2 * * ?",
          "name": "<nightly-snap-{now/d}>",
          "repository": "my_repository",
          "config": {
            "indices": [
              "*"
            ]
          },
          "retention": {
            "expire_after": "30d",
            "min_count": 5,
            "max_count": 50
          }
        },
        "params": {
          "policy_id": "nightly-snapshots"
        },
        "api": "slm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/getting-started-slm.asciidoc",
      "line": 105
    },
    "digest": "af5ff39759d3af0525d941634a6cdb82",
    "lang": "console",
    "found": [],
    "source": "POST /_slm/policy/nightly-snapshots/_execute",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "slm/getting-started-slm.asciidoc",
      "line": 117
    },
    "digest": "f1b545d3c3eeedf8ae09c56070c26053",
    "lang": "console",
    "found": [],
    "source": "GET /_slm/policy/nightly-snapshots?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/policy/nightly-snapshots",
        "query": {
          "human": true
        },
        "body": null,
        "params": {
          "policy_id": "nightly-snapshots"
        },
        "api": "slm.get_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/getting-started-slm.asciidoc",
      "line": 127
    },
    "digest": "d95c4eab006aa569e554851fd0ac324f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nightly-snapshots\" : {\n    \"version\": 1,\n    \"modified_date\": \"2019-04-23T01:30:00.000Z\",\n    \"modified_date_millis\": 1556048137314,\n    \"policy\" : {\n      \"schedule\": \"0 30 1 * * ?\",\n      \"name\": \"<nightly-snap-{now/d}>\",\n      \"repository\": \"my_repository\",\n      \"config\": {\n        \"indices\": [\"*\"],\n      },\n      \"retention\": {\n        \"expire_after\": \"30d\",\n        \"min_count\": 5,\n        \"max_count\": 50\n      }\n    },\n    \"last_success\": { <1>\n      \"snapshot_name\": \"nightly-snap-2019.04.24-tmtnyjtrsxkhbrrdcgg18a\", <2>\n      \"time_string\": \"2019-04-24T16:43:49.316Z\",\n      \"time\": 1556124229316\n    } ,\n    \"last_failure\": { <3>\n      \"snapshot_name\": \"nightly-snap-2019.04.02-lohisb5ith2n8hxacaq3mw\",\n      \"time_string\": \"2019-04-02T01:30:00.000Z\",\n      \"time\": 1556042030000,\n      \"details\": \"{\\\"type\\\":\\\"index_not_found_exception\\\",\\\"reason\\\":\\\"no such index [important]\\\",\\\"resource.type\\\":\\\"index_or_alias\\\",\\\"resource.id\\\":\\\"important\\\",\\\"index_uuid\\\":\\\"_na_\\\",\\\"index\\\":\\\"important\\\",\\\"stack_trace\\\":\\\"[important] IndexNotFoundException[no such index [important]]\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.indexNotFoundException(IndexNameExpressionResolver.java:762)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.innerResolve(IndexNameExpressionResolver.java:714)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver$WildcardExpressionResolver.resolve(IndexNameExpressionResolver.java:670)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndices(IndexNameExpressionResolver.java:163)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndexNames(IndexNameExpressionResolver.java:142)\\\\n\\\\tat org.elasticsearch.cluster.metadata.IndexNameExpressionResolver.concreteIndexNames(IndexNameExpressionResolver.java:102)\\\\n\\\\tat org.elasticsearch.snapshots.SnapshotsService$1.execute(SnapshotsService.java:280)\\\\n\\\\tat org.elasticsearch.cluster.ClusterStateUpdateTask.execute(ClusterStateUpdateTask.java:47)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.executeTasks(MasterService.java:687)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.calculateTaskOutputs(MasterService.java:310)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService.runTasks(MasterService.java:210)\\\\n\\\\tat org.elasticsearch.cluster.service.MasterService$Batcher.run(MasterService.java:142)\\\\n\\\\tat org.elasticsearch.cluster.service.TaskBatcher.runIfNotProcessed(TaskBatcher.java:150)\\\\n\\\\tat org.elasticsearch.cluster.service.TaskBatcher$BatchedTask.run(TaskBatcher.java:188)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.ThreadContext$ContextPreservingRunnable.run(ThreadContext.java:688)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.runAndClean(PrioritizedEsThreadPoolExecutor.java:252)\\\\n\\\\tat org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:215)\\\\n\\\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\\\\n\\\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\\\\n\\\\tat java.base/java.lang.Thread.run(Thread.java:834)\\\\n\\\"}\"\n    } ,\n    \"next_execution\": \"2019-04-24T01:30:00.000Z\", <4>\n    \"next_execution_millis\": 1556048160000\n  }\n}"
  },
  {
    "source_location": {
      "file": "slm/slm-retention.asciidoc",
      "line": 31
    },
    "digest": "1527fe79aa1ae25a155a060bac788e7f",
    "lang": "console",
    "found": [],
    "source": "PUT /_slm/policy/daily-snapshots\n{\n  \"schedule\": \"0 30 1 * * ?\",\n  \"name\": \"<daily-snap-{now/d}>\",\n  \"repository\": \"my_repository\",\n  \"retention\": { <1>\n    \"expire_after\": \"30d\", <2>\n    \"min_count\": 5, <3>\n    \"max_count\": 50 <4>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_slm/policy/daily-snapshots",
        "query": null,
        "body": {
          "schedule": "0 30 1 * * ?",
          "name": "<daily-snap-{now/d}>",
          "repository": "my_repository",
          "retention": {
            "expire_after": "30d",
            "min_count": 5,
            "max_count": 50
          }
        },
        "params": {
          "policy_id": "daily-snapshots"
        },
        "api": "slm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/slm-retention.asciidoc",
      "line": 80
    },
    "digest": "55e8ddf643726dec51531ada0bec7143",
    "lang": "console",
    "found": [],
    "source": "GET /_slm/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "slm.get_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/built-in-users.asciidoc",
      "line": 142
    },
    "digest": "6f0389ac52808df23bb6081a1acd4eed",
    "lang": "console",
    "found": [],
    "source": "PUT _security/user/logstash_system/_enable",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/user/logstash_system/_enable",
        "query": null,
        "body": null,
        "params": {
          "username": "logstash_system"
        },
        "api": "security.enable_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-active-directory-realm.asciidoc",
      "line": 178
    },
    "digest": "21e95d29bc37deb5689a654aa323b4ba",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/admins\n{\n  \"roles\" : [ \"monitoring\" , \"user\" ],\n  \"rules\" : { \"field\" : {\n    \"groups\" : \"cn=admins,dc=example,dc=com\" <1>\n  } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/admins",
        "query": null,
        "body": {
          "roles": [
            "monitoring",
            "user"
          ],
          "rules": {
            "field": {
              "groups": "cn=admins,dc=example,dc=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "admins"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-active-directory-realm.asciidoc",
      "line": 192
    },
    "digest": "bd0d30a7683037e1ebadd163514765d4",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/basic_users\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"any\": [\n    { \"field\" : {\n      \"groups\" : \"cn=users,dc=example,dc=com\" <1>\n    } },\n    { \"field\" : {\n      \"dn\" : \"cn=John Doe,cn=contractors,dc=example,dc=com\" <2>\n    } }\n  ] },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/basic_users",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "rules": {
            "any": [
              {
                "field": {
                  "groups": "cn=users,dc=example,dc=com"
                }
              },
              {
                "field": {
                  "dn": "cn=John Doe,cn=contractors,dc=example,dc=com"
                }
              }
            ]
          },
          "enabled": true
        },
        "params": {
          "name": "basic_users"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-ldap-realm.asciidoc",
      "line": 138
    },
    "digest": "21e95d29bc37deb5689a654aa323b4ba",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/admins\n{\n  \"roles\" : [ \"monitoring\" , \"user\" ],\n  \"rules\" : { \"field\" : {\n    \"groups\" : \"cn=admins,dc=example,dc=com\" <1>\n  } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/admins",
        "query": null,
        "body": {
          "roles": [
            "monitoring",
            "user"
          ],
          "rules": {
            "field": {
              "groups": "cn=admins,dc=example,dc=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "admins"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-ldap-realm.asciidoc",
      "line": 152
    },
    "digest": "38ffa96674b5fd4042589af0ebb0437b",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/basic_users\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"field\" : {\n    \"groups\" : \"cn=users,dc=example,dc=com\" <1>\n  } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/basic_users",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "rules": {
            "field": {
              "groups": "cn=users,dc=example,dc=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "basic_users"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-pki-realm.asciidoc",
      "line": 163
    },
    "digest": "70bbe14bc4d5a5d58e81ab2b02408817",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/users\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"field\" : {\n    \"dn\" : \"cn=John Doe,ou=example,o=com\" <1>\n  } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/users",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "rules": {
            "field": {
              "dn": "cn=John Doe,ou=example,o=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "users"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-pki-realm.asciidoc",
      "line": 271
    },
    "digest": "1f8a6d2cc57ed8997a52354aca371aac",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/direct_pki_only\n{\n  \"roles\" : [ \"role_for_pki1_direct\" ],\n  \"rules\" : {\n    \"all\": [\n      {\n        \"field\": {\"realm.name\": \"pki1\"}\n      },\n      {\n        \"field\": {\n          \"metadata.pki_delegated_by_user\": null <1>\n        }\n      }\n    ]\n  },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/direct_pki_only",
        "query": null,
        "body": {
          "roles": [
            "role_for_pki1_direct"
          ],
          "rules": {
            "all": [
              {
                "field": {
                  "realm.name": "pki1"
                }
              },
              {
                "field": {
                  "metadata.pki_delegated_by_user": null
                }
              }
            ]
          },
          "enabled": true
        },
        "params": {
          "name": "direct_pki_only"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/configuring-kerberos-realm.asciidoc",
      "line": 151
    },
    "digest": "9584b042223982e0bfde8d12d42c9705",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/kerbrolemapping\n{\n  \"roles\" : [ \"monitoring_user\" ],\n  \"enabled\": true,\n  \"rules\" : {\n    \"field\" : { \"username\" : \"user@REALM\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/kerbrolemapping",
        "query": null,
        "body": {
          "roles": [
            "monitoring_user"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "username": "user@REALM"
            }
          }
        },
        "params": {
          "name": "kerbrolemapping"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 646
    },
    "digest": "862907653d1c18d2e80eff7f421200e2",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/saml-example\n{\n  \"roles\": [ \"example_role\" ], <1>\n  \"enabled\": true,\n  \"rules\": {\n    \"field\": { \"realm.name\": \"saml1\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/saml-example",
        "query": null,
        "body": {
          "roles": [
            "example_role"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "realm.name": "saml1"
            }
          }
        },
        "params": {
          "name": "saml-example"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 685
    },
    "digest": "3806cae804fe77bf38b85561592c745b",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/saml-finance\n{\n  \"roles\": [ \"finance_data\" ],\n  \"enabled\": true,\n  \"rules\": { \"all\": [\n        { \"field\": { \"realm.name\": \"saml1\" } },\n        { \"field\": { \"groups\": \"finance-team\" } }\n  ] }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/saml-finance",
        "query": null,
        "body": {
          "roles": [
            "finance_data"
          ],
          "enabled": true,
          "rules": {
            "all": [
              {
                "field": {
                  "realm.name": "saml1"
                }
              },
              {
                "field": {
                  "groups": "finance-team"
                }
              }
            ]
          }
        },
        "params": {
          "name": "saml-finance"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 898
    },
    "digest": "49cb3f48a0097bfc597c52fa51c6d379",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/saml-service-role\n{\n  \"cluster\" : [\"manage_saml\", \"manage_token\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/saml-service-role",
        "query": null,
        "body": {
          "cluster": [
            "manage_saml",
            "manage_token"
          ]
        },
        "params": {
          "name": "saml-service-role"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 906
    },
    "digest": "b2b26f8568c5dba7649e79f09b859272",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/saml-service-user\n{\n  \"password\" : \"<somePasswordHere>\",\n  \"roles\"    : [\"saml-service-role\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/saml-service-user",
        "query": null,
        "body": {
          "password": "<somePasswordHere>",
          "roles": [
            "saml-service-role"
          ]
        },
        "params": {
          "username": "saml-service-user"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 926
    },
    "digest": "a5dfcfd1cfb3558e7912456669c92eee",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/prepare\n{\n  \"realm\" : \"saml1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 949
    },
    "digest": "8e208098a0156c4c92afe0a06960b230",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/authenticate\n{\n  \"content\" : \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMD.....\",\n  \"ids\" : [\"4fee3b046395c4e751011e97f8900b5273d56685\"]\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 978
    },
    "digest": "9eda9c39428b0c2c53cbd8ee7ae0f888",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/authenticate\n{\n  \"content\" : \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMD.....\",\n  \"ids\" : []\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 993
    },
    "digest": "553904c175a76d5ba83bc5d46fff7373",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/logout\n{\n  \"token\" : \"46ToAxZVaXVVZTVKOVF5YU04ZFJVUDVSZlV3\",\n  \"refresh_token\": \"mJdXLtmvTUSpoLwMvdBt_w\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/saml-guide.asciidoc",
      "line": 1011
    },
    "digest": "a71154ea11a5214f409ecfd118e9b5e3",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/invalidate\n{\n  \"query\" : \"SAMLRequest=nZFda4MwFIb%2FiuS%2BmviRpqFaClKQdbvo2g12M2KMraCJ9cRR9utnW4Wyi13sMie873MeznJ1aWrnS3VQGR0j4mLkKC1NUeljjA77zYyhVbIE0dR%2By7fmaHq7U%2BdegXWGpAZ%2B%2F4pR32luBFTAtWgUcCv56%2Fp5y30X87Yz1khTIycdgpUW9kY7WdsC9zxoXTvMvWuVV98YyMnSGH2SYE5pwALBIr9QKiwDGpW0oGVUznGeMyJZKFkQ4jBf5HnhUymjIhzCAL3KNFihbYx8TBYzzGaY7EnIyZwHzCWMfiDnbRIftkSjJr%2BFu0e9v%2B0EgOquRiiZjKpiVFp6j50T4WXoyNJ%2FEWC9fdqc1t%2F1%2B2F3aUpjzhPiXpqMz1%2FHSn4A&SigAlg=http%3A%2F%2Fwww.w3.org%2F2001%2F04%2Fxmldsig-more%23rsa-sha256&Signature=MsAYz2NFdovMG2mXf6TSpu5vlQQyEJAg%2B4KCwBqJTmrb3yGXKUtIgvjqf88eCAK32v3eN8vupjPC8LglYmke1ZnjK0%2FKxzkvSjTVA7mMQe2AQdKbkyC038zzRq%2FYHcjFDE%2Bz0qISwSHZY2NyLePmwU7SexEXnIz37jKC6NMEhus%3D\",\n  \"realm\" : \"saml1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 427
    },
    "digest": "10de9fd4a38755020a07c4ec964d44c9",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/oidc-example\n{\n  \"roles\": [ \"example_role\" ], <1>\n  \"enabled\": true,\n  \"rules\": {\n    \"field\": { \"realm.name\": \"oidc1\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/oidc-example",
        "query": null,
        "body": {
          "roles": [
            "example_role"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "realm.name": "oidc1"
            }
          }
        },
        "params": {
          "name": "oidc-example"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 466
    },
    "digest": "f3ab820e1f2f54ea718017aeae865742",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/oidc-finance\n{\n  \"roles\": [ \"finance_data\" ],\n  \"enabled\": true,\n  \"rules\": { \"all\": [\n        { \"field\": { \"realm.name\": \"oidc1\" } },\n        { \"field\": { \"groups\": \"finance-team\" } }\n  ] }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/oidc-finance",
        "query": null,
        "body": {
          "roles": [
            "finance_data"
          ],
          "enabled": true,
          "rules": {
            "all": [
              {
                "field": {
                  "realm.name": "oidc1"
                }
              },
              {
                "field": {
                  "groups": "finance-team"
                }
              }
            ]
          }
        },
        "params": {
          "name": "oidc-finance"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 601
    },
    "digest": "a325f31e94fb1e8739258910593504a8",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/facilitator-role\n{\n  \"cluster\" : [\"manage_oidc\", \"manage_token\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/facilitator-role",
        "query": null,
        "body": {
          "cluster": [
            "manage_oidc",
            "manage_token"
          ]
        },
        "params": {
          "name": "facilitator-role"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 610
    },
    "digest": "53e4ac5a4009fd21024f4b31e54aa83f",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/facilitator\n{\n  \"password\" : \"<somePasswordHere>\",\n  \"roles\"    : [ \"facilitator-role\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/facilitator",
        "query": null,
        "body": {
          "password": "<somePasswordHere>",
          "roles": [
            "facilitator-role"
          ]
        },
        "params": {
          "username": "facilitator"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 630
    },
    "digest": "e3019fd5f23458ae49ad9854c97d321c",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/prepare\n{\n  \"realm\" : \"oidc1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 653
    },
    "digest": "9c01db07c9ac395b6370e3b33965c21f",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/authenticate\n{\n  \"redirect_uri\" : \"https://oidc-kibana.elastic.co:5603/api/security/oidc/callback?code=jtI3Ntt8v3_XvcLzCFGq&state=4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"state\" : \"4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"nonce\" : \"WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM\",\n  \"realm\" : \"oidc1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authentication/oidc-guide.asciidoc",
      "line": 671
    },
    "digest": "2a1eece9a59ac1773edcf0a932c26de0",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/logout\n{\n  \"token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/managing-roles.asciidoc",
      "line": 158
    },
    "digest": "d3e5edac5b461020017fd9d8ec7a91fa",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/clicks_admin\n{\n  \"run_as\": [ \"clicks_watcher_1\" ],\n  \"cluster\": [ \"monitor\" ],\n  \"indices\": [\n    {\n      \"names\": [ \"events-*\" ],\n      \"privileges\": [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"category\", \"@timestamp\", \"message\" ]\n      },\n      \"query\": \"{\\\"match\\\": {\\\"category\\\": \\\"click\\\"}}\"\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/clicks_admin",
        "query": null,
        "body": {
          "run_as": [
            "clicks_watcher_1"
          ],
          "cluster": [
            "monitor"
          ],
          "indices": [
            {
              "names": [
                "events-*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "category",
                  "@timestamp",
                  "message"
                ]
              },
              "query": "{\"match\": {\"category\": \"click\"}}"
            }
          ]
        },
        "params": {
          "name": "clicks_admin"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/document-level-security.asciidoc",
      "line": 18
    },
    "digest": "6365312d470426cab1b77e9ffde49170",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/click_role\n{\n  \"indices\": [\n    {\n      \"names\": [ \"events-*\" ],\n      \"privileges\": [ \"read\" ],\n      \"query\": \"{\\\"match\\\": {\\\"category\\\": \\\"click\\\"}}\"\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/click_role",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "events-*"
              ],
              "privileges": [
                "read"
              ],
              "query": "{\"match\": {\"category\": \"click\"}}"
            }
          ]
        },
        "params": {
          "name": "click_role"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/document-level-security.asciidoc",
      "line": 41
    },
    "digest": "c79e8ee86b332302b25c5c1f5f4f89d7",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/dept_role\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"term\" : { \"department_id\" : 12 }\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/dept_role",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "query": {
                "term": {
                  "department_id": 12
                }
              }
            }
          ]
        },
        "params": {
          "name": "dept_role"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 18
    },
    "digest": "976e5f9baf81bd6ca0e9f80916a0a4f9",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role1\n{\n  \"indices\": [\n    {\n      \"names\": [ \"events-*\" ],\n      \"privileges\": [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"category\", \"@timestamp\", \"message\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role1",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "events-*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "category",
                  "@timestamp",
                  "message"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role1"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 43
    },
    "digest": "7c9076f3e93a8f61189783c736bf6082",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role2\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"event_*\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role2",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "event_*"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role2"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 77
    },
    "digest": "d7d92816cac64b7c70d72b0000eeeeea",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role3\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"customer.handle\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role3",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "customer.handle"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role3"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 96
    },
    "digest": "bb28d1f7f3f09f5061d7f4351aee89fc",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role4\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"customer.*\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role4",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "customer.*"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role4"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 114
    },
    "digest": "7a987cd13383bdc990155d7bd5fb221e",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role5\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\" : [ \"*\"],\n        \"except\": [ \"customer.handle\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role5",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "*"
                ],
                "except": [
                  "customer.handle"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role5"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 142
    },
    "digest": "962e6187bbd71c5749376efed04b65ba",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role6\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"except\": [ \"customer.handle\" ],\n        \"grant\" : [ \"customer.*\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role6",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "except": [
                  "customer.handle"
                ],
                "grant": [
                  "customer.*"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role6"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/field-level-security.asciidoc",
      "line": 169
    },
    "digest": "a1acf454bd6477183ce27ace872deb46",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/test_role7\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\": [ \"a.*\" ],\n        \"except\" : [ \"a.b*\" ]\n      }\n    }\n  ]\n}\n\nPOST /_security/role/test_role8\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"*\" ],\n      \"privileges\" : [ \"read\" ],\n      \"field_security\" : {\n        \"grant\": [ \"a.b*\" ],\n        \"except\" : [ \"a.b.c*\" ]\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/test_role7",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "a.*"
                ],
                "except": [
                  "a.b*"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role7"
        },
        "api": "security.put_role"
      },
      {
        "method": "POST",
        "url": "/_security/role/test_role8",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "*"
              ],
              "privileges": [
                "read"
              ],
              "field_security": {
                "grant": [
                  "a.b*"
                ],
                "except": [
                  "a.b.c*"
                ]
              }
            }
          ]
        },
        "params": {
          "name": "test_role8"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/alias-privileges.asciidoc",
      "line": 30
    },
    "digest": "195fe9fadf952ddd7a69c8aaf98d47a1",
    "lang": "console",
    "found": [],
    "source": "GET /current_year/_doc/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/current_year/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "current_year",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/alias-privileges.asciidoc",
      "line": 56
    },
    "digest": "c4d60fd70ef1be46616a0d4e7578d8b9",
    "lang": "console",
    "found": [],
    "source": "PUT /2015\n{\n    \"aliases\" : {\n        \"current_year\" : {}\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/2015",
        "query": null,
        "body": {
          "aliases": {
            "current_year": {}
          }
        },
        "params": {
          "index": "2015"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/alias-privileges.asciidoc",
      "line": 68
    },
    "digest": "06f6cb6e20d2faf6599cfe1f39c6c56b",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"index\" : \"2015\", \"alias\" : \"current_year\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "2015",
                "alias": "current_year"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/mapping-roles.asciidoc",
      "line": 119
    },
    "digest": "f2359acfb6eaa919125463cc1d3a7cd1",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/admins\n{\n  \"roles\" : [ \"monitoring\", \"user\" ],\n  \"rules\" : { \"field\" : { \"groups\" : \"cn=admins,dc=example,dc=com\" } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/admins",
        "query": null,
        "body": {
          "roles": [
            "monitoring",
            "user"
          ],
          "rules": {
            "field": {
              "groups": "cn=admins,dc=example,dc=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "admins"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/mapping-roles.asciidoc",
      "line": 129
    },
    "digest": "3ea33023474e77d73ac0540e3a02b0b2",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/basic_users\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"any\" : [\n      { \"field\" : { \"dn\" : \"cn=John Doe,cn=contractors,dc=example,dc=com\" } },\n      { \"field\" : { \"groups\" : \"cn=users,dc=example,dc=com\" } }\n  ] },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/basic_users",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "rules": {
            "any": [
              {
                "field": {
                  "dn": "cn=John Doe,cn=contractors,dc=example,dc=com"
                }
              },
              {
                "field": {
                  "groups": "cn=users,dc=example,dc=com"
                }
              }
            ]
          },
          "enabled": true
        },
        "params": {
          "name": "basic_users"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/mapping-roles.asciidoc",
      "line": 161
    },
    "digest": "81ee2ad368208c4c78098292547b0577",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/admin_user\n{\n  \"roles\" : [ \"monitoring\" ],\n  \"rules\" : { \"field\" : { \"dn\" : \"cn=Admin,ou=example,o=com\" } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/admin_user",
        "query": null,
        "body": {
          "roles": [
            "monitoring"
          ],
          "rules": {
            "field": {
              "dn": "cn=Admin,ou=example,o=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "admin_user"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/mapping-roles.asciidoc",
      "line": 171
    },
    "digest": "87846c3ddacab1da4af626ae8099e4be",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/role_mapping/basic_user\n{\n  \"roles\" : [ \"user\" ],\n  \"rules\" : { \"field\" : { \"dn\" : \"cn=John Doe,ou=example,o=com\" } },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/role_mapping/basic_user",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "rules": {
            "field": {
              "dn": "cn=John Doe,ou=example,o=com"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "basic_user"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/role-templates.asciidoc",
      "line": 16
    },
    "digest": "fa154ca3d40df55e3f40d6636fe805de",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/example1\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"my_index\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"template\" : {\n          \"source\" : {\n            \"term\" : { \"acl.username\" : \"{{_user.username}}\" }\n          }\n        }\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/example1",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "my_index"
              ],
              "privileges": [
                "read"
              ],
              "query": {
                "template": {
                  "source": {
                    "term": {
                      "acl.username": "{{_user.username}}"
                    }
                  }
                }
              }
            }
          ]
        },
        "params": {
          "name": "example1"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/authorization/role-templates.asciidoc",
      "line": 52
    },
    "digest": "91b0ce11b58f1d3d8bdfe11d38b820fa",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/example2\n{\n  \"indices\" : [\n    {\n      \"names\" : [ \"my_index\" ],\n      \"privileges\" : [ \"read\" ],\n      \"query\" : {\n        \"template\" : {\n          \"source\" : {\n            \"term\" : { \"group.id\" : \"{{_user.metadata.group_id}}\" }\n          }\n        }\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/example2",
        "query": null,
        "body": {
          "indices": [
            {
              "names": [
                "my_index"
              ],
              "privileges": [
                "read"
              ],
              "query": {
                "template": {
                  "source": {
                    "term": {
                      "group.id": "{{_user.metadata.group_id}}"
                    }
                  }
                }
              }
            }
          ]
        },
        "params": {
          "name": "example2"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/auditing/output-logfile.asciidoc",
      "line": 27
    },
    "digest": "a465177ff9450120097e7f6cf13dbc33",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n  \"persistent\": {\n    \"logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail\": \"off\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "logger.org.elasticsearch.xpack.security.audit.logfile.DeprecatedLoggingAuditTrail": "off"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/using-ip-filtering.asciidoc",
      "line": 118
    },
    "digest": "d453198d420e84e4200f8f4f0ed6b83c",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n    \"persistent\" : {\n        \"xpack.security.transport.filter.allow\" : \"172.16.0.0/24\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.security.transport.filter.allow": "172.16.0.0/24"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/using-ip-filtering.asciidoc",
      "line": 130
    },
    "digest": "da9ffa564574978ea2b1e2bdb36bfd93",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n    \"persistent\" : {\n        \"xpack.security.transport.filter.enabled\" : false\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "xpack.security.transport.filter.enabled": false
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 54
    },
    "digest": "b13d05599a1c186137f81cad94f3fcc1",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster\": {\n      \"remote\": {\n        \"one\": {\n          \"seeds\": [ \"10.0.1.1:9300\" ]\n        },\n        \"two\": {\n          \"seeds\": [ \"10.0.2.1:9300\" ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster": {
              "remote": {
                "one": {
                  "seeds": [
                    "10.0.1.1:9300"
                  ]
                },
                "two": {
                  "seeds": [
                    "10.0.2.1:9300"
                  ]
                }
              }
            }
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 85
    },
    "digest": "b06c2363c9071d9d5027a8562dd1b7ab",
    "lang": "console",
    "found": [],
    "source": "PUT _cluster/settings\n{\n  \"persistent\": {\n    \"cluster.remote.two.seeds\": [ \"10.0.2.1:9300\" ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "cluster.remote.two.seeds": [
              "10.0.2.1:9300"
            ]
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 100
    },
    "digest": "f479f0f364da5ddd096eac93bb4dd207",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/cluster_two_logs\n{\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/cluster_two_logs",
        "query": null,
        "body": {},
        "params": {
          "name": "cluster_two_logs"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 110
    },
    "digest": "743c2583a226963fec7bd6a29e40205f",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/cluster_two_logs\n{\n  \"cluster\": [],\n  \"indices\": [\n    {\n      \"names\": [\n        \"logs-*\"\n      ],\n      \"privileges\": [\n        \"read\",\n        \"read_cross_cluster\"\n      ]\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/cluster_two_logs",
        "query": null,
        "body": {
          "cluster": [],
          "indices": [
            {
              "names": [
                "logs-*"
              ],
              "privileges": [
                "read",
                "read_cross_cluster"
              ]
            }
          ]
        },
        "params": {
          "name": "cluster_two_logs"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 131
    },
    "digest": "b6f04e699bbf90f233bb0253f6844958",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/alice\n{\n  \"password\" : \"somepassword\",\n  \"roles\" : [ \"cluster_two_logs\" ],\n  \"full_name\" : \"Alice\",\n  \"email\" : \"alice@example.com\",\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/alice",
        "query": null,
        "body": {
          "password": "somepassword",
          "roles": [
            "cluster_two_logs"
          ],
          "full_name": "Alice",
          "email": "alice@example.com",
          "enabled": true
        },
        "params": {
          "username": "alice"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/ccs-clients-integrations/cross-cluster.asciidoc",
      "line": 146
    },
    "digest": "efe3cb41fcafd981b8fb51fc7337d1d0",
    "lang": "console",
    "found": [],
    "source": "GET two:logs-2017.04/_search\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/two:logs-2017.04/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          }
        },
        "params": {
          "index": "two:logs-2017.04"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/securing-communications/tutorial-tls-addnodes.asciidoc",
      "line": 156
    },
    "digest": "b02e4907c9936c1adc16ccce9d49900d",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/health",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/security/securing-communications/tutorial-tls-addnodes.asciidoc",
      "line": 166
    },
    "digest": "9296d687ad779f8c57896edff2791c0d",
    "lang": "console",
    "found": [],
    "source": "GET _cat/nodes?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 32
    },
    "digest": "a45eb0cdd138d9c894ca2de9352549a1",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_error_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" } <1>\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logs\" ],\n        \"body\" : {\n          \"query\" : {\n            \"match\" : { \"message\": \"error\" }\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_error_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": [
                  "logs"
                ],
                "body": {
                  "query": {
                    "match": {
                      "message": "error"
                    }
                  }
                }
              }
            }
          }
        },
        "params": {
          "id": "log_error_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 66
    },
    "digest": "69d9b8fd364596aa37eae6864d8a6d89",
    "lang": "console",
    "found": [],
    "source": "GET .watcher-history*/_search?pretty\n{\n  \"sort\" : [\n    { \"result.execution_time\" : \"desc\" }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watcher-history*/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "sort": [
            {
              "result.execution_time": "desc"
            }
          ]
        },
        "params": {
          "index": ".watcher-history*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 89
    },
    "digest": "c42ee13e461422d242c94332d3c38f87",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_error_watch\n{\n  \"trigger\" : { \"schedule\" : { \"interval\" : \"10s\" }},\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logs\" ],\n        \"body\" : {\n          \"query\" : {\n            \"match\" : { \"message\": \"error\" }\n          }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total.value\" : { \"gt\" : 0 }} <1>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_error_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": [
                  "logs"
                ],
                "body": {
                  "query": {
                    "match": {
                      "message": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total.value": {
                "gt": 0
              }
            }
          }
        },
        "params": {
          "id": "log_error_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 119
    },
    "digest": "1414d40bb1e9d7644b72245bbb5ec834",
    "lang": "console",
    "found": [],
    "source": "POST logs/_doc\n{\n    \"timestamp\" : \"2015-05-17T18:12:07.613Z\",\n    \"request\" : \"GET index.html\",\n    \"status_code\" : 404,\n    \"message\" : \"Error: File not found\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/logs/_doc",
        "query": null,
        "body": {
          "timestamp": "2015-05-17T18:12:07.613Z",
          "request": "GET index.html",
          "status_code": 404,
          "message": "Error: File not found"
        },
        "params": {
          "index": "logs"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 136
    },
    "digest": "9aa2327ae315c39f2bce2bd22e0deb1b",
    "lang": "console",
    "found": [],
    "source": "GET .watcher-history*/_search?pretty\n{\n  \"query\" : {\n    \"bool\" : {\n      \"must\" : [\n        { \"match\" : { \"result.condition.met\" : true }},\n        { \"range\" : { \"result.execution_time\" : { \"from\" : \"now-10s\" }}}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watcher-history*/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "bool": {
              "must": [
                {
                  "match": {
                    "result.condition.met": true
                  }
                },
                {
                  "range": {
                    "result.execution_time": {
                      "from": "now-10s"
                    }
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": ".watcher-history*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 166
    },
    "digest": "6a832c7eb7db40b21ab9848d3af19536",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_error_watch\n{\n  \"trigger\" : { \"schedule\" : { \"interval\" : \"10s\" }},\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [ \"logs\" ],\n        \"body\" : {\n          \"query\" : {\n            \"match\" : { \"message\": \"error\" }\n          }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total.value\" : { \"gt\" : 0 }}\n  },\n  \"actions\" : {\n    \"log_error\" : {\n      \"logging\" : {\n        \"text\" : \"Found {{ctx.payload.hits.total.value}} errors in the logs\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_error_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": [
                  "logs"
                ],
                "body": {
                  "query": {
                    "match": {
                      "message": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total.value": {
                "gt": 0
              }
            }
          },
          "actions": {
            "log_error": {
              "logging": {
                "text": "Found {{ctx.payload.hits.total.value}} errors in the logs"
              }
            }
          }
        },
        "params": {
          "id": "log_error_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/getting-started.asciidoc",
      "line": 207
    },
    "digest": "67a490d749a0c3bb16a266663423893d",
    "lang": "console",
    "found": [],
    "source": "DELETE _watcher/watch/log_error_watch",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_watcher/watch/log_error_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "log_error_watch"
        },
        "api": "watcher.delete_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/how-watcher-works.asciidoc",
      "line": 51
    },
    "digest": "b40ea21b877503cc392b5f17e4730814",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_errors\n{\n  \"metadata\" : { <1>\n    \"color\" : \"red\"\n  },\n  \"trigger\" : { <2>\n    \"schedule\" : {\n      \"interval\" : \"5m\"\n    }\n  },\n  \"input\" : { <3>\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : { <4>\n    \"compare\" : { \"ctx.payload.hits.total.value\" : { \"gt\" : 5 }}\n  },\n  \"transform\" : { <5>\n    \"search\" : {\n        \"request\" : {\n          \"indices\" : \"log-events\",\n          \"body\" : {\n            \"query\" : { \"match\" : { \"status\" : \"error\" } }\n          }\n        }\n    }\n  },\n  \"actions\" : { <6>\n    \"my_webhook\" : {\n      \"webhook\" : {\n        \"method\" : \"POST\",\n        \"host\" : \"mylisteninghost\",\n        \"port\" : 9200,\n        \"path\" : \"/{{watch_id}}\",\n        \"body\" : \"Encountered {{ctx.payload.hits.total.value}} errors\"\n      }\n    },\n    \"email_administrator\" : {\n      \"email\" : {\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total.value}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_errors",
        "query": null,
        "body": {
          "metadata": {
            "color": "red"
          },
          "trigger": {
            "schedule": {
              "interval": "5m"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "size": 0,
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total.value": {
                "gt": 5
              }
            }
          },
          "transform": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "actions": {
            "my_webhook": {
              "webhook": {
                "method": "POST",
                "host": "mylisteninghost",
                "port": 9200,
                "path": "/{{watch_id}}",
                "body": "Encountered {{ctx.payload.hits.total.value}} errors"
              }
            },
            "email_administrator": {
              "email": {
                "to": "sys.admino@host.domain",
                "subject": "Encountered {{ctx.payload.hits.total.value}} errors",
                "body": "Too many error in the system, see attached data",
                "attachments": {
                  "attached_data": {
                    "data": {
                      "format": "json"
                    }
                  }
                },
                "priority": "high"
              }
            }
          }
        },
        "params": {
          "id": "log_errors"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/how-watcher-works.asciidoc",
      "line": 157
    },
    "digest": "1d918e206ad8dab916e59183da24d9ec",
    "lang": "console",
    "found": [],
    "source": "PUT .watches/_settings\n{\n  \"index.routing.allocation.include.role\": \"watcher\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/.watches/_settings",
        "query": null,
        "body": {
          "index.routing.allocation.include.role": "watcher"
        },
        "params": {
          "index": ".watches"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/actions.asciidoc",
      "line": 49
    },
    "digest": "85d2e33791f1a74a69dfb04a60e69306",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/error_logs_alert\n{\n  \"metadata\" : {\n    \"color\" : \"red\"\n  },\n  \"trigger\" : {\n    \"schedule\" : {\n      \"interval\" : \"5m\"\n    }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 }}\n  },\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"throttle_period\": \"15m\", <1>\n      \"email\" : { <2>\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/error_logs_alert",
        "query": null,
        "body": {
          "metadata": {
            "color": "red"
          },
          "trigger": {
            "schedule": {
              "interval": "5m"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "size": 0,
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total": {
                "gt": 5
              }
            }
          },
          "actions": {
            "email_administrator": {
              "throttle_period": "15m",
              "email": {
                "to": "sys.admino@host.domain",
                "subject": "Encountered {{ctx.payload.hits.total}} errors",
                "body": "Too many error in the system, see attached data",
                "attachments": {
                  "attached_data": {
                    "data": {
                      "format": "json"
                    }
                  }
                },
                "priority": "high"
              }
            }
          }
        },
        "params": {
          "id": "error_logs_alert"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/actions.asciidoc",
      "line": 104
    },
    "digest": "406a0f1c1aac947bcee58f86b6d036c1",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 }}\n  },\n  \"throttle_period\" : \"15m\", <1>\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"email\" : {\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    },\n    \"notify_pager\" : {\n      \"webhook\" : {\n        \"method\" : \"POST\",\n        \"host\" : \"pager.service.domain\",\n        \"port\" : 1234,\n        \"path\" : \"/{{watch_id}}\",\n        \"body\" : \"Encountered {{ctx.payload.hits.total}} errors\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_event_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "5m"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "size": 0,
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total": {
                "gt": 5
              }
            }
          },
          "throttle_period": "15m",
          "actions": {
            "email_administrator": {
              "email": {
                "to": "sys.admino@host.domain",
                "subject": "Encountered {{ctx.payload.hits.total}} errors",
                "body": "Too many error in the system, see attached data",
                "attachments": {
                  "attached_data": {
                    "data": {
                      "format": "json"
                    }
                  }
                },
                "priority": "high"
              }
            },
            "notify_pager": {
              "webhook": {
                "method": "POST",
                "host": "pager.service.domain",
                "port": 1234,
                "path": "/{{watch_id}}",
                "body": "Encountered {{ctx.payload.hits.total}} errors"
              }
            }
          }
        },
        "params": {
          "id": "log_event_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/actions.asciidoc",
      "line": 178
    },
    "digest": "3d48d1ba49f680aac32177d653944623",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/<id>/_ack/<action_ids>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/actions.asciidoc",
      "line": 205
    },
    "digest": "9eef31d85ebaf6c27054d7375715dbe0",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 } }\n  },\n  \"actions\" : {\n    \"log_hits\" : {\n      \"foreach\" : \"ctx.payload.hits.hits\", <1>\n      \"max_iterations\" : 500,\n      \"logging\" : {\n        \"text\" : \"Found id {{ctx.payload._id}} with field {{ctx.payload._source.my_field}}\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_event_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "5m"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total": {
                "gt": 0
              }
            }
          },
          "actions": {
            "log_hits": {
              "foreach": "ctx.payload.hits.hits",
              "max_iterations": 500,
              "logging": {
                "text": "Found id {{ctx.payload._id}} with field {{ctx.payload._source.my_field}}"
              }
            }
          }
        },
        "params": {
          "id": "log_event_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/actions.asciidoc",
      "line": 250
    },
    "digest": "f67d8aab9106ad24b1d2c771d3840ed1",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/log_event_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"5m\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : \"log-events\",\n        \"body\" : {\n          \"size\" : 0,\n          \"query\" : { \"match\" : { \"status\" : \"error\" } }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 } }\n  },\n  \"actions\" : {\n    \"email_administrator\" : {\n      \"email\" : {\n        \"to\" : \"sys.admino@host.domain\",\n        \"subject\" : \"Encountered {{ctx.payload.hits.total}} errors\",\n        \"body\" : \"Too many error in the system, see attached data\",\n        \"attachments\" : {\n          \"attached_data\" : {\n            \"data\" : {\n              \"format\" : \"json\"\n            }\n          }\n        },\n        \"priority\" : \"high\"\n      }\n    },\n    \"notify_pager\" : {\n      \"condition\": { <1>\n        \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 5 } }\n      },\n      \"webhook\" : {\n        \"method\" : \"POST\",\n        \"host\" : \"pager.service.domain\",\n        \"port\" : 1234,\n        \"path\" : \"/{{watch_id}}\",\n        \"body\" : \"Encountered {{ctx.payload.hits.total}} errors\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/log_event_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "5m"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": "log-events",
                "body": {
                  "size": 0,
                  "query": {
                    "match": {
                      "status": "error"
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total": {
                "gt": 0
              }
            }
          },
          "actions": {
            "email_administrator": {
              "email": {
                "to": "sys.admino@host.domain",
                "subject": "Encountered {{ctx.payload.hits.total}} errors",
                "body": "Too many error in the system, see attached data",
                "attachments": {
                  "attached_data": {
                    "data": {
                      "format": "json"
                    }
                  }
                },
                "priority": "high"
              }
            },
            "notify_pager": {
              "condition": {
                "compare": {
                  "ctx.payload.hits.total": {
                    "gt": 5
                  }
                }
              },
              "webhook": {
                "method": "POST",
                "host": "pager.service.domain",
                "port": 1234,
                "path": "/{{watch_id}}",
                "body": "Encountered {{ctx.payload.hits.total}} errors"
              }
            }
          }
        },
        "params": {
          "id": "log_event_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/managing-watches.asciidoc",
      "line": 30
    },
    "digest": "92a03184d36ce0367676952f8310771c",
    "lang": "console",
    "found": [],
    "source": "GET .watches/_search\n{\n  \"size\" : 100\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watches/_search",
        "query": null,
        "body": {
          "size": 100
        },
        "params": {
          "index": ".watches"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 27
    },
    "digest": "dd0b196a099e1cca08c5ce4dd74e935a",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" } <1>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          }
        },
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 45
    },
    "digest": "1e9cab0b2727624e22e8cf4e7ca498ac",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/health?pretty",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health",
        "query": {
          "pretty": true
        },
        "body": null,
        "params": null,
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 54
    },
    "digest": "221e9b14567f950008459af77757750e",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n        \"host\" : \"localhost\",\n        \"port\" : 9200,\n        \"path\" : \"/_cluster/health\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "http": {
              "request": {
                "host": "localhost",
                "port": 9200,
                "path": "/_cluster/health"
              }
            }
          }
        },
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 76
    },
    "digest": "239f615e0009c5cb1dc4e82ec4c0dab5",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n        \"host\" : \"localhost\",\n        \"port\" : 9200,\n        \"path\" : \"/_cluster/health\",\n        \"auth\": {\n          \"basic\": {\n            \"username\": \"elastic\",\n            \"password\": \"x-pack-test-password\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "http": {
              "request": {
                "host": "localhost",
                "port": 9200,
                "path": "/_cluster/health",
                "auth": {
                  "basic": {
                    "username": "elastic",
                    "password": "x-pack-test-password"
                  }
                }
              }
            }
          }
        },
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 115
    },
    "digest": "dfb20907cfc5ac520ea3b1dba5f00811",
    "lang": "console",
    "found": [],
    "source": "GET .watcher-history*/_search\n{\n  \"sort\" : [\n    { \"result.execution_time\" : \"desc\" }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watcher-history*/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "result.execution_time": "desc"
            }
          ]
        },
        "params": {
          "index": ".watcher-history*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 137
    },
    "digest": "90f1f5304922fb6d097846dd1444c075",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" } <1>\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n       \"host\" : \"localhost\",\n       \"port\" : 9200,\n       \"path\" : \"/_cluster/health\"\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.status\" : { \"eq\" : \"red\" }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "http": {
              "request": {
                "host": "localhost",
                "port": 9200,
                "path": "/_cluster/health"
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.status": {
                "eq": "red"
              }
            }
          }
        },
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 169
    },
    "digest": "95c03bdef4faf6bef039c986f4cb3aba",
    "lang": "console",
    "found": [],
    "source": "GET .watcher-history*/_search?pretty\n{\n  \"query\" : {\n    \"match\" : { \"result.condition.met\" : true }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watcher-history*/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "match": {
              "result.condition.met": true
            }
          }
        },
        "params": {
          "index": ".watcher-history*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 193
    },
    "digest": "007179b5e241da650562a5f0a5007823",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/cluster_health_watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"interval\" : \"10s\" }\n  },\n  \"input\" : {\n    \"http\" : {\n      \"request\" : {\n       \"host\" : \"localhost\",\n       \"port\" : 9200,\n       \"path\" : \"/_cluster/health\"\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : {\n      \"ctx.payload.status\" : { \"eq\" : \"red\" }\n    }\n  },\n  \"actions\" : {\n    \"send_email\" : {\n      \"email\" : {\n        \"to\" : \"username@example.org\",\n        \"subject\" : \"Cluster Status Warning\",\n        \"body\" : \"Cluster status is RED\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "10s"
            }
          },
          "input": {
            "http": {
              "request": {
                "host": "localhost",
                "port": 9200,
                "path": "/_cluster/health"
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.status": {
                "eq": "red"
              }
            }
          },
          "actions": {
            "send_email": {
              "email": {
                "to": "username@example.org",
                "subject": "Cluster Status Warning",
                "body": "Cluster status is RED"
              }
            }
          }
        },
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 259
    },
    "digest": "95c03bdef4faf6bef039c986f4cb3aba",
    "lang": "console",
    "found": [],
    "source": "GET .watcher-history*/_search?pretty\n{\n  \"query\" : {\n    \"match\" : { \"result.condition.met\" : true }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watcher-history*/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "query": {
            "match": {
              "result.condition.met": true
            }
          }
        },
        "params": {
          "index": ".watcher-history*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-clusterstatus.asciidoc",
      "line": 280
    },
    "digest": "60b0fc1b6ae418621ff1b31591fa1fce",
    "lang": "console",
    "found": [],
    "source": "DELETE _watcher/watch/cluster_health_watch",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_watcher/watch/cluster_health_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "cluster_health_watch"
        },
        "api": "watcher.delete_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-meetupdata.asciidoc",
      "line": 198
    },
    "digest": "4912f2140d10dbf15596c60319835e36",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/meetup\n{\n  \"trigger\": {\n    \"schedule\": {\n      \"interval\": \"1h\"\n    }\n  },\n  \"input\": {\n    \"search\": {\n      \"request\": {\n        \"indices\": [\n          \"<logstash-{now-1h}>\",\n          \"<logstash-{now}>\"\n        ],\n        \"body\": {\n          \"size\": 0,\n          \"query\": {\n            \"bool\": {\n              \"filter\": [\n                {\n                  \"range\": {\n                    \"@timestamp\": {\n                      \"gte\": \"now-3h\"\n                    }\n                  }\n                },\n                {\n                  \"match\": {\n                    \"group.group_topics.topic_name\": \"Open Source\"\n                  }\n                }\n              ]\n            }\n          },\n          \"aggs\": {\n            \"group_by_city\": {\n              \"terms\": {\n                \"field\": \"group.group_city.raw\",\n                \"size\": 5\n              },\n              \"aggs\": {\n                \"group_by_event\": {\n                  \"terms\": {\n                    \"field\": \"event.event_url.raw\",\n                    \"size\": 5\n                  },\n                  \"aggs\": {\n                    \"get_latest\": {\n                      \"terms\": {\n                        \"field\": \"@timestamp\",\n                        \"size\": 1,\n                        \"order\": {\n                          \"_key\": \"desc\"\n                        }\n                      },\n                      \"aggs\": {\n                        \"group_by_event_name\": {\n                          \"terms\": {\n                            \"field\": \"event.event_name.raw\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"condition\": {\n    \"compare\": {\n      \"ctx.payload.hits.total.value\": {\n        \"gt\": 0\n      }\n    }\n  },\n  \"actions\": {  <1>\n    \"email_me\": {\n      \"throttle_period\": \"10m\",\n      \"email\": {\n        \"from\": \"username@example.org\",  <2>\n        \"to\": \"recipient@example.org\",   <3>\n        \"subject\": \"Open Source events\",\n        \"body\": {\n          \"html\": \"Found events matching Open Source: <ul>{{#ctx.payload.aggregations.group_by_city.buckets}}<li>{{key}} ({{doc_count}})<ul>{{#group_by_event.buckets}}<li><a href=\\\"{{key}}\\\">{{get_latest.buckets.0.group_by_event_name.buckets.0.key}}</a> ({{doc_count}})</li>{{/group_by_event.buckets}}</ul></li>{{/ctx.payload.aggregations.group_by_city.buckets}}</ul>\"\n         }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/meetup",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "interval": "1h"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": [
                  "<logstash-{now-1h}>",
                  "<logstash-{now}>"
                ],
                "body": {
                  "size": 0,
                  "query": {
                    "bool": {
                      "filter": [
                        {
                          "range": {
                            "@timestamp": {
                              "gte": "now-3h"
                            }
                          }
                        },
                        {
                          "match": {
                            "group.group_topics.topic_name": "Open Source"
                          }
                        }
                      ]
                    }
                  },
                  "aggs": {
                    "group_by_city": {
                      "terms": {
                        "field": "group.group_city.raw",
                        "size": 5
                      },
                      "aggs": {
                        "group_by_event": {
                          "terms": {
                            "field": "event.event_url.raw",
                            "size": 5
                          },
                          "aggs": {
                            "get_latest": {
                              "terms": {
                                "field": "@timestamp",
                                "size": 1,
                                "order": {
                                  "_key": "desc"
                                }
                              },
                              "aggs": {
                                "group_by_event_name": {
                                  "terms": {
                                    "field": "event.event_name.raw"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total.value": {
                "gt": 0
              }
            }
          },
          "actions": {
            "email_me": {
              "throttle_period": "10m",
              "email": {
                "from": "username@example.org",
                "to": "recipient@example.org",
                "subject": "Open Source events",
                "body": {
                  "html": "Found events matching Open Source: <ul>{{#ctx.payload.aggregations.group_by_city.buckets}}<li>{{key}} ({{doc_count}})<ul>{{#group_by_event.buckets}}<li><a href=\"{{key}}\">{{get_latest.buckets.0.group_by_event_name.buckets.0.key}}</a> ({{doc_count}})</li>{{/group_by_event.buckets}}</ul></li>{{/ctx.payload.aggregations.group_by_city.buckets}}</ul>"
                }
              }
            }
          }
        },
        "params": {
          "id": "meetup"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/example-watches/example-watch-meetupdata.asciidoc",
      "line": 303
    },
    "digest": "4be6ee22c2cddc72c21a76cda23705ed",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/meetup/_execute",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/meetup/_execute",
        "query": null,
        "body": null,
        "params": {
          "id": "meetup"
        },
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/troubleshooting.asciidoc",
      "line": 18
    },
    "digest": "2856a5ceff1861aa9a78099f1c517fe7",
    "lang": "console",
    "found": [],
    "source": "GET .watches/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/.watches/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": ".watches"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/watcher/troubleshooting.asciidoc",
      "line": 33
    },
    "digest": "e905543b281e9c41395304da76ed2ea3",
    "lang": "console",
    "found": [],
    "source": "DELETE .watches",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/.watches",
        "query": null,
        "body": null,
        "params": {
          "index": ".watches"
        },
        "api": "indices.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 11
    },
    "digest": "397bdb40d0146102f1f4c6a35675e16a",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"settings\": {\n    \"analysis\": {\n      \"analyzer\": {\n        \"english_exact\": {\n          \"tokenizer\": \"standard\",\n          \"filter\": [\n            \"lowercase\"\n          ]\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"body\": {\n        \"type\": \"text\",\n        \"analyzer\": \"english\",\n        \"fields\": {\n          \"exact\": {\n            \"type\": \"text\",\n            \"analyzer\": \"english_exact\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT index/_doc/1\n{\n  \"body\": \"Ski resort\"\n}\n\nPUT index/_doc/2\n{\n  \"body\": \"A pair of skis\"\n}\n\nPOST index/_refresh",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "settings": {
            "analysis": {
              "analyzer": {
                "english_exact": {
                  "tokenizer": "standard",
                  "filter": [
                    "lowercase"
                  ]
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "body": {
                "type": "text",
                "analyzer": "english",
                "fields": {
                  "exact": {
                    "type": "text",
                    "analyzer": "english_exact"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "body": "Ski resort"
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/2",
        "query": null,
        "body": {
          "body": "A pair of skis"
        },
        "params": {
          "index": "index",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/index/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "index"
        },
        "api": "indices.refresh"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 58
    },
    "digest": "bf2e6ea2bae621b9b2fee7003e891f86",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"query\": {\n    \"simple_query_string\": {\n      \"fields\": [ \"body\" ],\n      \"query\": \"ski\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "fields": [
                "body"
              ],
              "query": "ski"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 72
    },
    "digest": "bb388254a1591e1f5be7982af19c3729",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 2,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 2,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.18232156,\n    \"hits\": [\n      {\n        \"_index\": \"index\",\n        \"_id\": \"1\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"body\": \"Ski resort\"\n        }\n      },\n      {\n        \"_index\": \"index\",\n        \"_id\": \"2\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"body\": \"A pair of skis\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 116
    },
    "digest": "3f94ed945ae6416a0eb372c2db14d7e0",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"query\": {\n    \"simple_query_string\": {\n      \"fields\": [ \"body.exact\" ],\n      \"query\": \"ski\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "fields": [
                "body.exact"
              ],
              "query": "ski"
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 130
    },
    "digest": "9fa3ddfa07814f82845343e677bd441b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 1,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.8025915,\n    \"hits\": [\n      {\n        \"_index\": \"index\",\n        \"_id\": \"1\",\n        \"_score\": 0.8025915,\n        \"_source\": {\n          \"body\": \"Ski resort\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 173
    },
    "digest": "26abfc49c238c2b5d259983ac38dbcee",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"query\": {\n    \"simple_query_string\": {\n      \"fields\": [ \"body\" ],\n      \"quote_field_suffix\": \".exact\",\n      \"query\": \"\\\"ski\\\"\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "simple_query_string": {
              "fields": [
                "body"
              ],
              "quote_field_suffix": ".exact",
              "query": "\"ski\""
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/stemming.asciidoc",
      "line": 188
    },
    "digest": "192ff39ffdc681f9b2359563c3c6c113",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 2,\n  \"timed_out\": false,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.8025915,\n    \"hits\": [\n      {\n        \"_index\": \"index\",\n        \"_id\": \"1\",\n        \"_score\": 0.8025915,\n        \"_source\": {\n          \"body\": \"Ski resort\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "how-to/recipes/scoring.asciidoc",
      "line": 123
    },
    "digest": "a0f15dd7fcb07bc8543fe04c2907d4b9",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n    \"query\" : {\n        \"script_score\" : {\n            \"query\" : {\n                \"match\": { \"body\": \"elasticsearch\" }\n            },\n            \"script\" : {\n                \"source\" : \"_score * saturation(doc['pagerank'].value, 10)\" <1>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "script_score": {
              "query": {
                "match": {
                  "body": "elasticsearch"
                }
              },
              "script": {
                "source": "_score * saturation(doc['pagerank'].value, 10)"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/recipes/scoring.asciidoc",
      "line": 168
    },
    "digest": "0dfa66a019712e413652c5eddd057ba8",
    "lang": "console",
    "found": [],
    "source": "GET _search\n{\n    \"query\" : {\n        \"bool\" : {\n            \"must\": {\n                \"match\": { \"body\": \"elasticsearch\" }\n            },\n            \"should\": {\n                \"rank_feature\": {\n                    \"field\": \"pagerank\", <1>\n                    \"saturation\": {\n                        \"pivot\": 10\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match": {
                  "body": "elasticsearch"
                }
              },
              "should": {
                "rank_feature": {
                  "field": "pagerank",
                  "saturation": {
                    "pivot": 10
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 52
    },
    "digest": "12facf3617a41551ce2f0c4d005cb1c7",
    "lang": "console",
    "found": [],
    "source": "PUT movies\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name_and_plot\": {\n        \"type\": \"text\"\n      },\n      \"name\": {\n        \"type\": \"text\",\n        \"copy_to\": \"name_and_plot\"\n      },\n      \"plot\": {\n        \"type\": \"text\",\n        \"copy_to\": \"name_and_plot\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/movies",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name_and_plot": {
                "type": "text"
              },
              "name": {
                "type": "text",
                "copy_to": "name_and_plot"
              },
              "plot": {
                "type": "text",
                "copy_to": "name_and_plot"
              }
            }
          }
        },
        "params": {
          "index": "movies"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 86
    },
    "digest": "a008f42379930edc354b4074e0a33344",
    "lang": "console",
    "found": [],
    "source": "PUT index/_doc/1\n{\n  \"designation\": \"spoon\",\n  \"price\": 13\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "designation": "spoon",
          "price": 13
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 97
    },
    "digest": "a0a7557bb7e2aff7918557cd648f41af",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"aggs\": {\n    \"price_ranges\": {\n      \"range\": {\n        \"field\": \"price\",\n        \"ranges\": [\n          { \"to\": 10 },\n          { \"from\": 10, \"to\": 100 },\n          { \"from\": 100 }\n        ]\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "range": {
                "field": "price",
                "ranges": [
                  {
                    "to": 10
                  },
                  {
                    "from": 10,
                    "to": 100
                  },
                  {
                    "from": 100
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 120
    },
    "digest": "a4bae4d956bc0a663f42cfec36bf8e0b",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"price_range\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}\n\nPUT index/_doc/1\n{\n  \"designation\": \"spoon\",\n  \"price\": 13,\n  \"price_range\": \"10-100\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "price_range": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "designation": "spoon",
          "price": 13,
          "price_range": "10-100"
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 144
    },
    "digest": "7dedb148ff74912de81b8f8275f0d7f3",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"aggs\": {\n    \"price_ranges\": {\n      \"terms\": {\n        \"field\": \"price_range\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "aggs": {
            "price_ranges": {
              "terms": {
                "field": "price_range"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 188
    },
    "digest": "34fff811cf60997f6df89928e5a41387",
    "lang": "console",
    "found": [],
    "source": "GET /my_test_scores/_search\n{\n  \"query\": {\n    \"term\": {\n      \"grad_year\": \"2020\"\n    }\n  },\n  \"sort\": [\n    {\n      \"_script\": {\n        \"type\": \"number\",\n        \"script\": {\n          \"source\": \"doc['math_score'].value + doc['verbal_score'].value\"\n        },\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_test_scores/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "grad_year": "2020"
            }
          },
          "sort": [
            {
              "_script": {
                "type": "number",
                "script": {
                  "source": "doc['math_score'].value + doc['verbal_score'].value"
                },
                "order": "desc"
              }
            }
          ]
        },
        "params": {
          "index": "my_test_scores"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 219
    },
    "digest": "dda949d20d07a9edbe64cefc623df945",
    "lang": "console",
    "found": [],
    "source": "PUT /my_test_scores/_mapping\n{\n  \"properties\": {\n    \"total_score\": {\n      \"type\": \"long\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_test_scores/_mapping",
        "query": null,
        "body": {
          "properties": {
            "total_score": {
              "type": "long"
            }
          }
        },
        "params": {
          "index": "my_test_scores"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 236
    },
    "digest": "295b3aaeb223612afdd991744dc9c873",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/my_test_scores_pipeline\n{\n  \"description\": \"Calculates the total test score\",\n  \"processors\": [\n    {\n      \"script\": {\n        \"source\": \"ctx.total_score = (ctx.math_score + ctx.verbal_score)\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my_test_scores_pipeline",
        "query": null,
        "body": {
          "description": "Calculates the total test score",
          "processors": [
            {
              "script": {
                "source": "ctx.total_score = (ctx.math_score + ctx.verbal_score)"
              }
            }
          ]
        },
        "params": {
          "id": "my_test_scores_pipeline"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 255
    },
    "digest": "f70ff57c80cdbce3f1e7c63ee307c92d",
    "lang": "console",
    "found": [],
    "source": "POST /_reindex\n{\n  \"source\": {\n    \"index\": \"my_test_scores\"\n  },\n  \"dest\": {\n    \"index\": \"my_test_scores_2\",\n    \"pipeline\": \"my_test_scores_pipeline\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "my_test_scores"
          },
          "dest": {
            "index": "my_test_scores_2",
            "pipeline": "my_test_scores_pipeline"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 272
    },
    "digest": "161d6932c412a01a47ee0883b12056ca",
    "lang": "console",
    "found": [],
    "source": "POST /my_test_scores_2/_doc/?pipeline=my_test_scores_pipeline\n{\n  \"student\": \"kimchy\",\n  \"grad_year\": \"2020\",\n  \"math_score\": 800,\n  \"verbal_score\": 800\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_test_scores_2/_doc/",
        "query": {
          "pipeline": "my_test_scores_pipeline"
        },
        "body": {
          "student": "kimchy",
          "grad_year": "2020",
          "math_score": 800,
          "verbal_score": 800
        },
        "params": {
          "index": "my_test_scores_2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 288
    },
    "digest": "aab42564d36970fe9e2f6eab560470a0",
    "lang": "console",
    "found": [],
    "source": "GET /my_test_scores_2/_search\n{\n  \"query\": {\n    \"term\": {\n      \"grad_year\": \"2020\"\n    }\n  },\n  \"sort\": [\n    {\n      \"total_score\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_test_scores_2/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "grad_year": "2020"
            }
          },
          "sort": [
            {
              "total_score": {
                "order": "desc"
              }
            }
          ]
        },
        "params": {
          "index": "my_test_scores_2"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 337
    },
    "digest": "102c7de25d13c87cf28839ada9f63c95",
    "lang": "console",
    "found": [],
    "source": "PUT index/_doc/1\n{\n  \"my_date\": \"2016-05-11T16:30:55.328Z\"\n}\n\nGET index/_search\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"range\": {\n          \"my_date\": {\n            \"gte\": \"now-1h\",\n            \"lte\": \"now\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index/_doc/1",
        "query": null,
        "body": {
          "my_date": "2016-05-11T16:30:55.328Z"
        },
        "params": {
          "index": "index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "range": {
                  "my_date": {
                    "gte": "now-1h",
                    "lte": "now"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 363
    },
    "digest": "17dd67a66c49f7eb618dd17430e48dfa",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"range\": {\n          \"my_date\": {\n            \"gte\": \"now-1h/m\",\n            \"lte\": \"now/m\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "range": {
                  "my_date": {
                    "gte": "now-1h/m",
                    "lte": "now/m"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 396
    },
    "digest": "abc7a670a47516b58b6b07d7497b140c",
    "lang": "console",
    "found": [],
    "source": "GET index/_search\n{\n  \"query\": {\n    \"constant_score\": {\n      \"filter\": {\n        \"bool\": {\n          \"should\": [\n            {\n              \"range\": {\n                \"my_date\": {\n                  \"gte\": \"now-1h\",\n                  \"lte\": \"now-1h/m\"\n                }\n              }\n            },\n            {\n              \"range\": {\n                \"my_date\": {\n                  \"gt\": \"now-1h/m\",\n                  \"lt\": \"now/m\"\n                }\n              }\n            },\n            {\n              \"range\": {\n                \"my_date\": {\n                  \"gte\": \"now/m\",\n                  \"lte\": \"now\"\n                }\n              }\n            }\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index/_search",
        "query": null,
        "body": {
          "query": {
            "constant_score": {
              "filter": {
                "bool": {
                  "should": [
                    {
                      "range": {
                        "my_date": {
                          "gte": "now-1h",
                          "lte": "now-1h/m"
                        }
                      }
                    },
                    {
                      "range": {
                        "my_date": {
                          "gt": "now-1h/m",
                          "lt": "now/m"
                        }
                      }
                    },
                    {
                      "range": {
                        "my_date": {
                          "gte": "now/m",
                          "lte": "now"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 468
    },
    "digest": "971c7a36ee79f2b3aa82c64ea338de70",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"keyword\",\n        \"eager_global_ordinals\": true\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "foo": {
                "type": "keyword",
                "eager_global_ordinals": true
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 599
    },
    "digest": "9559de0c2190f99fcc344887fc7b232a",
    "lang": "console",
    "found": [],
    "source": "PUT bicycles\n{\n  \"mappings\": {\n    \"properties\": {\n      \"cycle_type\": {\n        \"type\": \"constant_keyword\",\n        \"value\": \"bicycle\"\n      },\n      \"name\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}\n\nPUT other_cycles\n{\n  \"mappings\": {\n    \"properties\": {\n      \"cycle_type\": {\n        \"type\": \"keyword\"\n      },\n      \"name\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/bicycles",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "cycle_type": {
                "type": "constant_keyword",
                "value": "bicycle"
              },
              "name": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "bicycles"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/other_cycles",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "cycle_type": {
                "type": "keyword"
              },
              "name": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "other_cycles"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 637
    },
    "digest": "14936b96cfb8ff999a833f615ba75495",
    "lang": "console",
    "found": [],
    "source": "GET bicycles,other_cycles/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": {\n          \"description\": \"dutch\"\n        }\n      },\n      \"filter\": {\n        \"term\": {\n          \"cycle_type\": \"bicycle\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bicycles,other_cycles/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "match": {
                  "description": "dutch"
                }
              },
              "filter": {
                "term": {
                  "cycle_type": "bicycle"
                }
              }
            }
          }
        },
        "params": {
          "index": "bicycles,other_cycles"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/search-speed.asciidoc",
      "line": 662
    },
    "digest": "9de10a59a5f56dd0906be627896cc789",
    "lang": "console",
    "found": [],
    "source": "GET bicycles,other_cycles/_search\n{\n  \"query\": {\n    \"match\": {\n      \"description\": \"dutch\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/bicycles,other_cycles/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "description": "dutch"
            }
          }
        },
        "params": {
          "index": "bicycles,other_cycles"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/disk-usage.asciidoc",
      "line": 14
    },
    "digest": "e273060a675c959fd5f3cde27c8aff07",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"integer\",\n        \"index\": false\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "foo": {
                "type": "integer",
                "index": false
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/disk-usage.asciidoc",
      "line": 34
    },
    "digest": "c8568f4f02f75db9afd669880db98a16",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"text\",\n        \"norms\": false\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "foo": {
                "type": "text",
                "norms": false
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/disk-usage.asciidoc",
      "line": 54
    },
    "digest": "1a5cd30017368fe4888454a13c6e8561",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"text\",\n        \"index_options\": \"freqs\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "foo": {
                "type": "text",
                "index_options": "freqs"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/disk-usage.asciidoc",
      "line": 74
    },
    "digest": "ae3ae58724c413734b67a90a6ddb319f",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"foo\": {\n        \"type\": \"text\",\n        \"norms\": false,\n        \"index_options\": \"freqs\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "foo": {
                "type": "text",
                "norms": false,
                "index_options": "freqs"
              }
            }
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "how-to/disk-usage.asciidoc",
      "line": 106
    },
    "digest": "597d456edfcb3d410954a3e9b5babf9a",
    "lang": "console",
    "found": [],
    "source": "PUT index\n{\n  \"mappings\": {\n    \"dynamic_templates\": [\n      {\n        \"strings\": {\n          \"match_mapping_type\": \"string\",\n          \"mapping\": {\n            \"type\": \"keyword\"\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index",
        "query": null,
        "body": {
          "mappings": {
            "dynamic_templates": [
              {
                "strings": {
                  "match_mapping_type": "string",
                  "mapping": {
                    "type": "keyword"
                  }
                }
              }
            ]
          }
        },
        "params": {
          "index": "index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 78
    },
    "digest": "978088f989d45dd09339582e9cbc60e0",
    "lang": "console",
    "found": [],
    "source": "# GET /<logstash-{now/d}>/_search\nGET /%3Clogstash-%7Bnow%2Fd%7D%3E/_search\n{\n  \"query\" : {\n    \"match\": {\n      \"test\": \"data\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/%3Clogstash-%7Bnow%2Fd%7D%3E/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "test": "data"
            }
          }
        },
        "params": {
          "index": "%3Clogstash-%7Bnow%2Fd%7D%3E"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 132
    },
    "digest": "a34d70d7022eb4ba48909d440c80390f",
    "lang": "console",
    "found": [],
    "source": "# GET /<logstash-{now/d-2d}>,<logstash-{now/d-1d}>,<logstash-{now/d}>/_search\nGET /%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bnow%2Fd%7D%3E/_search\n{\n  \"query\" : {\n    \"match\": {\n      \"test\": \"data\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bnow%2Fd%7D%3E/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "test": "data"
            }
          }
        },
        "params": {
          "index": "%3Clogstash-%7Bnow%2Fd-2d%7D%3E%2C%3Clogstash-%7Bnow%2Fd-1d%7D%3E%2C%3Clogstash-%7Bnow%2Fd%7D%3E"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 219
    },
    "digest": "09dbd90c5e22ea4a17b4cf9aa72e08ae",
    "lang": "console",
    "found": [],
    "source": "GET /_search?q=elasticsearch&filter_path=took,hits.hits._id,hits.hits._score",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "q": "elasticsearch",
          "filter_path": "took,hits.hits._id,hits.hits._score"
        },
        "body": null,
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 227
    },
    "digest": "0936e4cc7952b267b16a3b764d4e25ee",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 3,\n  \"hits\" : {\n    \"hits\" : [\n      {\n        \"_id\" : \"0\",\n        \"_score\" : 1.6375021\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 247
    },
    "digest": "1dbb8cf17fbc45c87c7d2f75f15f9778",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state?filter_path=metadata.indices.*.stat*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state",
        "query": {
          "filter_path": "metadata.indices.*.stat*"
        },
        "body": null,
        "params": null,
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 255
    },
    "digest": "b1447d563c8b8d3e653cf62eaf11612c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"metadata\" : {\n    \"indices\" : {\n      \"twitter\": {\"state\": \"open\"}\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 270
    },
    "digest": "1252fa45847edba5ec2b2f33da70ec5b",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state?filter_path=routing_table.indices.**.state",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state",
        "query": {
          "filter_path": "routing_table.indices.**.state"
        },
        "body": null,
        "params": null,
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 278
    },
    "digest": "5ed13422ab669b54b3238a57b57d94e2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"routing_table\": {\n    \"indices\": {\n      \"twitter\": {\n        \"shards\": {\n          \"0\": [{\"state\": \"STARTED\"}, {\"state\": \"UNASSIGNED\"}]\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 295
    },
    "digest": "621665fdbd7fc103c09bfeed28b67b1a",
    "lang": "console",
    "found": [],
    "source": "GET /_count?filter_path=-_shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_count",
        "query": {
          "filter_path": "-_shards"
        },
        "body": null,
        "params": null,
        "api": "count"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 303
    },
    "digest": "09108f6f3c42ee4bbe387d3c28713174",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\" : 5\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 314
    },
    "digest": "1e18a67caf8f06ff2710ec4a8b30f625",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state?filter_path=metadata.indices.*.state,-metadata.indices.logstash-*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state",
        "query": {
          "filter_path": "metadata.indices.*.state,-metadata.indices.logstash-*"
        },
        "body": null,
        "params": null,
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 322
    },
    "digest": "c0aafcb374103c000f5c61010ef9d160",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"metadata\" : {\n    \"indices\" : {\n      \"index-1\" : {\"state\" : \"open\"},\n      \"index-2\" : {\"state\" : \"open\"},\n      \"index-3\" : {\"state\" : \"open\"}\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 341
    },
    "digest": "6464124d1677f4552ddddd95a340ca3a",
    "lang": "console",
    "found": [],
    "source": "POST /library/_doc?refresh\n{\"title\": \"Book #1\", \"rating\": 200.1}\nPOST /library/_doc?refresh\n{\"title\": \"Book #2\", \"rating\": 1.7}\nPOST /library/_doc?refresh\n{\"title\": \"Book #3\", \"rating\": 0.1}\nGET /_search?filter_path=hits.hits._source&_source=title&sort=rating:desc",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/library/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Book #1",
          "rating": 200.1
        },
        "params": {
          "index": "library"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/library/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Book #2",
          "rating": 1.7
        },
        "params": {
          "index": "library"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/library/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Book #3",
          "rating": 0.1
        },
        "params": {
          "index": "library"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "filter_path": "hits.hits._source",
          "_source": "title",
          "sort": "rating:desc"
        },
        "body": null,
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 352
    },
    "digest": "ca0212c413612a028f3405cc29e4ff8a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\" : {\n    \"hits\" : [ {\n      \"_source\":{\"title\":\"Book #1\"}\n    }, {\n      \"_source\":{\"title\":\"Book #2\"}\n    }, {\n      \"_source\":{\"title\":\"Book #3\"}\n    } ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 374
    },
    "digest": "b9a153725b28fdd0a5aabd7f17a8c2d7",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_settings?flat_settings=true",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_settings",
        "query": {
          "flat_settings": "true"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 382
    },
    "digest": "eef497b2139cfd6c73f8d1dc3cf4daa4",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"twitter\" : {\n    \"settings\": {\n      \"index.number_of_replicas\": \"1\",\n      \"index.number_of_shards\": \"1\",\n      \"index.creation_date\": \"1474389951325\",\n      \"index.uuid\": \"n6gzFZTgS664GUfx0Xrpjw\",\n      \"index.version.created\": ...,\n      \"index.provided_name\" : \"twitter\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 404
    },
    "digest": "5925c23a173a63bdb30b458248d1df76",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_settings?flat_settings=false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_settings",
        "query": {
          "flat_settings": "false"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 412
    },
    "digest": "a5cc24f6d552e19c56f88840561750b3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"twitter\" : {\n    \"settings\" : {\n      \"index\" : {\n        \"number_of_replicas\": \"1\",\n        \"number_of_shards\": \"1\",\n        \"creation_date\": \"1474389951325\",\n        \"uuid\": \"n6gzFZTgS664GUfx0Xrpjw\",\n        \"version\": {\n          \"created\": ...\n        },\n        \"provided_name\" : \"twitter\"\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 568
    },
    "digest": "a6f8636b03cc5f677b7d89e750328612",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=surprise_me",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "surprise_me"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 577
    },
    "digest": "be8a94d6faacfb7ca0d36d222e0ae4c9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"error\" : {\n    \"root_cause\" : [\n      {\n        \"type\" : \"illegal_argument_exception\",\n        \"reason\" : \"Failed to parse int parameter [size] with value [surprise_me]\"\n      }\n    ],\n    \"type\" : \"illegal_argument_exception\",\n    \"reason\" : \"Failed to parse int parameter [size] with value [surprise_me]\",\n    \"caused_by\" : {\n      \"type\" : \"number_format_exception\",\n      \"reason\" : \"For input string: \\\"surprise_me\\\"\"\n    }\n  },\n  \"status\" : 400\n}"
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 600
    },
    "digest": "6d1e75312a28a5ba23837abf768f2510",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?size=surprise_me&error_trace=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "surprise_me",
          "error_trace": "true"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "api-conventions.asciidoc",
      "line": 608
    },
    "digest": "ddad5df34c874dfe814a44e1e0d57148",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"error\": {\n    \"root_cause\": [\n      {\n        \"type\": \"illegal_argument_exception\",\n        \"reason\": \"Failed to parse int parameter [size] with value [surprise_me]\",\n        \"stack_trace\": \"Failed to parse int parameter [size] with value [surprise_me]]; nested: IllegalArgumentException...\"\n      }\n    ],\n    \"type\": \"illegal_argument_exception\",\n    \"reason\": \"Failed to parse int parameter [size] with value [surprise_me]\",\n    \"stack_trace\": \"java.lang.IllegalArgumentException: Failed to parse int parameter [size] with value [surprise_me]\\n    at org.elasticsearch.rest.RestRequest.paramAsInt(RestRequest.java:175)...\",\n    \"caused_by\": {\n      \"type\": \"number_format_exception\",\n      \"reason\": \"For input string: \\\"surprise_me\\\"\",\n      \"stack_trace\": \"java.lang.NumberFormatException: For input string: \\\"surprise_me\\\"\\n    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)...\"\n    }\n  },\n  \"status\": 400\n}"
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-decision.asciidoc",
      "line": 15
    },
    "digest": "0d142c34961983f6aab5f12965407bab",
    "lang": "console",
    "found": [],
    "source": "GET /_autoscaling/decision/",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_autoscaling/decision/",
        "query": null,
        "body": null,
        "params": null,
        "api": "autoscaling.get_autoscaling_decision"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-decision.asciidoc",
      "line": 40
    },
    "digest": "f1335bacda32b273ecc9603498eff65c",
    "lang": "console",
    "found": [],
    "source": "GET /_autoscaling/decision",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_autoscaling/decision",
        "query": null,
        "body": null,
        "params": null,
        "api": "autoscaling.get_autoscaling_decision"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-decision.asciidoc",
      "line": 48
    },
    "digest": "593e620f6cd30342d9382c78d23bd74d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  decisions: []\n}"
  },
  {
    "source_location": {
      "file": "autoscaling/apis/delete-autoscaling-policy.asciidoc",
      "line": 15
    },
    "digest": "e7e47d671e68046629a7969c55eed8b6",
    "lang": "console",
    "found": [],
    "source": "PUT /_autoscaling/policy/my_autoscaling_policy\n{\n  \"policy\": {\n    \"deciders\": {\n      \"always\": {\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_autoscaling/policy/my_autoscaling_policy",
        "query": null,
        "body": {
          "policy": {
            "deciders": {
              "always": {}
            }
          }
        },
        "params": {
          "name": "my_autoscaling_policy"
        },
        "api": "autoscaling.put_autoscaling_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/delete-autoscaling-policy.asciidoc",
      "line": 29
    },
    "digest": "50a9623c153cabe64101efb633e10e6c",
    "lang": "console",
    "found": [],
    "source": "DELETE /_autoscaling/policy/<name>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "autoscaling/apis/delete-autoscaling-policy.asciidoc",
      "line": 52
    },
    "digest": "b620ef4400d2f660fe2c67835938442c",
    "lang": "console",
    "found": [],
    "source": "DELETE /_autoscaling/policy/my_autoscaling_policy",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_autoscaling/policy/my_autoscaling_policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my_autoscaling_policy"
        },
        "api": "autoscaling.delete_autoscaling_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/delete-autoscaling-policy.asciidoc",
      "line": 60
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-policy.asciidoc",
      "line": 15
    },
    "digest": "e7e47d671e68046629a7969c55eed8b6",
    "lang": "console",
    "found": [],
    "source": "PUT /_autoscaling/policy/my_autoscaling_policy\n{\n  \"policy\": {\n    \"deciders\": {\n      \"always\": {\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_autoscaling/policy/my_autoscaling_policy",
        "query": null,
        "body": {
          "policy": {
            "deciders": {
              "always": {}
            }
          }
        },
        "params": {
          "name": "my_autoscaling_policy"
        },
        "api": "autoscaling.put_autoscaling_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-policy.asciidoc",
      "line": 29
    },
    "digest": "fb4799d2fe4011bf6084f89d97d9a4a5",
    "lang": "console",
    "found": [],
    "source": "GET /_autoscaling/policy/<name>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-policy.asciidoc",
      "line": 52
    },
    "digest": "0ea146b178561bc8b9002bed8a35641f",
    "lang": "console",
    "found": [],
    "source": "GET /_autoscaling/policy/my_autoscaling_policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_autoscaling/policy/my_autoscaling_policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my_autoscaling_policy"
        },
        "api": "autoscaling.get_autoscaling_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/get-autoscaling-policy.asciidoc",
      "line": 60
    },
    "digest": "55dd86a01e4ca379ba7637bdbb2620cf",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"policy\": {\n     \"deciders\": <deciders>\n  }\n}"
  },
  {
    "source_location": {
      "file": "autoscaling/apis/put-autoscaling-policy.asciidoc",
      "line": 15
    },
    "digest": "4015b1eb9a15be7a3468bca965c52958",
    "lang": "console",
    "found": [],
    "source": "PUT /_autoscaling/policy/<name>\n{\n  \"policy\": {\n    \"deciders\": {\n      \"always\": {\n      }\n    }\n  }\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "autoscaling/apis/put-autoscaling-policy.asciidoc",
      "line": 47
    },
    "digest": "e7e47d671e68046629a7969c55eed8b6",
    "lang": "console",
    "found": [],
    "source": "PUT /_autoscaling/policy/my_autoscaling_policy\n{\n  \"policy\": {\n    \"deciders\": {\n      \"always\": {\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_autoscaling/policy/my_autoscaling_policy",
        "query": null,
        "body": {
          "policy": {
            "deciders": {
              "always": {}
            }
          }
        },
        "params": {
          "name": "my_autoscaling_policy"
        },
        "api": "autoscaling.put_autoscaling_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "autoscaling/apis/put-autoscaling-policy.asciidoc",
      "line": 63
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "cat.asciidoc",
      "line": 36
    },
    "digest": "45bde49f35ffae3f3dabc77a592241b4",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/master?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/master",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.master"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat.asciidoc",
      "line": 57
    },
    "digest": "179dabbc531ede7a1813d1a11ce5b5fd",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/master?help",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/master",
        "query": {
          "help": true
        },
        "body": null,
        "params": null,
        "api": "cat.master"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat.asciidoc",
      "line": 85
    },
    "digest": "d940059e16675a40e3d278073331eeed",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodes?h=ip,port,heapPercent,name",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": {
          "h": "ip,port,heapPercent,name"
        },
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat.asciidoc",
      "line": 121
    },
    "digest": "53b027c2d3ac80e93d398762c55894eb",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/indices?bytes=b&s=store.size:desc&v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/indices",
        "query": {
          "bytes": "b",
          "s": "store.size:desc",
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.indices"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat.asciidoc",
      "line": 211
    },
    "digest": "794fa23d07c42900b5e97fb9bf323941",
    "lang": "console",
    "found": [],
    "source": "GET _cat/templates?v&s=order:desc,index_patterns",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/templates",
        "query": {
          "v": true,
          "s": "order:desc,index_patterns"
        },
        "body": null,
        "params": null,
        "api": "cat.templates"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/alias.asciidoc",
      "line": 73
    },
    "digest": "a003467caeafcb2a935522efb83080cb",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/aliases?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/aliases",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/allocation.asciidoc",
      "line": 47
    },
    "digest": "5c7ece1f30267adabdb832424871900a",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/allocation?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/allocation",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.allocation"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/anomaly-detectors.asciidoc",
      "line": 267
    },
    "digest": "bb03aeaba69c110f86505fa0e4e5035d",
    "lang": "console",
    "found": [],
    "source": "GET _cat/ml/anomaly_detectors?h=id,s,dpr,mb&v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/ml/anomaly_detectors",
        "query": {
          "h": "id,s,dpr,mb",
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.ml_jobs"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/anomaly-detectors.asciidoc",
      "line": 273
    },
    "digest": "39271e983530b6eb89f38c4098549021",
    "lang": "console-result",
    "found": [],
    "source": "id                        s dpr   mb\nhigh_sum_total_sales closed 14022 1.5mb\nlow_request_rate     closed 1216  40.5kb\nresponse_code_rates  closed 28146 132.7kb\nurl_scanning         closed 28146 501.6kb"
  },
  {
    "source_location": {
      "file": "cat/count.asciidoc",
      "line": 52
    },
    "digest": "e7553d4bb4fd82d8f80a4d7af2624afb",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/count/twitter?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/count/twitter",
        "query": {
          "v": true
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "cat.count"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/count.asciidoc",
      "line": 74
    },
    "digest": "0a1f8ad54b1d8c9feeaceaeed16c8490",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/count?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/count",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.count"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/dataframeanalytics.asciidoc",
      "line": 124
    },
    "digest": "7c6f205c98da14c68d3d936639462dd3",
    "lang": "console",
    "found": [],
    "source": "GET _cat/ml/data_frame/analytics?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/ml/data_frame/analytics",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.ml_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/dataframeanalytics.asciidoc",
      "line": 130
    },
    "digest": "821d07ed9a229f9d5cc34651124da6e8",
    "lang": "console-result",
    "found": [],
    "source": "id               create_time              type             state\nclassifier_job_1 2020-02-12T11:49:09.594Z classification stopped\nclassifier_job_2 2020-02-12T11:49:14.479Z classification stopped\nclassifier_job_3 2020-02-12T11:49:16.928Z classification stopped\nclassifier_job_4 2020-02-12T11:49:19.127Z classification stopped\nclassifier_job_5 2020-02-12T11:49:21.349Z classification stopped"
  },
  {
    "source_location": {
      "file": "cat/datafeeds.asciidoc",
      "line": 118
    },
    "digest": "4f57307b38318e9d8416923e12ff47ed",
    "lang": "console",
    "found": [],
    "source": "GET _cat/ml/datafeeds?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/ml/datafeeds",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.ml_datafeeds"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/datafeeds.asciidoc",
      "line": 124
    },
    "digest": "a22d26ed1bb89879243a707a73fa4e1c",
    "lang": "console-result",
    "found": [],
    "source": "id                              state buckets.count search.count\ndatafeed-high_sum_total_sales stopped 743          7\ndatafeed-low_request_rate     stopped 1457         3\ndatafeed-response_code_rates  stopped 1460         18\ndatafeed-url_scanning         stopped 1460         18"
  },
  {
    "source_location": {
      "file": "cat/fielddata.asciidoc",
      "line": 90
    },
    "digest": "973f2d7fbff9f310b21108b31d7ad413",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/fielddata?v&fields=body",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/fielddata",
        "query": {
          "v": true,
          "fields": "body"
        },
        "body": null,
        "params": null,
        "api": "cat.fielddata"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/fielddata.asciidoc",
      "line": 114
    },
    "digest": "62daf8e41b9e984d18d6cc51f247c7ad",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/fielddata/body,soul?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/fielddata/body,soul",
        "query": {
          "v": true
        },
        "body": null,
        "params": {
          "fields": "body,soul"
        },
        "api": "cat.fielddata"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/fielddata.asciidoc",
      "line": 140
    },
    "digest": "b26ff669b3c88fb0872fa0a923972f54",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/fielddata?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/fielddata",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.fielddata"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/health.asciidoc",
      "line": 69
    },
    "digest": "f8cc4b331a19ff4df8e4a490f906ee69",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET /_cat/health?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/health.asciidoc",
      "line": 89
    },
    "digest": "ccd9e2cf7181de67cf9ab0df1a02c575",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "GET /_cat/health?v&ts=false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/health",
        "query": {
          "v": true,
          "ts": "false"
        },
        "body": null,
        "params": null,
        "api": "cat.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/indices.asciidoc",
      "line": 92
    },
    "digest": "073539a7e38be3cdf13008330b6a536a",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/indices/twi*?v&s=index",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/indices/twi*",
        "query": {
          "v": true,
          "s": "index"
        },
        "body": null,
        "params": {
          "index": "twi*"
        },
        "api": "cat.indices"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/master.asciidoc",
      "line": 39
    },
    "digest": "45bde49f35ffae3f3dabc77a592241b4",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/master?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/master",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.master"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/nodeattrs.asciidoc",
      "line": 69
    },
    "digest": "e20e2e6f949ac660a77840a9263fadef",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodeattrs?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodeattrs",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.nodeattrs"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/nodeattrs.asciidoc",
      "line": 100
    },
    "digest": "0c69c638073cc8518187b678dd33443c",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodeattrs?v&h=name,pid,attr,value",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodeattrs",
        "query": {
          "v": true,
          "h": "name,pid,attr,value"
        },
        "body": null,
        "params": null,
        "api": "cat.nodeattrs"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/nodes.asciidoc",
      "line": 304
    },
    "digest": "db20adb70a8e8d0709d15ba0daf18d23",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodes?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/nodes.asciidoc",
      "line": 332
    },
    "digest": "21d3e98d911642ab3bda2657f7a06f80",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/nodes?v&h=id,ip,port,v,m",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/nodes",
        "query": {
          "v": true,
          "h": "id,ip,port,v,m"
        },
        "body": null,
        "params": null,
        "api": "cat.nodes"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/pending_tasks.asciidoc",
      "line": 39
    },
    "digest": "dc2e9e499c7037eb9327cc84a942c5e9",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/pending_tasks?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/pending_tasks",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.pending_tasks"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/plugins.asciidoc",
      "line": 38
    },
    "digest": "3796d69e8339bab58e70fdde9f9c09ad",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/plugins?v&s=component&h=name,component,version,description",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/plugins",
        "query": {
          "v": true,
          "s": "component",
          "h": "name,component,version,description"
        },
        "body": null,
        "params": null,
        "api": "cat.plugins"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/recovery.asciidoc",
      "line": 67
    },
    "digest": "0497361415e63295f2151b34818ad1ab",
    "lang": "console",
    "found": [],
    "source": "GET _cat/recovery?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/recovery.asciidoc",
      "line": 96
    },
    "digest": "be9390dd19d724364b72bf081b3593d7",
    "lang": "console",
    "found": [],
    "source": "GET _cat/recovery?v&h=i,s,t,ty,st,shost,thost,f,fp,b,bp",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": {
          "v": true,
          "h": "i,s,t,ty,st,shost,thost,f,fp,b,bp"
        },
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/recovery.asciidoc",
      "line": 126
    },
    "digest": "a213728fa704ca23c5983809332d3fb3",
    "lang": "console",
    "found": [],
    "source": "GET _cat/recovery?v&h=i,s,t,ty,st,rep,snap,f,fp,b,bp",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/recovery",
        "query": {
          "v": true,
          "h": "i,s,t,ty,st,rep,snap,f,fp,b,bp"
        },
        "body": null,
        "params": null,
        "api": "cat.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/repositories.asciidoc",
      "line": 38
    },
    "digest": "6fa570aac5033e3b25d3071a6c9ea3dc",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/repositories?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/repositories",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.repositories"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/shards.asciidoc",
      "line": 286
    },
    "digest": "7e126e2751311db60cfcbb22c9c41caa",
    "lang": "console",
    "found": [],
    "source": "GET _cat/shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/shards",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/shards.asciidoc",
      "line": 312
    },
    "digest": "e42e92050dd1c20262ce9e38f4b42ba0",
    "lang": "console",
    "found": [],
    "source": "GET _cat/shards/twitt*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/shards/twitt*",
        "query": null,
        "body": null,
        "params": {
          "index": "twitt*"
        },
        "api": "cat.shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/shards.asciidoc",
      "line": 333
    },
    "digest": "7e126e2751311db60cfcbb22c9c41caa",
    "lang": "console",
    "found": [],
    "source": "GET _cat/shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/shards",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/shards.asciidoc",
      "line": 356
    },
    "digest": "7e126e2751311db60cfcbb22c9c41caa",
    "lang": "console",
    "found": [],
    "source": "GET _cat/shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/shards",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/shards.asciidoc",
      "line": 377
    },
    "digest": "25c0e66a433a0cd596e0641b752ff6d7",
    "lang": "console",
    "found": [],
    "source": "GET _cat/shards?h=index,shard,prirep,state,unassigned.reason",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/shards",
        "query": {
          "h": "index,shard,prirep,state,unassigned.reason"
        },
        "body": null,
        "params": null,
        "api": "cat.shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/segments.asciidoc",
      "line": 108
    },
    "digest": "6f507269ad5b31d2bb0885c1b18aac1a",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/segments?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/segments",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/snapshots.asciidoc",
      "line": 115
    },
    "digest": "706fc4b9e4df1f6ee3fe34194492c20e",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/snapshots/repo1?v&s=id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/snapshots/repo1",
        "query": {
          "v": true,
          "s": "id"
        },
        "body": null,
        "params": {
          "repository": "repo1"
        },
        "api": "cat.snapshots"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/tasks.asciidoc",
      "line": 57
    },
    "digest": "f3422381d36398fcb2612692b11b1e96",
    "lang": "console",
    "found": [],
    "source": "GET _cat/tasks?v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/tasks",
        "query": {
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.tasks"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/tasks.asciidoc",
      "line": 65
    },
    "digest": "c2613cffe0ea615550bb2a0ef9c76697",
    "lang": "console-result",
    "found": [],
    "source": "action                         task_id                    parent_task_id             type      start_time    timestamp running_time ip             node\ncluster:monitor/tasks/lists[n] oTUltX4IQMOUUVeiohTt8A:124 oTUltX4IQMOUUVeiohTt8A:123 direct    1458585884904 01:48:24  44.1micros   127.0.0.1:9300 oTUltX4IQMOUUVeiohTt8A\ncluster:monitor/tasks/lists    oTUltX4IQMOUUVeiohTt8A:123 -                          transport 1458585884904 01:48:24  186.2micros  127.0.0.1:9300 oTUltX4IQMOUUVeiohTt8A"
  },
  {
    "source_location": {
      "file": "cat/templates.asciidoc",
      "line": 50
    },
    "digest": "289e6033c96f931844770114113cad6a",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/templates?v&s=name",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/templates",
        "query": {
          "v": true,
          "s": "name"
        },
        "body": null,
        "params": null,
        "api": "cat.templates"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/thread_pool.asciidoc",
      "line": 125
    },
    "digest": "ad88e46bb06739991498dee248850223",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/thread_pool",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/thread_pool",
        "query": null,
        "body": null,
        "params": null,
        "api": "cat.thread_pool"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/thread_pool.asciidoc",
      "line": 161
    },
    "digest": "ab5e724a4baa0cc44df33f7d62583e7f",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/thread_pool/generic?v&h=id,name,active,rejected,completed",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/thread_pool/generic",
        "query": {
          "v": true,
          "h": "id,name,active,rejected,completed"
        },
        "body": null,
        "params": {
          "thread_pool_patterns": "generic"
        },
        "api": "cat.thread_pool"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/trainedmodel.asciidoc",
      "line": 113
    },
    "digest": "1d56d3532d30d60c1d93d75b6a377a49",
    "lang": "console",
    "found": [],
    "source": "GET _cat/ml/trained_models?h=c,o,l,ct,v&v",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/ml/trained_models",
        "query": {
          "h": "c,o,l,ct,v",
          "v": true
        },
        "body": null,
        "params": null,
        "api": "cat.ml_trained_models"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/trainedmodel.asciidoc",
      "line": 120
    },
    "digest": "bf7dead020ccabeb72f695804845ef14",
    "lang": "console-result",
    "found": [],
    "source": "id                           created_by operations license  create_time              version\nddddd-1580216177138              _xpack 196        PLATINUM 2020-01-28T12:56:17.138Z 8.0.0\nflight-regress-1580215685537     _xpack 102        PLATINUM 2020-01-28T12:48:05.537Z 8.0.0\nlang_ident_model_1               _xpack 39629      BASIC    2019-12-05T12:28:34.594Z 7.6.0"
  },
  {
    "source_location": {
      "file": "cat/transforms.asciidoc",
      "line": 168
    },
    "digest": "da8c3c635ea1101d6a1a5eb1db2ffebd",
    "lang": "console",
    "found": [],
    "source": "GET /_cat/transforms?v&format=json",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cat/transforms",
        "query": {
          "v": true,
          "format": "json"
        },
        "body": null,
        "params": null,
        "api": "cat.transforms"
      }
    ]
  },
  {
    "source_location": {
      "file": "cat/transforms.asciidoc",
      "line": 174
    },
    "digest": "abfe7e2fe7e503fdb4fc3b9c6be18b07",
    "lang": "console-result",
    "found": [],
    "source": "[\n  {\n    \"id\" : \"ecommerce_transform\",\n    \"create_time\" : \"2020-03-20T20:31:25.077Z\",\n    \"version\" : \"7.7.0\",\n    \"source_index\" : \"kibana_sample_data_ecommerce\",\n    \"dest_index\" : \"kibana_sample_data_ecommerce_transform\",\n    \"pipeline\" : null,\n    \"description\" : \"Maximum priced ecommerce data by customer_id in Asia\",\n    \"transform_type\" : \"continuous\",\n    \"frequency\" : \"5m\",\n    \"max_page_search_size\" : \"500\",\n    \"state\" : \"STARTED\"\n  }\n]"
  },
  {
    "source_location": {
      "file": "cluster.asciidoc",
      "line": 56
    },
    "digest": "2c602b4ee8f22cda2cdf19bad31da0af",
    "lang": "console",
    "found": [],
    "source": "# If no filters are given, the default is to select all nodes\nGET /_nodes\n# Explicitly select all nodes\nGET /_nodes/_all\n# Select just the local node\nGET /_nodes/_local\n# Select the elected master node\nGET /_nodes/_master\n# Select nodes by name, which can include wildcards\nGET /_nodes/node_name_goes_here\nGET /_nodes/node_name_goes_*\n# Select nodes by address, which can include wildcards\nGET /_nodes/10.0.0.3,10.0.0.4\nGET /_nodes/10.0.0.*\n# Select nodes by role\nGET /_nodes/_all,master:false\nGET /_nodes/data:true,ingest:true\nGET /_nodes/coordinating_only:true\nGET /_nodes/master:true,voting_only:false\n# Select nodes by custom attribute (e.g. with something like `node.attr.rack: 2` in the configuration file)\nGET /_nodes/rack:2\nGET /_nodes/ra*:2\nGET /_nodes/ra*:2*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes",
        "query": null,
        "body": null,
        "params": null,
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/_all",
        "query": null,
        "body": null,
        "params": {
          "node_id": "_all"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/_local",
        "query": null,
        "body": null,
        "params": {
          "node_id": "_local"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/_master",
        "query": null,
        "body": null,
        "params": {
          "node_id": "_master"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/node_name_goes_here",
        "query": null,
        "body": null,
        "params": {
          "node_id": "node_name_goes_here"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/node_name_goes_*",
        "query": null,
        "body": null,
        "params": {
          "node_id": "node_name_goes_*"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/10.0.0.3,10.0.0.4",
        "query": null,
        "body": null,
        "params": {
          "node_id": "10.0.0.3,10.0.0.4"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/10.0.0.*",
        "query": null,
        "body": null,
        "params": {
          "node_id": "10.0.0.*"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/_all,master:false",
        "query": null,
        "body": null,
        "params": {
          "node_id": "_all,master:false"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/data:true,ingest:true",
        "query": null,
        "body": null,
        "params": {
          "node_id": "data:true,ingest:true"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/coordinating_only:true",
        "query": null,
        "body": null,
        "params": {
          "node_id": "coordinating_only:true"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/master:true,voting_only:false",
        "query": null,
        "body": null,
        "params": {
          "node_id": "master:true,voting_only:false"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/rack:2",
        "query": null,
        "body": null,
        "params": {
          "node_id": "rack:2"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/ra*:2",
        "query": null,
        "body": null,
        "params": {
          "node_id": "ra*:2"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/ra*:2*",
        "query": null,
        "body": null,
        "params": {
          "node_id": "ra*:2*"
        },
        "api": "nodes.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/allocation-explain.asciidoc",
      "line": 77
    },
    "digest": "2663038cfc46b106edaef607d553c99c",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/allocation/explain\n{\n  \"index\": \"myindex\",\n  \"shard\": 0,\n  \"primary\": true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/allocation/explain",
        "query": null,
        "body": {
          "index": "myindex",
          "shard": 0,
          "primary": true
        },
        "params": null,
        "api": "cluster.allocation_explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/allocation-explain.asciidoc",
      "line": 90
    },
    "digest": "75fb2de2b47c564833ab14049c295384",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/allocation/explain\n{\n  \"index\": \"myindex\",\n  \"shard\": 0,\n  \"primary\": false,\n  \"current_node\": \"nodeA\"                         <1>\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/allocation/explain",
        "query": null,
        "body": {
          "index": "myindex",
          "shard": 0,
          "primary": false,
          "current_node": "nodeA"
        },
        "params": null,
        "api": "cluster.allocation_explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/allocation-explain.asciidoc",
      "line": 114
    },
    "digest": "9db57741b46cc9f088cebd6a34ba147d",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index?master_timeout=1s&timeout=1s\n{\"settings\": {\"index.routing.allocation.include._name\": \"non_existent_node\"} }\n\nGET /_cluster/allocation/explain\n{\n  \"index\": \"my_index\",\n  \"shard\": 0,\n  \"primary\": true\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": {
          "master_timeout": "1s",
          "timeout": "1s"
        },
        "body": {
          "settings": {
            "index.routing.allocation.include._name": "non_existent_node"
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      },
      {
        "method": "GET",
        "url": "/_cluster/allocation/explain",
        "query": null,
        "body": {
          "index": "my_index",
          "shard": 0,
          "primary": true
        },
        "params": null,
        "api": "cluster.allocation_explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/allocation-explain.asciidoc",
      "line": 130
    },
    "digest": "5baf4aac3e1293fc528d56b91699e781",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"index\" : \"my_index\",\n  \"shard\" : 0,\n  \"primary\" : true,\n  \"current_state\" : \"unassigned\",                 <1>\n  \"unassigned_info\" : {\n    \"reason\" : \"INDEX_CREATED\",                   <2>\n    \"at\" : \"2017-01-04T18:08:16.600Z\",\n    \"last_allocation_status\" : \"no\"\n  },\n  \"can_allocate\" : \"no\",                          <3>\n  \"allocate_explanation\" : \"cannot allocate because allocation is not permitted to any of the nodes\",\n  \"node_allocation_decisions\" : [\n    {\n      \"node_id\" : \"8qt2rY-pT6KNZB3-hGfLnw\",\n      \"node_name\" : \"node-0\",\n      \"transport_address\" : \"127.0.0.1:9401\",\n      \"node_attributes\" : {},\n      \"node_decision\" : \"no\",                     <4>\n      \"weight_ranking\" : 1,\n      \"deciders\" : [\n        {\n          \"decider\" : \"filter\",                   <5>\n          \"decision\" : \"NO\",\n          \"explanation\" : \"node does not match index setting [index.routing.allocation.include] filters [_name:\\\"non_existent_node\\\"]\"  <6>\n        }\n      ]\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "cluster/health.asciidoc",
      "line": 35
    },
    "digest": "04f5dd677c777bcb15d7d5fa63275fc8",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/health?wait_for_status=yellow&timeout=50s",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health",
        "query": {
          "wait_for_status": "yellow",
          "timeout": "50s"
        },
        "body": null,
        "params": null,
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/health.asciidoc",
      "line": 143
    },
    "digest": "b02e4907c9936c1adc16ccce9d49900d",
    "lang": "console",
    "found": [],
    "source": "GET _cluster/health",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health",
        "query": null,
        "body": null,
        "params": null,
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/health.asciidoc",
      "line": 152
    },
    "digest": "a6936420cb762a0f7f53a5ec54e52f36",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"cluster_name\" : \"testcluster\",\n  \"status\" : \"yellow\",\n  \"timed_out\" : false,\n  \"number_of_nodes\" : 1,\n  \"number_of_data_nodes\" : 1,\n  \"active_primary_shards\" : 1,\n  \"active_shards\" : 1,\n  \"relocating_shards\" : 0,\n  \"initializing_shards\" : 0,\n  \"unassigned_shards\" : 1,\n  \"delayed_unassigned_shards\": 0,\n  \"number_of_pending_tasks\" : 0,\n  \"number_of_in_flight_fetch\": 0,\n  \"task_max_waiting_in_queue_millis\": 0,\n  \"active_shards_percent_as_number\": 50.0\n}"
  },
  {
    "source_location": {
      "file": "cluster/health.asciidoc",
      "line": 179
    },
    "digest": "c48264ec5d9b9679fddd72e5c44425b9",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/health/twitter?level=shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/health/twitter",
        "query": {
          "level": "shards"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "cluster.health"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/reroute.asciidoc",
      "line": 185
    },
    "digest": "c5488b3888749d3d5b9808ab28d384eb",
    "lang": "console",
    "found": [],
    "source": "POST /_cluster/reroute\n{\n    \"commands\" : [\n        {\n            \"move\" : {\n                \"index\" : \"test\", \"shard\" : 0,\n                \"from_node\" : \"node1\", \"to_node\" : \"node2\"\n            }\n        },\n        {\n          \"allocate_replica\" : {\n                \"index\" : \"test\", \"shard\" : 1,\n                \"node\" : \"node3\"\n          }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_cluster/reroute",
        "query": null,
        "body": {
          "commands": [
            {
              "move": {
                "index": "test",
                "shard": 0,
                "from_node": "node1",
                "to_node": "node2"
              }
            },
            {
              "allocate_replica": {
                "index": "test",
                "shard": 1,
                "node": "node3"
              }
            }
          ]
        },
        "params": null,
        "api": "cluster.reroute"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/state.asciidoc",
      "line": 133
    },
    "digest": "b66be1daf6c220eb66d94e708b2fae39",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state/metadata,routing_table/foo,bar",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state/metadata,routing_table/foo,bar",
        "query": null,
        "body": null,
        "params": {
          "metric": "metadata,routing_table",
          "index": "foo,bar"
        },
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/state.asciidoc",
      "line": 140
    },
    "digest": "0fa220ee3fb267020382f74aa70eb1e9",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state/_all/foo,bar",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state/_all/foo,bar",
        "query": null,
        "body": null,
        "params": {
          "metric": "_all",
          "index": "foo,bar"
        },
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/state.asciidoc",
      "line": 147
    },
    "digest": "a3cfd350c73a104b99a998c6be931408",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/state/blocks",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/state/blocks",
        "query": null,
        "body": null,
        "params": {
          "metric": "blocks"
        },
        "api": "cluster.state"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/stats.asciidoc",
      "line": 878
    },
    "digest": "861f5f61409dc87f3671293b87839ff7",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/stats?human&pretty",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/stats",
        "query": {
          "human": true,
          "pretty": true
        },
        "body": null,
        "params": null,
        "api": "cluster.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/stats.asciidoc",
      "line": 1122
    },
    "digest": "71c629c44bf3c542a0daacbfc253c4b0",
    "lang": "console",
    "found": [],
    "source": "GET /_cluster/stats/nodes/node1,node*,master:false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_cluster/stats/nodes/node1,node*,master:false",
        "query": null,
        "body": null,
        "params": {
          "node_id": "node1,node*,master:false"
        },
        "api": "cluster.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 65
    },
    "digest": "37f4bd6dd220db648998fc340b3dfa69",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n    \"persistent\" : {\n        \"indices.recovery.max_bytes_per_sec\" : \"50mb\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "indices.recovery.max_bytes_per_sec": "50mb"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 78
    },
    "digest": "8c05281b724106e703c05df661188c4f",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings?flat_settings=true\n{\n    \"transient\" : {\n        \"indices.recovery.max_bytes_per_sec\" : \"20mb\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": {
          "flat_settings": "true"
        },
        "body": {
          "transient": {
            "indices.recovery.max_bytes_per_sec": "20mb"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 92
    },
    "digest": "dc16ba440e7be92b884ab4e06cba00c2",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"persistent\" : { },\n    \"transient\" : {\n        \"indices.recovery.max_bytes_per_sec\" : \"20mb\"\n    }\n}"
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 107
    },
    "digest": "1f25c9ef11f574f1ba0ad974bf653cd4",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n    \"transient\" : {\n        \"indices.recovery.max_bytes_per_sec\" : null\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "indices.recovery.max_bytes_per_sec": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 120
    },
    "digest": "5146a52d0e9cb82665c29ad890df6ead",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"persistent\" : {},\n    \"transient\" : {}\n}"
  },
  {
    "source_location": {
      "file": "cluster/update-settings.asciidoc",
      "line": 134
    },
    "digest": "32496570a397852bece96f4da5d17a7e",
    "lang": "console",
    "found": [],
    "source": "PUT /_cluster/settings\n{\n    \"transient\" : {\n        \"indices.recovery.*\" : null\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "indices.recovery.*": null
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-usage.asciidoc",
      "line": 61
    },
    "digest": "3d6a56dd3d93ece0e3da3fb66b4696d3",
    "lang": "console",
    "found": [],
    "source": "GET _nodes/usage",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/usage",
        "query": null,
        "body": null,
        "params": null,
        "api": "nodes.usage"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-usage.asciidoc",
      "line": 69
    },
    "digest": "35d13927cdb2785fd79e88c8c04007e7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_nodes\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"cluster_name\": \"my_cluster\",\n  \"nodes\": {\n    \"pQHNt5rXTTWNvUgOrdynKg\": {\n      \"timestamp\": 1492553961812, <1>\n      \"since\": 1492553906606, <2>\n      \"rest_actions\": {\n        \"org.elasticsearch.rest.action.admin.cluster.RestNodesUsageAction\": 1,\n        \"org.elasticsearch.rest.action.admin.indices.RestCreateIndexAction\": 1,\n        \"org.elasticsearch.rest.action.document.RestGetAction\": 1,\n        \"org.elasticsearch.rest.action.search.RestSearchAction\": 19, <3>\n        \"org.elasticsearch.rest.action.admin.cluster.RestNodesInfoAction\": 36\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/nodes-hot-threads.asciidoc",
      "line": 64
    },
    "digest": "77c099c97ea6911e2dd6e996da7dcca0",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/hot_threads\nGET /_nodes/nodeId1,nodeId2/hot_threads",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/hot_threads",
        "query": null,
        "body": null,
        "params": null,
        "api": "nodes.hot_threads"
      },
      {
        "method": "GET",
        "url": "/_nodes/nodeId1,nodeId2/hot_threads",
        "query": null,
        "body": null,
        "params": {
          "node_id": "nodeId1,nodeId2"
        },
        "api": "nodes.hot_threads"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-info.asciidoc",
      "line": 165
    },
    "digest": "3c4d7ef8422d2db423a8f23effcddaa1",
    "lang": "console",
    "found": [],
    "source": "# return just process\nGET /_nodes/process\n\n# same as above\nGET /_nodes/_all/process\n\n# return just jvm and process of only nodeId1 and nodeId2\nGET /_nodes/nodeId1,nodeId2/jvm,process\n\n# same as above\nGET /_nodes/nodeId1,nodeId2/info/jvm,process\n\n# return all the information of only nodeId1 and nodeId2\nGET /_nodes/nodeId1,nodeId2/_all",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/process",
        "query": null,
        "body": null,
        "params": {
          "node_id": "process"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/_all/process",
        "query": null,
        "body": null,
        "params": {
          "node_id": "_all",
          "metric": "process"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/nodeId1,nodeId2/jvm,process",
        "query": null,
        "body": null,
        "params": {
          "node_id": "nodeId1,nodeId2",
          "metric": "jvm,process"
        },
        "api": "nodes.info"
      },
      {
        "method": "GET",
        "url": "/_nodes/nodeId1,nodeId2/_all",
        "query": null,
        "body": null,
        "params": {
          "node_id": "nodeId1,nodeId2",
          "metric": "_all"
        },
        "api": "nodes.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-info.asciidoc",
      "line": 192
    },
    "digest": "68b64313bf89ec3f2c645da61999dbb4",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/plugins",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/plugins",
        "query": null,
        "body": null,
        "params": {
          "node_id": "plugins"
        },
        "api": "nodes.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-info.asciidoc",
      "line": 200
    },
    "digest": "482734cbb2bea52b69e21cc779b00dcd",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_nodes\": ...\n  \"cluster_name\": \"elasticsearch\",\n  \"nodes\": {\n    \"USpTGYaBSIKbgSUJR2Z9lg\": {\n      \"name\": \"node-0\",\n      \"transport_address\": \"192.168.17:9300\",\n      \"host\": \"node-0.elastic.co\",\n      \"ip\": \"192.168.17\",\n      \"version\": \"{version}\",\n      \"build_flavor\": \"{build_flavor}\",\n      \"build_type\": \"{build_type}\",\n      \"build_hash\": \"587409e\",\n      \"roles\": [\n        \"master\",\n        \"data\",\n        \"ingest\"\n      ],\n      \"attributes\": {},\n      \"plugins\": [\n        {\n          \"name\": \"analysis-icu\",\n          \"version\": \"{version}\",\n          \"description\": \"The ICU Analysis plugin integrates Lucene ICU module into elasticsearch, adding ICU relates analysis components.\",\n          \"classname\": \"org.elasticsearch.plugin.analysis.icu.AnalysisICUPlugin\",\n          \"has_native_controller\": false\n        }\n      ],\n      \"modules\": [\n        {\n          \"name\": \"lang-painless\",\n          \"version\": \"{version}\",\n          \"description\": \"An easy, safe and fast scripting language for Elasticsearch\",\n          \"classname\": \"org.elasticsearch.painless.PainlessPlugin\",\n          \"has_native_controller\": false\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/nodes-info.asciidoc",
      "line": 263
    },
    "digest": "0c464965126cc09e6812716a145991d4",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/ingest",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/ingest",
        "query": null,
        "body": null,
        "params": {
          "node_id": "ingest"
        },
        "api": "nodes.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-info.asciidoc",
      "line": 271
    },
    "digest": "e5909bdf16ebbcdb6e4e7da443ad367a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_nodes\": ...\n  \"cluster_name\": \"elasticsearch\",\n  \"nodes\": {\n    \"USpTGYaBSIKbgSUJR2Z9lg\": {\n      \"name\": \"node-0\",\n      \"transport_address\": \"192.168.17:9300\",\n      \"host\": \"node-0.elastic.co\",\n      \"ip\": \"192.168.17\",\n      \"version\": \"{version}\",\n      \"build_flavor\": \"{build_flavor}\",\n      \"build_type\": \"{build_type}\",\n      \"build_hash\": \"587409e\",\n      \"roles\": [],\n      \"attributes\": {},\n      \"ingest\": {\n        \"processors\": [\n          {\n            \"type\": \"date\"\n          },\n          {\n            \"type\": \"uppercase\"\n          },\n          {\n            \"type\": \"set\"\n          },\n          {\n            \"type\": \"lowercase\"\n          },\n          {\n            \"type\": \"gsub\"\n          },\n          {\n            \"type\": \"convert\"\n          },\n          {\n            \"type\": \"remove\"\n          },\n          {\n            \"type\": \"fail\"\n          },\n          {\n            \"type\": \"foreach\"\n          },\n          {\n            \"type\": \"split\"\n          },\n          {\n            \"type\": \"trim\"\n          },\n          {\n            \"type\": \"rename\"\n          },\n          {\n            \"type\": \"join\"\n          },\n          {\n            \"type\": \"append\"\n          }\n        ]\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/nodes-reload-secure-settings.asciidoc",
      "line": 57
    },
    "digest": "a28811aa25e10cfc38fe593c1615e1a1",
    "lang": "console",
    "found": [],
    "source": "POST _nodes/reload_secure_settings\n{\n  \"secure_settings_password\":\"s3cr3t\"\n}\nPOST _nodes/nodeId1,nodeId2/reload_secure_settings\n{\n  \"secure_settings_password\":\"s3cr3t\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_nodes/reload_secure_settings",
        "query": null,
        "body": {
          "secure_settings_password": "s3cr3t"
        },
        "params": null,
        "api": "nodes.reload_secure_settings"
      },
      {
        "method": "POST",
        "url": "/_nodes/nodeId1,nodeId2/reload_secure_settings",
        "query": null,
        "body": {
          "secure_settings_password": "s3cr3t"
        },
        "params": {
          "node_id": "nodeId1,nodeId2"
        },
        "api": "nodes.reload_secure_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-reload-secure-settings.asciidoc",
      "line": 76
    },
    "digest": "f141b94c4b48dc62c67cffc121320a8d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_nodes\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"cluster_name\": \"my_cluster\",\n  \"nodes\": {\n    \"pQHNt5rXTTWNvUgOrdynKg\": {\n      \"name\": \"node-0\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2140
    },
    "digest": "5457c94f0039c6b95c7f9f305d0c6b58",
    "lang": "console",
    "found": [],
    "source": "# return just indices\nGET /_nodes/stats/indices\n\n# return just os and process\nGET /_nodes/stats/os,process\n\n# return just process for node with IP address 10.0.0.1\nGET /_nodes/10.0.0.1/stats/process",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/indices",
        "query": null,
        "body": null,
        "params": {
          "metric": "indices"
        },
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/os,process",
        "query": null,
        "body": null,
        "params": {
          "metric": "os,process"
        },
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/10.0.0.1/stats/process",
        "query": null,
        "body": null,
        "params": {
          "node_id": "10.0.0.1",
          "metric": "process"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2158
    },
    "digest": "150b5fee5678bf8cdf0932da73eada80",
    "lang": "console",
    "found": [],
    "source": "# Fielddata summarized by node\nGET /_nodes/stats/indices/fielddata?fields=field1,field2\n\n# Fielddata summarized by node and index\nGET /_nodes/stats/indices/fielddata?level=indices&fields=field1,field2\n\n# Fielddata summarized by node, index, and shard\nGET /_nodes/stats/indices/fielddata?level=shards&fields=field1,field2\n\n# You can use wildcards for field names\nGET /_nodes/stats/indices/fielddata?fields=field*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/fielddata",
        "query": {
          "fields": "field1,field2"
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "fielddata"
        },
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/fielddata",
        "query": {
          "level": "indices",
          "fields": "field1,field2"
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "fielddata"
        },
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/fielddata",
        "query": {
          "level": "shards",
          "fields": "field1,field2"
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "fielddata"
        },
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/fielddata",
        "query": {
          "fields": "field*"
        },
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "fielddata"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2176
    },
    "digest": "bd68666ca2e0be12f7624016317a62bc",
    "lang": "console",
    "found": [],
    "source": "# All groups with all stats\nGET /_nodes/stats?groups=_all\n\n# Some groups from just the indices stats\nGET /_nodes/stats/indices?groups=foo,bar",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats",
        "query": {
          "groups": "_all"
        },
        "body": null,
        "params": null,
        "api": "nodes.stats"
      },
      {
        "method": "GET",
        "url": "/_nodes/stats/indices",
        "query": {
          "groups": "foo,bar"
        },
        "body": null,
        "params": {
          "metric": "indices"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2192
    },
    "digest": "09769561f082b50558fb7d8707719963",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/stats/ingest?filter_path=nodes.*.ingest",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/ingest",
        "query": {
          "filter_path": "nodes.*.ingest"
        },
        "body": null,
        "params": {
          "metric": "ingest"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2200
    },
    "digest": "ef9c29759459904fef162acd223462c4",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/stats?metric=ingest&filter_path=nodes.*.ingest",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats",
        "query": {
          "metric": "ingest",
          "filter_path": "nodes.*.ingest"
        },
        "body": null,
        "params": null,
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/nodes-stats.asciidoc",
      "line": 2208
    },
    "digest": "f160561efab38e40c2feebf5a2542ab5",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/stats?metric=ingest&filter_path=nodes.*.ingest.pipelines",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats",
        "query": {
          "metric": "ingest",
          "filter_path": "nodes.*.ingest.pipelines"
        },
        "body": null,
        "params": null,
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 64
    },
    "digest": "166bcfc6d5d39defec7ad6aa44d0914b",
    "lang": "console",
    "found": [],
    "source": "GET _tasks <1>\nGET _tasks?nodes=nodeId1,nodeId2 <2>\nGET _tasks?nodes=nodeId1,nodeId2&actions=cluster:* <3>",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": null,
        "body": null,
        "params": null,
        "api": "tasks.list"
      },
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "nodes": "nodeId1,nodeId2"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      },
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "nodes": "nodeId1,nodeId2",
          "actions": "cluster:*"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 78
    },
    "digest": "7c407f3a8d5cb690829b8fa58bb8fd42",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\" : {\n    \"oTUltX4IQMOUUVeiohTt8A\" : {\n      \"name\" : \"H5dfFeA\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"tasks\" : {\n        \"oTUltX4IQMOUUVeiohTt8A:124\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 124,\n          \"type\" : \"direct\",\n          \"action\" : \"cluster:monitor/tasks/lists[n]\",\n          \"start_time_in_millis\" : 1458585884904,\n          \"running_time_in_nanos\" : 47402,\n          \"cancellable\" : false,\n          \"parent_task_id\" : \"oTUltX4IQMOUUVeiohTt8A:123\"\n        },\n        \"oTUltX4IQMOUUVeiohTt8A:123\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 123,\n          \"type\" : \"transport\",\n          \"action\" : \"cluster:monitor/tasks/lists\",\n          \"start_time_in_millis\" : 1458585884904,\n          \"running_time_in_nanos\" : 236042,\n          \"cancellable\" : false\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 118
    },
    "digest": "33610800d9de3c3e6d6b3c611ace7330",
    "lang": "console",
    "found": [],
    "source": "GET _tasks/oTUltX4IQMOUUVeiohTt8A:124",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks/oTUltX4IQMOUUVeiohTt8A:124",
        "query": null,
        "body": null,
        "params": {
          "task_id": "oTUltX4IQMOUUVeiohTt8A:124"
        },
        "api": "tasks.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 128
    },
    "digest": "29824032d7d64512d17458fdd687b1f6",
    "lang": "console",
    "found": [],
    "source": "GET _tasks?parent_task_id=oTUltX4IQMOUUVeiohTt8A:123",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "parent_task_id": "oTUltX4IQMOUUVeiohTt8A:123"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 143
    },
    "digest": "8f4a7f68f2ca3698abdf20026a2d8c5f",
    "lang": "console",
    "found": [],
    "source": "GET _tasks?actions=*search&detailed",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "actions": "*search",
          "detailed": true
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 151
    },
    "digest": "0a733828e712d5dc3c1f9591ebbb843e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\" : {\n    \"oTUltX4IQMOUUVeiohTt8A\" : {\n      \"name\" : \"H5dfFeA\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"tasks\" : {\n        \"oTUltX4IQMOUUVeiohTt8A:464\" : {\n          \"node\" : \"oTUltX4IQMOUUVeiohTt8A\",\n          \"id\" : 464,\n          \"type\" : \"transport\",\n          \"action\" : \"indices:data/read/search\",\n          \"description\" : \"indices[test], types[test], search_type[QUERY_THEN_FETCH], source[{\\\"query\\\":...}]\",\n          \"start_time_in_millis\" : 1483478610008,\n          \"running_time_in_nanos\" : 13991383,\n          \"cancellable\" : true\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 206
    },
    "digest": "93fb59d3204f37af952198b331fb6bb7",
    "lang": "console",
    "found": [],
    "source": "GET _tasks/oTUltX4IQMOUUVeiohTt8A:12345?wait_for_completion=true&timeout=10s",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks/oTUltX4IQMOUUVeiohTt8A:12345",
        "query": {
          "wait_for_completion": "true",
          "timeout": "10s"
        },
        "body": null,
        "params": {
          "task_id": "oTUltX4IQMOUUVeiohTt8A:12345"
        },
        "api": "tasks.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 215
    },
    "digest": "77447e2966708e92f5e219d43ac3f00d",
    "lang": "console",
    "found": [],
    "source": "GET _tasks?actions=*reindex&wait_for_completion=true&timeout=10s",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "actions": "*reindex",
          "wait_for_completion": "true",
          "timeout": "10s"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 226
    },
    "digest": "d89d36741d906a71eca6c144e8d83889",
    "lang": "console",
    "found": [],
    "source": "POST _tasks/oTUltX4IQMOUUVeiohTt8A:12345/_cancel",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_tasks/oTUltX4IQMOUUVeiohTt8A:12345/_cancel",
        "query": null,
        "body": null,
        "params": {
          "task_id": "oTUltX4IQMOUUVeiohTt8A:12345"
        },
        "api": "tasks.cancel"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 241
    },
    "digest": "612c2e975f833de9815651135735eae5",
    "lang": "console",
    "found": [],
    "source": "POST _tasks/_cancel?nodes=nodeId1,nodeId2&actions=*reindex",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_tasks/_cancel",
        "query": {
          "nodes": "nodeId1,nodeId2",
          "actions": "*reindex"
        },
        "body": null,
        "params": null,
        "api": "tasks.cancel"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 252
    },
    "digest": "bd3d710ec50a151453e141691163af72",
    "lang": "console",
    "found": [],
    "source": "GET _tasks?group_by=parents",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "group_by": "parents"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/tasks.asciidoc",
      "line": 259
    },
    "digest": "a3ce0cfe2176f3d8a36959a5916995f0",
    "lang": "console",
    "found": [],
    "source": "GET _tasks?group_by=none",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "group_by": "none"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "cluster/voting-exclusions.asciidoc",
      "line": 73
    },
    "digest": "59681840e544bb5b3bd858c194972f23",
    "lang": "console",
    "found": [],
    "source": "POST /_cluster/voting_config_exclusions/nodeId1",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "cluster/voting-exclusions.asciidoc",
      "line": 82
    },
    "digest": "25cb9e1da00dfd971065ce182467434d",
    "lang": "console",
    "found": [],
    "source": "DELETE /_cluster/voting_config_exclusions",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/get-ccr-stats.asciidoc",
      "line": 37
    },
    "digest": "9b30a69fec54cf01f7af1b04a6e15239",
    "lang": "console",
    "found": [],
    "source": "GET /_ccr/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ccr/stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "ccr.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/get-ccr-stats.asciidoc",
      "line": 96
    },
    "digest": "9b30a69fec54cf01f7af1b04a6e15239",
    "lang": "console",
    "found": [],
    "source": "GET /_ccr/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ccr/stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "ccr.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/get-ccr-stats.asciidoc",
      "line": 103
    },
    "digest": "fb4b67c046594eb08c912e9fbc63753a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"auto_follow_stats\" : {\n    \"number_of_failed_follow_indices\" : 0,\n    \"number_of_failed_remote_cluster_state_requests\" : 0,\n    \"number_of_successful_follow_indices\" : 1,\n    \"recent_auto_follow_errors\" : [],\n    \"auto_followed_clusters\" : []\n  },\n  \"follow_stats\" : {\n    \"indices\" : [\n      {\n        \"index\" : \"follower_index\",\n        \"shards\" : [\n          {\n            \"remote_cluster\" : \"remote_cluster\",\n            \"leader_index\" : \"leader_index\",\n            \"follower_index\" : \"follower_index\",\n            \"shard_id\" : 0,\n            \"leader_global_checkpoint\" : 1024,\n            \"leader_max_seq_no\" : 1536,\n            \"follower_global_checkpoint\" : 768,\n            \"follower_max_seq_no\" : 896,\n            \"last_requested_seq_no\" : 897,\n            \"outstanding_read_requests\" : 8,\n            \"outstanding_write_requests\" : 2,\n            \"write_buffer_operation_count\" : 64,\n            \"follower_mapping_version\" : 4,\n            \"follower_settings_version\" : 2,\n            \"follower_aliases_version\" : 8,\n            \"total_read_time_millis\" : 32768,\n            \"total_read_remote_exec_time_millis\" : 16384,\n            \"successful_read_requests\" : 32,\n            \"failed_read_requests\" : 0,\n            \"operations_read\" : 896,\n            \"bytes_read\" : 32768,\n            \"total_write_time_millis\" : 16384,\n            \"write_buffer_size_in_bytes\" : 1536,\n            \"successful_write_requests\" : 16,\n            \"failed_write_requests\" : 0,\n            \"operations_written\" : 832,\n            \"read_exceptions\" : [ ],\n            \"time_since_last_read_millis\" : 8\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/put-follow.asciidoc",
      "line": 25
    },
    "digest": "73646c12ad33a813ab2280f1dc83500e",
    "lang": "console",
    "found": [],
    "source": "PUT /<follower_index>/_ccr/follow?wait_for_active_shards=1\n{\n  \"remote_cluster\" : \"<remote_cluster>\",\n  \"leader_index\" : \"<leader_index>\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow-request-body.asciidoc",
      "line": 80
    },
    "digest": "bb5221ac311cc0e719ab75895be81959",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"follower_indices\" : [\n    {\n      \"parameters\" : {\n        \"max_read_request_operation_count\" : 5120,\n        \"max_read_request_size\" : \"32mb\",\n        \"max_outstanding_read_requests\" : 12,\n        \"max_write_request_operation_count\" : 5120,\n        \"max_write_request_size\" : \"9223372036854775807b\",\n        \"max_outstanding_write_requests\" : 9,\n        \"max_write_buffer_count\" : 2147483647,\n        \"max_write_buffer_size\" : \"512mb\",\n        \"max_retry_delay\" : \"500ms\",\n        \"read_poll_timeout\" : \"1m\"\n      }\n    }\n  ]\n}\n"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/put-follow.asciidoc",
      "line": 88
    },
    "digest": "c1f565c68d7bfce4a4251c7919444977",
    "lang": "console",
    "found": [],
    "source": "PUT /follower_index/_ccr/follow?wait_for_active_shards=1\n{\n  \"remote_cluster\" : \"remote_cluster\",\n  \"leader_index\" : \"leader_index\",\n  \"max_read_request_operation_count\" : 1024,\n  \"max_outstanding_read_requests\" : 16,\n  \"max_read_request_size\" : \"1024k\",\n  \"max_write_request_operation_count\" : 32768,\n  \"max_write_request_size\" : \"16k\",\n  \"max_outstanding_write_requests\" : 8,\n  \"max_write_buffer_count\" : 512,\n  \"max_write_buffer_size\" : \"512k\",\n  \"max_retry_delay\" : \"10s\",\n  \"read_poll_timeout\" : \"30s\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/follower_index/_ccr/follow",
        "query": {
          "wait_for_active_shards": "1"
        },
        "body": {
          "remote_cluster": "remote_cluster",
          "leader_index": "leader_index",
          "max_read_request_operation_count": 1024,
          "max_outstanding_read_requests": 16,
          "max_read_request_size": "1024k",
          "max_write_request_operation_count": 32768,
          "max_write_request_size": "16k",
          "max_outstanding_write_requests": 8,
          "max_write_buffer_count": 512,
          "max_write_buffer_size": "512k",
          "max_retry_delay": "10s",
          "read_poll_timeout": "30s"
        },
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.follow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/put-follow.asciidoc",
      "line": 110
    },
    "digest": "cd06634b8187698efa6a7990d3713297",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"follow_index_created\" : true,\n  \"follow_index_shards_acked\" : true,\n  \"index_following_started\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-pause-follow.asciidoc",
      "line": 30
    },
    "digest": "483d669ec0768bc4e275a568c6164704",
    "lang": "console",
    "found": [],
    "source": "POST /<follower_index>/_ccr/pause_follow",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-pause-follow.asciidoc",
      "line": 63
    },
    "digest": "d3263afc69b6f969b9bbd8738cd07b97",
    "lang": "console",
    "found": [],
    "source": "POST /follower_index/_ccr/pause_follow",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/follower_index/_ccr/pause_follow",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.pause_follow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-pause-follow.asciidoc",
      "line": 71
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-resume-follow.asciidoc",
      "line": 38
    },
    "digest": "109db8ff7b715aca98de8ef1ab7e44ab",
    "lang": "console",
    "found": [],
    "source": "POST /<follower_index>/_ccr/resume_follow\n{\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow-request-body.asciidoc",
      "line": 80
    },
    "digest": "bb5221ac311cc0e719ab75895be81959",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"follower_indices\" : [\n    {\n      \"parameters\" : {\n        \"max_read_request_operation_count\" : 5120,\n        \"max_read_request_size\" : \"32mb\",\n        \"max_outstanding_read_requests\" : 12,\n        \"max_write_request_operation_count\" : 5120,\n        \"max_write_request_size\" : \"9223372036854775807b\",\n        \"max_outstanding_write_requests\" : 9,\n        \"max_write_buffer_count\" : 2147483647,\n        \"max_write_buffer_size\" : \"512mb\",\n        \"max_retry_delay\" : \"500ms\",\n        \"read_poll_timeout\" : \"1m\"\n      }\n    }\n  ]\n}\n"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-resume-follow.asciidoc",
      "line": 80
    },
    "digest": "824fded1f9db28906ae7e85ae8de9bd0",
    "lang": "console",
    "found": [],
    "source": "POST /follower_index/_ccr/resume_follow\n{\n  \"max_read_request_operation_count\" : 1024,\n  \"max_outstanding_read_requests\" : 16,\n  \"max_read_request_size\" : \"1024k\",\n  \"max_write_request_operation_count\" : 32768,\n  \"max_write_request_size\" : \"16k\",\n  \"max_outstanding_write_requests\" : 8,\n  \"max_write_buffer_count\" : 512,\n  \"max_write_buffer_size\" : \"512k\",\n  \"max_retry_delay\" : \"10s\",\n  \"read_poll_timeout\" : \"30s\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/follower_index/_ccr/resume_follow",
        "query": null,
        "body": {
          "max_read_request_operation_count": 1024,
          "max_outstanding_read_requests": 16,
          "max_read_request_size": "1024k",
          "max_write_request_operation_count": 32768,
          "max_write_request_size": "16k",
          "max_outstanding_write_requests": 8,
          "max_write_buffer_count": 512,
          "max_write_buffer_size": "512k",
          "max_retry_delay": "10s",
          "read_poll_timeout": "30s"
        },
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.resume_follow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-resume-follow.asciidoc",
      "line": 99
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-unfollow.asciidoc",
      "line": 34
    },
    "digest": "f6d493650b4344f17297b568016fb445",
    "lang": "console",
    "found": [],
    "source": "POST /<follower_index>/_ccr/unfollow",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-unfollow.asciidoc",
      "line": 70
    },
    "digest": "6a350a17701e8c8158407191f2718b66",
    "lang": "console",
    "found": [],
    "source": "POST /follower_index/_ccr/unfollow",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/follower_index/_ccr/unfollow",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.unfollow"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-unfollow.asciidoc",
      "line": 78
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-forget-follower.asciidoc",
      "line": 36
    },
    "digest": "f4fdfe52ecba65eec6beb30d8deb8bbf",
    "lang": "console",
    "found": [],
    "source": "POST /<leader_index>/_ccr/forget_follower\n{\n  \"follower_cluster\" : \"<follower_cluster>\",\n  \"follower_index\" : \"<follower_index>\",\n  \"follower_index_uuid\" : \"<follower_index_uuid>\",\n  \"leader_remote_cluster\" : \"<leader_remote_cluster>\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-forget-follower.asciidoc",
      "line": 53
    },
    "digest": "8e4318a6e2029efb28ad4cf97bbb5b95",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"failed\" : 0,\n    \"failures\" : [ ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-forget-follower.asciidoc",
      "line": 128
    },
    "digest": "07c07f6d497b1a3012aa4320f830e09e",
    "lang": "console",
    "found": [],
    "source": "POST /leader_index/_ccr/forget_follower\n{\n  \"follower_cluster\" : \"follower_cluster\",\n  \"follower_index\" : \"follower_index\",\n  \"follower_index_uuid\" : \"vYpnaWPRQB6mNspmoCeYyA\",\n  \"leader_remote_cluster\" : \"leader_cluster\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/leader_index/_ccr/forget_follower",
        "query": null,
        "body": {
          "follower_cluster": "follower_cluster",
          "follower_index": "follower_index",
          "follower_index_uuid": "vYpnaWPRQB6mNspmoCeYyA",
          "leader_remote_cluster": "leader_cluster"
        },
        "params": {
          "index": "leader_index"
        },
        "api": "ccr.forget_follower"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/post-forget-follower.asciidoc",
      "line": 142
    },
    "digest": "8e4318a6e2029efb28ad4cf97bbb5b95",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"failed\" : 0,\n    \"failures\" : [ ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-stats.asciidoc",
      "line": 36
    },
    "digest": "020c95db88ef356093f03be84893ddf9",
    "lang": "console",
    "found": [],
    "source": "GET /<index>/_ccr/stats",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-stats.asciidoc",
      "line": 211
    },
    "digest": "8e43bb5b7946143e69d397bb81d87df0",
    "lang": "console",
    "found": [],
    "source": "GET /follower_index/_ccr/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/follower_index/_ccr/stats",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.follow_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-stats.asciidoc",
      "line": 218
    },
    "digest": "929930456e2cdaafd5d24e98a6d2aab8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\" : [\n    {\n      \"index\" : \"follower_index\",\n      \"shards\" : [\n        {\n          \"remote_cluster\" : \"remote_cluster\",\n          \"leader_index\" : \"leader_index\",\n          \"follower_index\" : \"follower_index\",\n          \"shard_id\" : 0,\n          \"leader_global_checkpoint\" : 1024,\n          \"leader_max_seq_no\" : 1536,\n          \"follower_global_checkpoint\" : 768,\n          \"follower_max_seq_no\" : 896,\n          \"last_requested_seq_no\" : 897,\n          \"outstanding_read_requests\" : 8,\n          \"outstanding_write_requests\" : 2,\n          \"write_buffer_operation_count\" : 64,\n          \"follower_mapping_version\" : 4,\n          \"follower_settings_version\" : 2,\n          \"follower_aliases_version\" : 8,\n          \"total_read_time_millis\" : 32768,\n          \"total_read_remote_exec_time_millis\" : 16384,\n          \"successful_read_requests\" : 32,\n          \"failed_read_requests\" : 0,\n          \"operations_read\" : 896,\n          \"bytes_read\" : 32768,\n          \"total_write_time_millis\" : 16384,\n          \"write_buffer_size_in_bytes\" : 1536,\n          \"successful_write_requests\" : 16,\n          \"failed_write_requests\" : 0,\n          \"operations_written\" : 832,\n          \"read_exceptions\" : [ ],\n          \"time_since_last_read_millis\" : 8\n        }\n      ]\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-info.asciidoc",
      "line": 36
    },
    "digest": "b2440b492149b705ef107137fdccb0c2",
    "lang": "console",
    "found": [],
    "source": "GET /<index>/_ccr/info",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-info.asciidoc",
      "line": 145
    },
    "digest": "a520168c1c8b454a8f102d6a13027c73",
    "lang": "console",
    "found": [],
    "source": "GET /follower_index/_ccr/info",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/follower_index/_ccr/info",
        "query": null,
        "body": null,
        "params": {
          "index": "follower_index"
        },
        "api": "ccr.follow_info"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/follow/get-follow-info.asciidoc",
      "line": 152
    },
    "digest": "2dd7951c1ced23534433c91f48d87fda",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"follower_indices\" : [\n        {\n            \"follower_index\" : \"follower_index\",\n            \"remote_cluster\" : \"remote_cluster\",\n            \"leader_index\" : \"leader_index\",\n            \"status\" : \"active\",\n            \"parameters\" : {\n                \"max_read_request_operation_count\" : 5120,\n                \"max_read_request_size\" : \"32mb\",\n                \"max_outstanding_read_requests\" : 12,\n                \"max_write_request_operation_count\" : 5120,\n                \"max_write_request_size\" : \"9223372036854775807b\",\n                \"max_outstanding_write_requests\" : 9,\n                \"max_write_buffer_count\" : 2147483647,\n                \"max_write_buffer_size\" : \"512mb\",\n                \"max_retry_delay\" : \"500ms\",\n                \"read_poll_timeout\" : \"1m\"\n            }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/put-auto-follow-pattern.asciidoc",
      "line": 15
    },
    "digest": "6323012afc5d0421840d67cb8a0c4cb9",
    "lang": "console",
    "found": [],
    "source": "PUT /_ccr/auto_follow/<auto_follow_pattern_name>\n{\n  \"remote_cluster\" : \"<remote_cluster>\",\n  \"leader_index_patterns\" :\n  [\n    \"<leader_index_pattern>\"\n  ],\n  \"follow_index_pattern\" : \"<follow_index_pattern>\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/follow-request-body.asciidoc",
      "line": 80
    },
    "digest": "bb5221ac311cc0e719ab75895be81959",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"follower_indices\" : [\n    {\n      \"parameters\" : {\n        \"max_read_request_operation_count\" : 5120,\n        \"max_read_request_size\" : \"32mb\",\n        \"max_outstanding_read_requests\" : 12,\n        \"max_write_request_operation_count\" : 5120,\n        \"max_write_request_size\" : \"9223372036854775807b\",\n        \"max_outstanding_write_requests\" : 9,\n        \"max_write_buffer_count\" : 2147483647,\n        \"max_write_buffer_size\" : \"512mb\",\n        \"max_retry_delay\" : \"500ms\",\n        \"read_poll_timeout\" : \"1m\"\n      }\n    }\n  ]\n}\n"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/put-auto-follow-pattern.asciidoc",
      "line": 88
    },
    "digest": "754a082212929e02a9f71d5404d3301d",
    "lang": "console",
    "found": [],
    "source": "PUT /_ccr/auto_follow/my_auto_follow_pattern\n{\n  \"remote_cluster\" : \"remote_cluster\",\n  \"leader_index_patterns\" :\n  [\n    \"leader_index*\"\n  ],\n  \"follow_index_pattern\" : \"{{leader_index}}-follower\",\n  \"max_read_request_operation_count\" : 1024,\n  \"max_outstanding_read_requests\" : 16,\n  \"max_read_request_size\" : \"1024k\",\n  \"max_write_request_operation_count\" : 32768,\n  \"max_write_request_size\" : \"16k\",\n  \"max_outstanding_write_requests\" : 8,\n  \"max_write_buffer_count\" : 512,\n  \"max_write_buffer_size\" : \"512k\",\n  \"max_retry_delay\" : \"10s\",\n  \"read_poll_timeout\" : \"30s\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ccr/auto_follow/my_auto_follow_pattern",
        "query": null,
        "body": {
          "remote_cluster": "remote_cluster",
          "leader_index_patterns": [
            "leader_index*"
          ],
          "follow_index_pattern": "{{leader_index}}-follower",
          "max_read_request_operation_count": 1024,
          "max_outstanding_read_requests": 16,
          "max_read_request_size": "1024k",
          "max_write_request_operation_count": 32768,
          "max_write_request_size": "16k",
          "max_outstanding_write_requests": 8,
          "max_write_buffer_count": 512,
          "max_write_buffer_size": "512k",
          "max_retry_delay": "10s",
          "read_poll_timeout": "30s"
        },
        "params": {
          "name": "my_auto_follow_pattern"
        },
        "api": "ccr.put_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/put-auto-follow-pattern.asciidoc",
      "line": 114
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/delete-auto-follow-pattern.asciidoc",
      "line": 34
    },
    "digest": "2f2580ea420e1836d922fe48fa8ada97",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ccr/auto_follow/<auto_follow_pattern_name>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/delete-auto-follow-pattern.asciidoc",
      "line": 66
    },
    "digest": "d4ef6ac034c4d42cb75d830ec69146e6",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ccr/auto_follow/my_auto_follow_pattern",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ccr/auto_follow/my_auto_follow_pattern",
        "query": null,
        "body": null,
        "params": {
          "name": "my_auto_follow_pattern"
        },
        "api": "ccr.delete_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/delete-auto-follow-pattern.asciidoc",
      "line": 74
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/get-auto-follow-pattern.asciidoc",
      "line": 41
    },
    "digest": "5e124875d97c27362ae858160ae1c6d5",
    "lang": "console",
    "found": [],
    "source": "GET /_ccr/auto_follow/",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ccr/auto_follow/",
        "query": null,
        "body": null,
        "params": null,
        "api": "ccr.get_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/get-auto-follow-pattern.asciidoc",
      "line": 46
    },
    "digest": "d56a9d89282df56adbbc34b91390ac17",
    "lang": "console",
    "found": [],
    "source": "GET /_ccr/auto_follow/<auto_follow_pattern_name>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/get-auto-follow-pattern.asciidoc",
      "line": 79
    },
    "digest": "79f33e05b203eb46eef7958fbc95ef77",
    "lang": "console",
    "found": [],
    "source": "GET /_ccr/auto_follow/my_auto_follow_pattern",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ccr/auto_follow/my_auto_follow_pattern",
        "query": null,
        "body": null,
        "params": {
          "name": "my_auto_follow_pattern"
        },
        "api": "ccr.get_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/get-auto-follow-pattern.asciidoc",
      "line": 87
    },
    "digest": "e1bbe4bf5745d01075cde98e03781daa",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"patterns\": [\n    {\n      \"name\": \"my_auto_follow_pattern\",\n      \"pattern\": {\n        \"active\": true,\n        \"remote_cluster\" : \"remote_cluster\",\n        \"leader_index_patterns\" :\n        [\n          \"leader_index*\"\n        ],\n        \"follow_index_pattern\" : \"{{leader_index}}-follower\"\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/pause-auto-follow-pattern.asciidoc",
      "line": 76
    },
    "digest": "b25256ed615cd837461b0bfa590526b7",
    "lang": "console",
    "found": [],
    "source": "POST /_ccr/auto_follow/my_auto_follow_pattern/pause",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ccr/auto_follow/my_auto_follow_pattern/pause",
        "query": null,
        "body": null,
        "params": {
          "name": "my_auto_follow_pattern"
        },
        "api": "ccr.pause_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/pause-auto-follow-pattern.asciidoc",
      "line": 84
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/resume-auto-follow-pattern.asciidoc",
      "line": 77
    },
    "digest": "f2e854b6c99659ccc1824e86c096e433",
    "lang": "console",
    "found": [],
    "source": "POST /_ccr/auto_follow/my_auto_follow_pattern/resume",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ccr/auto_follow/my_auto_follow_pattern/resume",
        "query": null,
        "body": null,
        "params": {
          "name": "my_auto_follow_pattern"
        },
        "api": "ccr.resume_auto_follow_pattern"
      }
    ]
  },
  {
    "source_location": {
      "file": "ccr/apis/auto-follow/resume-auto-follow-pattern.asciidoc",
      "line": 85
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 146
    },
    "digest": "804a97ff4d0613e6568e4efb19c52021",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT _cluster/settings\n{\n    \"persistent\": {\n        \"action.auto_create_index\": \"twitter,index10,-index1*,+ind*\" <1>\n    }\n}\n\nPUT _cluster/settings\n{\n    \"persistent\": {\n        \"action.auto_create_index\": \"false\" <2>\n    }\n}\n\nPUT _cluster/settings\n{\n    \"persistent\": {\n        \"action.auto_create_index\": \"true\" <3>\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "action.auto_create_index": "twitter,index10,-index1*,+ind*"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "action.auto_create_index": "false"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      },
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "persistent": {
            "action.auto_create_index": "true"
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 195
    },
    "digest": "36818c6d9f434d387819c30bd9addb14",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "POST twitter/_doc/\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_doc/",
        "query": null,
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 207
    },
    "digest": "cf4bd4b0685ba57d9d3bd992ae242729",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\" : {\n        \"total\" : 2,\n        \"failed\" : 0,\n        \"successful\" : 2\n    },\n    \"_index\" : \"twitter\",\n    \"_id\" : \"W0tpsmIBdwcYyG50zbta\",\n    \"_version\" : 1,\n    \"_seq_no\" : 0,\n    \"_primary_term\" : 1,\n    \"result\": \"created\"\n}"
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 244
    },
    "digest": "625dc94df1f9affb49a082fd99d41620",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "POST twitter/_doc?routing=kimchy\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_doc",
        "query": {
          "routing": "kimchy"
        },
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 366
    },
    "digest": "b918d6b798da673a33e49b94f61dcdc0",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/1?timeout=5m\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": {
          "timeout": "5m"
        },
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 395
    },
    "digest": "1f336ecc62480c1d56351cc2f82d0d08",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/1?version=2&version_type=external\n{\n    \"message\" : \"elasticsearch now has versioning support, double cool!\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": {
          "version": "2",
          "version_type": "external"
        },
        "body": {
          "message": "elasticsearch now has versioning support, double cool!"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 453
    },
    "digest": "bb143628fd04070683eeeadc9406d9cc",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/1\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": null,
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 465
    },
    "digest": "b4e59c6b501e37f61c4af444d93c4625",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\" : {\n        \"total\" : 2,\n        \"failed\" : 0,\n        \"successful\" : 2\n    },\n    \"_index\" : \"twitter\",\n    \"_id\" : \"1\",\n    \"_version\" : 1,\n    \"_seq_no\" : 0,\n    \"_primary_term\" : 1,\n    \"result\" : \"created\"\n}"
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 486
    },
    "digest": "048d8abd42d094bbdcf4452a58ccb35b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_create/1\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_create/1",
        "query": null,
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "create"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/index_.asciidoc",
      "line": 499
    },
    "digest": "d718b63cf1b6591a1d59a0cf4fd995eb",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/1?op_type=create\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": {
          "op_type": "create"
        },
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 10
    },
    "digest": "fbcf5078a6a9e09790553804054c36b3",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/0",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/0",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 53
    },
    "digest": "138ccd89f72aa7502dd9578403dcc589",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/0?_source=false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/0",
        "query": {
          "_source": "false"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 65
    },
    "digest": "8fdf2344c4fb3de6902ad7c5735270df",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/0?_source_includes=*.id&_source_excludes=entities",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/0",
        "query": {
          "_source_includes": "*.id",
          "_source_excludes": "entities"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 73
    },
    "digest": "745f9b8cdb8e91073f6e520e1d9f8c05",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/0?_source=*.id,retweeted",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/0",
        "query": {
          "_source": "*.id,retweeted"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 86
    },
    "digest": "1d65cb6d055c46a1bde809687d835b71",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/2?routing=user1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/2",
        "query": {
          "routing": "user1"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "2"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 221
    },
    "digest": "fbcf5078a6a9e09790553804054c36b3",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/0",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/0",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 229
    },
    "digest": "5f6e080e8c400de205ea04bd19d215a3",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_index\" : \"twitter\",\n    \"_id\" : \"0\",\n    \"_version\" : 1,\n    \"_seq_no\" : 10,\n    \"_primary_term\" : 1,\n    \"found\": true,\n    \"_source\" : {\n        \"user\" : \"kimchy\",\n        \"date\" : \"2009-11-15T14:12:12\",\n        \"likes\": 0,\n        \"message\" : \"trying out Elasticsearch\"\n    }\n}"
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 250
    },
    "digest": "98234499cfec70487cec5d013e976a84",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "HEAD twitter/_doc/0",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/twitter/_doc/0",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "exists"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 266
    },
    "digest": "89a8ac1509936acc272fc2d72907bc45",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_source/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_source/1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "get_source"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 275
    },
    "digest": "d222c6a6ec7a3beca6c97011b0874512",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_source/1/?_source_includes=*.id&_source_excludes=entities",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_source/1/",
        "query": {
          "_source_includes": "*.id",
          "_source_excludes": "entities"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "get_source"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 285
    },
    "digest": "2468ab381257d759d8a88af1141f6f9c",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "HEAD twitter/_source/1",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/twitter/_source/1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "exists_source"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 299
    },
    "digest": "913770050ebbf3b9b549a899bc11060a",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter\n{\n   \"mappings\": {\n       \"properties\": {\n          \"counter\": {\n             \"type\": \"integer\",\n             \"store\": false\n          },\n          \"tags\": {\n             \"type\": \"keyword\",\n             \"store\": true\n          }\n       }\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "counter": {
                "type": "integer",
                "store": false
              },
              "tags": {
                "type": "keyword",
                "store": true
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 320
    },
    "digest": "5eabcdbf61bfcb484dc694f25c2bba36",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/1\n{\n    \"counter\" : 1,\n    \"tags\" : [\"red\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": null,
        "body": {
          "counter": 1,
          "tags": [
            "red"
          ]
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 332
    },
    "digest": "710c7871f20f176d51209b1574b0d61b",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/1?stored_fields=tags,counter",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/1",
        "query": {
          "stored_fields": "tags,counter"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 340
    },
    "digest": "a515ae4a8553041c4f686412038e5978",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"_index\": \"twitter\",\n   \"_id\": \"1\",\n   \"_version\": 1,\n   \"_seq_no\" : 22,\n   \"_primary_term\" : 1,\n   \"found\": true,\n   \"fields\": {\n      \"tags\": [\n         \"red\"\n      ]\n   }\n}"
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 363
    },
    "digest": "0ba0b2db24852abccb7c0fc1098d566e",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT twitter/_doc/2?routing=user1\n{\n    \"counter\" : 1,\n    \"tags\" : [\"white\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/2",
        "query": {
          "routing": "user1"
        },
        "body": {
          "counter": 1,
          "tags": [
            "white"
          ]
        },
        "params": {
          "index": "twitter",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 373
    },
    "digest": "69a7be47f85138b10437113ab2f0d72d",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "GET twitter/_doc/2?routing=user1&stored_fields=tags,counter",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_doc/2",
        "query": {
          "routing": "user1",
          "stored_fields": "tags,counter"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "2"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/get.asciidoc",
      "line": 381
    },
    "digest": "80e8af862b4eeb6eb3f0afd38f6bc60a",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"_index\": \"twitter\",\n   \"_id\": \"2\",\n   \"_version\": 1,\n   \"_seq_no\" : 13,\n   \"_primary_term\" : 1,\n   \"_routing\": \"user1\",\n   \"found\": true,\n   \"fields\": {\n      \"tags\": [\n         \"white\"\n      ]\n   }\n}"
  },
  {
    "source_location": {
      "file": "docs/delete.asciidoc",
      "line": 71
    },
    "digest": "47b5ff897f26e9c943cee5c06034181d",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "DELETE /twitter/_doc/1?routing=kimchy",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/twitter/_doc/1",
        "query": {
          "routing": "kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete.asciidoc",
      "line": 127
    },
    "digest": "d90a84a24a407731dfc1929ac8327746",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "DELETE /twitter/_doc/1?timeout=5m",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/twitter/_doc/1",
        "query": {
          "timeout": "5m"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete.asciidoc",
      "line": 168
    },
    "digest": "c5e5873783246c7b1c01d8464fed72c4",
    "lang": "console",
    "found": [
      "csharp",
      "ruby",
      "js"
    ],
    "source": "DELETE /twitter/_doc/1",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/twitter/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete.asciidoc",
      "line": 176
    },
    "digest": "9f752f60ae8a1a4239e90abb2a268c83",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\" : {\n        \"total\" : 2,\n        \"failed\" : 0,\n        \"successful\" : 2\n    },\n    \"_index\" : \"twitter\",\n    \"_id\" : \"1\",\n    \"_version\" : 2,\n    \"_primary_term\": 1,\n    \"_seq_no\": 5,\n    \"result\": \"deleted\"\n}"
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 10
    },
    "digest": "ebb6b59fbc9325c17e45f524602d6be2",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST /twitter/_delete_by_query\n{\n  \"query\": {\n    \"match\": {\n      \"message\": \"some message\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "some message"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 262
    },
    "digest": "a24b5dac82c15039ba563caf3db32ce3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 147,\n  \"timed_out\": false,\n  \"total\": 119,\n  \"deleted\": 119,\n  \"batches\": 1,\n  \"version_conflicts\": 0,\n  \"noops\": 0,\n  \"retries\": {\n    \"bulk\": 0,\n    \"search\": 0\n  },\n  \"throttled_millis\": 0,\n  \"requests_per_second\": -1.0,\n  \"throttled_until_millis\": 0,\n  \"failures\" : [ ]\n}"
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 349
    },
    "digest": "e21e1c26dc8687e7bf7bd2bf019a6698",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_delete_by_query?conflicts=proceed\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": {
          "conflicts": "proceed"
        },
        "body": {
          "query": {
            "match_all": {}
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 362
    },
    "digest": "c22b72c4a52ee098331b3f252c22860d",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST /twitter,blog/_delete_by_query\n{\n  \"query\": {\n    \"match_all\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter,blog/_delete_by_query",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          }
        },
        "params": {
          "index": "twitter,blog"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 376
    },
    "digest": "c32a3f8071d87f0a3f5a78e07fe7a669",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_delete_by_query?routing=1\n{\n  \"query\": {\n    \"range\" : {\n        \"age\" : {\n           \"gte\" : 10\n        }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": {
          "routing": "1"
        },
        "body": {
          "query": {
            "range": {
              "age": {
                "gte": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 394
    },
    "digest": "dfb1fe96d806a644214d06f9b4b87878",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_delete_by_query?scroll_size=5000\n{\n  \"query\": {\n    \"term\": {\n      \"user\": \"kimchy\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": {
          "scroll_size": "5000"
        },
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 414
    },
    "digest": "1e49eba5b9042c1900a608fe5105ba43",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_delete_by_query\n{\n  \"slice\": {\n    \"id\": 0,\n    \"max\": 2\n  },\n  \"query\": {\n    \"range\": {\n      \"likes\": {\n        \"lt\": 10\n      }\n    }\n  }\n}\nPOST twitter/_delete_by_query\n{\n  \"slice\": {\n    \"id\": 1,\n    \"max\": 2\n  },\n  \"query\": {\n    \"range\": {\n      \"likes\": {\n        \"lt\": 10\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": null,
        "body": {
          "slice": {
            "id": 0,
            "max": 2
          },
          "query": {
            "range": {
              "likes": {
                "lt": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      },
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": null,
        "body": {
          "slice": {
            "id": 1,
            "max": 2
          },
          "query": {
            "range": {
              "likes": {
                "lt": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 449
    },
    "digest": "3e573bfabe00f8bfb8bb69aa5820768e",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET _refresh\nPOST twitter/_search?size=0&filter_path=hits.total\n{\n  \"query\": {\n    \"range\": {\n      \"likes\": {\n        \"lt\": 10\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_refresh",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.refresh"
      },
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0",
          "filter_path": "hits.total"
        },
        "body": {
          "query": {
            "range": {
              "likes": {
                "lt": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 467
    },
    "digest": "8521cf9682eb1df34207da8ab5de12ad",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 487
    },
    "digest": "a5a7050fb9dcb9574e081957ade28617",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_delete_by_query?refresh&slices=5\n{\n  \"query\": {\n    \"range\": {\n      \"likes\": {\n        \"lt\": 10\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_delete_by_query",
        "query": {
          "refresh": true,
          "slices": "5"
        },
        "body": {
          "query": {
            "range": {
              "likes": {
                "lt": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "delete_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 504
    },
    "digest": "14701dcc0cca9665fce2aace0cb62af7",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST twitter/_search?size=0&filter_path=hits.total\n{\n  \"query\": {\n    \"range\": {\n      \"likes\": {\n        \"lt\": 10\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0",
          "filter_path": "hits.total"
        },
        "body": {
          "query": {
            "range": {
              "likes": {
                "lt": 10
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 521
    },
    "digest": "8521cf9682eb1df34207da8ab5de12ad",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 572
    },
    "digest": "52c7e4172a446c394210a07c464c57d2",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _delete_by_query/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_delete_by_query/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle",
        "query": {
          "requests_per_second": "-1"
        },
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "delete_by_query_rethrottle"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 586
    },
    "digest": "216848930c2d344fe0bed0daa70c35b9",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET _tasks?detailed=true&actions=*/delete/byquery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "detailed": "true",
          "actions": "*/delete/byquery"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 594
    },
    "digest": "5c29776e201b54f7442ddb0438479741",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\" : {\n    \"r1A2WoRbTwKZ516z6NEs5A\" : {\n      \"name\" : \"r1A2WoR\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"attributes\" : {\n        \"testattr\" : \"test\",\n        \"portsfile\" : \"true\"\n      },\n      \"tasks\" : {\n        \"r1A2WoRbTwKZ516z6NEs5A:36619\" : {\n          \"node\" : \"r1A2WoRbTwKZ516z6NEs5A\",\n          \"id\" : 36619,\n          \"type\" : \"transport\",\n          \"action\" : \"indices:data/write/delete/byquery\",\n          \"status\" : {    <1>\n            \"total\" : 6154,\n            \"updated\" : 0,\n            \"created\" : 0,\n            \"deleted\" : 3500,\n            \"batches\" : 36,\n            \"version_conflicts\" : 0,\n            \"noops\" : 0,\n            \"retries\": 0,\n            \"throttled_millis\": 0\n          },\n          \"description\" : \"\"\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 640
    },
    "digest": "be3a6431d01846950dc1a39a7a6a1faa",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_tasks/r1A2WoRbTwKZ516z6NEs5A:36619",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks/r1A2WoRbTwKZ516z6NEs5A:36619",
        "query": null,
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "tasks.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/delete-by-query.asciidoc",
      "line": 660
    },
    "digest": "18ddb7e7a4bcafd449df956e828ed7a8",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _tasks/r1A2WoRbTwKZ516z6NEs5A:36619/_cancel",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_tasks/r1A2WoRbTwKZ516z6NEs5A:36619/_cancel",
        "query": null,
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "tasks.cancel"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 84
    },
    "digest": "381fced1882ca8337143e6bb180a5715",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT test/_doc/1\n{\n    \"counter\" : 1,\n    \"tags\" : [\"red\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": null,
        "body": {
          "counter": 1,
          "tags": [
            "red"
          ]
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 96
    },
    "digest": "96de5703ba0bd43fd4ac239ec5408542",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : {\n        \"source\": \"ctx._source.counter += params.count\",\n        \"lang\": \"painless\",\n        \"params\" : {\n            \"count\" : 4\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": {
            "source": "ctx._source.counter += params.count",
            "lang": "painless",
            "params": {
              "count": 4
            }
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 114
    },
    "digest": "4cd246e5c4c035a2cd4081ae9a3d54e5",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : {\n        \"source\": \"ctx._source.tags.add(params.tag)\",\n        \"lang\": \"painless\",\n        \"params\" : {\n            \"tag\" : \"blue\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": {
            "source": "ctx._source.tags.add(params.tag)",
            "lang": "painless",
            "params": {
              "tag": "blue"
            }
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 135
    },
    "digest": "ac544eb247a29ca42aab13826ca88561",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : {\n        \"source\": \"if (ctx._source.tags.contains(params.tag)) { ctx._source.tags.remove(ctx._source.tags.indexOf(params.tag)) }\",\n        \"lang\": \"painless\",\n        \"params\" : {\n            \"tag\" : \"blue\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": {
            "source": "if (ctx._source.tags.contains(params.tag)) { ctx._source.tags.remove(ctx._source.tags.indexOf(params.tag)) }",
            "lang": "painless",
            "params": {
              "tag": "blue"
            }
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 153
    },
    "digest": "eb30ba547e4a7b8f54f33ab259aca523",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : \"ctx._source.new_field = 'value_of_new_field'\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": "ctx._source.new_field = 'value_of_new_field'"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 164
    },
    "digest": "58df61acbfb15b8ef0aaa18b81ae98a6",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : \"ctx._source.remove('new_field')\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": "ctx._source.remove('new_field')"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 177
    },
    "digest": "98aeb275f829b5f7b8eb2147701565ff",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : {\n        \"source\": \"if (ctx._source.tags.contains(params.tag)) { ctx.op = 'delete' } else { ctx.op = 'none' }\",\n        \"lang\": \"painless\",\n        \"params\" : {\n            \"tag\" : \"green\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": {
            "source": "if (ctx._source.tags.contains(params.tag)) { ctx.op = 'delete' } else { ctx.op = 'none' }",
            "lang": "painless",
            "params": {
              "tag": "green"
            }
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 198
    },
    "digest": "38c1d0f6668e9563c0827f839f9fa505",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"doc\" : {\n        \"name\" : \"new_name\"\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "doc": {
            "name": "new_name"
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 218
    },
    "digest": "38c1d0f6668e9563c0827f839f9fa505",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"doc\" : {\n        \"name\" : \"new_name\"\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "doc": {
            "name": "new_name"
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 232
    },
    "digest": "eded401dacfb0f3954ac7e65edcde530",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"_shards\": {\n        \"total\": 0,\n        \"successful\": 0,\n        \"failed\": 0\n   },\n   \"_index\": \"test\",\n   \"_id\": \"1\",\n   \"_version\": 7,\n   \"_primary_term\": 1,\n   \"_seq_no\": 6,\n   \"result\": \"noop\"\n}"
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 251
    },
    "digest": "015294a400986295039e52ebc62033be",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"doc\" : {\n        \"name\" : \"new_name\"\n    },\n    \"detect_noop\": false\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "doc": {
            "name": "new_name"
          },
          "detect_noop": false
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 271
    },
    "digest": "0a958e486ede3f519d48431ab689eded",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"script\" : {\n        \"source\": \"ctx._source.counter += params.count\",\n        \"lang\": \"painless\",\n        \"params\" : {\n            \"count\" : 4\n        }\n    },\n    \"upsert\" : {\n        \"counter\" : 1\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "script": {
            "source": "ctx._source.counter += params.count",
            "lang": "painless",
            "params": {
              "count": 4
            }
          },
          "upsert": {
            "counter": 1
          }
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 296
    },
    "digest": "f9636d7ef1a45be4f36418c875cf6bef",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST sessions/_update/dh3sgudg8gsrgl\n{\n    \"scripted_upsert\":true,\n    \"script\" : {\n        \"id\": \"my_web_session_summariser\",\n        \"params\" : {\n            \"pageViewEvent\" : {\n                \"url\":\"foo.com/bar\",\n                \"response\":404,\n                \"time\":\"2014-01-01 12:32\"\n            }\n        }\n    },\n    \"upsert\" : {}\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sessions/_update/dh3sgudg8gsrgl",
        "query": null,
        "body": {
          "scripted_upsert": true,
          "script": {
            "id": "my_web_session_summariser",
            "params": {
              "pageViewEvent": {
                "url": "foo.com/bar",
                "response": 404,
                "time": "2014-01-01 12:32"
              }
            }
          },
          "upsert": {}
        },
        "params": {
          "index": "sessions",
          "id": "dh3sgudg8gsrgl"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update.asciidoc",
      "line": 325
    },
    "digest": "7cac05cb589f1614fd5b8589153bef06",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_update/1\n{\n    \"doc\" : {\n        \"name\" : \"new_name\"\n    },\n    \"doc_as_upsert\" : true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update/1",
        "query": null,
        "body": {
          "doc": {
            "name": "new_name"
          },
          "doc_as_upsert": true
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "update"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 12
    },
    "digest": "a4a396cd07657b3977713fb3a742c41b",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query?conflicts=proceed",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "conflicts": "proceed"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 300
    },
    "digest": "52a87b81e4e0b6b11e23e85db1602a63",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query?conflicts=proceed\n{\n  \"query\": { <1>\n    \"term\": {\n      \"user\": \"kimchy\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "conflicts": "proceed"
        },
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 319
    },
    "digest": "cde4dddae5c06e7f1d38c9d933dbc7ac",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter,blog/_update_by_query",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter,blog/_update_by_query",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter,blog"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 327
    },
    "digest": "d8b115341da772a628a024e7d1644e73",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query?routing=1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "routing": "1"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 336
    },
    "digest": "54a770f053f3225ea0d1e34334232411",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query?scroll_size=100",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "scroll_size": "100"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 348
    },
    "digest": "2fd69fb0538e4f36ac69a8b8f8bf5ae8",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query\n{\n  \"script\": {\n    \"source\": \"ctx._source.likes++\",\n    \"lang\": \"painless\"\n  },\n  \"query\": {\n    \"term\": {\n      \"user\": \"kimchy\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": null,
        "body": {
          "script": {
            "source": "ctx._source.likes++",
            "lang": "painless"
          },
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 389
    },
    "digest": "c4b278ba293abd0d02a0b5ad1a99f84a",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT _ingest/pipeline/set-foo\n{\n  \"description\" : \"sets foo\",\n  \"processors\" : [ {\n      \"set\" : {\n        \"field\": \"foo\",\n        \"value\": \"bar\"\n      }\n  } ]\n}\nPOST twitter/_update_by_query?pipeline=set-foo",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/set-foo",
        "query": null,
        "body": {
          "description": "sets foo",
          "processors": [
            {
              "set": {
                "field": "foo",
                "value": "bar"
              }
            }
          ]
        },
        "params": {
          "id": "set-foo"
        },
        "api": "ingest.put_pipeline"
      },
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "pipeline": "set-foo"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 413
    },
    "digest": "7df191cc7f814e410a4ac7261065e6ef",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "GET _tasks?detailed=true&actions=*byquery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks",
        "query": {
          "detailed": "true",
          "actions": "*byquery"
        },
        "body": null,
        "params": null,
        "api": "tasks.list"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 421
    },
    "digest": "f1296279330128c256ce88082d1de1e0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\" : {\n    \"r1A2WoRbTwKZ516z6NEs5A\" : {\n      \"name\" : \"r1A2WoR\",\n      \"transport_address\" : \"127.0.0.1:9300\",\n      \"host\" : \"127.0.0.1\",\n      \"ip\" : \"127.0.0.1:9300\",\n      \"attributes\" : {\n        \"testattr\" : \"test\",\n        \"portsfile\" : \"true\"\n      },\n      \"tasks\" : {\n        \"r1A2WoRbTwKZ516z6NEs5A:36619\" : {\n          \"node\" : \"r1A2WoRbTwKZ516z6NEs5A\",\n          \"id\" : 36619,\n          \"type\" : \"transport\",\n          \"action\" : \"indices:data/write/update/byquery\",\n          \"status\" : {    <1>\n            \"total\" : 6154,\n            \"updated\" : 3500,\n            \"created\" : 0,\n            \"deleted\" : 0,\n            \"batches\" : 4,\n            \"version_conflicts\" : 0,\n            \"noops\" : 0,\n            \"retries\": {\n              \"bulk\": 0,\n              \"search\": 0\n            },\n            \"throttled_millis\": 0\n          },\n          \"description\" : \"\"\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 471
    },
    "digest": "be3a6431d01846950dc1a39a7a6a1faa",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_tasks/r1A2WoRbTwKZ516z6NEs5A:36619",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_tasks/r1A2WoRbTwKZ516z6NEs5A:36619",
        "query": null,
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "tasks.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 491
    },
    "digest": "18ddb7e7a4bcafd449df956e828ed7a8",
    "lang": "console",
    "found": [
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _tasks/r1A2WoRbTwKZ516z6NEs5A:36619/_cancel",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_tasks/r1A2WoRbTwKZ516z6NEs5A:36619/_cancel",
        "query": null,
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "tasks.cancel"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 510
    },
    "digest": "bdb30dd52d32f50994008f4f9c0da5f0",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST _update_by_query/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_update_by_query/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle",
        "query": {
          "requests_per_second": "-1"
        },
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "update_by_query_rethrottle"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 530
    },
    "digest": "0d664883151008b1051ef2c9ab2d0373",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query\n{\n  \"slice\": {\n    \"id\": 0,\n    \"max\": 2\n  },\n  \"script\": {\n    \"source\": \"ctx._source['extra'] = 'test'\"\n  }\n}\nPOST twitter/_update_by_query\n{\n  \"slice\": {\n    \"id\": 1,\n    \"max\": 2\n  },\n  \"script\": {\n    \"source\": \"ctx._source['extra'] = 'test'\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": null,
        "body": {
          "slice": {
            "id": 0,
            "max": 2
          },
          "script": {
            "source": "ctx._source['extra'] = 'test'"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      },
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": null,
        "body": {
          "slice": {
            "id": 1,
            "max": 2
          },
          "script": {
            "source": "ctx._source['extra'] = 'test'"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 557
    },
    "digest": "4acf902c2598b2558f34f20c1744c433",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "GET _refresh\nPOST twitter/_search?size=0&q=extra:test&filter_path=hits.total",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_refresh",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.refresh"
      },
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0",
          "q": "extra:test",
          "filter_path": "hits.total"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 566
    },
    "digest": "7792734b746340ee3771a7931f0ef7bd",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\": {\n        \"value\": 120,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 586
    },
    "digest": "ea02de2dbe05091fcb0dac72c8ba5f83",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_update_by_query?refresh&slices=5\n{\n  \"script\": {\n    \"source\": \"ctx._source['extra'] = 'test'\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_update_by_query",
        "query": {
          "refresh": true,
          "slices": "5"
        },
        "body": {
          "script": {
            "source": "ctx._source['extra'] = 'test'"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "update_by_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 599
    },
    "digest": "025b54db0edc50c24ea48a2bd94366ad",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST twitter/_search?size=0&q=extra:test&filter_path=hits.total",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "size": "0",
          "q": "extra:test",
          "filter_path": "hits.total"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 607
    },
    "digest": "7792734b746340ee3771a7931f0ef7bd",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\": {\n        \"value\": 120,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 655
    },
    "digest": "2fe28d9a91b3081a9ec4601af8fb7b1c",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT test\n{\n  \"mappings\": {\n    \"dynamic\": false,   <1>\n    \"properties\": {\n      \"text\": {\"type\": \"text\"}\n    }\n  }\n}\n\nPOST test/_doc?refresh\n{\n  \"text\": \"words words\",\n  \"flag\": \"bar\"\n}\nPOST test/_doc?refresh\n{\n  \"text\": \"words words\",\n  \"flag\": \"foo\"\n}\nPUT test/_mapping   <2>\n{\n  \"properties\": {\n    \"text\": {\"type\": \"text\"},\n    \"flag\": {\"type\": \"text\", \"analyzer\": \"keyword\"}\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "dynamic": false,
            "properties": {
              "text": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/test/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "words words",
          "flag": "bar"
        },
        "params": {
          "index": "test"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_doc",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "words words",
          "flag": "foo"
        },
        "params": {
          "index": "test"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_mapping",
        "query": null,
        "body": {
          "properties": {
            "text": {
              "type": "text"
            },
            "flag": {
              "type": "text",
              "analyzer": "keyword"
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 693
    },
    "digest": "abd4fc3ce7784413a56fe2dcfe2809b5",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST test/_search?filter_path=hits.total\n{\n  \"query\": {\n    \"match\": {\n      \"flag\": \"foo\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_search",
        "query": {
          "filter_path": "hits.total"
        },
        "body": {
          "query": {
            "match": {
              "flag": "foo"
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 706
    },
    "digest": "9c462a848a35c5bc6f82c3b55a80d56f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\" : {\n    \"total\": {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 720
    },
    "digest": "97babc8d19ef0866774576716eb6d19e",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST test/_update_by_query?refresh&conflicts=proceed\nPOST test/_search?filter_path=hits.total\n{\n  \"query\": {\n    \"match\": {\n      \"flag\": \"foo\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_update_by_query",
        "query": {
          "refresh": true,
          "conflicts": "proceed"
        },
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "update_by_query"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": {
          "filter_path": "hits.total"
        },
        "body": {
          "query": {
            "match": {
              "flag": "foo"
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/update-by-query.asciidoc",
      "line": 734
    },
    "digest": "fd2e9d72fadf8ef650d0ab51ede61525",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\" : {\n    \"total\": {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 10
    },
    "digest": "ccfaeef928ba7dd4b5de0c518151fd7c",
    "lang": "console",
    "found": [],
    "source": "GET /_mget\n{\n    \"docs\" : [\n        {\n            \"_index\" : \"twitter\",\n            \"_id\" : \"1\"\n        },\n        {\n            \"_index\" : \"twitter\",\n            \"_id\" : \"2\"\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_mget",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "twitter",
              "_id": "1"
            },
            {
              "_index": "twitter",
              "_id": "2"
            }
          ]
        },
        "params": null,
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 130
    },
    "digest": "53cf7d3731f50620b3277b80e2fbfd56",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_mget\n{\n    \"docs\" : [\n        {\n            \"_id\" : \"1\"\n        },\n        {\n            \"_id\" : \"2\"\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_mget",
        "query": null,
        "body": {
          "docs": [
            {
              "_id": "1"
            },
            {
              "_id": "2"
            }
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 148
    },
    "digest": "81095ba46e4d8c5da3623f5ea8c54a34",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_mget\n{\n    \"ids\" : [\"1\", \"2\"]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_mget",
        "query": null,
        "body": {
          "ids": [
            "1",
            "2"
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 170
    },
    "digest": "6b1ab3f273c6e425067cd5889b0c258f",
    "lang": "console",
    "found": [],
    "source": "GET /_mget\n{\n    \"docs\" : [\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"1\",\n            \"_source\" : false\n        },\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"2\",\n            \"_source\" : [\"field3\", \"field4\"]\n        },\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"3\",\n            \"_source\" : {\n                \"include\": [\"user\"],\n                \"exclude\": [\"user.location\"]\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_mget",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "test",
              "_id": "1",
              "_source": false
            },
            {
              "_index": "test",
              "_id": "2",
              "_source": [
                "field3",
                "field4"
              ]
            },
            {
              "_index": "test",
              "_id": "3",
              "_source": {
                "include": [
                  "user"
                ],
                "exclude": [
                  "user.location"
                ]
              }
            }
          ]
        },
        "params": null,
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 208
    },
    "digest": "c4272ba35b81125a805fb1a7292f3d25",
    "lang": "console",
    "found": [],
    "source": "GET /_mget\n{\n    \"docs\" : [\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"1\",\n            \"stored_fields\" : [\"field1\", \"field2\"]\n        },\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"2\",\n            \"stored_fields\" : [\"field3\", \"field4\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_mget",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "test",
              "_id": "1",
              "stored_fields": [
                "field1",
                "field2"
              ]
            },
            {
              "_index": "test",
              "_id": "2",
              "stored_fields": [
                "field3",
                "field4"
              ]
            }
          ]
        },
        "params": null,
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 231
    },
    "digest": "27fac828d28ab065524dd1ce148840c0",
    "lang": "console",
    "found": [],
    "source": "GET /test/_mget?stored_fields=field1,field2\n{\n    \"docs\" : [\n        {\n            \"_id\" : \"1\"\n        },\n        {\n            \"_id\" : \"2\",\n            \"stored_fields\" : [\"field3\", \"field4\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_mget",
        "query": {
          "stored_fields": "field1,field2"
        },
        "body": {
          "docs": [
            {
              "_id": "1"
            },
            {
              "_id": "2",
              "stored_fields": [
                "field3",
                "field4"
              ]
            }
          ]
        },
        "params": {
          "index": "test"
        },
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-get.asciidoc",
      "line": 254
    },
    "digest": "1b37488d0a79d3c950029851b7cd623e",
    "lang": "console",
    "found": [],
    "source": "GET /_mget?routing=key1\n{\n    \"docs\" : [\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"1\",\n            \"routing\" : \"key2\"\n        },\n        {\n            \"_index\" : \"test\",\n            \"_id\" : \"2\"\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_mget",
        "query": {
          "routing": "key1"
        },
        "body": {
          "docs": [
            {
              "_index": "test",
              "_id": "1",
              "routing": "key2"
            },
            {
              "_index": "test",
              "_id": "2"
            }
          ]
        },
        "params": null,
        "api": "mget"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/bulk.asciidoc",
      "line": 11
    },
    "digest": "ae9ccfaa146731ab9176df90670db1c2",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _bulk\n{ \"index\" : { \"_index\" : \"test\", \"_id\" : \"1\" } }\n{ \"field1\" : \"value1\" }\n{ \"delete\" : { \"_index\" : \"test\", \"_id\" : \"2\" } }\n{ \"create\" : { \"_index\" : \"test\", \"_id\" : \"3\" } }\n{ \"field1\" : \"value3\" }\n{ \"update\" : {\"_id\" : \"1\", \"_index\" : \"test\"} }\n{ \"doc\" : {\"field2\" : \"value2\"} }",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_bulk",
        "query": null,
        "body": [
          {
            "index": {
              "_index": "test",
              "_id": "1"
            }
          },
          {
            "field1": "value1"
          },
          {
            "delete": {
              "_index": "test",
              "_id": "2"
            }
          },
          {
            "create": {
              "_index": "test",
              "_id": "3"
            }
          },
          {
            "field1": "value3"
          },
          {
            "update": {
              "_id": "1",
              "_index": "test"
            }
          },
          {
            "doc": {
              "field2": "value2"
            }
          }
        ],
        "params": null,
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/bulk.asciidoc",
      "line": 294
    },
    "digest": "ae9ccfaa146731ab9176df90670db1c2",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _bulk\n{ \"index\" : { \"_index\" : \"test\", \"_id\" : \"1\" } }\n{ \"field1\" : \"value1\" }\n{ \"delete\" : { \"_index\" : \"test\", \"_id\" : \"2\" } }\n{ \"create\" : { \"_index\" : \"test\", \"_id\" : \"3\" } }\n{ \"field1\" : \"value3\" }\n{ \"update\" : {\"_id\" : \"1\", \"_index\" : \"test\"} }\n{ \"doc\" : {\"field2\" : \"value2\"} }",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_bulk",
        "query": null,
        "body": [
          {
            "index": {
              "_index": "test",
              "_id": "1"
            }
          },
          {
            "field1": "value1"
          },
          {
            "delete": {
              "_index": "test",
              "_id": "2"
            }
          },
          {
            "create": {
              "_index": "test",
              "_id": "3"
            }
          },
          {
            "field1": "value3"
          },
          {
            "update": {
              "_id": "1",
              "_index": "test"
            }
          },
          {
            "doc": {
              "field2": "value2"
            }
          }
        ],
        "params": null,
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/bulk.asciidoc",
      "line": 308
    },
    "digest": "6e8127305ead40f2b6dd2ef3b99a9eca",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 30,\n   \"errors\": false,\n   \"items\": [\n      {\n         \"index\": {\n            \"_index\": \"test\",\n            \"_id\": \"1\",\n            \"_version\": 1,\n            \"result\": \"created\",\n            \"_shards\": {\n               \"total\": 2,\n               \"successful\": 1,\n               \"failed\": 0\n            },\n            \"status\": 201,\n            \"_seq_no\" : 0,\n            \"_primary_term\": 1\n         }\n      },\n      {\n         \"delete\": {\n            \"_index\": \"test\",\n            \"_id\": \"2\",\n            \"_version\": 1,\n            \"result\": \"not_found\",\n            \"_shards\": {\n               \"total\": 2,\n               \"successful\": 1,\n               \"failed\": 0\n            },\n            \"status\": 404,\n            \"_seq_no\" : 1,\n            \"_primary_term\" : 2\n         }\n      },\n      {\n         \"create\": {\n            \"_index\": \"test\",\n            \"_id\": \"3\",\n            \"_version\": 1,\n            \"result\": \"created\",\n            \"_shards\": {\n               \"total\": 2,\n               \"successful\": 1,\n               \"failed\": 0\n            },\n            \"status\": 201,\n            \"_seq_no\" : 2,\n            \"_primary_term\" : 3\n         }\n      },\n      {\n         \"update\": {\n            \"_index\": \"test\",\n            \"_id\": \"1\",\n            \"_version\": 2,\n            \"result\": \"updated\",\n            \"_shards\": {\n                \"total\": 2,\n                \"successful\": 1,\n                \"failed\": 0\n            },\n            \"status\": 200,\n            \"_seq_no\" : 3,\n            \"_primary_term\" : 4\n         }\n      }\n   ]\n}"
  },
  {
    "source_location": {
      "file": "docs/bulk.asciidoc",
      "line": 405
    },
    "digest": "8cd00a3aba7c3c158277bc032aac2830",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _bulk\n{ \"update\" : {\"_id\" : \"1\", \"_index\" : \"index1\", \"retry_on_conflict\" : 3} }\n{ \"doc\" : {\"field\" : \"value\"} }\n{ \"update\" : { \"_id\" : \"0\", \"_index\" : \"index1\", \"retry_on_conflict\" : 3} }\n{ \"script\" : { \"source\": \"ctx._source.counter += params.param1\", \"lang\" : \"painless\", \"params\" : {\"param1\" : 1}}, \"upsert\" : {\"counter\" : 1}}\n{ \"update\" : {\"_id\" : \"2\", \"_index\" : \"index1\", \"retry_on_conflict\" : 3} }\n{ \"doc\" : {\"field\" : \"value\"}, \"doc_as_upsert\" : true }\n{ \"update\" : {\"_id\" : \"3\", \"_index\" : \"index1\", \"_source\" : true} }\n{ \"doc\" : {\"field\" : \"value\"} }\n{ \"update\" : {\"_id\" : \"4\", \"_index\" : \"index1\"} }\n{ \"doc\" : {\"field\" : \"value\"}, \"_source\": true}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_bulk",
        "query": null,
        "body": [
          {
            "update": {
              "_id": "1",
              "_index": "index1",
              "retry_on_conflict": 3
            }
          },
          {
            "doc": {
              "field": "value"
            }
          },
          {
            "update": {
              "_id": "0",
              "_index": "index1",
              "retry_on_conflict": 3
            }
          },
          {
            "script": {
              "source": "ctx._source.counter += params.param1",
              "lang": "painless",
              "params": {
                "param1": 1
              }
            },
            "upsert": {
              "counter": 1
            }
          },
          {
            "update": {
              "_id": "2",
              "_index": "index1",
              "retry_on_conflict": 3
            }
          },
          {
            "doc": {
              "field": "value"
            },
            "doc_as_upsert": true
          },
          {
            "update": {
              "_id": "3",
              "_index": "index1",
              "_source": true
            }
          },
          {
            "doc": {
              "field": "value"
            }
          },
          {
            "update": {
              "_id": "4",
              "_index": "index1"
            }
          },
          {
            "doc": {
              "field": "value"
            },
            "_source": true
          }
        ],
        "params": null,
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 20
    },
    "digest": "0cc991e3f7f8511a34730e154b3c5edc",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\"\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter"
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 161
    },
    "digest": "68738b4fd0dda177022be45be95b4c84",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle?requests_per_second=-1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex/r1A2WoRbTwKZ516z6NEs5A:36619/_rethrottle",
        "query": {
          "requests_per_second": "-1"
        },
        "body": null,
        "params": {
          "task_id": "r1A2WoRbTwKZ516z6NEs5A:36619"
        },
        "api": "reindex_rethrottle"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 191
    },
    "digest": "1b8655e6ba99fe39933c6eafe78728b7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\",\n    \"slice\": {\n      \"id\": 0,\n      \"max\": 2\n    }\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}\nPOST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\",\n    \"slice\": {\n      \"id\": 1,\n      \"max\": 2\n    }\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter",
            "slice": {
              "id": 0,
              "max": 2
            }
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      },
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter",
            "slice": {
              "id": 1,
              "max": 2
            }
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 224
    },
    "digest": "3ae03ba3b56e5e287953094050766738",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET _refresh\nPOST new_twitter/_search?size=0&filter_path=hits.total",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_refresh",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.refresh"
      },
      {
        "method": "POST",
        "url": "/new_twitter/_search",
        "query": {
          "size": "0",
          "filter_path": "hits.total"
        },
        "body": null,
        "params": {
          "index": "new_twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 233
    },
    "digest": "7e3ab9b4b60726e0dbe92612d2c4cd9d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\" : {\n        \"value\": 120,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 251
    },
    "digest": "cb01106bf524df5e0501d4c655c1aa7b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex?slices=5&refresh\n{\n  \"source\": {\n    \"index\": \"twitter\"\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": {
          "slices": "5",
          "refresh": true
        },
        "body": {
          "source": {
            "index": "twitter"
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 267
    },
    "digest": "e567e6dbf86300142573c73789c8fce4",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST new_twitter/_search?size=0&filter_path=hits.total",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/new_twitter/_search",
        "query": {
          "size": "0",
          "filter_path": "hits.total"
        },
        "body": null,
        "params": {
          "index": "new_twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 275
    },
    "digest": "7e3ab9b4b60726e0dbe92612d2c4cd9d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"hits\": {\n    \"total\" : {\n        \"value\": 120,\n        \"relation\": \"eq\"\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 359
    },
    "digest": "78c96113ae4ed0054e581b17542528a7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"source\",\n    \"query\": {\n      \"match\": {\n        \"company\": \"cat\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"dest\",\n    \"routing\": \"=cat\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "source",
            "query": {
              "match": {
                "company": "cat"
              }
            }
          },
          "dest": {
            "index": "dest",
            "routing": "=cat"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 384
    },
    "digest": "400e89eb46ead8e9c9e40f123fd5e590",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"source\",\n    \"size\": 100\n  },\n  \"dest\": {\n    \"index\": \"dest\",\n    \"routing\": \"=cat\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "source",
            "size": 100
          },
          "dest": {
            "index": "dest",
            "routing": "=cat"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 403
    },
    "digest": "b1efa1c51a34dd5ab5511b71a399f5b1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"source\"\n  },\n  \"dest\": {\n    \"index\": \"dest\",\n    \"pipeline\": \"some_ingest_pipeline\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "source"
          },
          "dest": {
            "index": "dest",
            "pipeline": "some_ingest_pipeline"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 592
    },
    "digest": "764f9884b370cbdc82a1c5c42ed40ff3",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\",\n    \"query\": {\n      \"term\": {\n        \"user\": \"kimchy\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter",
            "query": {
              "term": {
                "user": "kimchy"
              }
            }
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 618
    },
    "digest": "52b2bfbdd78f8283b6f4891c48013237",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"max_docs\": 1,\n  \"source\": {\n    \"index\": \"twitter\"\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "max_docs": 1,
          "source": {
            "index": "twitter"
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 640
    },
    "digest": "6f097c298a7abf4c032c4314920c49c8",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": [\"twitter\", \"blog\"]\n  },\n  \"dest\": {\n    \"index\": \"all_together\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": [
              "twitter",
              "blog"
            ]
          },
          "dest": {
            "index": "all_together"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 666
    },
    "digest": "e9c2e15b36372d5281c879d336322b6c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\",\n    \"_source\": [\"user\", \"_doc\"]\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter",
            "_source": [
              "user",
              "_doc"
            ]
          },
          "dest": {
            "index": "new_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 687
    },
    "digest": "1577e6e806b3283c9e99f1596d310754",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST test/_doc/1?refresh\n{\n  \"text\": \"words words\",\n  \"flag\": \"foo\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "text": "words words",
          "flag": "foo"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 699
    },
    "digest": "1216f8f7367df3aa823012cef310c08a",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"test\"\n  },\n  \"dest\": {\n    \"index\": \"test2\"\n  },\n  \"script\": {\n    \"source\": \"ctx._source.tag = ctx._source.remove(\\\"flag\\\")\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "test"
          },
          "dest": {
            "index": "test2"
          },
          "script": {
            "source": "ctx._source.tag = ctx._source.remove(\"flag\")"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 718
    },
    "digest": "cfc37446bd892d1ac42a3c8e8b204e6c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET test2/_doc/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test2/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "test2",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 726
    },
    "digest": "e0871039b4f1625c6af6df7a88a2a7c9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"1\",\n  \"_index\": \"test2\",\n  \"_version\": 1,\n  \"_seq_no\": 44,\n  \"_primary_term\": 1,\n  \"_source\": {\n    \"text\": \"words words\",\n    \"tag\": \"foo\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 751
    },
    "digest": "9a4d5e41c52c20635d1fd9c6e13f6c7a",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT metricbeat-2016.05.30/_doc/1?refresh\n{\"system.cpu.idle.pct\": 0.908}\nPUT metricbeat-2016.05.31/_doc/1?refresh\n{\"system.cpu.idle.pct\": 0.105}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/metricbeat-2016.05.30/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "system.cpu.idle.pct": 0.908
        },
        "params": {
          "index": "metricbeat-2016.05.30",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/metricbeat-2016.05.31/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "system.cpu.idle.pct": 0.105
        },
        "params": {
          "index": "metricbeat-2016.05.31",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 767
    },
    "digest": "973a3ff47fc4ce036ecd9bd363fef9f7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"metricbeat-*\"\n  },\n  \"dest\": {\n    \"index\": \"metricbeat\"\n  },\n  \"script\": {\n    \"lang\": \"painless\",\n    \"source\": \"ctx._index = 'metricbeat-' + (ctx._index.substring('metricbeat-'.length(), ctx._index.length())) + '-1'\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "metricbeat-*"
          },
          "dest": {
            "index": "metricbeat"
          },
          "script": {
            "lang": "painless",
            "source": "ctx._index = 'metricbeat-' + (ctx._index.substring('metricbeat-'.length(), ctx._index.length())) + '-1'"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 787
    },
    "digest": "3b04cc894e6a47d57983484010feac0c",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET metricbeat-2016.05.30-1/_doc/1\nGET metricbeat-2016.05.31-1/_doc/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/metricbeat-2016.05.30-1/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "metricbeat-2016.05.30-1",
          "id": "1"
        },
        "api": "get"
      },
      {
        "method": "GET",
        "url": "/metricbeat-2016.05.31-1/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "metricbeat-2016.05.31-1",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 802
    },
    "digest": "1bc731a4df952228af6dfa6b48627332",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"max_docs\": 10,\n  \"source\": {\n    \"index\": \"twitter\",\n    \"query\": {\n      \"function_score\" : {\n        \"random_score\" : {},\n        \"min_score\" : 0.9    <1>\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"random_twitter\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "max_docs": 10,
          "source": {
            "index": "twitter",
            "query": {
              "function_score": {
                "random_score": {},
                "min_score": 0.9
              }
            }
          },
          "dest": {
            "index": "random_twitter"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 833
    },
    "digest": "8871b8fcb6de4f0c7dff22798fb10fb7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"index\": \"twitter\"\n  },\n  \"dest\": {\n    \"index\": \"new_twitter\",\n    \"version_type\": \"external\"\n  },\n  \"script\": {\n    \"source\": \"if (ctx._source.foo == 'bar') {ctx._version++; ctx._source.remove('foo')}\",\n    \"lang\": \"painless\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "twitter"
          },
          "dest": {
            "index": "new_twitter",
            "version_type": "external"
          },
          "script": {
            "source": "if (ctx._source.foo == 'bar') {ctx._version++; ctx._source.remove('foo')}",
            "lang": "painless"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 888
    },
    "digest": "36b2778f23d0955255f52c075c4d213d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://otherhost:9200\",\n      \"username\": \"user\",\n      \"password\": \"pass\"\n    },\n    \"index\": \"source\",\n    \"query\": {\n      \"match\": {\n        \"test\": \"data\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"dest\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "remote": {
              "host": "http://otherhost:9200",
              "username": "user",
              "password": "pass"
            },
            "index": "source",
            "query": {
              "match": {
                "test": "data"
              }
            }
          },
          "dest": {
            "index": "dest"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 955
    },
    "digest": "64b9baa6d7556b960b29698f3383aa31",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://otherhost:9200\"\n    },\n    \"index\": \"source\",\n    \"size\": 10,\n    \"query\": {\n      \"match\": {\n        \"test\": \"data\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"dest\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "remote": {
              "host": "http://otherhost:9200"
            },
            "index": "source",
            "size": 10,
            "query": {
              "match": {
                "test": "data"
              }
            }
          },
          "dest": {
            "index": "dest"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/reindex.asciidoc",
      "line": 986
    },
    "digest": "7f697eb436dfa3c30dfe610d8c32d132",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST _reindex\n{\n  \"source\": {\n    \"remote\": {\n      \"host\": \"http://otherhost:9200\",\n      \"socket_timeout\": \"1m\",\n      \"connect_timeout\": \"10s\"\n    },\n    \"index\": \"source\",\n    \"query\": {\n      \"match\": {\n        \"test\": \"data\"\n      }\n    }\n  },\n  \"dest\": {\n    \"index\": \"dest\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "remote": {
              "host": "http://otherhost:9200",
              "socket_timeout": "1m",
              "connect_timeout": "10s"
            },
            "index": "source",
            "query": {
              "match": {
                "test": "data"
              }
            }
          },
          "dest": {
            "index": "dest"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 10
    },
    "digest": "4c9b1db368186091c1a660bcd52890b8",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors/1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 30
    },
    "digest": "a15ca7faa8ba282679396de3c7b90485",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors/1?fields=message",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors/1",
        "query": {
          "fields": "message"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 171
    },
    "digest": "587dd0c1aebbc1d93190bf117959cb73",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter\n{ \"mappings\": {\n    \"properties\": {\n      \"text\": {\n        \"type\": \"text\",\n        \"term_vector\": \"with_positions_offsets_payloads\",\n        \"store\" : true,\n        \"analyzer\" : \"fulltext_analyzer\"\n       },\n       \"fullname\": {\n        \"type\": \"text\",\n        \"term_vector\": \"with_positions_offsets_payloads\",\n        \"analyzer\" : \"fulltext_analyzer\"\n      }\n    }\n  },\n  \"settings\" : {\n    \"index\" : {\n      \"number_of_shards\" : 1,\n      \"number_of_replicas\" : 0\n    },\n    \"analysis\": {\n      \"analyzer\": {\n        \"fulltext_analyzer\": {\n          \"type\": \"custom\",\n          \"tokenizer\": \"whitespace\",\n          \"filter\": [\n            \"lowercase\",\n            \"type_as_payload\"\n          ]\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "term_vector": "with_positions_offsets_payloads",
                "store": true,
                "analyzer": "fulltext_analyzer"
              },
              "fullname": {
                "type": "text",
                "term_vector": "with_positions_offsets_payloads",
                "analyzer": "fulltext_analyzer"
              }
            }
          },
          "settings": {
            "index": {
              "number_of_shards": 1,
              "number_of_replicas": 0
            },
            "analysis": {
              "analyzer": {
                "fulltext_analyzer": {
                  "type": "custom",
                  "tokenizer": "whitespace",
                  "filter": [
                    "lowercase",
                    "type_as_payload"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 212
    },
    "digest": "c75bd2b34c51aecf55ece4137612d4c7",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_doc/1\n{\n  \"fullname\" : \"John Doe\",\n  \"text\" : \"twitter test test test \"\n}\n\nPUT /twitter/_doc/2?refresh=wait_for\n{\n  \"fullname\" : \"Jane Doe\",\n  \"text\" : \"Another twitter test ...\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": null,
        "body": {
          "fullname": "John Doe",
          "text": "twitter test test test "
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/twitter/_doc/2",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "fullname": "Jane Doe",
          "text": "Another twitter test ..."
        },
        "params": {
          "index": "twitter",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 231
    },
    "digest": "8dfecbb38a81fb5b42f63d6fe9bf9278",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors/1\n{\n  \"fields\" : [\"text\"],\n  \"offsets\" : true,\n  \"payloads\" : true,\n  \"positions\" : true,\n  \"term_statistics\" : true,\n  \"field_statistics\" : true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors/1",
        "query": null,
        "body": {
          "fields": [
            "text"
          ],
          "offsets": true,
          "payloads": true,
          "positions": true,
          "term_statistics": true,
          "field_statistics": true
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 247
    },
    "digest": "3639075426ee76c307487d67d22a08dc",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_id\": \"1\",\n    \"_index\": \"twitter\",\n    \"_version\": 1,\n    \"found\": true,\n    \"took\": 6,\n    \"term_vectors\": {\n        \"text\": {\n            \"field_statistics\": {\n                \"doc_count\": 2,\n                \"sum_doc_freq\": 6,\n                \"sum_ttf\": 8\n            },\n            \"terms\": {\n                \"test\": {\n                    \"doc_freq\": 2,\n                    \"term_freq\": 3,\n                    \"tokens\": [\n                        {\n                            \"end_offset\": 12,\n                            \"payload\": \"d29yZA==\",\n                            \"position\": 1,\n                            \"start_offset\": 8\n                        },\n                        {\n                            \"end_offset\": 17,\n                            \"payload\": \"d29yZA==\",\n                            \"position\": 2,\n                            \"start_offset\": 13\n                        },\n                        {\n                            \"end_offset\": 22,\n                            \"payload\": \"d29yZA==\",\n                            \"position\": 3,\n                            \"start_offset\": 18\n                        }\n                    ],\n                    \"ttf\": 4\n                },\n                \"twitter\": {\n                    \"doc_freq\": 2,\n                    \"term_freq\": 1,\n                    \"tokens\": [\n                        {\n                            \"end_offset\": 7,\n                            \"payload\": \"d29yZA==\",\n                            \"position\": 0,\n                            \"start_offset\": 0\n                        }\n                    ],\n                    \"ttf\": 2\n                }\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 317
    },
    "digest": "487d12bb3e3036c4493dcbe43191b6f0",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors/1\n{\n  \"fields\" : [\"text\", \"some_field_without_term_vectors\"],\n  \"offsets\" : true,\n  \"positions\" : true,\n  \"term_statistics\" : true,\n  \"field_statistics\" : true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors/1",
        "query": null,
        "body": {
          "fields": [
            "text",
            "some_field_without_term_vectors"
          ],
          "offsets": true,
          "positions": true,
          "term_statistics": true,
          "field_statistics": true
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 340
    },
    "digest": "1f580df38ae517800d0c62d9648ebcb9",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors\n{\n  \"doc\" : {\n    \"fullname\" : \"John Doe\",\n    \"text\" : \"twitter test test test\"\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors",
        "query": null,
        "body": {
          "doc": {
            "fullname": "John Doe",
            "text": "twitter test test test"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 361
    },
    "digest": "8304a9c1ae8d0329b66ba57fb8263485",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_termvectors\n{\n  \"doc\" : {\n    \"fullname\" : \"John Doe\",\n    \"text\" : \"twitter test test test\"\n  },\n  \"fields\": [\"fullname\"],\n  \"per_field_analyzer\" : {\n    \"fullname\": \"keyword\"\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_termvectors",
        "query": null,
        "body": {
          "doc": {
            "fullname": "John Doe",
            "text": "twitter test test test"
          },
          "fields": [
            "fullname"
          ],
          "per_field_analyzer": {
            "fullname": "keyword"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 379
    },
    "digest": "2079609f3e3ed939f7c717eccb061037",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\": \"twitter\",\n  \"_version\": 0,\n  \"found\": true,\n  \"took\": 6,\n  \"term_vectors\": {\n    \"fullname\": {\n       \"field_statistics\": {\n          \"sum_doc_freq\": 2,\n          \"doc_count\": 4,\n          \"sum_ttf\": 4\n       },\n       \"terms\": {\n          \"John Doe\": {\n             \"term_freq\": 1,\n             \"tokens\": [\n                {\n                   \"position\": 0,\n                   \"start_offset\": 0,\n                   \"end_offset\": 8\n                }\n             ]\n          }\n       }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 425
    },
    "digest": "ef3b210782fe58df252d0e805b8ef644",
    "lang": "console",
    "found": [],
    "source": "GET /imdb/_termvectors\n{\n    \"doc\": {\n      \"plot\": \"When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil.\"\n    },\n    \"term_statistics\" : true,\n    \"field_statistics\" : true,\n    \"positions\": false,\n    \"offsets\": false,\n    \"filter\" : {\n      \"max_num_terms\" : 3,\n      \"min_term_freq\" : 1,\n      \"min_doc_freq\" : 1\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/imdb/_termvectors",
        "query": null,
        "body": {
          "doc": {
            "plot": "When wealthy industrialist Tony Stark is forced to build an armored suit after a life-threatening incident, he ultimately decides to use its technology to fight against evil."
          },
          "term_statistics": true,
          "field_statistics": true,
          "positions": false,
          "offsets": false,
          "filter": {
            "max_num_terms": 3,
            "min_term_freq": 1,
            "min_doc_freq": 1
          }
        },
        "params": {
          "index": "imdb"
        },
        "api": "termvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/termvectors.asciidoc",
      "line": 447
    },
    "digest": "9582cab412650ffe53fd17791199cbf8",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"_index\": \"imdb\",\n   \"_version\": 0,\n   \"found\": true,\n   \"term_vectors\": {\n      \"plot\": {\n         \"field_statistics\": {\n            \"sum_doc_freq\": 3384269,\n            \"doc_count\": 176214,\n            \"sum_ttf\": 3753460\n         },\n         \"terms\": {\n            \"armored\": {\n               \"doc_freq\": 27,\n               \"ttf\": 27,\n               \"term_freq\": 1,\n               \"score\": 9.74725\n            },\n            \"industrialist\": {\n               \"doc_freq\": 88,\n               \"ttf\": 88,\n               \"term_freq\": 1,\n               \"score\": 8.590818\n            },\n            \"stark\": {\n               \"doc_freq\": 44,\n               \"ttf\": 47,\n               \"term_freq\": 1,\n               \"score\": 9.272792\n            }\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "docs/multi-termvectors.asciidoc",
      "line": 10
    },
    "digest": "c6d18f08822463356b297f238c6650d9",
    "lang": "console",
    "found": [],
    "source": "POST /_mtermvectors\n{\n   \"docs\": [\n      {\n         \"_index\": \"twitter\",\n         \"_id\": \"2\",\n         \"term_statistics\": true\n      },\n      {\n         \"_index\": \"twitter\",\n         \"_id\": \"1\",\n         \"fields\": [\n            \"message\"\n         ]\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_mtermvectors",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "twitter",
              "_id": "2",
              "term_statistics": true
            },
            {
              "_index": "twitter",
              "_id": "1",
              "fields": [
                "message"
              ]
            }
          ]
        },
        "params": null,
        "api": "mtermvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-termvectors.asciidoc",
      "line": 91
    },
    "digest": "2c8638acc208bd0a47403c1f054fde21",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_mtermvectors\n{\n   \"docs\": [\n      {\n         \"_id\": \"2\",\n         \"fields\": [\n            \"message\"\n         ],\n         \"term_statistics\": true\n      },\n      {\n         \"_id\": \"1\"\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_mtermvectors",
        "query": null,
        "body": {
          "docs": [
            {
              "_id": "2",
              "fields": [
                "message"
              ],
              "term_statistics": true
            },
            {
              "_id": "1"
            }
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "mtermvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-termvectors.asciidoc",
      "line": 114
    },
    "digest": "f31eea58baf0dbd39823ff9100c9ce28",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_mtermvectors\n{\n    \"ids\" : [\"1\", \"2\"],\n    \"parameters\": {\n    \t\"fields\": [\n         \t\"message\"\n      \t],\n      \t\"term_statistics\": true\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_mtermvectors",
        "query": null,
        "body": {
          "ids": [
            "1",
            "2"
          ],
          "parameters": {
            "fields": [
              "message"
            ],
            "term_statistics": true
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "mtermvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/multi-termvectors.asciidoc",
      "line": 135
    },
    "digest": "29840a67fdc13cd329ca2c69a2303e83",
    "lang": "console",
    "found": [],
    "source": "POST /_mtermvectors\n{\n   \"docs\": [\n      {\n         \"_index\": \"twitter\",\n         \"doc\" : {\n            \"user\" : \"John Doe\",\n            \"message\" : \"twitter test test test\"\n         }\n      },\n      {\n         \"_index\": \"twitter\",\n         \"doc\" : {\n           \"user\" : \"Jane Doe\",\n           \"message\" : \"Another twitter test ...\"\n         }\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_mtermvectors",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "twitter",
              "doc": {
                "user": "John Doe",
                "message": "twitter test test test"
              }
            },
            {
              "_index": "twitter",
              "doc": {
                "user": "Jane Doe",
                "message": "Another twitter test ..."
              }
            }
          ]
        },
        "params": null,
        "api": "mtermvectors"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/refresh.asciidoc",
      "line": 87
    },
    "digest": "92d343eb755971c44a939d0660bf5ac2",
    "lang": "console",
    "found": [],
    "source": "PUT /test/_doc/1?refresh\n{\"test\": \"test\"}\nPUT /test/_doc/2?refresh=true\n{\"test\": \"test\"}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "test": "test"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/2",
        "query": {
          "refresh": "true"
        },
        "body": {
          "test": "test"
        },
        "params": {
          "index": "test",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/refresh.asciidoc",
      "line": 98
    },
    "digest": "1070e59ba144cdf309fd9b2591612b95",
    "lang": "console",
    "found": [],
    "source": "PUT /test/_doc/3\n{\"test\": \"test\"}\nPUT /test/_doc/4?refresh=false\n{\"test\": \"test\"}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_doc/3",
        "query": null,
        "body": {
          "test": "test"
        },
        "params": {
          "index": "test",
          "id": "3"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/4",
        "query": {
          "refresh": "false"
        },
        "body": {
          "test": "test"
        },
        "params": {
          "index": "test",
          "id": "4"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/refresh.asciidoc",
      "line": 108
    },
    "digest": "e4b2b5e0aaedf3cbbcde3d61eb1f13fc",
    "lang": "console",
    "found": [],
    "source": "PUT /test/_doc/4?refresh=wait_for\n{\"test\": \"test\"}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test/_doc/4",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "test": "test"
        },
        "params": {
          "index": "test",
          "id": "4"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/concurrency-control.asciidoc",
      "line": 24
    },
    "digest": "cffc8b207f354beb6d76c8d334cab677",
    "lang": "console",
    "found": [],
    "source": "PUT products/_doc/1567\n{\n    \"product\" : \"r2d2\",\n    \"details\" : \"A resourceful astromech droid\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/products/_doc/1567",
        "query": null,
        "body": {
          "product": "r2d2",
          "details": "A resourceful astromech droid"
        },
        "params": {
          "index": "products",
          "id": "1567"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/concurrency-control.asciidoc",
      "line": 36
    },
    "digest": "e5e8f96d80239e4f815bbaef781fe621",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\" : {\n        \"total\" : 2,\n        \"failed\" : 0,\n        \"successful\" : 1\n    },\n    \"_index\" : \"products\",\n    \"_id\" : \"1567\",\n    \"_version\" : 1,\n    \"_seq_no\" : 362,\n    \"_primary_term\" : 2,\n    \"result\" : \"created\"\n}"
  },
  {
    "source_location": {
      "file": "docs/concurrency-control.asciidoc",
      "line": 60
    },
    "digest": "278d5bfa1a01f91d5c84679ef1bca390",
    "lang": "console",
    "found": [],
    "source": "GET products/_doc/1567",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/products/_doc/1567",
        "query": null,
        "body": null,
        "params": {
          "index": "products",
          "id": "1567"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "docs/concurrency-control.asciidoc",
      "line": 68
    },
    "digest": "79dc2fd91caf6b96f0441a8b40a81304",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_index\" : \"products\",\n    \"_id\" : \"1567\",\n    \"_version\" : 1,\n    \"_seq_no\" : 362,\n    \"_primary_term\" : 2,\n    \"found\": true,\n    \"_source\" : {\n        \"product\" : \"r2d2\",\n        \"details\" : \"A resourceful astromech droid\"\n    }\n}"
  },
  {
    "source_location": {
      "file": "docs/concurrency-control.asciidoc",
      "line": 99
    },
    "digest": "ac24941027452bdafe82b4bd7edf9000",
    "lang": "console",
    "found": [],
    "source": "PUT products/_doc/1567?if_seq_no=362&if_primary_term=2\n{\n    \"product\" : \"r2d2\",\n    \"details\" : \"A resourceful astromech droid\",\n    \"tags\": [\"droid\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/products/_doc/1567",
        "query": {
          "if_seq_no": "362",
          "if_primary_term": "2"
        },
        "body": {
          "product": "r2d2",
          "details": "A resourceful astromech droid",
          "tags": [
            "droid"
          ]
        },
        "params": {
          "index": "products",
          "id": "1567"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/put-enrich-policy.asciidoc",
      "line": 26
    },
    "digest": "e15a5bb869d24668207b9b4629744be4",
    "lang": "console",
    "found": [],
    "source": "PUT /_enrich/policy/my-policy\n{\n    \"match\": {\n        \"indices\": \"users\",\n        \"match_field\": \"email\",\n        \"enrich_fields\": [\"first_name\", \"last_name\", \"city\", \"zip\", \"state\"]\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_enrich/policy/my-policy",
        "query": null,
        "body": {
          "match": {
            "indices": "users",
            "match_field": "email",
            "enrich_fields": [
              "first_name",
              "last_name",
              "city",
              "zip",
              "state"
            ]
          }
        },
        "params": {
          "name": "my-policy"
        },
        "api": "enrich.put_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/delete-enrich-policy.asciidoc",
      "line": 37
    },
    "digest": "cdd29b01e730b3996de68a2788050021",
    "lang": "console",
    "found": [],
    "source": "DELETE /_enrich/policy/my-policy",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_enrich/policy/my-policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my-policy"
        },
        "api": "enrich.delete_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 44
    },
    "digest": "af18f5c5fb2364ae23c6a14431820aba",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/policy/my-policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/policy/my-policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my-policy"
        },
        "api": "enrich.get_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 87
    },
    "digest": "af18f5c5fb2364ae23c6a14431820aba",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/policy/my-policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/policy/my-policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my-policy"
        },
        "api": "enrich.get_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 95
    },
    "digest": "b11d9c9bd14d764f81cd15b547fe6d58",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"policies\": [\n        {\n            \"config\": {\n                \"match\": {\n                    \"name\" : \"my-policy\",\n                    \"indices\" : [\"users\"],\n                    \"match_field\" : \"email\",\n                    \"enrich_fields\" : [\n                        \"first_name\",\n                        \"last_name\",\n                        \"city\",\n                        \"zip\",\n                        \"state\"\n                    ]\n                }\n            }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 123
    },
    "digest": "8684589e31d96ab229e8c4feb4d704bb",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/policy/my-policy,other-policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/policy/my-policy,other-policy",
        "query": null,
        "body": null,
        "params": {
          "name": "my-policy,other-policy"
        },
        "api": "enrich.get_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 131
    },
    "digest": "8f4565d05f90952c8cfb69f30347c73d",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"policies\": [\n        {\n            \"config\": {\n                \"match\": {\n                    \"name\" : \"my-policy\",\n                    \"indices\" : [\"users\"],\n                    \"match_field\" : \"email\",\n                    \"enrich_fields\" : [\n                        \"first_name\",\n                        \"last_name\",\n                        \"city\",\n                        \"zip\",\n                        \"state\"\n                    ]\n                }\n            }\n        },\n        {\n            \"config\": {\n                \"match\": {\n                    \"name\" : \"other-policy\",\n                    \"indices\" : [\"users\"],\n                    \"match_field\" : \"email\",\n                    \"enrich_fields\" : [\n                        \"first_name\",\n                        \"last_name\",\n                        \"city\",\n                        \"zip\",\n                        \"state\"\n                    ]\n                }\n            }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 175
    },
    "digest": "c97fd95ebdcf56cc973582e37f732ed2",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/policy",
        "query": null,
        "body": null,
        "params": null,
        "api": "enrich.get_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/get-enrich-policy.asciidoc",
      "line": 183
    },
    "digest": "8f4565d05f90952c8cfb69f30347c73d",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"policies\": [\n        {\n            \"config\": {\n                \"match\": {\n                    \"name\" : \"my-policy\",\n                    \"indices\" : [\"users\"],\n                    \"match_field\" : \"email\",\n                    \"enrich_fields\" : [\n                        \"first_name\",\n                        \"last_name\",\n                        \"city\",\n                        \"zip\",\n                        \"state\"\n                    ]\n                }\n            }\n        },\n        {\n            \"config\": {\n                \"match\": {\n                    \"name\" : \"other-policy\",\n                    \"indices\" : [\"users\"],\n                    \"match_field\" : \"email\",\n                    \"enrich_fields\" : [\n                        \"first_name\",\n                        \"last_name\",\n                        \"city\",\n                        \"zip\",\n                        \"state\"\n                    ]\n                }\n            }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/execute-enrich-policy.asciidoc",
      "line": 40
    },
    "digest": "66c64bffe3a15cf260baa0c0118aa4ea",
    "lang": "console",
    "found": [],
    "source": "PUT /_enrich/policy/my-policy/_execute",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_enrich/policy/my-policy/_execute",
        "query": null,
        "body": null,
        "params": {
          "name": "my-policy"
        },
        "api": "enrich.execute_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/enrich-stats.asciidoc",
      "line": 14
    },
    "digest": "84e2cf7417c9e0c9e6f3c23031001440",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/_stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "enrich.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/enrich-stats.asciidoc",
      "line": 94
    },
    "digest": "84e2cf7417c9e0c9e6f3c23031001440",
    "lang": "console",
    "found": [],
    "source": "GET /_enrich/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_enrich/_stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "enrich.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/enrich/enrich-stats.asciidoc",
      "line": 102
    },
    "digest": "112d678d90cb37dc475f53ebac76d1b7",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"executing_policies\": [\n        {\n            \"name\": \"my-policy\",\n            \"task\": {\n                \"id\" : 124,\n                \"type\" : \"direct\",\n                \"action\" : \"cluster:admin/xpack/enrich/execute\",\n                \"start_time_in_millis\" : 1458585884904,\n                \"running_time_in_nanos\" : 47402,\n                \"cancellable\" : false,\n                \"parent_task_id\" : \"oTUltX4IQMOUUVeiohTt8A:123\",\n                \"headers\" : {\n                    \"X-Opaque-Id\" : \"123456\"\n                }\n            }\n        }\n    ],\n    \"coordinator_stats\": [\n        {\n            \"node_id\": \"1sFM8cmSROZYhPxVsiWew\",\n            \"queue_size\": 0,\n            \"remote_requests_current\": 0,\n            \"remote_requests_total\": 0,\n            \"executed_searches_total\": 0\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "graph/explore.asciidoc",
      "line": 201
    },
    "digest": "8bf5ac11eb42e652023a685af4a45ae2",
    "lang": "console",
    "found": [],
    "source": "POST clicklogs/_graph/explore\n{\n    \"query\": { <1>\n        \"match\": {\n            \"query.raw\": \"midi\"\n        }\n    },\n    \"vertices\": [ <2>\n        {\n            \"field\": \"product\"\n        }\n    ],\n    \"connections\": {  <3>\n        \"vertices\": [\n            {\n                \"field\": \"query.raw\"\n            }\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/clicklogs/_graph/explore",
        "query": null,
        "body": {
          "query": {
            "match": {
              "query.raw": "midi"
            }
          },
          "vertices": [
            {
              "field": "product"
            }
          ],
          "connections": {
            "vertices": [
              {
                "field": "query.raw"
              }
            ]
          }
        },
        "params": {
          "index": "clicklogs"
        },
        "api": "graph.explore"
      }
    ]
  },
  {
    "source_location": {
      "file": "graph/explore.asciidoc",
      "line": 306
    },
    "digest": "6a1a238984d74771420d150dec47fd91",
    "lang": "console",
    "found": [],
    "source": "POST clicklogs/_graph/explore\n{\n    \"query\": {\n        \"match\": {\n            \"query.raw\": \"midi\"\n        }\n    },\n   \"controls\": {\n      \"use_significance\": false,<1>\n      \"sample_size\": 2000,<2>\n      \"timeout\": 2000,<3>\n      \"sample_diversity\": {<4>\n         \"field\": \"category.raw\",\n         \"max_docs_per_value\": 500\n      }\n   },\n   \"vertices\": [\n      {\n         \"field\": \"product\",\n         \"size\": 5,<5>\n         \"min_doc_count\": 10,<6>\n         \"shard_min_doc_count\": 3<7>\n      }\n   ],\n   \"connections\": {\n      \"query\": {<8>\n         \"bool\": {\n            \"filter\": [\n               {\n                  \"range\": {\n                     \"query_time\": {\n                        \"gte\": \"2015-10-01 00:00:00\"\n                     }\n                  }\n               }\n            ]\n         }\n      },\n      \"vertices\": [\n         {\n            \"field\": \"query.raw\",\n            \"size\": 5,\n            \"min_doc_count\": 10,\n            \"shard_min_doc_count\": 3\n         }\n      ]\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/clicklogs/_graph/explore",
        "query": null,
        "body": {
          "query": {
            "match": {
              "query.raw": "midi"
            }
          },
          "controls": {
            "use_significance": false,
            "sample_size": 2000,
            "timeout": 2000,
            "sample_diversity": {
              "field": "category.raw",
              "max_docs_per_value": 500
            }
          },
          "vertices": [
            {
              "field": "product",
              "size": 5,
              "min_doc_count": 10,
              "shard_min_doc_count": 3
            }
          ],
          "connections": {
            "query": {
              "bool": {
                "filter": [
                  {
                    "range": {
                      "query_time": {
                        "gte": "2015-10-01 00:00:00"
                      }
                    }
                  }
                ]
              }
            },
            "vertices": [
              {
                "field": "query.raw",
                "size": 5,
                "min_doc_count": 10,
                "shard_min_doc_count": 3
              }
            ]
          }
        },
        "params": {
          "index": "clicklogs"
        },
        "api": "graph.explore"
      }
    ]
  },
  {
    "source_location": {
      "file": "graph/explore.asciidoc",
      "line": 393
    },
    "digest": "fa82d86a046d67366cfe9ce65535e433",
    "lang": "console",
    "found": [],
    "source": "POST clicklogs/_graph/explore\n{\n   \"vertices\": [\n      {\n         \"field\": \"product\",\n         \"include\": [ \"1854873\" ] <1>\n      }\n   ],\n   \"connections\": {\n      \"vertices\": [\n         {\n            \"field\": \"query.raw\",\n            \"exclude\": [ <2>\n               \"midi keyboard\",\n               \"midi\",\n               \"synth\"\n            ]\n         }\n      ]\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/clicklogs/_graph/explore",
        "query": null,
        "body": {
          "vertices": [
            {
              "field": "product",
              "include": [
                "1854873"
              ]
            }
          ],
          "connections": {
            "vertices": [
              {
                "field": "query.raw",
                "exclude": [
                  "midi keyboard",
                  "midi",
                  "synth"
                ]
              }
            ]
          }
        },
        "params": {
          "index": "clicklogs"
        },
        "api": "graph.explore"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/add-alias.asciidoc",
      "line": 12
    },
    "digest": "394aabe7029e4d0741ae6965c6fae5ac",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_alias/alias1",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_alias/alias1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "name": "alias1"
        },
        "api": "indices.put_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/add-alias.asciidoc",
      "line": 71
    },
    "digest": "7fe8339ce3911382a7c473f6f0c03f89",
    "lang": "console",
    "found": [],
    "source": "PUT /logs_20302801/_alias/2030",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs_20302801/_alias/2030",
        "query": null,
        "body": null,
        "params": {
          "index": "logs_20302801",
          "name": "2030"
        },
        "api": "indices.put_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/add-alias.asciidoc",
      "line": 83
    },
    "digest": "890f659cfc10ff8171420809bdcf7c67",
    "lang": "console",
    "found": [],
    "source": "PUT /users\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"user_id\" : {\"type\" : \"integer\"}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/users",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_id": {
                "type": "integer"
              }
            }
          }
        },
        "params": {
          "index": "users"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/add-alias.asciidoc",
      "line": 97
    },
    "digest": "83b2785e63357ab3ade51d8ec0c11917",
    "lang": "console",
    "found": [],
    "source": "PUT /users/_alias/user_12\n{\n    \"routing\" : \"12\",\n    \"filter\" : {\n        \"term\" : {\n            \"user_id\" : 12\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/users/_alias/user_12",
        "query": null,
        "body": {
          "routing": "12",
          "filter": {
            "term": {
              "user_id": 12
            }
          }
        },
        "params": {
          "index": "users",
          "name": "user_12"
        },
        "api": "indices.put_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/add-alias.asciidoc",
      "line": 117
    },
    "digest": "3e1e00a08a6fbfdc3d55d69880373cd6",
    "lang": "console",
    "found": [],
    "source": "PUT /logs_20302801\n{\n    \"mappings\" : {\n        \"properties\" : {\n            \"year\" : {\"type\" : \"integer\"}\n        }\n    },\n    \"aliases\" : {\n        \"current_day\" : {},\n        \"2030\" : {\n            \"filter\" : {\n                \"term\" : {\"year\" : 2030 }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs_20302801",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "year": {
                "type": "integer"
              }
            }
          },
          "aliases": {
            "2030": {
              "filter": {
                "term": {
                  "year": 2030
                }
              }
            },
            "current_day": {}
          }
        },
        "params": {
          "index": "logs_20302801"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 11
    },
    "digest": "fa42ae3bf6a300420cd0f77ba006458a",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"analyzer\" : \"standard\",\n  \"text\" : \"Quick Brown Foxes!\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "standard",
          "text": "Quick Brown Foxes!"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 140
    },
    "digest": "76dbdd0b2bd48c3c6b1a8d81e23bafd6",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"analyzer\" : \"standard\",\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "standard",
          "text": "this is a test"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 154
    },
    "digest": "fd9b668eeb1f117950bd4991c7c03fb1",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"analyzer\" : \"standard\",\n  \"text\" : [\"this is a test\", \"the second text\"]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "analyzer": "standard",
          "text": [
            "this is a test",
            "the second text"
          ]
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 170
    },
    "digest": "ef33b3b373f7040b874146599db5d557",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"keyword\",\n  \"filter\" : [\"lowercase\"],\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "lowercase"
          ],
          "text": "this is a test"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 180
    },
    "digest": "dc8c94c9bef1f879282caea5c406f36e",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"keyword\",\n  \"filter\" : [\"lowercase\"],\n  \"char_filter\" : [\"html_strip\"],\n  \"text\" : \"this is a <b>test</b>\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "keyword",
          "filter": [
            "lowercase"
          ],
          "char_filter": [
            "html_strip"
          ],
          "text": "this is a test</b>"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 195
    },
    "digest": "22dde5fe7ac5d85d52115641a68b3c55",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"whitespace\",\n  \"filter\" : [\"lowercase\", {\"type\": \"stop\", \"stopwords\": [\"a\", \"is\", \"this\"]}],\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "whitespace",
          "filter": [
            "lowercase",
            {
              "type": "stop",
              "stopwords": [
                "a",
                "is",
                "this"
              ]
            }
          ],
          "text": "this is a test"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 210
    },
    "digest": "3951d7fcd7f849fa278daf342872125a",
    "lang": "console",
    "found": [],
    "source": "GET /analyze_sample/_analyze\n{\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/analyze_sample/_analyze",
        "query": null,
        "body": {
          "text": "this is a test"
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 223
    },
    "digest": "71fa652ddea811eb3c8bf8c5db21e549",
    "lang": "console",
    "found": [],
    "source": "GET /analyze_sample/_analyze\n{\n  \"analyzer\" : \"whitespace\",\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/analyze_sample/_analyze",
        "query": null,
        "body": {
          "analyzer": "whitespace",
          "text": "this is a test"
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 238
    },
    "digest": "de2f59887737de3a27716177b60393a2",
    "lang": "console",
    "found": [],
    "source": "GET /analyze_sample/_analyze\n{\n  \"field\" : \"obj1.field1\",\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/analyze_sample/_analyze",
        "query": null,
        "body": {
          "field": "obj1.field1",
          "text": "this is a test"
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 256
    },
    "digest": "49d87c2eb7314ed34221c5fb4f21dfcc",
    "lang": "console",
    "found": [],
    "source": "GET /analyze_sample/_analyze\n{\n  \"normalizer\" : \"my_normalizer\",\n  \"text\" : \"BaR\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/analyze_sample/_analyze",
        "query": null,
        "body": {
          "normalizer": "my_normalizer",
          "text": "BaR"
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 268
    },
    "digest": "15a34bfe0ef8ef6333c8c7b55c011e5d",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"filter\" : [\"lowercase\"],\n  \"text\" : \"BaR\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "filter": [
            "lowercase"
          ],
          "text": "BaR"
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 285
    },
    "digest": "89f8eac24f3ec6a7668d580aaf0eeefa",
    "lang": "console",
    "found": [],
    "source": "GET /_analyze\n{\n  \"tokenizer\" : \"standard\",\n  \"filter\" : [\"snowball\"],\n  \"text\" : \"detailed output\",\n  \"explain\" : true,\n  \"attributes\" : [\"keyword\"] <1>\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_analyze",
        "query": null,
        "body": {
          "tokenizer": "standard",
          "filter": [
            "snowball"
          ],
          "text": "detailed output",
          "explain": true,
          "attributes": [
            "keyword"
          ]
        },
        "params": null,
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 301
    },
    "digest": "cf3af9502f758de0682176adb30e7128",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"detail\" : {\n    \"custom_analyzer\" : true,\n    \"charfilters\" : [ ],\n    \"tokenizer\" : {\n      \"name\" : \"standard\",\n      \"tokens\" : [ {\n        \"token\" : \"detailed\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 8,\n        \"type\" : \"<ALPHANUM>\",\n        \"position\" : 0\n      }, {\n        \"token\" : \"output\",\n        \"start_offset\" : 9,\n        \"end_offset\" : 15,\n        \"type\" : \"<ALPHANUM>\",\n        \"position\" : 1\n      } ]\n    },\n    \"tokenfilters\" : [ {\n      \"name\" : \"snowball\",\n      \"tokens\" : [ {\n        \"token\" : \"detail\",\n        \"start_offset\" : 0,\n        \"end_offset\" : 8,\n        \"type\" : \"<ALPHANUM>\",\n        \"position\" : 0,\n        \"keyword\" : false <1>\n      }, {\n        \"token\" : \"output\",\n        \"start_offset\" : 9,\n        \"end_offset\" : 15,\n        \"type\" : \"<ALPHANUM>\",\n        \"position\" : 1,\n        \"keyword\" : false <1>\n      } ]\n    } ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 360
    },
    "digest": "0957bbd535f58c97b12ffba90813d64c",
    "lang": "console",
    "found": [],
    "source": "PUT /analyze_sample\n{\n  \"settings\" : {\n    \"index.analyze.max_token_count\" : 20000\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/analyze_sample",
        "query": null,
        "body": {
          "settings": {
            "index.analyze.max_token_count": 20000
          }
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/analyze.asciidoc",
      "line": 371
    },
    "digest": "3951d7fcd7f849fa278daf342872125a",
    "lang": "console",
    "found": [],
    "source": "GET /analyze_sample/_analyze\n{\n  \"text\" : \"this is a test\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/analyze_sample/_analyze",
        "query": null,
        "body": {
          "text": "this is a test"
        },
        "params": {
          "index": "analyze_sample"
        },
        "api": "indices.analyze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clearcache.asciidoc",
      "line": 10
    },
    "digest": "486eee2c8e75520f825fec08c1fbd67e",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_cache/clear",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_cache/clear",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clearcache.asciidoc",
      "line": 101
    },
    "digest": "e97b14be2c4030bfc92e5d09a27e9fc9",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_cache/clear?fielddata=true  <1>\nPOST /twitter/_cache/clear?query=true      <2>\nPOST /twitter/_cache/clear?request=true    <3>",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_cache/clear",
        "query": {
          "fielddata": "true"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.clear_cache"
      },
      {
        "method": "POST",
        "url": "/twitter/_cache/clear",
        "query": {
          "query": "true"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.clear_cache"
      },
      {
        "method": "POST",
        "url": "/twitter/_cache/clear",
        "query": {
          "request": "true"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clearcache.asciidoc",
      "line": 121
    },
    "digest": "62069c4118d79daf9612b29659b16627",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_cache/clear?fields=foo,bar   <1>",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_cache/clear",
        "query": {
          "fields": "foo,bar"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clearcache.asciidoc",
      "line": 133
    },
    "digest": "2f43c5e976713a5c5cd8eb4b08cfffca",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy,elasticsearch/_cache/clear",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy,elasticsearch/_cache/clear",
        "query": null,
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clearcache.asciidoc",
      "line": 143
    },
    "digest": "c4a1d03dcfb82913d0724a42b0a89f20",
    "lang": "console",
    "found": [],
    "source": "POST /_cache/clear",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_cache/clear",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clone-index.asciidoc",
      "line": 10
    },
    "digest": "085df89b76dd980934d1dc2e59f5db1f",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_clone/cloned-twitter-index",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_clone/cloned-twitter-index",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "target": "cloned-twitter-index"
        },
        "api": "indices.clone"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clone-index.asciidoc",
      "line": 37
    },
    "digest": "1c5a5a8c0bdc3c577f560157bd4e2313",
    "lang": "console",
    "found": [],
    "source": "PUT /my_source_index/_settings\n{\n  \"settings\": {\n    \"index.blocks.write\": true\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_source_index/_settings",
        "query": null,
        "body": {
          "settings": {
            "index.blocks.write": true
          }
        },
        "params": {
          "index": "my_source_index"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clone-index.asciidoc",
      "line": 78
    },
    "digest": "190a21e32db2125ddaea0f634e126a84",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_clone/my_target_index",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_clone/my_target_index",
        "query": null,
        "body": null,
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.clone"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/clone-index.asciidoc",
      "line": 104
    },
    "digest": "81612c2537386e031b7eb604f6756a71",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_clone/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_shards\": 5 <1>\n  },\n  \"aliases\": {\n    \"my_search_indices\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_clone/my_target_index",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_shards": 5
          },
          "aliases": {
            "my_search_indices": {}
          }
        },
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.clone"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/close.asciidoc",
      "line": 10
    },
    "digest": "34107944bca50a003cda9fca934b2011",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_close",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_close",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.close"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/close.asciidoc",
      "line": 66
    },
    "digest": "3a6b9143f3de6258d44ff7e0eb38d953",
    "lang": "console",
    "found": [],
    "source": "POST /my_index/_close",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_close",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.close"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/close.asciidoc",
      "line": 74
    },
    "digest": "2de507b2683e9f92921201724c13b764",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"acknowledged\" : true,\n    \"shards_acknowledged\" : true,\n    \"indices\" : {\n        \"my_index\" : {\n            \"closed\" : true\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 10
    },
    "digest": "1c23507edd7a3c18538b68223378e4ab",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /twitter",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 81
    },
    "digest": "e5d2172b524332196cac0f031c043659",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /twitter\n{\n    \"settings\" : {\n        \"index\" : {\n            \"number_of_shards\" : 3, <1>\n            \"number_of_replicas\" : 2 <2>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "number_of_shards": 3,
              "number_of_replicas": 2
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 99
    },
    "digest": "b9c5d7ca6ca9c6f747201f45337a4abf",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /twitter\n{\n    \"settings\" : {\n        \"number_of_shards\" : 3,\n        \"number_of_replicas\" : 2\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 3,
            "number_of_replicas": 2
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 123
    },
    "digest": "dfef545b1e2c247bafd1347e8e807ac1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /test\n{\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"properties\" : {\n            \"field1\" : { \"type\" : \"text\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "settings": {
            "number_of_shards": 1
          },
          "mappings": {
            "properties": {
              "field1": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 143
    },
    "digest": "4d56b179242fed59e3d6476f817b6055",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /test\n{\n    \"aliases\" : {\n        \"alias_1\" : {},\n        \"alias_2\" : {\n            \"filter\" : {\n                \"term\" : {\"user\" : \"kimchy\" }\n            },\n            \"routing\" : \"kimchy\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "aliases": {
            "alias_1": {},
            "alias_2": {
              "filter": {
                "term": {
                  "user": "kimchy"
                }
              },
              "routing": "kimchy"
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 166
    },
    "digest": "fd86e01af45ae8c293888eebfa064e25",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"acknowledged\": true,\n    \"shards_acknowledged\": true,\n    \"index\": \"test\"\n}"
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 190
    },
    "digest": "4d46dbb96125b27f46299547de9d8709",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /test\n{\n    \"settings\": {\n        \"index.write.wait_for_active_shards\": \"2\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "settings": {
            "index.write.wait_for_active_shards": "2"
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/create-index.asciidoc",
      "line": 203
    },
    "digest": "fabe14480624a99e8ee42c7338672058",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "ruby",
      "go",
      "js"
    ],
    "source": "PUT /test?wait_for_active_shards=2",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": {
          "wait_for_active_shards": "2"
        },
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/delete-index.asciidoc",
      "line": 10
    },
    "digest": "98f14fddddea54a7d6149ab7b92e099d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "DELETE /twitter",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/twitter",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/delete-alias.asciidoc",
      "line": 12
    },
    "digest": "bdeee37db5fbf55e5026746c37df3c31",
    "lang": "console",
    "found": [],
    "source": "DELETE /twitter/_alias/alias1",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/twitter/_alias/alias1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "name": "alias1"
        },
        "api": "indices.delete_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/delete-index-template.asciidoc",
      "line": 24
    },
    "digest": "0f0fba0061d26602cd5f401ca4a19be3",
    "lang": "console",
    "found": [],
    "source": "DELETE /_template/template_1",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_template/template_1",
        "query": null,
        "body": null,
        "params": {
          "name": "template_1"
        },
        "api": "indices.delete_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/flush.asciidoc",
      "line": 10
    },
    "digest": "bf7b04e79b861d76d1922a588d57f817",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_flush",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/flush.asciidoc",
      "line": 117
    },
    "digest": "cefde3553fdbd516813e73a603c72c24",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy/_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy/_flush",
        "query": null,
        "body": null,
        "params": {
          "index": "kimchy"
        },
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/flush.asciidoc",
      "line": 127
    },
    "digest": "66db9f5108a3936115f1fb64c844934a",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy,elasticsearch/_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy,elasticsearch/_flush",
        "query": null,
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/flush.asciidoc",
      "line": 137
    },
    "digest": "f27c28ddbf4c266b5f42d14da837b8de",
    "lang": "console",
    "found": [],
    "source": "POST /_flush",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_flush",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.flush"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/forcemerge.asciidoc",
      "line": 10
    },
    "digest": "ca16c1f060ca653ea8fbca445359f78f",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_forcemerge",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_forcemerge",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/forcemerge.asciidoc",
      "line": 131
    },
    "digest": "ca16c1f060ca653ea8fbca445359f78f",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_forcemerge",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_forcemerge",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/forcemerge.asciidoc",
      "line": 141
    },
    "digest": "6733f91e27b6d5907d7c58546bc45ca1",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy,elasticsearch/_forcemerge",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy,elasticsearch/_forcemerge",
        "query": null,
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/forcemerge.asciidoc",
      "line": 151
    },
    "digest": "480e531db799c4c909afd8e2a73a8d0b",
    "lang": "console",
    "found": [],
    "source": "POST /_forcemerge",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_forcemerge",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/forcemerge.asciidoc",
      "line": 167
    },
    "digest": "64d97cda667be166f3df49e87e713560",
    "lang": "console",
    "found": [],
    "source": "POST /logs-000001/_forcemerge?max_num_segments=1",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/logs-000001/_forcemerge",
        "query": {
          "max_num_segments": "1"
        },
        "body": null,
        "params": {
          "index": "logs-000001"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/freeze.asciidoc",
      "line": 44
    },
    "digest": "ffea06f77c9df5720412aa06be964118",
    "lang": "console",
    "found": [],
    "source": "POST /my_index/_freeze\nPOST /my_index/_unfreeze",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_freeze",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.freeze"
      },
      {
        "method": "POST",
        "url": "/my_index/_unfreeze",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.unfreeze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 12
    },
    "digest": "02c9cadc657f6afd4ca854c577188d31",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_mapping/field/user",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_mapping/field/user",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "fields": "user"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 63
    },
    "digest": "f0f0f778e19134fbe3e4be98fc47bd34",
    "lang": "console",
    "found": [],
    "source": "PUT /publications\n{\n    \"mappings\": {\n        \"properties\": {\n            \"id\": { \"type\": \"text\" },\n            \"title\":  { \"type\": \"text\"},\n            \"abstract\": { \"type\": \"text\"},\n            \"author\": {\n                \"properties\": {\n                    \"id\": { \"type\": \"text\" },\n                    \"name\": { \"type\": \"text\" }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/publications",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "id": {
                "type": "text"
              },
              "title": {
                "type": "text"
              },
              "abstract": {
                "type": "text"
              },
              "author": {
                "properties": {
                  "id": {
                    "type": "text"
                  },
                  "name": {
                    "type": "text"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "publications"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 85
    },
    "digest": "299900fb08da80fe455cf3f1bb7d62ee",
    "lang": "console",
    "found": [],
    "source": "GET publications/_mapping/field/title",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/publications/_mapping/field/title",
        "query": null,
        "body": null,
        "params": {
          "index": "publications",
          "fields": "title"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 93
    },
    "digest": "22f71640207a2e3d4dd49aac36040ec8",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"publications\": {\n      \"mappings\": {\n          \"title\": {\n             \"full_name\": \"title\",\n             \"mapping\": {\n                \"title\": {\n                   \"type\": \"text\"\n                }\n             }\n          }\n       }\n   }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 118
    },
    "digest": "ed3bdf4d6799b43526851e92b6a60c55",
    "lang": "console",
    "found": [],
    "source": "GET publications/_mapping/field/author.id,abstract,name",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/publications/_mapping/field/author.id,abstract,name",
        "query": null,
        "body": null,
        "params": {
          "index": "publications",
          "fields": "author.id,abstract,name"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 126
    },
    "digest": "e7f96a786722ae6daca6f8bcc6cd90d1",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"publications\": {\n      \"mappings\": {\n        \"author.id\": {\n           \"full_name\": \"author.id\",\n           \"mapping\": {\n              \"id\": {\n                 \"type\": \"text\"\n              }\n           }\n        },\n        \"abstract\": {\n           \"full_name\": \"abstract\",\n           \"mapping\": {\n              \"abstract\": {\n                 \"type\": \"text\"\n              }\n           }\n        }\n     }\n   }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 154
    },
    "digest": "b61afb7ca29a11243232ffcc8b5a43cf",
    "lang": "console",
    "found": [],
    "source": "GET publications/_mapping/field/a*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/publications/_mapping/field/a*",
        "query": null,
        "body": null,
        "params": {
          "index": "publications",
          "fields": "a*"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 162
    },
    "digest": "75311399baa651a6df82f8bf60aaec3a",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"publications\": {\n      \"mappings\": {\n         \"author.name\": {\n            \"full_name\": \"author.name\",\n            \"mapping\": {\n               \"name\": {\n                 \"type\": \"text\"\n               }\n            }\n         },\n         \"abstract\": {\n            \"full_name\": \"abstract\",\n            \"mapping\": {\n               \"abstract\": {\n                  \"type\": \"text\"\n               }\n            }\n         },\n         \"author.id\": {\n            \"full_name\": \"author.id\",\n            \"mapping\": {\n               \"id\": {\n                  \"type\": \"text\"\n               }\n            }\n         }\n      }\n   }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-field-mapping.asciidoc",
      "line": 206
    },
    "digest": "9af393bb38bf098d65d00e7637824f44",
    "lang": "console",
    "found": [],
    "source": "GET /twitter,kimchy/_mapping/field/message\n\nGET /_all/_mapping/field/message,user.id\n\nGET /_all/_mapping/field/*.id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter,kimchy/_mapping/field/message",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter,kimchy",
          "fields": "message"
        },
        "api": "indices.get_field_mapping"
      },
      {
        "method": "GET",
        "url": "/_all/_mapping/field/message,user.id",
        "query": null,
        "body": null,
        "params": {
          "index": "_all",
          "fields": "message,user.id"
        },
        "api": "indices.get_field_mapping"
      },
      {
        "method": "GET",
        "url": "/_all/_mapping/field/*.id",
        "query": null,
        "body": null,
        "params": {
          "index": "_all",
          "fields": "*.id"
        },
        "api": "indices.get_field_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-index.asciidoc",
      "line": 10
    },
    "digest": "be8f28f31207b173de61be032fcf239c",
    "lang": "console",
    "found": [],
    "source": "GET /twitter",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 12
    },
    "digest": "265ba62e416d27b3408fb8a2f698627d",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_alias/alias1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_alias/alias1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "name": "alias1"
        },
        "api": "indices.get_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 76
    },
    "digest": "8118bad980d7afd31677b5060361ecd2",
    "lang": "console",
    "found": [],
    "source": "PUT /logs_20302801\n{\n  \"aliases\" : {\n    \"current_day\" : {},\n    \"2030\" : {\n      \"filter\" : {\n          \"term\" : {\"year\" : 2030 }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs_20302801",
        "query": null,
        "body": {
          "aliases": {
            "2030": {
              "filter": {
                "term": {
                  "year": 2030
                }
              }
            },
            "current_day": {}
          }
        },
        "params": {
          "index": "logs_20302801"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 94
    },
    "digest": "e85f2b38878f745a16edc575e78d7cde",
    "lang": "console",
    "found": [],
    "source": "GET /logs_20302801/_alias/*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/logs_20302801/_alias/*",
        "query": null,
        "body": null,
        "params": {
          "index": "logs_20302801",
          "name": "*"
        },
        "api": "indices.get_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 102
    },
    "digest": "1ece6831c3863087f258493460d49d63",
    "lang": "console-result",
    "found": [],
    "source": "{\n \"logs_20302801\" : {\n   \"aliases\" : {\n    \"current_day\" : {\n    },\n     \"2030\" : {\n       \"filter\" : {\n         \"term\" : {\n           \"year\" : 2030\n         }\n       }\n     }\n   }\n }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 127
    },
    "digest": "a71c929ed2e322f91092d5dc625b6440",
    "lang": "console",
    "found": [],
    "source": "GET /_alias/2030",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_alias/2030",
        "query": null,
        "body": null,
        "params": {
          "name": "2030"
        },
        "api": "indices.get_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 135
    },
    "digest": "26b770c1281d844f7344f17413d26208",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"logs_20302801\" : {\n    \"aliases\" : {\n      \"2030\" : {\n        \"filter\" : {\n          \"term\" : {\n            \"year\" : 2030\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 158
    },
    "digest": "56aa1bff647d1db49dabf175c1e56919",
    "lang": "console",
    "found": [],
    "source": "GET /_alias/20*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_alias/20*",
        "query": null,
        "body": null,
        "params": {
          "name": "20*"
        },
        "api": "indices.get_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-alias.asciidoc",
      "line": 166
    },
    "digest": "26b770c1281d844f7344f17413d26208",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"logs_20302801\" : {\n    \"aliases\" : {\n      \"2030\" : {\n        \"filter\" : {\n          \"term\" : {\n            \"year\" : 2030\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/get-settings.asciidoc",
      "line": 10
    },
    "digest": "20bdfd960e8d76c4329269e237792eb7",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_settings",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_settings",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-settings.asciidoc",
      "line": 68
    },
    "digest": "c538fc182f433e7141aee9d75c3e42d2",
    "lang": "console",
    "found": [],
    "source": "GET /twitter,kimchy/_settings\n\nGET /_all/_settings\n\nGET /log_2013_*/_settings",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter,kimchy/_settings",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter,kimchy"
        },
        "api": "indices.get_settings"
      },
      {
        "method": "GET",
        "url": "/_all/_settings",
        "query": null,
        "body": null,
        "params": {
          "index": "_all"
        },
        "api": "indices.get_settings"
      },
      {
        "method": "GET",
        "url": "/log_2013_*/_settings",
        "query": null,
        "body": null,
        "params": {
          "index": "log_2013_*"
        },
        "api": "indices.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-settings.asciidoc",
      "line": 84
    },
    "digest": "9748682dcfb24b7d4893f534f7040370",
    "lang": "console",
    "found": [],
    "source": "GET /log_2013_-*/_settings/index.number_*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/log_2013_-*/_settings/index.number_*",
        "query": null,
        "body": null,
        "params": {
          "index": "log_2013_-*",
          "name": "index.number_*"
        },
        "api": "indices.get_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-index-template.asciidoc",
      "line": 31
    },
    "digest": "02f65c6bab8f40bf3ce18160623d1870",
    "lang": "console",
    "found": [],
    "source": "GET /_template/template_1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template/template_1",
        "query": null,
        "body": null,
        "params": {
          "name": "template_1"
        },
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-index-template.asciidoc",
      "line": 69
    },
    "digest": "24aee6033bf77a68ced74e3fd9d34283",
    "lang": "console",
    "found": [],
    "source": "GET /_template/template_1,template_2",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template/template_1,template_2",
        "query": null,
        "body": null,
        "params": {
          "name": "template_1,template_2"
        },
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-index-template.asciidoc",
      "line": 78
    },
    "digest": "ba6040de55afb2c8fb9e5b24bb038820",
    "lang": "console",
    "found": [],
    "source": "GET /_template/temp*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template/temp*",
        "query": null,
        "body": null,
        "params": {
          "name": "temp*"
        },
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-index-template.asciidoc",
      "line": 87
    },
    "digest": "fd2d289e6b725fcc3cbe8fe7ffe02ea0",
    "lang": "console",
    "found": [],
    "source": "GET /_template",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-mapping.asciidoc",
      "line": 10
    },
    "digest": "a8fba09a46b2c3524428aa3259b7124f",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-mapping.asciidoc",
      "line": 60
    },
    "digest": "cf02e3d8b371bd59f0224967c36330da",
    "lang": "console",
    "found": [],
    "source": "GET /twitter,kimchy/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter,kimchy/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter,kimchy"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/get-mapping.asciidoc",
      "line": 70
    },
    "digest": "09cdd5ae8114c49886026fef8d00a19c",
    "lang": "console",
    "found": [],
    "source": "GET /_all/_mapping\n\nGET /_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_all/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "_all"
        },
        "api": "indices.get_mapping"
      },
      {
        "method": "GET",
        "url": "/_mapping",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/alias-exists.asciidoc",
      "line": 12
    },
    "digest": "83e388644f60178c8de0d0e4247ee4c6",
    "lang": "console",
    "found": [],
    "source": "HEAD /_alias/alias1",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/_alias/alias1",
        "query": null,
        "body": null,
        "params": {
          "name": "alias1"
        },
        "api": "indices.exists_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/alias-exists.asciidoc",
      "line": 62
    },
    "digest": "666785827827be4b5252ec859c354d30",
    "lang": "console",
    "found": [],
    "source": "HEAD /_alias/2030\nHEAD /_alias/20*\nHEAD /logs_20302801/_alias/*",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/_alias/2030",
        "query": null,
        "body": null,
        "params": {
          "name": "2030"
        },
        "api": "indices.exists_alias"
      },
      {
        "method": "HEAD",
        "url": "/_alias/20*",
        "query": null,
        "body": null,
        "params": {
          "name": "20*"
        },
        "api": "indices.exists_alias"
      },
      {
        "method": "HEAD",
        "url": "/logs_20302801/_alias/*",
        "query": null,
        "body": null,
        "params": {
          "index": "logs_20302801",
          "name": "*"
        },
        "api": "indices.exists_alias"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/indices-exists.asciidoc",
      "line": 12
    },
    "digest": "22b6176a55b7884c247e30fb0899be5d",
    "lang": "console",
    "found": [],
    "source": "HEAD /twitter",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/twitter",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.exists"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 11
    },
    "digest": "499e9bdf7848fd4de33b6f2bd8a6b1f2",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_recovery",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_recovery",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 171
    },
    "digest": "13ebcb01ebf1b5d2b5c52739db47e30c",
    "lang": "console",
    "found": [],
    "source": "GET index1,index2/_recovery?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index1,index2/_recovery",
        "query": {
          "human": true
        },
        "body": null,
        "params": {
          "index": "index1,index2"
        },
        "api": "indices.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 226
    },
    "digest": "5dfb23f6e36ef484f1d3271bae76a8d1",
    "lang": "console",
    "found": [],
    "source": "GET /_recovery?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_recovery",
        "query": {
          "human": true
        },
        "body": null,
        "params": null,
        "api": "indices.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 234
    },
    "digest": "dd4b03536a1d0fba1aafc9ad48b24f23",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"index1\" : {\n    \"shards\" : [ {\n      \"id\" : 0,\n      \"type\" : \"SNAPSHOT\",\n      \"stage\" : \"INDEX\",\n      \"primary\" : true,\n      \"start_time\" : \"2014-02-24T12:15:59.716\",\n      \"start_time_in_millis\": 1393244159716,\n      \"stop_time\" : \"0s\",\n      \"stop_time_in_millis\" : 0,\n      \"total_time\" : \"2.9m\",\n      \"total_time_in_millis\" : 175576,\n      \"source\" : {\n        \"repository\" : \"my_repository\",\n        \"snapshot\" : \"my_snapshot\",\n        \"index\" : \"index1\",\n        \"version\" : \"{version}\",\n        \"restoreUUID\": \"PDh1ZAOaRbiGIVtCvZOMww\"\n      },\n      \"target\" : {\n        \"id\" : \"ryqJ5lO5S4-lSFbGntkEkg\",\n        \"host\" : \"my.fqdn\",\n        \"transport_address\" : \"my.fqdn\",\n        \"ip\" : \"10.0.1.7\",\n        \"name\" : \"my_es_node\"\n      },\n      \"index\" : {\n        \"size\" : {\n          \"total\" : \"75.4mb\",\n          \"total_in_bytes\" : 79063092,\n          \"reused\" : \"0b\",\n          \"reused_in_bytes\" : 0,\n          \"recovered\" : \"65.7mb\",\n          \"recovered_in_bytes\" : 68891939,\n          \"percent\" : \"87.1%\"\n        },\n        \"files\" : {\n          \"total\" : 73,\n          \"reused\" : 0,\n          \"recovered\" : 69,\n          \"percent\" : \"94.5%\"\n        },\n        \"total_time\" : \"0s\",\n        \"total_time_in_millis\" : 0,\n        \"source_throttle_time\" : \"0s\",\n        \"source_throttle_time_in_millis\" : 0,\n        \"target_throttle_time\" : \"0s\",\n        \"target_throttle_time_in_millis\" : 0\n      },\n      \"translog\" : {\n        \"recovered\" : 0,\n        \"total\" : 0,\n        \"percent\" : \"100.0%\",\n        \"total_on_start\" : 0,\n        \"total_time\" : \"0s\",\n        \"total_time_in_millis\" : 0,\n      },\n      \"verify_index\" : {\n        \"check_index_time\" : \"0s\",\n        \"check_index_time_in_millis\" : 0,\n        \"total_time\" : \"0s\",\n        \"total_time_in_millis\" : 0\n      }\n    } ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 326
    },
    "digest": "5619103306878d58a058bce87c5bd82b",
    "lang": "console",
    "found": [],
    "source": "GET _recovery?human&detailed=true",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_recovery",
        "query": {
          "human": true,
          "detailed": "true"
        },
        "body": null,
        "params": null,
        "api": "indices.recovery"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/recovery.asciidoc",
      "line": 334
    },
    "digest": "2eadd303fba0f73acbf689c6ae69bfe8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"index1\" : {\n    \"shards\" : [ {\n      \"id\" : 0,\n      \"type\" : \"STORE\",\n      \"stage\" : \"DONE\",\n      \"primary\" : true,\n      \"start_time\" : \"2014-02-24T12:38:06.349\",\n      \"start_time_in_millis\" : \"1393245486349\",\n      \"stop_time\" : \"2014-02-24T12:38:08.464\",\n      \"stop_time_in_millis\" : \"1393245488464\",\n      \"total_time\" : \"2.1s\",\n      \"total_time_in_millis\" : 2115,\n      \"source\" : {\n        \"id\" : \"RGMdRc-yQWWKIBM4DGvwqQ\",\n        \"host\" : \"my.fqdn\",\n        \"transport_address\" : \"my.fqdn\",\n        \"ip\" : \"10.0.1.7\",\n        \"name\" : \"my_es_node\"\n      },\n      \"target\" : {\n        \"id\" : \"RGMdRc-yQWWKIBM4DGvwqQ\",\n        \"host\" : \"my.fqdn\",\n        \"transport_address\" : \"my.fqdn\",\n        \"ip\" : \"10.0.1.7\",\n        \"name\" : \"my_es_node\"\n      },\n      \"index\" : {\n        \"size\" : {\n          \"total\" : \"24.7mb\",\n          \"total_in_bytes\" : 26001617,\n          \"reused\" : \"24.7mb\",\n          \"reused_in_bytes\" : 26001617,\n          \"recovered\" : \"0b\",\n          \"recovered_in_bytes\" : 0,\n          \"percent\" : \"100.0%\"\n        },\n        \"files\" : {\n          \"total\" : 26,\n          \"reused\" : 26,\n          \"recovered\" : 0,\n          \"percent\" : \"100.0%\",\n          \"details\" : [ {\n            \"name\" : \"segments.gen\",\n            \"length\" : 20,\n            \"recovered\" : 20\n          }, {\n            \"name\" : \"_0.cfs\",\n            \"length\" : 135306,\n            \"recovered\" : 135306\n          }, {\n            \"name\" : \"segments_2\",\n            \"length\" : 251,\n            \"recovered\" : 251\n          }\n          ]\n        },\n        \"total_time\" : \"2ms\",\n        \"total_time_in_millis\" : 2,\n        \"source_throttle_time\" : \"0s\",\n        \"source_throttle_time_in_millis\" : 0,\n        \"target_throttle_time\" : \"0s\",\n        \"target_throttle_time_in_millis\" : 0\n      },\n      \"translog\" : {\n        \"recovered\" : 71,\n        \"total\" : 0,\n        \"percent\" : \"100.0%\",\n        \"total_on_start\" : 0,\n        \"total_time\" : \"2.0s\",\n        \"total_time_in_millis\" : 2025\n      },\n      \"verify_index\" : {\n        \"check_index_time\" : 0,\n        \"check_index_time_in_millis\" : 0,\n        \"total_time\" : \"88ms\",\n        \"total_time_in_millis\" : 88\n      }\n    } ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/segments.asciidoc",
      "line": 11
    },
    "digest": "3f176d802b3e2964686ecd91748fab89",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_segments",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_segments",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/segments.asciidoc",
      "line": 108
    },
    "digest": "940e8c2c7ff92d71f489bdb7183c1ce6",
    "lang": "console",
    "found": [],
    "source": "GET /test/_segments",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_segments",
        "query": null,
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "indices.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/segments.asciidoc",
      "line": 117
    },
    "digest": "975b4b92464d52068516aa2f0f955cc1",
    "lang": "console",
    "found": [],
    "source": "GET /test1,test2/_segments",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test1,test2/_segments",
        "query": null,
        "body": null,
        "params": {
          "index": "test1,test2"
        },
        "api": "indices.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/segments.asciidoc",
      "line": 126
    },
    "digest": "6414b9276ba1c63898c3ff5cbe03c54e",
    "lang": "console",
    "found": [],
    "source": "GET /_segments",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_segments",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/segments.asciidoc",
      "line": 186
    },
    "digest": "1b21d886f6e9619c73079d14581ccbe4",
    "lang": "console",
    "found": [],
    "source": "GET /test/_segments?verbose=true",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_segments",
        "query": {
          "verbose": "true"
        },
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "indices.segments"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 11
    },
    "digest": "45a023986499436a9153eef87788ab82",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_shard_stores",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_shard_stores",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.shard_stores"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 101
    },
    "digest": "cd93919e13f656ad2e6629f45c579b93",
    "lang": "console",
    "found": [],
    "source": "GET /test/_shard_stores",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_shard_stores",
        "query": null,
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "indices.shard_stores"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 111
    },
    "digest": "af970eb8b93cdea52209e1256eba9d8c",
    "lang": "console",
    "found": [],
    "source": "GET /test1,test2/_shard_stores",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test1,test2/_shard_stores",
        "query": null,
        "body": null,
        "params": {
          "index": "test1,test2"
        },
        "api": "indices.shard_stores"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 121
    },
    "digest": "00b3b6d76a368ae71277ea24af318693",
    "lang": "console",
    "found": [],
    "source": "GET /_shard_stores",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_shard_stores",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.shard_stores"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 137
    },
    "digest": "3545261682af72f4bee57f2bac0a9590",
    "lang": "console",
    "found": [],
    "source": "GET /_shard_stores?status=green",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_shard_stores",
        "query": {
          "status": "green"
        },
        "body": null,
        "params": null,
        "api": "indices.shard_stores"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shard-stores.asciidoc",
      "line": 146
    },
    "digest": "28fae40eedf82058ab062d52776c62dc",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"indices\": {\n       \"my-index\": {\n           \"shards\": {\n              \"0\": { <1>\n                \"stores\": [ <2>\n                    {\n                        \"sPa3OgxLSYGvQ4oPs-Tajw\": { <3>\n                            \"name\": \"node_t0\",\n                            \"ephemeral_id\" : \"9NlXRFGCT1m8tkvYCMK-8A\",\n                            \"transport_address\": \"local[1]\",\n                            \"attributes\": {}\n                        },\n                        \"allocation_id\": \"2iNySv_OQVePRX-yaRH_lQ\", <4>\n                        \"allocation\" : \"primary|replica|unused\" <5>\n                        \"store_exception\": ... <6>\n                    }\n                ]\n              }\n           }\n       }\n   }\n}"
  },
  {
    "source_location": {
      "file": "indices/stats.asciidoc",
      "line": 10
    },
    "digest": "fce5d68a9ac1b34b59d5308b65688e59",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_stats",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/stats.asciidoc",
      "line": 97
    },
    "digest": "e0b2f56c34e33ff52f8f9658be2f7ca1",
    "lang": "console",
    "found": [],
    "source": "GET /index1,index2/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/index1,index2/_stats",
        "query": null,
        "body": null,
        "params": {
          "index": "index1,index2"
        },
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/stats.asciidoc",
      "line": 107
    },
    "digest": "78c4035e4fbf6851140660f6ed2a1fa5",
    "lang": "console",
    "found": [],
    "source": "GET /_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/stats.asciidoc",
      "line": 121
    },
    "digest": "a861a89f52008610e813b9f073951c58",
    "lang": "console",
    "found": [],
    "source": "GET /_stats/merge,refresh",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_stats/merge,refresh",
        "query": null,
        "body": null,
        "params": {
          "metric": "merge,refresh"
        },
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/stats.asciidoc",
      "line": 135
    },
    "digest": "7a8de5606f283f4ef171b015eef6befa",
    "lang": "console",
    "found": [],
    "source": "GET /_stats/search?groups=group1,group2",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_stats/search",
        "query": {
          "groups": "group1,group2"
        },
        "body": null,
        "params": {
          "metric": "search"
        },
        "api": "indices.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/template-exists.asciidoc",
      "line": 12
    },
    "digest": "a6be6c1cb4a556866fdccb0dee2f1dea",
    "lang": "console",
    "found": [],
    "source": "HEAD /_template/template_1",
    "parsed_source": [
      {
        "method": "HEAD",
        "url": "/_template/template_1",
        "query": null,
        "body": null,
        "params": {
          "name": "template_1"
        },
        "api": "indices.exists_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/open-close.asciidoc",
      "line": 10
    },
    "digest": "7f36828a03e8cb5a028d9a6efb056b88",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_open",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_open",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.open"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/open-close.asciidoc",
      "line": 103
    },
    "digest": "37e6177bf8803971d30a4252498c07a4",
    "lang": "console",
    "found": [],
    "source": "POST /my_index/_open",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_open",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.open"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/open-close.asciidoc",
      "line": 111
    },
    "digest": "6f13fc8af8ddb33c5f00d22ab4cf79ea",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"acknowledged\" : true,\n    \"shards_acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 10
    },
    "digest": "e5f50b31f165462d883ecbff45f74985",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT _template/template_1\n{\n  \"index_patterns\": [\"te*\", \"bar*\"],\n  \"settings\": {\n    \"number_of_shards\": 1\n  },\n  \"mappings\": {\n    \"_source\": {\n      \"enabled\": false\n    },\n    \"properties\": {\n      \"host_name\": {\n        \"type\": \"keyword\"\n      },\n      \"created_at\": {\n        \"type\": \"date\",\n        \"format\": \"EEE MMM dd HH:mm:ss Z yyyy\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/template_1",
        "query": null,
        "body": {
          "index_patterns": [
            "te*",
            "bar*"
          ],
          "settings": {
            "number_of_shards": 1
          },
          "mappings": {
            "_source": {
              "enabled": false
            },
            "properties": {
              "host_name": {
                "type": "keyword"
              },
              "created_at": {
                "type": "date",
                "format": "EEE MMM dd HH:mm:ss Z yyyy"
              }
            }
          }
        },
        "params": {
          "name": "template_1"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 136
    },
    "digest": "1b8caf0a6741126c6d0ad83b56fce290",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT _template/template_1\n{\n    \"index_patterns\" : [\"te*\"],\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"aliases\" : {\n        \"alias1\" : {},\n        \"alias2\" : {\n            \"filter\" : {\n                \"term\" : {\"user\" : \"kimchy\" }\n            },\n            \"routing\" : \"kimchy\"\n        },\n        \"{index}-alias\" : {} <1>\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/template_1",
        "query": null,
        "body": {
          "index_patterns": [
            "te*"
          ],
          "settings": {
            "number_of_shards": 1
          },
          "aliases": {
            "alias1": {},
            "alias2": {
              "filter": {
                "term": {
                  "user": "kimchy"
                }
              },
              "routing": "kimchy"
            },
            "{index}-alias": {}
          }
        },
        "params": {
          "name": "template_1"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 170
    },
    "digest": "b5f95bc097a201b29c7200fc8d3d31c1",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /_template/template_1\n{\n    \"index_patterns\" : [\"*\"],\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"_source\" : { \"enabled\" : false }\n    }\n}\n\nPUT /_template/template_2\n{\n    \"index_patterns\" : [\"te*\"],\n    \"order\" : 1,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"mappings\" : {\n        \"_source\" : { \"enabled\" : true }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/template_1",
        "query": null,
        "body": {
          "index_patterns": [
            "*"
          ],
          "order": 0,
          "settings": {
            "number_of_shards": 1
          },
          "mappings": {
            "_source": {
              "enabled": false
            }
          }
        },
        "params": {
          "name": "template_1"
        },
        "api": "indices.put_template"
      },
      {
        "method": "PUT",
        "url": "/_template/template_2",
        "query": null,
        "body": {
          "index_patterns": [
            "te*"
          ],
          "order": 1,
          "settings": {
            "number_of_shards": 1
          },
          "mappings": {
            "_source": {
              "enabled": true
            }
          }
        },
        "params": {
          "name": "template_2"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 221
    },
    "digest": "9166cf38427d5cde5d2ec12a2012b669",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /_template/template_1\n{\n    \"index_patterns\" : [\"*\"],\n    \"order\" : 0,\n    \"settings\" : {\n        \"number_of_shards\" : 1\n    },\n    \"version\": 123\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_template/template_1",
        "query": null,
        "body": {
          "index_patterns": [
            "*"
          ],
          "order": 0,
          "settings": {
            "number_of_shards": 1
          },
          "version": 123
        },
        "params": {
          "name": "template_1"
        },
        "api": "indices.put_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 239
    },
    "digest": "46658f00edc4865dfe472a392374cd0f",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_template/template_1?filter_path=*.version",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_template/template_1",
        "query": {
          "filter_path": "*.version"
        },
        "body": null,
        "params": {
          "name": "template_1"
        },
        "api": "indices.get_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/templates.asciidoc",
      "line": 247
    },
    "digest": "a2e618c0a7ef9368e0b39e7ece15e27e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"template_1\" : {\n    \"version\" : 123\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 11
    },
    "digest": "5be23858b35043fcb7b50fe36b873e6e",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /twitter/_mapping\n{\n  \"properties\": {\n    \"email\": {\n      \"type\": \"keyword\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_mapping",
        "query": null,
        "body": {
          "properties": {
            "email": {
              "type": "keyword"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 84
    },
    "digest": "12433d2b637d002e8d5c9a1adce69d3b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /publications",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/publications",
        "query": null,
        "body": null,
        "params": {
          "index": "publications"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 92
    },
    "digest": "e4be53736bcc02b03068fd72fdbfe271",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /publications/_mapping\n{\n  \"properties\": {\n    \"title\":  { \"type\": \"text\"}\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/publications/_mapping",
        "query": null,
        "body": {
          "properties": {
            "title": {
              "type": "text"
            }
          }
        },
        "params": {
          "index": "publications"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 109
    },
    "digest": "1da77e114459e0b77d78a3dcc8fae429",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "# Create the two indices\nPUT /twitter-1\nPUT /twitter-2\n\n# Update both mappings\nPUT /twitter-1,twitter-2/_mapping <1>\n{\n  \"properties\": {\n    \"user_name\": {\n      \"type\": \"text\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter-1",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter-1"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/twitter-2",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter-2"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/twitter-1,twitter-2/_mapping",
        "query": null,
        "body": {
          "properties": {
            "user_name": {
              "type": "text"
            }
          }
        },
        "params": {
          "index": "twitter-1,twitter-2"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 144
    },
    "digest": "d9474f66970c6955e24b17c7447e7b5f",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"name\": {\n        \"properties\": {\n          \"first\": {\n            \"type\": \"text\"\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "name": {
                "properties": {
                  "first": {
                    "type": "text"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 166
    },
    "digest": "0bbd30b9be3e54ff3028b9f4459634d2",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index/_mapping\n{\n  \"properties\": {\n    \"name\": {\n      \"properties\": {\n        \"last\": {\n          \"type\": \"text\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "name": {
              "properties": {
                "last": {
                  "type": "text"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 186
    },
    "digest": "210cf5c76bff517f48e80fa1c2d63907",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my_index/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 194
    },
    "digest": "d83da92e13032bf4a494dd5a7464e74f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_index\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"name\" : {\n          \"properties\" : {\n            \"first\" : {\n              \"type\" : \"text\"\n            },\n            \"last\" : {\n              \"type\" : \"text\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 234
    },
    "digest": "c849c6c8f8659dbb93e1c14356f74e37",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"city\": {\n        \"type\": \"text\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "city": {
                "type": "text"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 257
    },
    "digest": "5f3a3eefeefe6fa85ec49d499212d245",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index/_mapping\n{\n  \"properties\": {\n    \"city\": {\n      \"type\": \"text\",\n      \"fields\": {\n        \"raw\": {\n          \"type\": \"keyword\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "city": {
              "type": "text",
              "fields": {
                "raw": {
                  "type": "keyword"
                }
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 278
    },
    "digest": "210cf5c76bff517f48e80fa1c2d63907",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my_index/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 286
    },
    "digest": "68663da99beea30da47298a1762b5793",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_index\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"city\" : {\n          \"type\" : \"text\",\n          \"fields\" : {\n            \"raw\" : {\n              \"type\" : \"keyword\"\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 327
    },
    "digest": "1f6fe6833686e38c3711c6f2aa00a078",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"keyword\",\n        \"ignore_above\": 20\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_id": {
                "type": "keyword",
                "ignore_above": 20
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 346
    },
    "digest": "17de0020b228df961ad3c6b06233c948",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index/_mapping\n{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"keyword\",\n      \"ignore_above\": 100\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "user_id": {
              "type": "keyword",
              "ignore_above": 100
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 363
    },
    "digest": "210cf5c76bff517f48e80fa1c2d63907",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my_index/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 371
    },
    "digest": "1d15d98aff2f885e3a59831d50184fb0",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_index\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"user_id\" : {\n          \"type\" : \"keyword\",\n          \"ignore_above\" : 100\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 409
    },
    "digest": "bd5918ab903c0889bb1f09c8c2466e43",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /users\n{\n  \"mappings\" : {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"long\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/users",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_id": {
                "type": "long"
              }
            }
          }
        },
        "params": {
          "index": "users"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 427
    },
    "digest": "0989cc65d8924f666ce3eb0820d2d244",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST /users/_doc?refresh=wait_for\n{\n    \"user_id\" : 12345\n}\n\nPOST /users/_doc?refresh=wait_for\n{\n    \"user_id\" : 12346\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/users/_doc",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "user_id": 12345
        },
        "params": {
          "index": "users"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/users/_doc",
        "query": {
          "refresh": "wait_for"
        },
        "body": {
          "user_id": 12346
        },
        "params": {
          "index": "users"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 446
    },
    "digest": "734c2e2a1e45b84f1e4e65b51356fcd7",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /new_users\n{\n  \"mappings\" : {\n    \"properties\": {\n      \"user_id\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/new_users",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_id": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "new_users"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 465
    },
    "digest": "53d938c754f36a912fcbe6473abb463f",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "POST /_reindex\n{\n  \"source\": {\n    \"index\": \"users\"\n  },\n  \"dest\": {\n    \"index\": \"new_users\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_reindex",
        "query": null,
        "body": {
          "source": {
            "index": "users"
          },
          "dest": {
            "index": "new_users"
          }
        },
        "params": null,
        "api": "reindex"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 481
    },
    "digest": "fbcbfd34d560a2b4b46ce04d8716510d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 147,\n  \"timed_out\": false,\n  \"total\": 2,\n  \"updated\": 0,\n  \"created\": 2,\n  \"deleted\": 0,\n  \"batches\": 1,\n  \"version_conflicts\": 0,\n  \"noops\": 0,\n  \"retries\": {\n    \"bulk\": 0,\n    \"search\": 0\n  },\n  \"throttled_millis\": 0,\n  \"requests_per_second\": -1.0,\n  \"throttled_until_millis\": 0,\n  \"failures\" : [ ]\n}"
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 519
    },
    "digest": "6bf63f2ec6ba55fcaf1092f48212bf25",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user_identifier\": {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user_identifier": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 536
    },
    "digest": "afc29b61c532cf683f749baf013e7bfe",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index/_mapping\n{\n  \"properties\": {\n    \"user_id\": {\n      \"type\": \"alias\",\n      \"path\": \"user_identifier\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_mapping",
        "query": null,
        "body": {
          "properties": {
            "user_id": {
              "type": "alias",
              "path": "user_identifier"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.put_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 553
    },
    "digest": "210cf5c76bff517f48e80fa1c2d63907",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /my_index/_mapping",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_mapping",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.get_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/put-mapping.asciidoc",
      "line": 561
    },
    "digest": "aa7abe4ddca0ab400ac20a0d3bc2d6fa",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_index\" : {\n    \"mappings\" : {\n      \"properties\" : {\n        \"user_id\" : {\n          \"type\" : \"alias\",\n          \"path\" : \"user_identifier\"\n        },\n        \"user_identifier\" : {\n          \"type\" : \"keyword\"\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/refresh.asciidoc",
      "line": 10
    },
    "digest": "c2ac42934e4b76197032b2fc429e317d",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_refresh",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.refresh"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/refresh.asciidoc",
      "line": 93
    },
    "digest": "0e98949e80e665795bc6cfc997165241",
    "lang": "console",
    "found": [],
    "source": "POST /kimchy,elasticsearch/_refresh",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/kimchy,elasticsearch/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "indices.refresh"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/refresh.asciidoc",
      "line": 103
    },
    "digest": "d7898526d239d2aea83727fb982f8f77",
    "lang": "console",
    "found": [],
    "source": "POST /_refresh",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_refresh",
        "query": null,
        "body": null,
        "params": null,
        "api": "indices.refresh"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 11
    },
    "digest": "84e8a4cf3453ed2fd4aeecdbdb02b813",
    "lang": "console",
    "found": [],
    "source": "POST /alias1/_rollover/twitter\n{\n  \"conditions\": {\n    \"max_age\":   \"7d\",\n    \"max_docs\":  1000,\n    \"max_size\": \"5gb\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/alias1/_rollover/twitter",
        "query": null,
        "body": {
          "conditions": {
            "max_age": "7d",
            "max_docs": 1000,
            "max_size": "5gb"
          }
        },
        "params": {
          "alias": "alias1",
          "new_index": "twitter"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 160
    },
    "digest": "593c11e8a9f88ec2629f2eb33cded9b7",
    "lang": "console",
    "found": [],
    "source": "PUT /logs-000001 <1>\n{\n  \"aliases\": {\n    \"logs_write\": {}\n  }\n}\n\n# Add > 1000 documents to logs-000001\n\nPOST /logs_write/_rollover <2>\n{\n  \"conditions\": {\n    \"max_age\":   \"7d\",\n    \"max_docs\":  1000,\n    \"max_size\":  \"5gb\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs-000001",
        "query": null,
        "body": {
          "aliases": {
            "logs_write": {}
          }
        },
        "params": {
          "index": "logs-000001"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/logs_write/_rollover",
        "query": null,
        "body": {
          "conditions": {
            "max_age": "7d",
            "max_docs": 1000,
            "max_size": "5gb"
          }
        },
        "params": {
          "alias": "logs_write"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 189
    },
    "digest": "68a4f959b3d34ade7ae7c32c06ad9b72",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true,\n  \"shards_acknowledged\": true,\n  \"old_index\": \"logs-000001\",\n  \"new_index\": \"logs-000002\",\n  \"rolled_over\": true, <1>\n  \"dry_run\": false, <2>\n  \"conditions\": { <3>\n    \"[max_age: 7d]\": false,\n    \"[max_docs: 1000]\": true,\n    \"[max_size: 5gb]\": false,\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 220
    },
    "digest": "75f887596c4972bc679929ca996698f2",
    "lang": "console",
    "found": [],
    "source": "PUT /logs-000001\n{\n  \"aliases\": {\n    \"logs_write\": {}\n  }\n}\n\nPOST /logs_write/_rollover\n{\n  \"conditions\" : {\n    \"max_age\": \"7d\",\n    \"max_docs\": 1000,\n    \"max_size\": \"5gb\"\n  },\n  \"settings\": {\n    \"index.number_of_shards\": 2\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/logs-000001",
        "query": null,
        "body": {
          "aliases": {
            "logs_write": {}
          }
        },
        "params": {
          "index": "logs-000001"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/logs_write/_rollover",
        "query": null,
        "body": {
          "conditions": {
            "max_age": "7d",
            "max_docs": 1000,
            "max_size": "5gb"
          },
          "settings": {
            "index.number_of_shards": 2
          }
        },
        "params": {
          "alias": "logs_write"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 254
    },
    "digest": "659247d91f61ceb17cbcc60801fd3456",
    "lang": "console",
    "found": [],
    "source": "POST /my_alias/_rollover/my_new_index_name\n{\n  \"conditions\": {\n    \"max_age\":   \"7d\",\n    \"max_docs\":  1000,\n    \"max_size\": \"5gb\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_alias/_rollover/my_new_index_name",
        "query": null,
        "body": {
          "conditions": {
            "max_age": "7d",
            "max_docs": 1000,
            "max_size": "5gb"
          }
        },
        "params": {
          "alias": "my_alias",
          "new_index": "my_new_index_name"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 278
    },
    "digest": "8f6ef669c09e0c8bfc2731f422471770",
    "lang": "console",
    "found": [],
    "source": "# PUT /<logs-{now/d}-1> with URI encoding:\nPUT /%3Clogs-%7Bnow%2Fd%7D-1%3E <1>\n{\n  \"aliases\": {\n    \"logs_write\": {}\n  }\n}\n\nPUT logs_write/_doc/1\n{\n  \"message\": \"a dummy log\"\n}\n\nPOST logs_write/_refresh\n\n# Wait for a day to pass\n\nPOST /logs_write/_rollover <2>\n{\n  \"conditions\": {\n    \"max_docs\":   \"1\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/%3Clogs-%7Bnow%2Fd%7D-1%3E",
        "query": null,
        "body": {
          "aliases": {
            "logs_write": {}
          }
        },
        "params": {
          "index": "%3Clogs-%7Bnow%2Fd%7D-1%3E"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/logs_write/_doc/1",
        "query": null,
        "body": {
          "message": "a dummy log"
        },
        "params": {
          "index": "logs_write",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/logs_write/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "logs_write"
        },
        "api": "indices.refresh"
      },
      {
        "method": "POST",
        "url": "/logs_write/_rollover",
        "query": null,
        "body": {
          "conditions": {
            "max_docs": "1"
          }
        },
        "params": {
          "alias": "logs_write"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 337
    },
    "digest": "03584e88046614ec7727db506d866f48",
    "lang": "console",
    "found": [],
    "source": "# GET /<logs-{now/d}-*>,<logs-{now/d-1d}-*>,<logs-{now/d-2d}-*>/_search\nGET /%3Clogs-%7Bnow%2Fd%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-1d%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-2d%7D-*%3E/_search",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/%3Clogs-%7Bnow%2Fd%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-1d%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-2d%7D-*%3E/_search",
        "query": null,
        "body": null,
        "params": {
          "index": "%3Clogs-%7Bnow%2Fd%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-1d%7D-*%3E%2C%3Clogs-%7Bnow%2Fd-2d%7D-*%3E"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 352
    },
    "digest": "896eb7487a512fc43a2af7e16717f40d",
    "lang": "console",
    "found": [],
    "source": "POST /logs_write/_rollover?dry_run\n{\n  \"conditions\" : {\n    \"max_age\": \"7d\",\n    \"max_docs\": 1000,\n    \"max_size\": \"5gb\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/logs_write/_rollover",
        "query": {
          "dry_run": true
        },
        "body": {
          "conditions": {
            "max_age": "7d",
            "max_docs": 1000,
            "max_size": "5gb"
          }
        },
        "params": {
          "alias": "logs_write"
        },
        "api": "indices.rollover"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 380
    },
    "digest": "9e9a3ad495e6305563a88dd4c74a5fda",
    "lang": "console",
    "found": [],
    "source": "PUT my_logs_index-000001\n{\n  \"aliases\": {\n    \"logs\": { \"is_write_index\": true } <1>\n  }\n}\n\nPUT logs/_doc/1\n{\n  \"message\": \"a dummy log\"\n}\n\nPOST logs/_refresh\n\nPOST /logs/_rollover\n{\n  \"conditions\": {\n    \"max_docs\":   \"1\"\n  }\n}\n\nPUT logs/_doc/2 <2>\n{\n  \"message\": \"a newer log\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_logs_index-000001",
        "query": null,
        "body": {
          "aliases": {
            "logs": {
              "is_write_index": true
            }
          }
        },
        "params": {
          "index": "my_logs_index-000001"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/logs/_doc/1",
        "query": null,
        "body": {
          "message": "a dummy log"
        },
        "params": {
          "index": "logs",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/logs/_refresh",
        "query": null,
        "body": null,
        "params": {
          "index": "logs"
        },
        "api": "indices.refresh"
      },
      {
        "method": "POST",
        "url": "/logs/_rollover",
        "query": null,
        "body": {
          "conditions": {
            "max_docs": "1"
          }
        },
        "params": {
          "alias": "logs"
        },
        "api": "indices.rollover"
      },
      {
        "method": "PUT",
        "url": "/logs/_doc/2",
        "query": null,
        "body": {
          "message": "a newer log"
        },
        "params": {
          "index": "logs",
          "id": "2"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 412
    },
    "digest": "30525ea49f09da5979d6046e69fc1993",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_index\" : \"my_logs_index-000002\",\n  \"_id\" : \"2\",\n  \"_version\" : 1,\n  \"result\" : \"created\",\n  \"_shards\" : {\n    \"total\" : 2,\n    \"successful\" : 1,\n    \"failed\" : 0\n  },\n  \"_seq_no\" : 0,\n  \"_primary_term\" : 1\n}"
  },
  {
    "source_location": {
      "file": "indices/rollover-index.asciidoc",
      "line": 440
    },
    "digest": "ef28fa43104f069fab5db566a796731f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_logs_index-000002\": {\n    \"aliases\": {\n      \"logs\": { \"is_write_index\": true }\n    }\n  },\n  \"my_logs_index-000001\": {\n    \"aliases\": {\n      \"logs\": { \"is_write_index\" : false }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "indices/shrink-index.asciidoc",
      "line": 11
    },
    "digest": "36897f18b6b4631a03ba37f3baa00907",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_shrink/shrunk-twitter-index",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_shrink/shrunk-twitter-index",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter",
          "target": "shrunk-twitter-index"
        },
        "api": "indices.shrink"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shrink-index.asciidoc",
      "line": 37
    },
    "digest": "5e93f806cfd459149222b443b7992a51",
    "lang": "console",
    "found": [],
    "source": "PUT /my_source_index/_settings\n{\n  \"settings\": {\n    \"index.routing.allocation.require._name\": \"shrink_node_name\", <1>\n    \"index.blocks.write\": true <2>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_source_index/_settings",
        "query": null,
        "body": {
          "settings": {
            "index.routing.allocation.require._name": "shrink_node_name",
            "index.blocks.write": true
          }
        },
        "params": {
          "index": "my_source_index"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shrink-index.asciidoc",
      "line": 98
    },
    "digest": "f3594de7ef39ab09b0bb12c1e76bfe6b",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_shrink/my_target_index\n{\n  \"settings\": {\n    \"index.routing.allocation.require._name\": null, <1>\n    \"index.blocks.write\": null <2>\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_shrink/my_target_index",
        "query": null,
        "body": {
          "settings": {
            "index.routing.allocation.require._name": null,
            "index.blocks.write": null
          }
        },
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.shrink"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/shrink-index.asciidoc",
      "line": 141
    },
    "digest": "76c167d8ab305cb43b594f140c902dfe",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_shrink/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_replicas\": 1,\n    \"index.number_of_shards\": 1, <1>\n    \"index.codec\": \"best_compression\" <2>\n  },\n  \"aliases\": {\n    \"my_search_indices\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_shrink/my_target_index",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_replicas": 1,
            "index.number_of_shards": 1,
            "index.codec": "best_compression"
          },
          "aliases": {
            "my_search_indices": {}
          }
        },
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.shrink"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/split-index.asciidoc",
      "line": 10
    },
    "digest": "1a19b7db5485cd814e1f76f7cd7d2923",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_split/split-twitter-index\n{\n  \"settings\": {\n    \"index.number_of_shards\": 2\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_split/split-twitter-index",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_shards": 2
          }
        },
        "params": {
          "index": "twitter",
          "target": "split-twitter-index"
        },
        "api": "indices.split"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/split-index.asciidoc",
      "line": 42
    },
    "digest": "01c0e302f4fd5118faf5e34f4a010ebf",
    "lang": "console",
    "found": [],
    "source": "PUT /my_source_index/_settings\n{\n  \"settings\": {\n    \"index.blocks.write\": true <1>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_source_index/_settings",
        "query": null,
        "body": {
          "settings": {
            "index.blocks.write": true
          }
        },
        "params": {
          "index": "my_source_index"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/split-index.asciidoc",
      "line": 147
    },
    "digest": "2e796e5ca59768d4426abbf9a049db3e",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_split/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_shards\": 2\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_split/my_target_index",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_shards": 2
          }
        },
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.split"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/split-index.asciidoc",
      "line": 181
    },
    "digest": "f2f1cae094855a45fd8f73478bec8e70",
    "lang": "console",
    "found": [],
    "source": "POST /my_source_index/_split/my_target_index\n{\n  \"settings\": {\n    \"index.number_of_shards\": 5 <1>\n  },\n  \"aliases\": {\n    \"my_search_indices\": {}\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_source_index/_split/my_target_index",
        "query": null,
        "body": {
          "settings": {
            "index.number_of_shards": 5
          },
          "aliases": {
            "my_search_indices": {}
          }
        },
        "params": {
          "index": "my_source_index",
          "target": "my_target_index"
        },
        "api": "indices.split"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/unfreeze.asciidoc",
      "line": 42
    },
    "digest": "ffea06f77c9df5720412aa06be964118",
    "lang": "console",
    "found": [],
    "source": "POST /my_index/_freeze\nPOST /my_index/_unfreeze",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_freeze",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.freeze"
      },
      {
        "method": "POST",
        "url": "/my_index/_unfreeze",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.unfreeze"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 12
    },
    "digest": "d3016e4e8025362ad9a05ee86bb2061f",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"index\" : \"twitter\", \"alias\" : \"alias1\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "twitter",
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 162
    },
    "digest": "b4392116f2cc57ce8064ccbad30318d5",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"index\" : \"test1\", \"alias\" : \"alias1\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test1",
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 178
    },
    "digest": "3653567181f43a5f64c74f934aa821c2",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"remove\" : { \"index\" : \"test1\", \"alias\" : \"alias1\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "remove": {
                "index": "test1",
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 196
    },
    "digest": "af3fb9fa5691a7b37a6dc2a69ff66e64",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"remove\" : { \"index\" : \"test1\", \"alias\" : \"alias1\" } },\n        { \"add\" : { \"index\" : \"test1\", \"alias\" : \"alias2\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "remove": {
                "index": "test1",
                "alias": "alias1"
              }
            },
            {
              "add": {
                "index": "test1",
                "alias": "alias2"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 214
    },
    "digest": "f0e21e03a07c8fa0209b0aafdb3791e6",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"index\" : \"test1\", \"alias\" : \"alias1\" } },\n        { \"add\" : { \"index\" : \"test2\", \"alias\" : \"alias1\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test1",
                "alias": "alias1"
              }
            },
            {
              "add": {
                "index": "test2",
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 228
    },
    "digest": "5f210f74725ea0c9265190346edfa246",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"indices\" : [\"test1\", \"test2\"], \"alias\" : \"alias1\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "indices": [
                  "test1",
                  "test2"
                ],
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 245
    },
    "digest": "6799d132c1c7ca3970763acde2337ef9",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        { \"add\" : { \"index\" : \"test*\", \"alias\" : \"all_test_indices\" } }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test*",
                "alias": "all_test_indices"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 264
    },
    "digest": "de176bc4788ea286fff9e92418a43ea8",
    "lang": "console",
    "found": [],
    "source": "PUT test     <1>\nPUT test_2   <2>\nPOST /_aliases\n{\n    \"actions\" : [\n        { \"add\":  { \"index\": \"test_2\", \"alias\": \"test\" } },\n        { \"remove_index\": { \"index\": \"test\" } }  <3>\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": null,
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/test_2",
        "query": null,
        "body": null,
        "params": {
          "index": "test_2"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test_2",
                "alias": "test"
              }
            },
            {
              "remove_index": {
                "index": "test"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 292
    },
    "digest": "23ab0f1023b1b2cd5cdf2a8f9ccfd57b",
    "lang": "console",
    "found": [],
    "source": "PUT /test1\n{\n  \"mappings\": {\n    \"properties\": {\n      \"user\" : {\n        \"type\": \"keyword\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test1",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "user": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "test1"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 308
    },
    "digest": "7cf71671859be7c1ecf673396db377cd",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        {\n            \"add\" : {\n                 \"index\" : \"test1\",\n                 \"alias\" : \"alias2\",\n                 \"filter\" : { \"term\" : { \"user\" : \"kimchy\" } }\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test1",
                "alias": "alias2",
                "filter": {
                  "term": {
                    "user": "kimchy"
                  }
                }
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 336
    },
    "digest": "bc1ad5cc6d3eab98e3ce01f209ba7094",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        {\n            \"add\" : {\n                 \"index\" : \"test\",\n                 \"alias\" : \"alias1\",\n                 \"routing\" : \"1\"\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test",
                "alias": "alias1",
                "routing": "1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 356
    },
    "digest": "fa0f4485cd48f986b7ae8cbb24e331c4",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        {\n            \"add\" : {\n                 \"index\" : \"test\",\n                 \"alias\" : \"alias2\",\n                 \"search_routing\" : \"1,2\",\n                 \"index_routing\" : \"2\"\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test",
                "alias": "alias2",
                "search_routing": "1,2",
                "index_routing": "2"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 382
    },
    "digest": "427f6b5c5376cbf0f71f242a60ca3d9e",
    "lang": "console",
    "found": [],
    "source": "GET /alias2/_search?q=user:kimchy&routing=2,3",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/alias2/_search",
        "query": {
          "q": "user:kimchy",
          "routing": "2,3"
        },
        "body": null,
        "params": {
          "index": "alias2"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 403
    },
    "digest": "f6d6889667f56b8f49d2858070571a6b",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        {\n            \"add\" : {\n                 \"index\" : \"test\",\n                 \"alias\" : \"alias1\",\n                 \"is_write_index\" : true\n            }\n        },\n        {\n            \"add\" : {\n                 \"index\" : \"test2\",\n                 \"alias\" : \"alias1\"\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test",
                "alias": "alias1",
                "is_write_index": true
              }
            },
            {
              "add": {
                "index": "test2",
                "alias": "alias1"
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 429
    },
    "digest": "b0ec418bf416c62bed602b0a32a6d5f5",
    "lang": "console",
    "found": [],
    "source": "PUT /alias1/_doc/1\n{\n    \"foo\": \"bar\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/alias1/_doc/1",
        "query": null,
        "body": {
          "foo": "bar"
        },
        "params": {
          "index": "alias1",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 441
    },
    "digest": "67bba546d835bca8f31df13e3587c348",
    "lang": "console",
    "found": [],
    "source": "GET /test/_doc/1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/test/_doc/1",
        "query": null,
        "body": null,
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "get"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/aliases.asciidoc",
      "line": 450
    },
    "digest": "ad79228630684d950fe9792a768d24c5",
    "lang": "console",
    "found": [],
    "source": "POST /_aliases\n{\n    \"actions\" : [\n        {\n            \"add\" : {\n                 \"index\" : \"test\",\n                 \"alias\" : \"alias1\",\n                 \"is_write_index\" : false\n            }\n        }, {\n            \"add\" : {\n                 \"index\" : \"test2\",\n                 \"alias\" : \"alias1\",\n                 \"is_write_index\" : true\n            }\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_aliases",
        "query": null,
        "body": {
          "actions": [
            {
              "add": {
                "index": "test",
                "alias": "alias1",
                "is_write_index": false
              }
            },
            {
              "add": {
                "index": "test2",
                "alias": "alias1",
                "is_write_index": true
              }
            }
          ]
        },
        "params": null,
        "api": "indices.update_aliases"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 10
    },
    "digest": "8653e76676de5d327201b77512afa3a0",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index\" : {\n        \"number_of_replicas\" : 2\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index": {
            "number_of_replicas": 2
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 73
    },
    "digest": "42744a175125df5be0ef77413bf8f608",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index\" : {\n        \"refresh_interval\" : null\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index": {
            "refresh_interval": null
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 97
    },
    "digest": "dfac8d098b50aa0181161bcd17b38ef4",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index\" : {\n        \"refresh_interval\" : \"-1\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index": {
            "refresh_interval": "-1"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 114
    },
    "digest": "0be2c28ee65384774b1e479b47dc3d92",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_settings\n{\n    \"index\" : {\n        \"refresh_interval\" : \"1s\"\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "index": {
            "refresh_interval": "1s"
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 127
    },
    "digest": "fe5763d32955e8b65eb3048e97b1580c",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_forcemerge?max_num_segments=5",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_forcemerge",
        "query": {
          "max_num_segments": "5"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.forcemerge"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/update-settings.asciidoc",
      "line": 145
    },
    "digest": "ba0b4081c98f3387f76b77847c52ee9a",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_close\n\nPUT /twitter/_settings\n{\n  \"analysis\" : {\n    \"analyzer\":{\n      \"content\":{\n        \"type\":\"custom\",\n        \"tokenizer\":\"whitespace\"\n      }\n    }\n  }\n}\n\nPOST /twitter/_open",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_close",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.close"
      },
      {
        "method": "PUT",
        "url": "/twitter/_settings",
        "query": null,
        "body": {
          "analysis": {
            "analyzer": {
              "content": {
                "type": "custom",
                "tokenizer": "whitespace"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.put_settings"
      },
      {
        "method": "POST",
        "url": "/twitter/_open",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.open"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/put-lifecycle.asciidoc",
      "line": 52
    },
    "digest": "daa2d4811bec05ac4546b66bd5a615c7",
    "lang": "console",
    "found": [],
    "source": "PUT _ilm/policy/my_policy\n{\n  \"policy\": {\n    \"phases\": {\n      \"warm\": {\n        \"min_age\": \"10d\",\n        \"actions\": {\n          \"forcemerge\": {\n            \"max_num_segments\": 1\n          }\n        }\n      },\n      \"delete\": {\n        \"min_age\": \"30d\",\n        \"actions\": {\n          \"delete\": {}\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": {
          "policy": {
            "phases": {
              "warm": {
                "min_age": "10d",
                "actions": {
                  "forcemerge": {
                    "max_num_segments": 1
                  }
                }
              },
              "delete": {
                "min_age": "30d",
                "actions": {
                  "delete": {}
                }
              }
            }
          }
        },
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/put-lifecycle.asciidoc",
      "line": 79
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/get-lifecycle.asciidoc",
      "line": 76
    },
    "digest": "2e7f4b9be999422a12abb680572b13c8",
    "lang": "console",
    "found": [],
    "source": "GET _ilm/policy/my_policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": null,
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.get_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/get-lifecycle.asciidoc",
      "line": 85
    },
    "digest": "0fc780bbbe4df1a7fc05f7abf11d4f78",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_policy\": {\n    \"version\": 1, <1>\n    \"modified_date\": 82392349, <2>\n    \"policy\": {\n      \"phases\": {\n        \"warm\": {\n          \"min_age\": \"10d\",\n          \"actions\": {\n            \"forcemerge\": {\n              \"max_num_segments\": 1\n            }\n          }\n        },\n        \"delete\": {\n          \"min_age\": \"30d\",\n          \"actions\": {\n            \"delete\": {\n              \"delete_searchable_snapshot\": true\n            }\n          }\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/delete-lifecycle.asciidoc",
      "line": 77
    },
    "digest": "af517b6936fa41d124d68b107b2efdc3",
    "lang": "console",
    "found": [],
    "source": "DELETE _ilm/policy/my_policy",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ilm/policy/my_policy",
        "query": null,
        "body": null,
        "params": {
          "policy": "my_policy"
        },
        "api": "ilm.delete_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/delete-lifecycle.asciidoc",
      "line": 85
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/move-to-step.asciidoc",
      "line": 93
    },
    "digest": "e3c5f93b3c85e8519f801defc20b0ce0",
    "lang": "console",
    "found": [],
    "source": "POST _ilm/move/my_index\n{\n  \"current_step\": { <1>\n    \"phase\": \"new\",\n    \"action\": \"complete\",\n    \"name\": \"complete\"\n  },\n  \"next_step\": { <2>\n    \"phase\": \"warm\",\n    \"action\": \"forcemerge\",\n    \"name\": \"forcemerge\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ilm/move/my_index",
        "query": null,
        "body": {
          "current_step": {
            "phase": "new",
            "action": "complete",
            "name": "complete"
          },
          "next_step": {
            "phase": "warm",
            "action": "forcemerge",
            "name": "forcemerge"
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "ilm.move_to_step"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/move-to-step.asciidoc",
      "line": 115
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/remove-policy-from-index.asciidoc",
      "line": 83
    },
    "digest": "8bec5a437f4aea6f3f897c9df2ce2442",
    "lang": "console",
    "found": [],
    "source": "POST my_index/_ilm/remove",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_ilm/remove",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "ilm.remove_policy"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/remove-policy-from-index.asciidoc",
      "line": 91
    },
    "digest": "7464040de4facd0800a50d9488d41808",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"has_failures\" : false,\n  \"failed_indexes\" : []\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/get-status.asciidoc",
      "line": 44
    },
    "digest": "182df084f028479ecbe8d7648ddad892",
    "lang": "console",
    "found": [],
    "source": "GET _ilm/status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ilm/status",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.get_status"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/get-status.asciidoc",
      "line": 51
    },
    "digest": "99e0bec31e49636bc0053ac66bc29352",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"RUNNING\"\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/explain.asciidoc",
      "line": 97
    },
    "digest": "0f6fa3a706a7c17858d3dbe329839ea6",
    "lang": "console",
    "found": [],
    "source": "GET my_index/_ilm/explain",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_ilm/explain",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "ilm.explain_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/explain.asciidoc",
      "line": 106
    },
    "digest": "bc42b1c517ff1fc6ad4371bae23d1c57",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"my_index\": {\n      \"index\": \"my_index\",\n      \"managed\": true, <1>\n      \"policy\": \"my_policy\", <2>\n      \"lifecycle_date_millis\": 1538475653281, <3>\n      \"age\": \"15s\", <4>\n      \"phase\": \"new\",\n      \"phase_time_millis\": 1538475653317, <5>\n      \"action\": \"complete\",\n      \"action_time_millis\": 1538475653317, <6>\n      \"step\": \"complete\",\n      \"step_time_millis\": 1538475653317 <7>\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/explain.asciidoc",
      "line": 142
    },
    "digest": "9cf677738535149f0cdb1796ddafbc8a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"test-000069\": {\n      \"index\": \"test-000069\",\n      \"managed\": true,\n      \"policy\": \"my_lifecycle3\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"lifecycle_date\": \"2018-10-15T13:45:21.981Z\",\n      \"age\": \"25.14s\",\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"phase_time\": \"2018-10-15T13:45:22.577Z\",\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"action_time\": \"2018-10-15T13:45:22.577Z\",\n      \"step\": \"attempt-rollover\",\n      \"step_time_millis\": 1538475653317,\n      \"step_time\": \"2018-10-15T13:45:22.577Z\",\n      \"phase_execution\": {\n        \"policy\": \"my_lifecycle3\",\n        \"phase_definition\": { <1>\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_age\": \"30s\"\n            }\n          }\n        },\n        \"version\": 3, <2>\n        \"modified_date\": \"2018-10-15T13:21:41.576Z\", <3>\n        \"modified_date_in_millis\": 1539609701576 <4>\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/explain.asciidoc",
      "line": 191
    },
    "digest": "0a6dcb918e7d6354c4709505f22a786f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"test-000020\": {\n      \"index\": \"test-000020\",\n      \"managed\": true,\n      \"policy\": \"my_lifecycle3\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"lifecycle_date\": \"2018-10-15T13:45:21.981Z\",\n      \"age\": \"4.12m\",\n      \"phase\": \"warm\",\n      \"phase_time_millis\": 1538475653317,\n      \"phase_time\": \"2018-10-15T13:45:22.577Z\",\n      \"action\": \"allocate\",\n      \"action_time_millis\": 1538475653317,\n      \"action_time\": \"2018-10-15T13:45:22.577Z\",\n      \"step\": \"check-allocation\",\n      \"step_time_millis\": 1538475653317,\n      \"step_time\": \"2018-10-15T13:45:22.577Z\",\n      \"step_info\": { <1>\n        \"message\": \"Waiting for all shard copies to be active\",\n        \"shards_left_to_allocate\": -1,\n        \"all_shards_active\": false,\n        \"actual_replicas\": 2\n      },\n      \"phase_execution\": {\n        \"policy\": \"my_lifecycle3\",\n        \"phase_definition\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"allocate\": {\n              \"number_of_replicas\": 2,\n              \"include\": {\n                \"box_type\": \"warm\"\n              },\n              \"exclude\": {},\n              \"require\": {}\n            },\n            \"forcemerge\": {\n              \"max_num_segments\": 1\n            }\n          }\n        },\n        \"version\": 2,\n        \"modified_date\": \"2018-10-15T13:20:02.489Z\",\n        \"modified_date_in_millis\": 1539609602489\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/explain.asciidoc",
      "line": 255
    },
    "digest": "b7d45a87863e94a174a3af72f9b2d11c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"indices\": {\n    \"test-000056\": {\n      \"index\": \"test-000056\",\n      \"managed\": true,\n      \"policy\": \"my_lifecycle3\",\n      \"lifecycle_date_millis\": 1538475653281,\n      \"lifecycle_date\": \"2018-10-15T13:45:21.981Z\",\n      \"age\": \"50.1d\",\n      \"phase\": \"hot\",\n      \"phase_time_millis\": 1538475653317,\n      \"phase_time\": \"2018-10-15T13:45:22.577Z\",\n      \"action\": \"rollover\",\n      \"action_time_millis\": 1538475653317,\n      \"action_time\": \"2018-10-15T13:45:22.577Z\",\n      \"step\": \"ERROR\",\n      \"step_time_millis\": 1538475653317,\n      \"step_time\": \"2018-10-15T13:45:22.577Z\",\n      \"failed_step\": \"check-rollover-ready\", <1>\n      \"is_auto_retryable_error\": true, <2>\n      \"failed_step_retry_count\": 1, <3>\n      \"step_info\": { <4>\n        \"type\": \"cluster_block_exception\",\n        \"reason\": \"index [test-000057/H7lF9n36Rzqa-KfKcnGQMg] blocked by: [FORBIDDEN/5/index read-only (api)\",\n        \"index_uuid\": \"H7lF9n36Rzqa-KfKcnGQMg\",\n        \"index\": \"test-000057\"\n      },\n      \"phase_execution\": {\n        \"policy\": \"my_lifecycle3\",\n        \"phase_definition\": {\n          \"min_age\": \"0ms\",\n          \"actions\": {\n            \"rollover\": {\n              \"max_age\": \"30s\"\n            }\n          }\n        },\n        \"version\": 3,\n        \"modified_date\": \"2018-10-15T13:21:41.576Z\",\n        \"modified_date_in_millis\": 1539609701576\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/start.asciidoc",
      "line": 76
    },
    "digest": "72ae3851160fcf02b8e2cdfd4e57d238",
    "lang": "console",
    "found": [],
    "source": "POST _ilm/start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ilm/start",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.start"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/start.asciidoc",
      "line": 84
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ilm/apis/stop.asciidoc",
      "line": 80
    },
    "digest": "585a34ad79aee16678b37da785933ac8",
    "lang": "console",
    "found": [],
    "source": "POST _ilm/stop",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ilm/stop",
        "query": null,
        "body": null,
        "params": null,
        "api": "ilm.stop"
      }
    ]
  },
  {
    "source_location": {
      "file": "ilm/apis/stop.asciidoc",
      "line": 88
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/put-pipeline.asciidoc",
      "line": 11
    },
    "digest": "e7e28812b86c5257bf48931d131409f0",
    "lang": "console",
    "found": [],
    "source": "PUT _ingest/pipeline/my-pipeline-id\n{\n  \"description\" : \"describe pipeline\",\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"foo\",\n        \"value\": \"bar\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": {
          "description": "describe pipeline",
          "processors": [
            {
              "set": {
                "field": "foo",
                "value": "bar"
              }
            }
          ]
        },
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/put-pipeline.asciidoc",
      "line": 93
    },
    "digest": "3467d11d772321353951461b756e3ffb",
    "lang": "console",
    "found": [],
    "source": "PUT /_ingest/pipeline/my-pipeline-id\n{\n  \"description\" : \"describe pipeline\",\n  \"version\" : 123,\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"foo\",\n        \"value\": \"bar\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": {
          "description": "describe pipeline",
          "version": 123,
          "processors": [
            {
              "set": {
                "field": "foo",
                "value": "bar"
              }
            }
          ]
        },
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/put-pipeline.asciidoc",
      "line": 113
    },
    "digest": "ca42bbe58bdd127eb042389699d4a45c",
    "lang": "console",
    "found": [],
    "source": "PUT /_ingest/pipeline/my-pipeline-id\n{\n  \"description\" : \"describe pipeline\",\n  \"processors\" : [\n    {\n      \"set\" : {\n        \"field\": \"foo\",\n        \"value\": \"bar\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": {
          "description": "describe pipeline",
          "processors": [
            {
              "set": {
                "field": "foo",
                "value": "bar"
              }
            }
          ]
        },
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.put_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/get-pipeline.asciidoc",
      "line": 30
    },
    "digest": "6a3a86ff58e5f20950d429cf2832c229",
    "lang": "console",
    "found": [],
    "source": "GET /_ingest/pipeline/my-pipeline-id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": null,
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.get_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/get-pipeline.asciidoc",
      "line": 66
    },
    "digest": "6a3a86ff58e5f20950d429cf2832c229",
    "lang": "console",
    "found": [],
    "source": "GET /_ingest/pipeline/my-pipeline-id",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": null,
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.get_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/get-pipeline.asciidoc",
      "line": 74
    },
    "digest": "82161823bc1112102b52bbb836311b94",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my-pipeline-id\" : {\n    \"description\" : \"describe pipeline\",\n    \"version\" : 123,\n    \"processors\" : [\n      {\n        \"set\" : {\n          \"field\" : \"foo\",\n          \"value\" : \"bar\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/get-pipeline.asciidoc",
      "line": 107
    },
    "digest": "9f549bb400b6cc1523b00d60bc8fd8e1",
    "lang": "console",
    "found": [],
    "source": "GET /_ingest/pipeline/my-pipeline-id?filter_path=*.version",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": {
          "filter_path": "*.version"
        },
        "body": null,
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.get_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/get-pipeline.asciidoc",
      "line": 115
    },
    "digest": "61dc34169722548fb040f02e488c8814",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my-pipeline-id\" : {\n    \"version\" : 123\n  }\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/delete-pipeline.asciidoc",
      "line": 28
    },
    "digest": "dff61a76d5ef9ca8cbe59a416269a84b",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ingest/pipeline/my-pipeline-id",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ingest/pipeline/my-pipeline-id",
        "query": null,
        "body": null,
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.delete_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/delete-pipeline.asciidoc",
      "line": 67
    },
    "digest": "a7cf31f4b907e4c00132aca75f55790c",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ingest/pipeline/pipeline-one",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ingest/pipeline/pipeline-one",
        "query": null,
        "body": null,
        "params": {
          "id": "pipeline-one"
        },
        "api": "ingest.delete_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/delete-pipeline.asciidoc",
      "line": 76
    },
    "digest": "c6b5c695a9b757b5e7325345b206bde5",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ingest/pipeline/pipeline-*",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ingest/pipeline/pipeline-*",
        "query": null,
        "body": null,
        "params": {
          "id": "pipeline-*"
        },
        "api": "ingest.delete_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/delete-pipeline.asciidoc",
      "line": 85
    },
    "digest": "11e772ff5dbb73408ae30a1a367a0d9b",
    "lang": "console",
    "found": [],
    "source": "DELETE /_ingest/pipeline/*",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ingest/pipeline/*",
        "query": null,
        "body": null,
        "params": {
          "id": "*"
        },
        "api": "ingest.delete_pipeline"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 31
    },
    "digest": "67ffa135c50c43d6788636c88078c7d1",
    "lang": "console",
    "found": [],
    "source": "POST /_ingest/pipeline/my-pipeline-id/_simulate\n{\n  \"docs\": [\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"bar\"\n      }\n    },\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"rab\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/my-pipeline-id/_simulate",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "bar"
              }
            },
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "rab"
              }
            }
          ]
        },
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 147
    },
    "digest": "67ffa135c50c43d6788636c88078c7d1",
    "lang": "console",
    "found": [],
    "source": "POST /_ingest/pipeline/my-pipeline-id/_simulate\n{\n  \"docs\": [\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"bar\"\n      }\n    },\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"rab\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/my-pipeline-id/_simulate",
        "query": null,
        "body": {
          "docs": [
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "bar"
              }
            },
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "rab"
              }
            }
          ]
        },
        "params": {
          "id": "my-pipeline-id"
        },
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 172
    },
    "digest": "661b827203639440daa8f73727c8375e",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"docs\": [\n      {\n         \"doc\": {\n            \"_id\": \"id\",\n            \"_index\": \"index\",\n            \"_source\": {\n               \"field2\": \"_value\",\n               \"foo\": \"bar\"\n            },\n            \"_ingest\": {\n               \"timestamp\": \"2017-05-04T22:30:03.187Z\"\n            }\n         }\n      },\n      {\n         \"doc\": {\n            \"_id\": \"id\",\n            \"_index\": \"index\",\n            \"_source\": {\n               \"field2\": \"_value\",\n               \"foo\": \"rab\"\n            },\n            \"_ingest\": {\n               \"timestamp\": \"2017-05-04T22:30:03.188Z\"\n            }\n         }\n      }\n   ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 212
    },
    "digest": "17c2b0a6b0305804ff3b7fd3b4a68df3",
    "lang": "console",
    "found": [],
    "source": "POST /_ingest/pipeline/_simulate\n{\n  \"pipeline\" :\n  {\n    \"description\": \"_description\",\n    \"processors\": [\n      {\n        \"set\" : {\n          \"field\" : \"field2\",\n          \"value\" : \"_value\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"bar\"\n      }\n    },\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"rab\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/_simulate",
        "query": null,
        "body": {
          "pipeline": {
            "description": "_description",
            "processors": [
              {
                "set": {
                  "field": "field2",
                  "value": "_value"
                }
              }
            ]
          },
          "docs": [
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "bar"
              }
            },
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "rab"
              }
            }
          ]
        },
        "params": null,
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 249
    },
    "digest": "661b827203639440daa8f73727c8375e",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"docs\": [\n      {\n         \"doc\": {\n            \"_id\": \"id\",\n            \"_index\": \"index\",\n            \"_source\": {\n               \"field2\": \"_value\",\n               \"foo\": \"bar\"\n            },\n            \"_ingest\": {\n               \"timestamp\": \"2017-05-04T22:30:03.187Z\"\n            }\n         }\n      },\n      {\n         \"doc\": {\n            \"_id\": \"id\",\n            \"_index\": \"index\",\n            \"_source\": {\n               \"field2\": \"_value\",\n               \"foo\": \"rab\"\n            },\n            \"_ingest\": {\n               \"timestamp\": \"2017-05-04T22:30:03.188Z\"\n            }\n         }\n      }\n   ]\n}"
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 296
    },
    "digest": "463de55bb164cde9ac51acd4a7384901",
    "lang": "console",
    "found": [],
    "source": "POST /_ingest/pipeline/_simulate?verbose\n{\n  \"pipeline\" :\n  {\n    \"description\": \"_description\",\n    \"processors\": [\n      {\n        \"set\" : {\n          \"field\" : \"field2\",\n          \"value\" : \"_value2\"\n        }\n      },\n      {\n        \"set\" : {\n          \"field\" : \"field3\",\n          \"value\" : \"_value3\"\n        }\n      }\n    ]\n  },\n  \"docs\": [\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"bar\"\n      }\n    },\n    {\n      \"_index\": \"index\",\n      \"_id\": \"id\",\n      \"_source\": {\n        \"foo\": \"rab\"\n      }\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ingest/pipeline/_simulate",
        "query": {
          "verbose": true
        },
        "body": {
          "pipeline": {
            "description": "_description",
            "processors": [
              {
                "set": {
                  "field": "field2",
                  "value": "_value2"
                }
              },
              {
                "set": {
                  "field": "field3",
                  "value": "_value3"
                }
              }
            ]
          },
          "docs": [
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "bar"
              }
            },
            {
              "_index": "index",
              "_id": "id",
              "_source": {
                "foo": "rab"
              }
            }
          ]
        },
        "params": null,
        "api": "ingest.simulate"
      }
    ]
  },
  {
    "source_location": {
      "file": "ingest/apis/simulate-pipeline.asciidoc",
      "line": 339
    },
    "digest": "514f42adb2f4e60f6ae30cb4318018f4",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"docs\": [\n      {\n         \"processor_results\": [\n            {\n               \"doc\": {\n                  \"_id\": \"id\",\n                  \"_index\": \"index\",\n                  \"_source\": {\n                     \"field2\": \"_value2\",\n                     \"foo\": \"bar\"\n                  },\n                  \"_ingest\": {\n                     \"timestamp\": \"2017-05-04T22:46:09.674Z\",\n                     \"pipeline\": \"_simulate_pipeline\"\n                  }\n               }\n            },\n            {\n               \"doc\": {\n                  \"_id\": \"id\",\n                  \"_index\": \"index\",\n                  \"_source\": {\n                     \"field3\": \"_value3\",\n                     \"field2\": \"_value2\",\n                     \"foo\": \"bar\"\n                  },\n                  \"_ingest\": {\n                     \"timestamp\": \"2017-05-04T22:46:09.675Z\",\n                     \"pipeline\": \"_simulate_pipeline\"\n                  }\n               }\n            }\n         ]\n      },\n      {\n         \"processor_results\": [\n            {\n               \"doc\": {\n                  \"_id\": \"id\",\n                  \"_index\": \"index\",\n                  \"_source\": {\n                     \"field2\": \"_value2\",\n                     \"foo\": \"rab\"\n                  },\n                  \"_ingest\": {\n                     \"timestamp\": \"2017-05-04T22:46:09.676Z\",\n                     \"pipeline\": \"_simulate_pipeline\"\n                  }\n               }\n            },\n            {\n               \"doc\": {\n                  \"_id\": \"id\",\n                  \"_index\": \"index\",\n                  \"_source\": {\n                     \"field3\": \"_value3\",\n                     \"field2\": \"_value2\",\n                     \"foo\": \"rab\"\n                  },\n                  \"_ingest\": {\n                     \"timestamp\": \"2017-05-04T22:46:09.677Z\",\n                     \"pipeline\": \"_simulate_pipeline\"\n                  }\n               }\n            }\n         ]\n      }\n   ]\n}"
  },
  {
    "source_location": {
      "file": "rest-api/info.asciidoc",
      "line": 45
    },
    "digest": "9054187cbab5c9e1c4ca2a4dba6a5db0",
    "lang": "console",
    "found": [],
    "source": "GET /_xpack",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_xpack",
        "query": null,
        "body": null,
        "params": null,
        "api": "xpack.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "rest-api/info.asciidoc",
      "line": 52
    },
    "digest": "ef8fbb06112f6e1150dd7ef2d6179503",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"build\" : {\n      \"hash\" : \"2798b1a3ce779b3611bb53a0082d4d741e4d3168\",\n      \"date\" : \"2015-04-07T13:34:42Z\"\n   },\n   \"license\" : {\n      \"uid\" : \"893361dc-9749-4997-93cb-xxx\",\n      \"type\" : \"trial\",\n      \"mode\" : \"trial\",\n      \"status\" : \"active\",\n      \"expiry_date_in_millis\" : 1542665112332\n   },\n   \"features\" : {\n      \"ccr\" : {\n        \"available\" : true,\n        \"enabled\" : true\n      },\n      \"analytics\" : {\n          \"available\" : true,\n          \"enabled\" : true\n      },\n      \"enrich\" : {\n          \"available\" : true,\n          \"enabled\" : true\n      },\n      \"frozen_indices\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"graph\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"ilm\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"logstash\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"ml\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"monitoring\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"rollup\": {\n         \"available\": true,\n         \"enabled\": true\n      },\n      \"security\" : {\n         \"available\" : true,\n         \"enabled\" : false\n      },\n      \"slm\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"spatial\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"eql\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"sql\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"transform\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"vectors\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"voting_only\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      },\n      \"watcher\" : {\n         \"available\" : true,\n         \"enabled\" : true\n      }\n   },\n   \"tagline\" : \"You know, for X\"\n}"
  },
  {
    "source_location": {
      "file": "rest-api/info.asciidoc",
      "line": 159
    },
    "digest": "b11a0675e49df0709be693297ca73a2c",
    "lang": "console",
    "found": [],
    "source": "GET /_xpack?categories=build,features",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_xpack",
        "query": {
          "categories": "build,features"
        },
        "body": null,
        "params": null,
        "api": "xpack.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "rest-api/info.asciidoc",
      "line": 166
    },
    "digest": "4ed946065faa92f9950f04e402676a97",
    "lang": "console",
    "found": [],
    "source": "GET /_xpack?human=false",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_xpack",
        "query": {
          "human": "false"
        },
        "body": null,
        "params": null,
        "api": "xpack.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/delete-license.asciidoc",
      "line": 36
    },
    "digest": "4f8a4ad49e2bca6784c88ede18a1a709",
    "lang": "console",
    "found": [],
    "source": "DELETE /_license",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_license",
        "query": null,
        "body": null,
        "params": null,
        "api": "license.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/get-license.asciidoc",
      "line": 47
    },
    "digest": "11c395d1649733bcab853fe31ec393b2",
    "lang": "console",
    "found": [],
    "source": "GET /_license",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_license",
        "query": null,
        "body": null,
        "params": null,
        "api": "license.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/get-license.asciidoc",
      "line": 52
    },
    "digest": "a151a5db7e5b65046743be37fd9a02e9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"license\" : {\n    \"status\" : \"active\",\n    \"uid\" : \"cbff45e7-c553-41f7-ae4f-9205eabd80xx\",\n    \"type\" : \"trial\",\n    \"issue_date\" : \"2018-10-20T22:05:12.332Z\",\n    \"issue_date_in_millis\" : 1540073112332,\n    \"expiry_date\" : \"2018-11-19T22:05:12.332Z\",\n    \"expiry_date_in_millis\" : 1542665112332,\n    \"max_nodes\" : 1000,\n    \"max_resource_units\" : null,\n    \"issued_to\" : \"test\",\n    \"issuer\" : \"elasticsearch\",\n    \"start_date_in_millis\" : -1\n  }\n}"
  },
  {
    "source_location": {
      "file": "licensing/get-trial-status.asciidoc",
      "line": 43
    },
    "digest": "88cf60d3310a56d8ae12704abc05b565",
    "lang": "console",
    "found": [],
    "source": "GET /_license/trial_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_license/trial_status",
        "query": null,
        "body": null,
        "params": null,
        "api": "license.get_trial_status"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/get-trial-status.asciidoc",
      "line": 50
    },
    "digest": "cd83a052bf4f1fe11413e7aa51e5b9a5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"eligible_to_start_trial\": true\n}"
  },
  {
    "source_location": {
      "file": "licensing/start-trial.asciidoc",
      "line": 47
    },
    "digest": "37f1f2e75ed95308ae436bbbb8d5645e",
    "lang": "console",
    "found": [],
    "source": "POST /_license/start_trial?acknowledge=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_license/start_trial",
        "query": {
          "acknowledge": "true"
        },
        "body": null,
        "params": null,
        "api": "license.post_start_trial"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/get-basic-status.asciidoc",
      "line": 36
    },
    "digest": "f92d2f5018a8843ffbb56ade15f84406",
    "lang": "console",
    "found": [],
    "source": "GET /_license/basic_status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_license/basic_status",
        "query": null,
        "body": null,
        "params": null,
        "api": "license.get_basic_status"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/get-basic-status.asciidoc",
      "line": 43
    },
    "digest": "7539f49762b2e372c275d0d061009d19",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"eligible_to_start_basic\": true\n}"
  },
  {
    "source_location": {
      "file": "licensing/start-basic.asciidoc",
      "line": 43
    },
    "digest": "8699d35269a47ba867fa8cc766287413",
    "lang": "console",
    "found": [],
    "source": "POST /_license/start_basic",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_license/start_basic",
        "query": null,
        "body": null,
        "params": null,
        "api": "license.post_start_basic"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/start-basic.asciidoc",
      "line": 63
    },
    "digest": "f58fd031597e2c3df78bf0efd07206e3",
    "lang": "console",
    "found": [],
    "source": "POST /_license/start_basic?acknowledge=true",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_license/start_basic",
        "query": {
          "acknowledge": "true"
        },
        "body": null,
        "params": null,
        "api": "license.post_start_basic"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/update-license.asciidoc",
      "line": 61
    },
    "digest": "85f2839beeb71edb66988e5c82188be0",
    "lang": "console",
    "found": [],
    "source": "PUT _license\n{\n  \"licenses\": [\n    {\n      \"uid\":\"893361dc-9749-4997-93cb-802e3d7fa4xx\",\n      \"type\":\"basic\",\n      \"issue_date_in_millis\":1411948800000,\n      \"expiry_date_in_millis\":1914278399999,\n      \"max_nodes\":1,\n      \"issued_to\":\"issuedTo\",\n      \"issuer\":\"issuer\",\n      \"signature\":\"xx\"\n    }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_license",
        "query": null,
        "body": {
          "licenses": [
            {
              "uid": "893361dc-9749-4997-93cb-802e3d7fa4xx",
              "type": "basic",
              "issue_date_in_millis": 1411948800000,
              "expiry_date_in_millis": 1914278399999,
              "max_nodes": 1,
              "issued_to": "issuedTo",
              "issuer": "issuer",
              "signature": "xx"
            }
          ]
        },
        "params": null,
        "api": "license.post"
      }
    ]
  },
  {
    "source_location": {
      "file": "licensing/update-license.asciidoc",
      "line": 137
    },
    "digest": "46b1c1f6e0c86528be84c373eeb8d425",
    "lang": "console",
    "found": [],
    "source": "PUT _license?acknowledge=true\n{\n  \"licenses\": [\n    {\n      \"uid\":\"893361dc-9749-4997-93cb-802e3d7fa4xx\",\n      \"type\":\"basic\",\n      \"issue_date_in_millis\":1411948800000,\n      \"expiry_date_in_millis\":1914278399999,\n      \"max_nodes\":1,\n      \"issued_to\":\"issuedTo\",\n      \"issuer\":\"issuer\",\n      \"signature\":\"xx\"\n    }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_license",
        "query": {
          "acknowledge": "true"
        },
        "body": {
          "licenses": [
            {
              "uid": "893361dc-9749-4997-93cb-802e3d7fa4xx",
              "type": "basic",
              "issue_date_in_millis": 1411948800000,
              "expiry_date_in_millis": 1914278399999,
              "max_nodes": 1,
              "issued_to": "issuedTo",
              "issuer": "issuer",
              "signature": "xx"
            }
          ]
        },
        "params": null,
        "api": "license.post"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/post-calendar-event.asciidoc",
      "line": 64
    },
    "digest": "c067182d385f59ce5952fb9a716fbf05",
    "lang": "console",
    "found": [],
    "source": "POST _ml/calendars/planned-outages/events\n{\n  \"events\" : [\n    {\"description\": \"event 1\", \"start_time\": 1513641600000, \"end_time\": 1513728000000},\n    {\"description\": \"event 2\", \"start_time\": 1513814400000, \"end_time\": 1513900800000},\n    {\"description\": \"event 3\", \"start_time\": 1514160000000, \"end_time\": 1514246400000}\n  ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/calendars/planned-outages/events",
        "query": null,
        "body": {
          "events": [
            {
              "description": "event 1",
              "start_time": 1513641600000,
              "end_time": 1513728000000
            },
            {
              "description": "event 2",
              "start_time": 1513814400000,
              "end_time": 1513900800000
            },
            {
              "description": "event 3",
              "start_time": 1514160000000,
              "end_time": 1514246400000
            }
          ]
        },
        "params": {
          "calendar_id": "planned-outages"
        },
        "api": "ml.post_calendar_events"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/post-calendar-event.asciidoc",
      "line": 79
    },
    "digest": "d85277c7ee060163024f51ce226e9687",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"events\": [\n    {\n      \"description\": \"event 1\",\n      \"start_time\": 1513641600000,\n      \"end_time\": 1513728000000,\n      \"calendar_id\": \"planned-outages\"\n    },\n    {\n      \"description\": \"event 2\",\n      \"start_time\": 1513814400000,\n      \"end_time\": 1513900800000,\n      \"calendar_id\": \"planned-outages\"\n    },\n    {\n      \"description\": \"event 3\",\n      \"start_time\": 1514160000000,\n      \"end_time\": 1514246400000,\n      \"calendar_id\": \"planned-outages\"\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-calendar-job.asciidoc",
      "line": 38
    },
    "digest": "1b2ab75d3c8064fac6ecc63104396c02",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/calendars/planned-outages/jobs/total-requests",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/calendars/planned-outages/jobs/total-requests",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages",
          "job_id": "total-requests"
        },
        "api": "ml.put_calendar_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-calendar-job.asciidoc",
      "line": 46
    },
    "digest": "1dae5fc15721297e0bbb7f75f4d688c8",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"calendar_id\": \"planned-outages\",\n  \"job_ids\": [\n    \"total-requests\"\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/close-job.asciidoc",
      "line": 92
    },
    "digest": "75957a7d1b67e3d47899c5f18b32cb61",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/low_request_rate/_close",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/low_request_rate/_close",
        "query": null,
        "body": null,
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.close_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/close-job.asciidoc",
      "line": 100
    },
    "digest": "bde804b8b2cf95aad1cf3ca64df67fa9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"closed\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-job.asciidoc",
      "line": 272
    },
    "digest": "9c11e238772d67dbc9d273776de9916c",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/anomaly_detectors/total-requests\n{\n  \"description\" : \"Total sum of requests\",\n  \"analysis_config\" : {\n    \"bucket_span\":\"10m\",\n    \"detectors\": [\n      {\n        \"detector_description\": \"Sum of total\",\n        \"function\": \"sum\",\n        \"field_name\": \"total\"\n      }\n    ]\n  },\n  \"data_description\" : {\n    \"time_field\":\"timestamp\",\n    \"time_format\": \"epoch_ms\"\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/anomaly_detectors/total-requests",
        "query": null,
        "body": {
          "description": "Total sum of requests",
          "analysis_config": {
            "bucket_span": "10m",
            "detectors": [
              {
                "detector_description": "Sum of total",
                "function": "sum",
                "field_name": "total"
              }
            ]
          },
          "data_description": {
            "time_field": "timestamp",
            "time_format": "epoch_ms"
          }
        },
        "params": {
          "job_id": "total-requests"
        },
        "api": "ml.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-job.asciidoc",
      "line": 296
    },
    "digest": "f7a3b1a944f2c19acd808c89012a47a3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"job_id\" : \"total-requests\",\n  \"job_type\" : \"anomaly_detector\",\n  \"job_version\" : \"8.0.0\",\n  \"description\" : \"Total sum of requests\",\n  \"create_time\" : 1562352500629,\n  \"analysis_config\" : {\n    \"bucket_span\" : \"10m\",\n    \"detectors\" : [\n      {\n        \"detector_description\" : \"Sum of total\",\n        \"function\" : \"sum\",\n        \"field_name\" : \"total\",\n        \"detector_index\" : 0\n      }\n    ],\n    \"influencers\" : [ ]\n  },\n  \"analysis_limits\" : {\n    \"model_memory_limit\" : \"1024mb\",\n    \"categorization_examples_limit\" : 4\n  },\n  \"data_description\" : {\n    \"time_field\" : \"timestamp\",\n    \"time_format\" : \"epoch_ms\"\n  },\n  \"model_snapshot_retention_days\" : 1,\n  \"results_index_name\" : \"shared\",\n  \"allow_lazy_open\" : false\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-calendar.asciidoc",
      "line": 46
    },
    "digest": "e61b5abe85000cc954a42e2cd74f3a26",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/calendars/planned-outages",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/calendars/planned-outages",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages"
        },
        "api": "ml.put_calendar"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-calendar.asciidoc",
      "line": 54
    },
    "digest": "171c0cd3b79df8fc5fe414cf9607f56f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"calendar_id\": \"planned-outages\",\n  \"job_ids\": []\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-datafeed.asciidoc",
      "line": 114
    },
    "digest": "23067c5e8da958fa4d914f3b5c9bf607",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/datafeeds/datafeed-total-requests\n{\n  \"job_id\": \"total-requests\",\n  \"indices\": [\"server-metrics\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/datafeeds/datafeed-total-requests",
        "query": null,
        "body": {
          "job_id": "total-requests",
          "indices": [
            "server-metrics"
          ]
        },
        "params": {
          "datafeed_id": "datafeed-total-requests"
        },
        "api": "ml.put_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-datafeed.asciidoc",
      "line": 126
    },
    "digest": "6bdf0b32f57bad22be8b6bfc07ff58d7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"datafeed_id\": \"datafeed-total-requests\",\n  \"job_id\": \"total-requests\",\n  \"query_delay\": \"83474ms\",\n  \"indices\": [\n    \"server-metrics\"\n  ],\n  \"query\": {\n    \"match_all\": {\n      \"boost\": 1.0\n    }\n  },\n  \"scroll_size\": 1000,\n  \"chunking_config\": {\n    \"mode\": \"auto\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-filter.asciidoc",
      "line": 52
    },
    "digest": "b4aec2a1d353852507c091bdb629b765",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/filters/safe_domains\n{\n  \"description\": \"A list of safe domains\",\n  \"items\": [\"*.google.com\", \"wikipedia.org\"]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/filters/safe_domains",
        "query": null,
        "body": {
          "description": "A list of safe domains",
          "items": [
            "*.google.com",
            "wikipedia.org"
          ]
        },
        "params": {
          "filter_id": "safe_domains"
        },
        "api": "ml.put_filter"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/put-filter.asciidoc",
      "line": 64
    },
    "digest": "e5edabc3d3e627c7ed92623b855c05d9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"filter_id\": \"safe_domains\",\n  \"description\": \"A list of safe domains\",\n  \"items\": [\"*.google.com\", \"wikipedia.org\"]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-calendar.asciidoc",
      "line": 40
    },
    "digest": "63893e7e9479a9b60db71dcddcc79aaf",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/calendars/planned-outages",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/calendars/planned-outages",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages"
        },
        "api": "ml.delete_calendar"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-calendar.asciidoc",
      "line": 48
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-datafeed.asciidoc",
      "line": 45
    },
    "digest": "8a12cd824404d74f098d854716a26899",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/datafeeds/datafeed-total-requests",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/datafeeds/datafeed-total-requests",
        "query": null,
        "body": null,
        "params": {
          "datafeed_id": "datafeed-total-requests"
        },
        "api": "ml.delete_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-datafeed.asciidoc",
      "line": 53
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-calendar-event.asciidoc",
      "line": 45
    },
    "digest": "f6982ff80b9a64cd5fcac5b20908c906",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/calendars/planned-outages/events/LS8LJGEBMTCMA-qz49st",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/calendars/planned-outages/events/LS8LJGEBMTCMA-qz49st",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages",
          "event_id": "LS8LJGEBMTCMA-qz49st"
        },
        "api": "ml.delete_calendar_event"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-filter.asciidoc",
      "line": 41
    },
    "digest": "8c5d48252cd6d1ee26a2bb817f89c78e",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/filters/safe_domains",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/filters/safe_domains",
        "query": null,
        "body": null,
        "params": {
          "filter_id": "safe_domains"
        },
        "api": "ml.delete_filter"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-filter.asciidoc",
      "line": 49
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-forecast.asciidoc",
      "line": 71
    },
    "digest": "eb4e43b47867b54214a8630172dd0e21",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/anomaly_detectors/total-requests/_forecast/_all",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/anomaly_detectors/total-requests/_forecast/_all",
        "query": null,
        "body": null,
        "params": {
          "job_id": "total-requests",
          "forecast_id": "_all"
        },
        "api": "ml.delete_forecast"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-job.asciidoc",
      "line": 60
    },
    "digest": "3ac8b5234e9d53859245cf8ab0094ca5",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/anomaly_detectors/total-requests",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/anomaly_detectors/total-requests",
        "query": null,
        "body": null,
        "params": {
          "job_id": "total-requests"
        },
        "api": "ml.delete_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-job.asciidoc",
      "line": 68
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-job.asciidoc",
      "line": 77
    },
    "digest": "ccec66fb20d5ede6c691e0890cfe402a",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/anomaly_detectors/total-requests?wait_for_completion=false",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/anomaly_detectors/total-requests",
        "query": {
          "wait_for_completion": "false"
        },
        "body": null,
        "params": {
          "job_id": "total-requests"
        },
        "api": "ml.delete_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-job.asciidoc",
      "line": 86
    },
    "digest": "7911626413c70672fd05359a832096c3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"task\": \"oTUltX4IQMOUUVeiohTt8A:39\"\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-calendar-job.asciidoc",
      "line": 38
    },
    "digest": "1b0b29e5cd7550c648d0892378e93804",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/calendars/planned-outages/jobs/total-requests",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/calendars/planned-outages/jobs/total-requests",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages",
          "job_id": "total-requests"
        },
        "api": "ml.delete_calendar_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-calendar-job.asciidoc",
      "line": 47
    },
    "digest": "f114ee8c6333648f1cfd511a4bc15655",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"calendar_id\": \"planned-outages\",\n   \"job_ids\": []\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-snapshot.asciidoc",
      "line": 44
    },
    "digest": "1e08e054c761353f99211cd18e8ca47b",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/anomaly_detectors/farequote/model_snapshots/1491948163",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/anomaly_detectors/farequote/model_snapshots/1491948163",
        "query": null,
        "body": null,
        "params": {
          "job_id": "farequote",
          "snapshot_id": "1491948163"
        },
        "api": "ml.delete_model_snapshot"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-snapshot.asciidoc",
      "line": 52
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-expired-data.asciidoc",
      "line": 36
    },
    "digest": "f2f09bc4723805c7aaabdc83c55100fa",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/_delete_expired_data",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/_delete_expired_data",
        "query": null,
        "body": null,
        "params": null,
        "api": "ml.delete_expired_data"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/delete-expired-data.asciidoc",
      "line": 44
    },
    "digest": "c852b65b9085718ec12e9fc5b41d8655",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"deleted\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/estimate-model-memory.asciidoc",
      "line": 60
    },
    "digest": "c4178795c108b4ed3daec4e69aa2acc6",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/_estimate_model_memory\n{\n    \"analysis_config\": {\n        \"bucket_span\": \"5m\",\n        \"detectors\": [\n          {\n            \"function\": \"sum\",\n            \"field_name\": \"bytes\",\n            \"by_field_name\": \"status\",\n            \"partition_field_name\": \"app\"\n          }\n        ],\n        \"influencers\": [ \"source_ip\", \"dest_ip\" ]\n    },\n    \"overall_cardinality\": {\n       \"status\": 10,\n       \"app\": 50\n    },\n    \"max_bucket_cardinality\": {\n       \"source_ip\": 300,\n       \"dest_ip\": 30\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/_estimate_model_memory",
        "query": null,
        "body": {
          "analysis_config": {
            "bucket_span": "5m",
            "detectors": [
              {
                "function": "sum",
                "field_name": "bytes",
                "by_field_name": "status",
                "partition_field_name": "app"
              }
            ],
            "influencers": [
              "source_ip",
              "dest_ip"
            ]
          },
          "overall_cardinality": {
            "status": 10,
            "app": 50
          },
          "max_bucket_cardinality": {
            "source_ip": 300,
            "dest_ip": 30
          }
        },
        "params": null,
        "api": "ml.estimate_model_memory"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/estimate-model-memory.asciidoc",
      "line": 90
    },
    "digest": "f5047c61947ac5f5ac544b6aac384a67",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"model_memory_estimate\": \"21mb\"\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/find-file-structure.asciidoc",
      "line": 247
    },
    "digest": "7a145f2c4ad1c3c9fea24afeadb847ef",
    "lang": "console",
    "found": [],
    "source": "POST _ml/find_file_structure\n{\"name\": \"Leviathan Wakes\", \"author\": \"James S.A. Corey\", \"release_date\": \"2011-06-02\", \"page_count\": 561}\n{\"name\": \"Hyperion\", \"author\": \"Dan Simmons\", \"release_date\": \"1989-05-26\", \"page_count\": 482}\n{\"name\": \"Dune\", \"author\": \"Frank Herbert\", \"release_date\": \"1965-06-01\", \"page_count\": 604}\n{\"name\": \"Dune Messiah\", \"author\": \"Frank Herbert\", \"release_date\": \"1969-10-15\", \"page_count\": 331}\n{\"name\": \"Children of Dune\", \"author\": \"Frank Herbert\", \"release_date\": \"1976-04-21\", \"page_count\": 408}\n{\"name\": \"God Emperor of Dune\", \"author\": \"Frank Herbert\", \"release_date\": \"1981-05-28\", \"page_count\": 454}\n{\"name\": \"Consider Phlebas\", \"author\": \"Iain M. Banks\", \"release_date\": \"1987-04-23\", \"page_count\": 471}\n{\"name\": \"Pandora's Star\", \"author\": \"Peter F. Hamilton\", \"release_date\": \"2004-03-02\", \"page_count\": 768}\n{\"name\": \"Revelation Space\", \"author\": \"Alastair Reynolds\", \"release_date\": \"2000-03-15\", \"page_count\": 585}\n{\"name\": \"A Fire Upon the Deep\", \"author\": \"Vernor Vinge\", \"release_date\": \"1992-06-01\", \"page_count\": 613}\n{\"name\": \"Ender's Game\", \"author\": \"Orson Scott Card\", \"release_date\": \"1985-06-01\", \"page_count\": 324}\n{\"name\": \"1984\", \"author\": \"George Orwell\", \"release_date\": \"1985-06-01\", \"page_count\": 328}\n{\"name\": \"Fahrenheit 451\", \"author\": \"Ray Bradbury\", \"release_date\": \"1953-10-15\", \"page_count\": 227}\n{\"name\": \"Brave New World\", \"author\": \"Aldous Huxley\", \"release_date\": \"1932-06-01\", \"page_count\": 268}\n{\"name\": \"Foundation\", \"author\": \"Isaac Asimov\", \"release_date\": \"1951-06-01\", \"page_count\": 224}\n{\"name\": \"The Giver\", \"author\": \"Lois Lowry\", \"release_date\": \"1993-04-26\", \"page_count\": 208}\n{\"name\": \"Slaughterhouse-Five\", \"author\": \"Kurt Vonnegut\", \"release_date\": \"1969-06-01\", \"page_count\": 275}\n{\"name\": \"The Hitchhiker's Guide to the Galaxy\", \"author\": \"Douglas Adams\", \"release_date\": \"1979-10-12\", \"page_count\": 180}\n{\"name\": \"Snow Crash\", \"author\": \"Neal Stephenson\", \"release_date\": \"1992-06-01\", \"page_count\": 470}\n{\"name\": \"Neuromancer\", \"author\": \"William Gibson\", \"release_date\": \"1984-07-01\", \"page_count\": 271}\n{\"name\": \"The Handmaid's Tale\", \"author\": \"Margaret Atwood\", \"release_date\": \"1985-06-01\", \"page_count\": 311}\n{\"name\": \"Starship Troopers\", \"author\": \"Robert A. Heinlein\", \"release_date\": \"1959-12-01\", \"page_count\": 335}\n{\"name\": \"The Left Hand of Darkness\", \"author\": \"Ursula K. Le Guin\", \"release_date\": \"1969-06-01\", \"page_count\": 304}\n{\"name\": \"The Moon is a Harsh Mistress\", \"author\": \"Robert A. Heinlein\", \"release_date\": \"1966-04-01\", \"page_count\": 288}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/find_file_structure",
        "query": null,
        "body": [
          {
            "name": "Leviathan Wakes",
            "author": "James S.A. Corey",
            "release_date": "2011-06-02",
            "page_count": 561
          },
          {
            "name": "Hyperion",
            "author": "Dan Simmons",
            "release_date": "1989-05-26",
            "page_count": 482
          },
          {
            "name": "Dune",
            "author": "Frank Herbert",
            "release_date": "1965-06-01",
            "page_count": 604
          },
          {
            "name": "Dune Messiah",
            "author": "Frank Herbert",
            "release_date": "1969-10-15",
            "page_count": 331
          },
          {
            "name": "Children of Dune",
            "author": "Frank Herbert",
            "release_date": "1976-04-21",
            "page_count": 408
          },
          {
            "name": "God Emperor of Dune",
            "author": "Frank Herbert",
            "release_date": "1981-05-28",
            "page_count": 454
          },
          {
            "name": "Consider Phlebas",
            "author": "Iain M. Banks",
            "release_date": "1987-04-23",
            "page_count": 471
          },
          {
            "name": "Pandora's Star",
            "author": "Peter F. Hamilton",
            "release_date": "2004-03-02",
            "page_count": 768
          },
          {
            "name": "Revelation Space",
            "author": "Alastair Reynolds",
            "release_date": "2000-03-15",
            "page_count": 585
          },
          {
            "name": "A Fire Upon the Deep",
            "author": "Vernor Vinge",
            "release_date": "1992-06-01",
            "page_count": 613
          },
          {
            "name": "Ender's Game",
            "author": "Orson Scott Card",
            "release_date": "1985-06-01",
            "page_count": 324
          },
          {
            "name": "1984",
            "author": "George Orwell",
            "release_date": "1985-06-01",
            "page_count": 328
          },
          {
            "name": "Fahrenheit 451",
            "author": "Ray Bradbury",
            "release_date": "1953-10-15",
            "page_count": 227
          },
          {
            "name": "Brave New World",
            "author": "Aldous Huxley",
            "release_date": "1932-06-01",
            "page_count": 268
          },
          {
            "name": "Foundation",
            "author": "Isaac Asimov",
            "release_date": "1951-06-01",
            "page_count": 224
          },
          {
            "name": "The Giver",
            "author": "Lois Lowry",
            "release_date": "1993-04-26",
            "page_count": 208
          },
          {
            "name": "Slaughterhouse-Five",
            "author": "Kurt Vonnegut",
            "release_date": "1969-06-01",
            "page_count": 275
          },
          {
            "name": "The Hitchhiker's Guide to the Galaxy",
            "author": "Douglas Adams",
            "release_date": "1979-10-12",
            "page_count": 180
          },
          {
            "name": "Snow Crash",
            "author": "Neal Stephenson",
            "release_date": "1992-06-01",
            "page_count": 470
          },
          {
            "name": "Neuromancer",
            "author": "William Gibson",
            "release_date": "1984-07-01",
            "page_count": 271
          },
          {
            "name": "The Handmaid's Tale",
            "author": "Margaret Atwood",
            "release_date": "1985-06-01",
            "page_count": 311
          },
          {
            "name": "Starship Troopers",
            "author": "Robert A. Heinlein",
            "release_date": "1959-12-01",
            "page_count": 335
          },
          {
            "name": "The Left Hand of Darkness",
            "author": "Ursula K. Le Guin",
            "release_date": "1969-06-01",
            "page_count": 304
          },
          {
            "name": "The Moon is a Harsh Mistress",
            "author": "Robert A. Heinlein",
            "release_date": "1966-04-01",
            "page_count": 288
          }
        ],
        "params": null,
        "api": "ml.find_file_structure"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/find-file-structure.asciidoc",
      "line": 278
    },
    "digest": "70a2df9a5d05f1dc9e9b4152e3098174",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"num_lines_analyzed\" : 24, <1>\n  \"num_messages_analyzed\" : 24, <2>\n  \"sample_start\" : \"{\\\"name\\\": \\\"Leviathan Wakes\\\", \\\"author\\\": \\\"James S.A. Corey\\\", \\\"release_date\\\": \\\"2011-06-02\\\", \\\"page_count\\\": 561}\\n{\\\"name\\\": \\\"Hyperion\\\", \\\"author\\\": \\\"Dan Simmons\\\", \\\"release_date\\\": \\\"1989-05-26\\\", \\\"page_count\\\": 482}\\n\", <3>\n  \"charset\" : \"UTF-8\", <4>\n  \"has_byte_order_marker\" : false, <5>\n  \"format\" : \"ndjson\", <6>\n  \"timestamp_field\" : \"release_date\", <7>\n  \"joda_timestamp_formats\" : [ <8>\n    \"ISO8601\"\n  ],\n  \"java_timestamp_formats\" : [ <9>\n    \"ISO8601\"\n  ],\n  \"need_client_timezone\" : true, <10>\n  \"mappings\" : { <11>\n    \"@timestamp\" : {\n      \"type\" : \"date\"\n    },\n    \"author\" : {\n      \"type\" : \"keyword\"\n    },\n    \"name\" : {\n      \"type\" : \"keyword\"\n    },\n    \"page_count\" : {\n      \"type\" : \"long\"\n    },\n    \"release_date\" : {\n      \"type\" : \"date\",\n      \"format\" : \"iso8601\"\n    }\n  },\n  \"ingest_pipeline\" : {\n    \"description\" : \"Ingest pipeline created by file structure finder\",\n    \"processors\" : [\n      {\n        \"date\" : {\n          \"field\" : \"release_date\",\n          \"timezone\" : \"{{ event.timezone }}\",\n          \"formats\" : [\n            \"ISO8601\"\n          ]\n        }\n      }\n    ]\n  },\n  \"field_stats\" : { <12>\n    \"author\" : {\n      \"count\" : 24,\n      \"cardinality\" : 20,\n      \"top_hits\" : [\n        {\n          \"value\" : \"Frank Herbert\",\n          \"count\" : 4\n        },\n        {\n          \"value\" : \"Robert A. Heinlein\",\n          \"count\" : 2\n        },\n        {\n          \"value\" : \"Alastair Reynolds\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Aldous Huxley\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Dan Simmons\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Douglas Adams\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"George Orwell\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Iain M. Banks\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Isaac Asimov\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"James S.A. Corey\",\n          \"count\" : 1\n        }\n      ]\n    },\n    \"name\" : {\n      \"count\" : 24,\n      \"cardinality\" : 24,\n      \"top_hits\" : [\n        {\n          \"value\" : \"1984\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"A Fire Upon the Deep\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Brave New World\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Children of Dune\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Consider Phlebas\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Dune\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Dune Messiah\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Ender's Game\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Fahrenheit 451\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"Foundation\",\n          \"count\" : 1\n        }\n      ]\n    },\n    \"page_count\" : {\n      \"count\" : 24,\n      \"cardinality\" : 24,\n      \"min_value\" : 180,\n      \"max_value\" : 768,\n      \"mean_value\" : 387.0833333333333,\n      \"median_value\" : 329.5,\n      \"top_hits\" : [\n        {\n          \"value\" : 180,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 208,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 224,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 227,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 268,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 271,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 275,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 288,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 304,\n          \"count\" : 1\n        },\n        {\n          \"value\" : 311,\n          \"count\" : 1\n        }\n      ]\n    },\n    \"release_date\" : {\n      \"count\" : 24,\n      \"cardinality\" : 20,\n      \"earliest\" : \"1932-06-01\",\n      \"latest\" : \"2011-06-02\",\n      \"top_hits\" : [\n        {\n          \"value\" : \"1985-06-01\",\n          \"count\" : 3\n        },\n        {\n          \"value\" : \"1969-06-01\",\n          \"count\" : 2\n        },\n        {\n          \"value\" : \"1992-06-01\",\n          \"count\" : 2\n        },\n        {\n          \"value\" : \"1932-06-01\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1951-06-01\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1953-10-15\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1959-12-01\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1965-06-01\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1966-04-01\",\n          \"count\" : 1\n        },\n        {\n          \"value\" : \"1969-10-15\",\n          \"count\" : 1\n        }\n      ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/flush-job.asciidoc",
      "line": 71
    },
    "digest": "02520ac7816b2c4cf8fb413fd16122f2",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/low_request_rate/_flush\n{\n  \"calc_interim\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/low_request_rate/_flush",
        "query": null,
        "body": {
          "calc_interim": true
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.flush_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/flush-job.asciidoc",
      "line": 82
    },
    "digest": "aa814fa4e6fba339421d0c6c94680041",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"flushed\": true,\n  \"last_finalized_bucket_end\": 1455234900000\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/flush-job.asciidoc",
      "line": 98
    },
    "digest": "7ebfb30b3ece855c1b783d9210939469",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/total-requests/_flush\n{\n  \"advance_time\": \"1514804400000\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/total-requests/_flush",
        "query": null,
        "body": {
          "advance_time": "1514804400000"
        },
        "params": {
          "job_id": "total-requests"
        },
        "api": "ml.flush_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/flush-job.asciidoc",
      "line": 109
    },
    "digest": "f6622deb2aae0e2e468ff3b3285eaaa5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"flushed\": true,\n  \"last_finalized_bucket_end\": 1514804400000\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/forecast.asciidoc",
      "line": 61
    },
    "digest": "591c7fb7451069829a14bba593136f1f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/low_request_rate/_forecast\n{\n  \"duration\": \"10d\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/low_request_rate/_forecast",
        "query": null,
        "body": {
          "duration": "10d"
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.forecast"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-bucket.asciidoc",
      "line": 178
    },
    "digest": "f96d4614f2fc294339fef325b794355f",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/low_request_rate/results/buckets\n{\n  \"anomaly_score\": 80,\n  \"start\": \"1454530200001\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/low_request_rate/results/buckets",
        "query": null,
        "body": {
          "anomaly_score": 80,
          "start": "1454530200001"
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.get_buckets"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-calendar.asciidoc",
      "line": 68
    },
    "digest": "5fca6671bc8eaddc44ac488d1c3c6909",
    "lang": "console",
    "found": [],
    "source": "GET _ml/calendars/planned-outages",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/calendars/planned-outages",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages"
        },
        "api": "ml.get_calendars"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-calendar.asciidoc",
      "line": 76
    },
    "digest": "e611275d3d0d39a05718b5468d3c51b4",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\": 1,\n  \"calendars\": [\n    {\n      \"calendar_id\": \"planned-outages\",\n      \"job_ids\": [\n        \"total-requests\"\n      ]\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-category.asciidoc",
      "line": 110
    },
    "digest": "e8f1c9ee003d115ec8f55e57990df6e4",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/esxi_log/results/categories\n{\n  \"page\":{\n    \"size\": 1\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/esxi_log/results/categories",
        "query": null,
        "body": {
          "page": {
            "size": 1
          }
        },
        "params": {
          "job_id": "esxi_log"
        },
        "api": "ml.get_categories"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-datafeed.asciidoc",
      "line": 77
    },
    "digest": "4fa9ee04188cbf0b38cfc28f6a56527d",
    "lang": "console",
    "found": [],
    "source": "GET _ml/datafeeds/datafeed-high_sum_total_sales",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/datafeeds/datafeed-high_sum_total_sales",
        "query": null,
        "body": null,
        "params": {
          "datafeed_id": "datafeed-high_sum_total_sales"
        },
        "api": "ml.get_datafeeds"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-datafeed.asciidoc",
      "line": 85
    },
    "digest": "5d99d21222b701c5d94bfccefc210a6e",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\" : 1,\n  \"datafeeds\" : [\n    {\n      \"datafeed_id\" : \"datafeed-high_sum_total_sales\",\n      \"job_id\" : \"high_sum_total_sales\",\n      \"query_delay\" : \"93169ms\",\n      \"indices\" : [\n        \"kibana_sample_data_ecommerce\"\n      ],\n      \"query\" : {\n        \"bool\" : {\n          \"filter\" : [\n            {\n              \"term\" : {\n                \"_index\" : \"kibana_sample_data_ecommerce\"\n              }\n            }\n          ]\n        }\n      },\n      \"scroll_size\" : 1000,\n      \"chunking_config\" : {\n        \"mode\" : \"auto\"\n      },\n      \"delayed_data_check_config\" : {\n        \"enabled\" : true\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-datafeed-stats.asciidoc",
      "line": 145
    },
    "digest": "f44d287c6937785eb09b91353c1deb1e",
    "lang": "console",
    "found": [],
    "source": "GET _ml/datafeeds/datafeed-high_sum_total_sales/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/datafeeds/datafeed-high_sum_total_sales/_stats",
        "query": null,
        "body": null,
        "params": {
          "datafeed_id": "datafeed-high_sum_total_sales"
        },
        "api": "ml.get_datafeed_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-datafeed-stats.asciidoc",
      "line": 153
    },
    "digest": "1217b5b9acc1a42b1854ce7d5d6f34d2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\" : 1,\n  \"datafeeds\" : [\n    {\n      \"datafeed_id\" : \"datafeed-high_sum_total_sales\",\n      \"state\" : \"started\",\n      \"node\" : {\n        \"id\" : \"7bmMXyWCRs-TuPfGJJ_yMw\",\n        \"name\" : \"node-0\",\n        \"ephemeral_id\" : \"hoXMLZB0RWKfR9UPPUCxXX\",\n        \"transport_address\" : \"127.0.0.1:9300\",\n        \"attributes\" : {\n          \"ml.machine_memory\" : \"17179869184\",\n          \"ml.max_open_jobs\" : \"20\"\n        }\n      },\n      \"assignment_explanation\" : \"\",\n      \"timing_stats\" : {\n        \"job_id\" : \"high_sum_total_sales\",\n        \"search_count\" : 7,\n        \"bucket_count\" : 743,\n        \"total_search_time_ms\" : 134.0,\n        \"average_search_time_per_bucket_ms\" : 0.180349932705249,\n        \"exponential_average_search_time_per_hour_ms\" : 11.514712961628677\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-influencer.asciidoc",
      "line": 128
    },
    "digest": "5bbccf103107e505c17ae59863753efd",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/high_sum_total_sales/results/influencers\n{\n  \"sort\": \"influencer_score\",\n  \"desc\": true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/high_sum_total_sales/results/influencers",
        "query": null,
        "body": {
          "sort": "influencer_score",
          "desc": true
        },
        "params": {
          "job_id": "high_sum_total_sales"
        },
        "api": "ml.get_influencers"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-job.asciidoc",
      "line": 90
    },
    "digest": "86280dcb49aa89083be4b2644daf1b7c",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/high_sum_total_sales",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/high_sum_total_sales",
        "query": null,
        "body": null,
        "params": {
          "job_id": "high_sum_total_sales"
        },
        "api": "ml.get_jobs"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-job-stats.asciidoc",
      "line": 361
    },
    "digest": "9298aaf8232a819e79b3bf8471245e98",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/low_request_rate/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/low_request_rate/_stats",
        "query": null,
        "body": null,
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.get_job_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-ml-info.asciidoc",
      "line": 41
    },
    "digest": "4d7c0b52d3c0a084157428624c543c90",
    "lang": "console",
    "found": [],
    "source": "GET _ml/info",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/info",
        "query": null,
        "body": null,
        "params": null,
        "api": "ml.info"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-ml-info.asciidoc",
      "line": 49
    },
    "digest": "d7f223ca9bb78d5eaaa7be550e288afa",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"defaults\" : {\n    \"anomaly_detectors\" : {\n      \"categorization_analyzer\" : {\n        \"tokenizer\" : \"ml_classic\",\n        \"filter\" : [\n          {\n            \"type\" : \"stop\",\n            \"stopwords\" : [\n              \"Monday\",\n              \"Tuesday\",\n              \"Wednesday\",\n              \"Thursday\",\n              \"Friday\",\n              \"Saturday\",\n              \"Sunday\",\n              \"Mon\",\n              \"Tue\",\n              \"Wed\",\n              \"Thu\",\n              \"Fri\",\n              \"Sat\",\n              \"Sun\",\n              \"January\",\n              \"February\",\n              \"March\",\n              \"April\",\n              \"May\",\n              \"June\",\n              \"July\",\n              \"August\",\n              \"September\",\n              \"October\",\n              \"November\",\n              \"December\",\n              \"Jan\",\n              \"Feb\",\n              \"Mar\",\n              \"Apr\",\n              \"May\",\n              \"Jun\",\n              \"Jul\",\n              \"Aug\",\n              \"Sep\",\n              \"Oct\",\n              \"Nov\",\n              \"Dec\",\n              \"GMT\",\n              \"UTC\"\n            ]\n          }\n        ]\n      },\n      \"model_memory_limit\" : \"1gb\",\n      \"categorization_examples_limit\" : 4,\n      \"model_snapshot_retention_days\" : 1\n    },\n    \"datafeeds\" : {\n      \"scroll_size\" : 1000\n    }\n  },\n  \"upgrade_mode\": false,\n  \"native_code\" : {\n    \"version\": \"7.0.0\",\n    \"build_hash\": \"99a07c016d5a73\"\n  },\n  \"limits\" : { }\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-snapshot.asciidoc",
      "line": 200
    },
    "digest": "c873f9cd093e26515148f052e28c7805",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/high_sum_total_sales/model_snapshots\n{\n  \"start\": \"1575402236000\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/high_sum_total_sales/model_snapshots",
        "query": null,
        "body": {
          "start": "1575402236000"
        },
        "params": {
          "job_id": "high_sum_total_sales"
        },
        "api": "ml.get_model_snapshots"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-overall-buckets.asciidoc",
      "line": 124
    },
    "digest": "e48e7da65c2b32d724fd7e3bfa175c6f",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/job-*/results/overall_buckets\n{\n  \"overall_score\": 80,\n  \"start\": \"1403532000000\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/job-*/results/overall_buckets",
        "query": null,
        "body": {
          "overall_score": 80,
          "start": "1403532000000"
        },
        "params": {
          "job_id": "job-*"
        },
        "api": "ml.get_overall_buckets"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-overall-buckets.asciidoc",
      "line": 169
    },
    "digest": "405db6f3a01eceacfaa8b0ed3e4b3ac2",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/job-*/results/overall_buckets\n{\n  \"top_n\": 2,\n  \"overall_score\": 50.0,\n  \"start\": \"1403532000000\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/job-*/results/overall_buckets",
        "query": null,
        "body": {
          "top_n": 2,
          "overall_score": 50,
          "start": "1403532000000"
        },
        "params": {
          "job_id": "job-*"
        },
        "api": "ml.get_overall_buckets"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-calendar-event.asciidoc",
      "line": 85
    },
    "digest": "39d6f575c9458d9c941364dfd0493fa0",
    "lang": "console",
    "found": [],
    "source": "GET _ml/calendars/planned-outages/events",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/calendars/planned-outages/events",
        "query": null,
        "body": null,
        "params": {
          "calendar_id": "planned-outages"
        },
        "api": "ml.get_calendar_events"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-calendar-event.asciidoc",
      "line": 93
    },
    "digest": "8c820d98ef814220df1fed0dad919ca6",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\": 3,\n  \"events\": [\n    {\n      \"description\": \"event 1\",\n      \"start_time\": 1513641600000,\n      \"end_time\": 1513728000000,\n      \"calendar_id\": \"planned-outages\",\n      \"event_id\": \"LS8LJGEBMTCMA-qz49st\"\n    },\n    {\n      \"description\": \"event 2\",\n      \"start_time\": 1513814400000,\n      \"end_time\": 1513900800000,\n      \"calendar_id\": \"planned-outages\",\n      \"event_id\": \"Li8LJGEBMTCMA-qz49st\"\n    },\n    {\n      \"description\": \"event 3\",\n      \"start_time\": 1514160000000,\n      \"end_time\": 1514246400000,\n      \"calendar_id\": \"planned-outages\",\n      \"event_id\": \"Ly8LJGEBMTCMA-qz49st\"\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-filter.asciidoc",
      "line": 67
    },
    "digest": "800861c15bb33ca01a46fb97dde7537a",
    "lang": "console",
    "found": [],
    "source": "GET _ml/filters/safe_domains",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/filters/safe_domains",
        "query": null,
        "body": null,
        "params": {
          "filter_id": "safe_domains"
        },
        "api": "ml.get_filters"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-filter.asciidoc",
      "line": 75
    },
    "digest": "b72f41bb18115f07edacf2eb5e6ec8c4",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\": 1,\n  \"filters\": [\n    {\n      \"filter_id\": \"safe_domains\",\n      \"description\": \"A list of safe domains\",\n      \"items\": [\n        \"*.google.com\",\n        \"wikipedia.org\"\n      ]\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/get-record.asciidoc",
      "line": 202
    },
    "digest": "20e3b181114e00c943a27a9bbcf85f15",
    "lang": "console",
    "found": [],
    "source": "GET _ml/anomaly_detectors/low_request_rate/results/records\n{\n  \"sort\": \"record_score\",\n  \"desc\": true,\n  \"start\": \"1454944100000\"\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/anomaly_detectors/low_request_rate/results/records",
        "query": null,
        "body": {
          "sort": "record_score",
          "desc": true,
          "start": "1454944100000"
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.get_records"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/open-job.asciidoc",
      "line": 54
    },
    "digest": "a6204edaa0bcf7b82a89ab4f6bda0914",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/low_request_rate/_open\n{\n  \"timeout\": \"35m\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/low_request_rate/_open",
        "query": null,
        "body": {
          "timeout": "35m"
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.open_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/open-job.asciidoc",
      "line": 65
    },
    "digest": "71f99817272cf85977dc23543fbacf0b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"opened\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/preview-datafeed.asciidoc",
      "line": 57
    },
    "digest": "38eed000de433b540116928681c520d3",
    "lang": "console",
    "found": [],
    "source": "GET _ml/datafeeds/datafeed-high_sum_total_sales/_preview",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/datafeeds/datafeed-high_sum_total_sales/_preview",
        "query": null,
        "body": null,
        "params": {
          "datafeed_id": "datafeed-high_sum_total_sales"
        },
        "api": "ml.preview_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/preview-datafeed.asciidoc",
      "line": 65
    },
    "digest": "cb9301147c1c73e6d4b6abfbe731e2f7",
    "lang": "console-result",
    "found": [],
    "source": "[\n  {\n    \"order_date\" : 1574294659000,\n    \"category.keyword\" : \"Men's Clothing\",\n    \"customer_full_name.keyword\" : \"Sultan Al Benson\",\n    \"taxful_total_price\" : 35.96875\n  },\n  {\n    \"order_date\" : 1574294918000,\n    \"category.keyword\" : [\n      \"Women's Accessories\",\n      \"Women's Clothing\"\n    ],\n    \"customer_full_name.keyword\" : \"Pia Webb\",\n    \"taxful_total_price\" : 83.0\n  },\n  {\n    \"order_date\" : 1574295782000,\n    \"category.keyword\" : [\n      \"Women's Accessories\",\n      \"Women's Shoes\"\n    ],\n    \"customer_full_name.keyword\" : \"Brigitte Graham\",\n    \"taxful_total_price\" : 72.0\n  }\n]"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/revert-snapshot.asciidoc",
      "line": 62
    },
    "digest": "b173b1b5bab610668ab74d5b2ab03f78",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/high_sum_total_sales/model_snapshots/1575402237/_revert\n{\n  \"delete_intervening_results\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/high_sum_total_sales/model_snapshots/1575402237/_revert",
        "query": null,
        "body": {
          "delete_intervening_results": true
        },
        "params": {
          "job_id": "high_sum_total_sales",
          "snapshot_id": "1575402237"
        },
        "api": "ml.revert_model_snapshot"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/set-upgrade-mode.asciidoc",
      "line": 76
    },
    "digest": "ae4aa368617637a390074535df86e64b",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=true&timeout=10m",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "true",
          "timeout": "10m"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/set-upgrade-mode.asciidoc",
      "line": 83
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/set-upgrade-mode.asciidoc",
      "line": 98
    },
    "digest": "8e9e7dc5fad2b2b8e74ab4dc225d9c53",
    "lang": "console",
    "found": [],
    "source": "POST _ml/set_upgrade_mode?enabled=false&timeout=10m",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/set_upgrade_mode",
        "query": {
          "enabled": "false",
          "timeout": "10m"
        },
        "body": null,
        "params": null,
        "api": "ml.set_upgrade_mode"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/start-datafeed.asciidoc",
      "line": 99
    },
    "digest": "d7ae456f119246e95f2f4c37e7544b8c",
    "lang": "console",
    "found": [],
    "source": "POST _ml/datafeeds/datafeed-low_request_rate/_start\n{\n  \"start\": \"2019-04-07T18:22:16Z\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/datafeeds/datafeed-low_request_rate/_start",
        "query": null,
        "body": {
          "start": "2019-04-07T18:22:16Z"
        },
        "params": {
          "datafeed_id": "datafeed-low_request_rate"
        },
        "api": "ml.start_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/start-datafeed.asciidoc",
      "line": 110
    },
    "digest": "1851f163178ac4046c8fc88b0293644f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"started\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/stop-datafeed.asciidoc",
      "line": 74
    },
    "digest": "fd60b4092c6552164862cec287359676",
    "lang": "console",
    "found": [],
    "source": "POST _ml/datafeeds/datafeed-low_request_rate/_stop\n{\n  \"timeout\": \"30s\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/datafeeds/datafeed-low_request_rate/_stop",
        "query": null,
        "body": {
          "timeout": "30s"
        },
        "params": {
          "datafeed_id": "datafeed-low_request_rate"
        },
        "api": "ml.stop_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/stop-datafeed.asciidoc",
      "line": 85
    },
    "digest": "5dcda409b93a4b4a031d6990cee66328",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"stopped\": true\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-datafeed.asciidoc",
      "line": 119
    },
    "digest": "df6d5b5f8e1c8785503269ccb7b34763",
    "lang": "console",
    "found": [],
    "source": "POST _ml/datafeeds/datafeed-total-requests/_update\n{\n  \"query\": {\n    \"term\": {\n      \"level\": \"error\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/datafeeds/datafeed-total-requests/_update",
        "query": null,
        "body": {
          "query": {
            "term": {
              "level": "error"
            }
          }
        },
        "params": {
          "datafeed_id": "datafeed-total-requests"
        },
        "api": "ml.update_datafeed"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-datafeed.asciidoc",
      "line": 135
    },
    "digest": "037d9fe54be67c0e6418799c3cfe7b50",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"datafeed_id\": \"datafeed-total-requests\",\n  \"job_id\": \"total-requests\",\n  \"query_delay\": \"83474ms\",\n  \"indices\": [\"server-metrics\"],\n  \"query\": {\n    \"term\": {\n      \"level\": {\n        \"value\": \"error\",\n        \"boost\": 1.0\n      }\n    }\n  },\n  \"scroll_size\": 1000,\n  \"chunking_config\": {\n    \"mode\": \"auto\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-filter.asciidoc",
      "line": 46
    },
    "digest": "4d21725453955582ff12b4a1104aa7b6",
    "lang": "console",
    "found": [],
    "source": "POST _ml/filters/safe_domains/_update\n{\n  \"description\": \"Updated list of domains\",\n  \"add_items\": [\"*.myorg.com\"],\n  \"remove_items\": [\"wikipedia.org\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/filters/safe_domains/_update",
        "query": null,
        "body": {
          "description": "Updated list of domains",
          "add_items": [
            "*.myorg.com"
          ],
          "remove_items": [
            "wikipedia.org"
          ]
        },
        "params": {
          "filter_id": "safe_domains"
        },
        "api": "ml.update_filter"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-filter.asciidoc",
      "line": 59
    },
    "digest": "c1cdffb22de3a5beadff539c0e856e60",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"filter_id\": \"safe_domains\",\n  \"description\": \"Updated list of domains\",\n  \"items\": [\"*.google.com\", \"*.myorg.com\"]\n}"
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-job.asciidoc",
      "line": 212
    },
    "digest": "421e68e2b9789f0e8c08760d9e685d1c",
    "lang": "console",
    "found": [],
    "source": "POST _ml/anomaly_detectors/low_request_rate/_update\n{\n  \"description\":\"An updated job\",\n  \"detectors\": {\n    \"detector_index\": 0,\n    \"description\": \"An updated detector description\"\n  },\n  \"groups\": [\"kibana_sample_data\",\"kibana_sample_web_logs\"],\n  \"model_plot_config\": {\n    \"enabled\": true\n  },\n  \"renormalization_window_days\": 30,\n  \"background_persist_interval\": \"2h\",\n  \"model_snapshot_retention_days\": 7,\n  \"results_retention_days\": 60\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/low_request_rate/_update",
        "query": null,
        "body": {
          "description": "An updated job",
          "detectors": {
            "detector_index": 0,
            "description": "An updated detector description"
          },
          "groups": [
            "kibana_sample_data",
            "kibana_sample_web_logs"
          ],
          "model_plot_config": {
            "enabled": true
          },
          "renormalization_window_days": 30,
          "background_persist_interval": "2h",
          "model_snapshot_retention_days": 7,
          "results_retention_days": 60
        },
        "params": {
          "job_id": "low_request_rate"
        },
        "api": "ml.update_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/anomaly-detection/apis/update-snapshot.asciidoc",
      "line": 52
    },
    "digest": "3b9c54604535d97e8368d47148aecc6f",
    "lang": "console",
    "found": [],
    "source": "POST\n_ml/anomaly_detectors/it_ops_new_logs/model_snapshots/1491852978/_update\n{\n  \"description\": \"Snapshot 1\",\n  \"retain\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/anomaly_detectors/it_ops_new_logs/model_snapshots/1491852978/_update",
        "query": null,
        "body": {
          "description": "Snapshot 1",
          "retain": true
        },
        "params": {
          "job_id": "it_ops_new_logs",
          "snapshot_id": "1491852978"
        },
        "api": "ml.update_model_snapshot"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 414
    },
    "digest": "8c6f3bb8abae9ff1d21e776f16ad1c86",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/data_frame/analytics/model-flight-delays-pre\n{\n  \"source\": {\n    \"index\": [\n      \"kibana_sample_data_flights\" <1>\n    ],\n    \"query\": { <2>\n      \"range\": {\n        \"DistanceKilometers\": {\n          \"gt\": 0\n        }\n      }\n    },\n    \"_source\": { <3>\n      \"includes\": [],\n      \"excludes\": [\n        \"FlightDelay\",\n        \"FlightDelayType\"\n      ]\n    }\n  },\n  \"dest\": { <4>\n    \"index\": \"df-flight-delays\",\n    \"results_field\": \"ml-results\"\n  },\n  \"analysis\": {\n  \"regression\": {\n    \"dependent_variable\": \"FlightDelayMin\",\n    \"training_percent\": 90\n    }\n  },\n  \"analyzed_fields\": { <5>\n    \"includes\": [],\n    \"excludes\": [\n      \"FlightNum\"\n    ]\n  },\n  \"model_memory_limit\": \"100mb\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/data_frame/analytics/model-flight-delays-pre",
        "query": null,
        "body": {
          "source": {
            "index": [
              "kibana_sample_data_flights"
            ],
            "query": {
              "range": {
                "DistanceKilometers": {
                  "gt": 0
                }
              }
            },
            "_source": {
              "includes": [],
              "excludes": [
                "FlightDelay",
                "FlightDelayType"
              ]
            }
          },
          "dest": {
            "index": "df-flight-delays",
            "results_field": "ml-results"
          },
          "analysis": {
            "regression": {
              "dependent_variable": "FlightDelayMin",
              "training_percent": 90
            }
          },
          "analyzed_fields": {
            "includes": [],
            "excludes": [
              "FlightNum"
            ]
          },
          "model_memory_limit": "100mb"
        },
        "params": {
          "id": "model-flight-delays-pre"
        },
        "api": "ml.put_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 486
    },
    "digest": "ce3c391c2b1915cfc44a2917bca71d19",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/data_frame/analytics/loganalytics\n{\n  \"description\": \"Outlier detection on log data\",\n  \"source\": {\n    \"index\": \"logdata\"\n  },\n  \"dest\": {\n    \"index\": \"logdata_out\"\n  },\n  \"analysis\": {\n    \"outlier_detection\": {\n      \"compute_feature_influence\": true,\n      \"outlier_fraction\": 0.05,\n      \"standardization_enabled\": true\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/data_frame/analytics/loganalytics",
        "query": null,
        "body": {
          "description": "Outlier detection on log data",
          "source": {
            "index": "logdata"
          },
          "dest": {
            "index": "logdata_out"
          },
          "analysis": {
            "outlier_detection": {
              "compute_feature_influence": true,
              "outlier_fraction": 0.05,
              "standardization_enabled": true
            }
          }
        },
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.put_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 511
    },
    "digest": "21ecd0d3fa2f27cbee2a89b6c7973b28",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"id\": \"loganalytics\",\n    \"description\": \"Outlier detection on log data\",\n    \"source\": {\n        \"index\": [\"logdata\"],\n        \"query\": {\n            \"match_all\": {}\n        }\n    },\n    \"dest\": {\n        \"index\": \"logdata_out\",\n        \"results_field\": \"ml\"\n    },\n    \"analysis\": {\n        \"outlier_detection\": {\n            \"compute_feature_influence\": true,\n            \"outlier_fraction\": 0.05,\n            \"standardization_enabled\": true\n        }\n    },\n    \"model_memory_limit\": \"1gb\",\n    \"create_time\" : 1562265491319,\n    \"version\" : \"8.0.0\",\n    \"allow_lazy_start\" : false\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 549
    },
    "digest": "e8211247c280a3fbbbdd32850b743b7b",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/data_frame/analytics/house_price_regression_analysis\n{\n  \"source\": {\n    \"index\": \"houses_sold_last_10_yrs\"\n  },\n  \"dest\": {\n    \"index\": \"house_price_predictions\"\n  },\n  \"analysis\":\n    {\n      \"regression\": {\n        \"dependent_variable\": \"price\"\n      }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/data_frame/analytics/house_price_regression_analysis",
        "query": null,
        "body": {
          "source": {
            "index": "houses_sold_last_10_yrs"
          },
          "dest": {
            "index": "house_price_predictions"
          },
          "analysis": {
            "regression": {
              "dependent_variable": "price"
            }
          }
        },
        "params": {
          "id": "house_price_regression_analysis"
        },
        "api": "ml.put_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 572
    },
    "digest": "4ff328150800d40f323aa57c871362d7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\" : \"house_price_regression_analysis\",\n  \"source\" : {\n    \"index\" : [\n      \"houses_sold_last_10_yrs\"\n    ],\n    \"query\" : {\n      \"match_all\" : { }\n    }\n  },\n  \"dest\" : {\n    \"index\" : \"house_price_predictions\",\n    \"results_field\" : \"ml\"\n  },\n  \"analysis\" : {\n    \"regression\" : {\n      \"dependent_variable\" : \"price\",\n      \"training_percent\" : 100\n    }\n  },\n  \"model_memory_limit\" : \"1gb\",\n  \"create_time\" : 1567168659127,\n  \"version\" : \"8.0.0\",\n  \"allow_lazy_start\" : false\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 606
    },
    "digest": "ae82eb17c23cb8e5761cb6240a5ed0a6",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/data_frame/analytics/student_performance_mathematics_0.3\n{\n \"source\": {\n   \"index\": \"student_performance_mathematics\"\n },\n \"dest\": {\n   \"index\":\"student_performance_mathematics_reg\"\n },\n \"analysis\":\n   {\n     \"regression\": {\n       \"dependent_variable\": \"G3\",\n       \"training_percent\": 70,  <1>\n       \"randomize_seed\": 19673948271  <2>\n     }\n   }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/data_frame/analytics/student_performance_mathematics_0.3",
        "query": null,
        "body": {
          "source": {
            "index": "student_performance_mathematics"
          },
          "dest": {
            "index": "student_performance_mathematics_reg"
          },
          "analysis": {
            "regression": {
              "dependent_variable": "G3",
              "training_percent": 70,
              "randomize_seed": 19673948271
            }
          }
        },
        "params": {
          "id": "student_performance_mathematics_0.3"
        },
        "api": "ml.put_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/put-dfanalytics.asciidoc",
      "line": 640
    },
    "digest": "4fb0629146ca78b85e823edd405497bb",
    "lang": "console",
    "found": [],
    "source": "PUT _ml/data_frame/analytics/loan_classification\n{\n  \"source\" : {\n    \"index\": \"loan-applicants\"\n  },\n  \"dest\" : {\n    \"index\": \"loan-applicants-classified\"\n  },\n  \"analysis\" : {\n    \"classification\": {\n      \"dependent_variable\": \"label\",\n      \"training_percent\": 75,\n      \"num_top_classes\": 2\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_ml/data_frame/analytics/loan_classification",
        "query": null,
        "body": {
          "source": {
            "index": "loan-applicants"
          },
          "dest": {
            "index": "loan-applicants-classified"
          },
          "analysis": {
            "classification": {
              "dependent_variable": "label",
              "training_percent": 75,
              "num_top_classes": 2
            }
          }
        },
        "params": {
          "id": "loan_classification"
        },
        "api": "ml.put_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/delete-dfanalytics.asciidoc",
      "line": 54
    },
    "digest": "1c8b6768c4eefc76fcb38708152f561b",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/data_frame/analytics/loganalytics",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/data_frame/analytics/loganalytics",
        "query": null,
        "body": null,
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.delete_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/delete-dfanalytics.asciidoc",
      "line": 62
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/delete-inference-trained-model.asciidoc",
      "line": 57
    },
    "digest": "334e28ff99f12b721b9942bad3a78f94",
    "lang": "console",
    "found": [],
    "source": "DELETE _ml/inference/regression-job-one-1574775307356",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_ml/inference/regression-job-one-1574775307356",
        "query": null,
        "body": null,
        "params": {
          "model_id": "regression-job-one-1574775307356"
        },
        "api": "ml.delete_trained_model"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/delete-inference-trained-model.asciidoc",
      "line": 66
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 197
    },
    "digest": "eae68412d998bc0f65b09711f007a4b7",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/_evaluate\n{\n  \"index\": \"my_analytics_dest_index\",\n  \"evaluation\": {\n    \"binary_soft_classification\": {\n      \"actual_field\": \"is_outlier\",\n      \"predicted_probability_field\": \"ml.outlier_score\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/_evaluate",
        "query": null,
        "body": {
          "index": "my_analytics_dest_index",
          "evaluation": {
            "binary_soft_classification": {
              "actual_field": "is_outlier",
              "predicted_probability_field": "ml.outlier_score"
            }
          }
        },
        "params": null,
        "api": "ml.evaluate_data_frame"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 214
    },
    "digest": "7e2a4291c3a234e50d50f3731aff64fe",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"binary_soft_classification\": {\n    \"auc_roc\": {\n      \"score\": 0.92584757746414444\n    },\n    \"confusion_matrix\": {\n      \"0.25\": {\n          \"tp\": 5,\n          \"fp\": 9,\n          \"tn\": 204,\n          \"fn\": 5\n      },\n      \"0.5\": {\n          \"tp\": 1,\n          \"fp\": 5,\n          \"tn\": 208,\n          \"fn\": 9\n      },\n      \"0.75\": {\n          \"tp\": 0,\n          \"fp\": 4,\n          \"tn\": 209,\n          \"fn\": 10\n      }\n    },\n    \"precision\": {\n        \"0.25\": 0.35714285714285715,\n        \"0.5\": 0.16666666666666666,\n        \"0.75\": 0\n    },\n    \"recall\": {\n        \"0.25\": 0.5,\n        \"0.5\": 0.1,\n        \"0.75\": 0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 259
    },
    "digest": "e6e7586a81068773d18cca848346b69f",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/_evaluate\n{\n  \"index\": \"house_price_predictions\", <1>\n  \"query\": {\n      \"bool\": {\n        \"filter\": [\n          { \"term\":  { \"ml.is_training\": false } } <2>\n        ]\n      }\n  },\n  \"evaluation\": {\n    \"regression\": {\n      \"actual_field\": \"price\", <3>\n      \"predicted_field\": \"ml.price_prediction\", <4>\n      \"metrics\": {\n        \"r_squared\": {},\n        \"mean_squared_error\": {}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/_evaluate",
        "query": null,
        "body": {
          "index": "house_price_predictions",
          "query": {
            "bool": {
              "filter": [
                {
                  "term": {
                    "ml.is_training": false
                  }
                }
              ]
            }
          },
          "evaluation": {
            "regression": {
              "actual_field": "price",
              "predicted_field": "ml.price_prediction",
              "metrics": {
                "r_squared": {},
                "mean_squared_error": {}
              }
            }
          }
        },
        "params": null,
        "api": "ml.evaluate_data_frame"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 296
    },
    "digest": "862efc8d548a9202597c72c7e98a599d",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/_evaluate\n{\n  \"index\": \"student_performance_mathematics_reg\",\n  \"query\": {\n    \"term\": {\n      \"ml.is_training\": {\n        \"value\": true <1>\n      }\n    }\n  },\n  \"evaluation\": {\n    \"regression\": {\n      \"actual_field\": \"G3\", <2>\n      \"predicted_field\": \"ml.G3_prediction\", <3>\n      \"metrics\": {\n        \"r_squared\": {},\n        \"mean_squared_error\": {}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/_evaluate",
        "query": null,
        "body": {
          "index": "student_performance_mathematics_reg",
          "query": {
            "term": {
              "ml.is_training": {
                "value": true
              }
            }
          },
          "evaluation": {
            "regression": {
              "actual_field": "G3",
              "predicted_field": "ml.G3_prediction",
              "metrics": {
                "r_squared": {},
                "mean_squared_error": {}
              }
            }
          }
        },
        "params": null,
        "api": "ml.evaluate_data_frame"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 335
    },
    "digest": "051b2682d386d49616b18a5db591afdf",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/_evaluate\n{\n  \"index\": \"student_performance_mathematics_reg\",\n  \"query\": {\n    \"term\": {\n      \"ml.is_training\": {\n        \"value\": false <1>\n      }\n    }\n  },\n  \"evaluation\": {\n    \"regression\": {\n      \"actual_field\": \"G3\", <2>\n      \"predicted_field\": \"ml.G3_prediction\", <3>\n      \"metrics\": {\n        \"r_squared\": {},\n        \"mean_squared_error\": {}\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/_evaluate",
        "query": null,
        "body": {
          "index": "student_performance_mathematics_reg",
          "query": {
            "term": {
              "ml.is_training": {
                "value": false
              }
            }
          },
          "evaluation": {
            "regression": {
              "actual_field": "G3",
              "predicted_field": "ml.G3_prediction",
              "metrics": {
                "r_squared": {},
                "mean_squared_error": {}
              }
            }
          }
        },
        "params": null,
        "api": "ml.evaluate_data_frame"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 374
    },
    "digest": "388d3eda4f792d3fce044777739217e6",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/_evaluate\n{\n   \"index\": \"animal_classification\",\n   \"evaluation\": {\n      \"classification\": { <1>\n         \"actual_field\": \"animal_class\", <2>\n         \"predicted_field\": \"ml.animal_class_prediction\", <3>\n         \"metrics\": {\n           \"multiclass_confusion_matrix\" : {} <4>\n         }\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/_evaluate",
        "query": null,
        "body": {
          "index": "animal_classification",
          "evaluation": {
            "classification": {
              "actual_field": "animal_class",
              "predicted_field": "ml.animal_class_prediction",
              "metrics": {
                "multiclass_confusion_matrix": {}
              }
            }
          }
        },
        "params": null,
        "api": "ml.evaluate_data_frame"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/evaluate-dfanalytics.asciidoc",
      "line": 402
    },
    "digest": "c9b0865574c0db1f8ea02d507e215bfe",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"classification\" : {\n      \"multiclass_confusion_matrix\" : {\n         \"confusion_matrix\" : [\n         {\n            \"actual_class\" : \"cat\", <1>\n            \"actual_class_doc_count\" : 12, <2>\n            \"predicted_classes\" : [ <3>\n              {\n                \"predicted_class\" : \"cat\",\n                \"count\" : 12 <4>\n              },\n              {\n                \"predicted_class\" : \"dog\",\n                \"count\" : 0 <5>\n              }\n            ],\n            \"other_predicted_class_doc_count\" : 0 <6>\n          },\n          {\n            \"actual_class\" : \"dog\",\n            \"actual_class_doc_count\" : 11,\n            \"predicted_classes\" : [\n              {\n                \"predicted_class\" : \"dog\",\n                \"count\" : 7\n              },\n              {\n                \"predicted_class\" : \"cat\",\n                \"count\" : 4\n              }\n            ],\n            \"other_predicted_class_doc_count\" : 0\n          }\n        ],\n        \"other_actual_class_count\" : 0\n      }\n    }\n  }"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/explain-dfanalytics.asciidoc",
      "line": 124
    },
    "digest": "8aa17bd25a3f2d634e5253b4b72fec4c",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/analytics/_explain\n{\n  \"source\": {\n    \"index\": \"houses_sold_last_10_yrs\"\n  },\n  \"analysis\": {\n    \"regression\": {\n      \"dependent_variable\": \"price\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/analytics/_explain",
        "query": null,
        "body": {
          "source": {
            "index": "houses_sold_last_10_yrs"
          },
          "analysis": {
            "regression": {
              "dependent_variable": "price"
            }
          }
        },
        "params": null,
        "api": "ml.explain_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/explain-dfanalytics.asciidoc",
      "line": 143
    },
    "digest": "fdfac19398a52c398d60bcdd3d4f7c9d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"field_selection\": [\n    {\n      \"field\": \"number_of_bedrooms\",\n      \"mappings_types\": [\"integer\"],\n      \"is_included\": true,\n      \"is_required\": false,\n      \"feature_type\": \"numerical\"\n    },\n    {\n      \"field\": \"postcode\",\n      \"mappings_types\": [\"text\"],\n      \"is_included\": false,\n      \"is_required\": false,\n      \"reason\": \"[postcode.keyword] is preferred because it is aggregatable\"\n    },\n    {\n      \"field\": \"postcode.keyword\",\n      \"mappings_types\": [\"keyword\"],\n      \"is_included\": true,\n      \"is_required\": false,\n      \"feature_type\": \"categorical\"\n    },\n    {\n      \"field\": \"price\",\n      \"mappings_types\": [\"float\"],\n      \"is_included\": true,\n      \"is_required\": true,\n      \"feature_type\": \"numerical\"\n    }\n  ],\n  \"memory_estimation\": {\n    \"expected_memory_without_disk\": \"128MB\",\n    \"expected_memory_with_disk\": \"32MB\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-dfanalytics.asciidoc",
      "line": 183
    },
    "digest": "5ccfd9f4698dcd7cdfbc6bad60081aab",
    "lang": "console",
    "found": [],
    "source": "GET _ml/data_frame/analytics/loganalytics",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/data_frame/analytics/loganalytics",
        "query": null,
        "body": null,
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.get_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-dfanalytics.asciidoc",
      "line": 191
    },
    "digest": "fde59be34000b8e62c12d539890e26ff",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"count\": 1,\n    \"data_frame_analytics\": [\n        {\n            \"id\": \"loganalytics\",\n            \"source\": {\n                \"index\": \"logdata\",\n                \"query\": {\n                    \"match_all\": {}\n                }\n            },\n            \"dest\": {\n                \"index\": \"logdata_out\",\n                \"results_field\": \"ml\"\n            },\n            \"analysis\": {\n                \"outlier_detection\": {}\n            },\n            \"model_memory_limit\": \"1gb\",\n            \"create_time\": 1562265491319,\n            \"version\" : \"8.0.0\"\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-dfanalytics-stats.asciidoc",
      "line": 84
    },
    "digest": "cfc52956b005d57111c49dfe1735634e",
    "lang": "console",
    "found": [],
    "source": "GET _ml/data_frame/analytics/loganalytics/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/data_frame/analytics/loganalytics/_stats",
        "query": null,
        "body": null,
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.get_data_frame_analytics_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-dfanalytics-stats.asciidoc",
      "line": 93
    },
    "digest": "d51195db67610db5b1b39f600f6badee",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"count\": 1,\n    \"data_frame_analytics\": [\n        {\n            \"id\": \"loganalytics\",\n            \"state\": \"stopped\",\n            \"progress\": [\n              {\n                \"phase\": \"reindexing\",\n                \"progress_percent\": 0\n              },\n              {\n                \"phase\": \"loading_data\",\n                \"progress_percent\": 0\n              },\n              {\n                \"phase\": \"analyzing\",\n                \"progress_percent\": 0\n              },\n              {\n                \"phase\": \"writing_results\",\n                \"progress_percent\": 0\n              }\n            ]\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-inference-trained-model.asciidoc",
      "line": 164
    },
    "digest": "f97c7791a0dd23aad5f96fd38ec7d12e",
    "lang": "console",
    "found": [],
    "source": "GET _ml/inference/",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/inference/",
        "query": null,
        "body": null,
        "params": null,
        "api": "ml.get_trained_models"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc",
      "line": 85
    },
    "digest": "2dde95ba98c5d5e19725fbb10435d283",
    "lang": "console",
    "found": [],
    "source": "GET _ml/inference/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ml/inference/_stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "ml.get_trained_models_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/get-inference-trained-model-stats.asciidoc",
      "line": 94
    },
    "digest": "0bc8d7ffe3d9eb23394ccbc45eb1a3e3",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\": 2,\n  \"trained_model_stats\": [\n    {\n      \"model_id\": \"flight-delay-prediction-1574775339910\",\n      \"pipeline_count\": 0\n    },\n    {\n      \"model_id\": \"regression-job-one-1574775307356\",\n      \"pipeline_count\": 1,\n      \"ingest\": {\n        \"total\": {\n          \"count\": 178,\n          \"time_in_millis\": 8,\n          \"current\": 0,\n          \"failed\": 0\n        },\n        \"pipelines\": {\n          \"flight-delay\": {\n            \"count\": 178,\n            \"time_in_millis\": 8,\n            \"current\": 0,\n            \"failed\": 0,\n            \"processors\": [\n              {\n                \"inference\": {\n                  \"type\": \"inference\",\n                  \"stats\": {\n                    \"count\": 178,\n                    \"time_in_millis\": 7,\n                    \"current\": 0,\n                    \"failed\": 0\n                  }\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/start-dfanalytics.asciidoc",
      "line": 73
    },
    "digest": "1a3a4b8a4bfee4ab84ddd13d8835f560",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/analytics/loganalytics/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/analytics/loganalytics/_start",
        "query": null,
        "body": null,
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.start_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/start-dfanalytics.asciidoc",
      "line": 81
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/stop-dfanalytics.asciidoc",
      "line": 76
    },
    "digest": "db19cc7a26ca80106d86d688f4be67a8",
    "lang": "console",
    "found": [],
    "source": "POST _ml/data_frame/analytics/loganalytics/_stop",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_ml/data_frame/analytics/loganalytics/_stop",
        "query": null,
        "body": null,
        "params": {
          "id": "loganalytics"
        },
        "api": "ml.stop_data_frame_analytics"
      }
    ]
  },
  {
    "source_location": {
      "file": "ml/df-analytics/apis/stop-dfanalytics.asciidoc",
      "line": 84
    },
    "digest": "0cb51a35e30e7cb43c0d65adef177a84",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"stopped\" : true\n}"
  },
  {
    "source_location": {
      "file": "migration/apis/deprecation.asciidoc",
      "line": 40
    },
    "digest": "135819da3a4bde684357c57a49ad8e85",
    "lang": "console",
    "found": [],
    "source": "GET /_migration/deprecations",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_migration/deprecations",
        "query": null,
        "body": null,
        "params": null,
        "api": "migration.deprecations"
      }
    ]
  },
  {
    "source_location": {
      "file": "migration/apis/deprecation.asciidoc",
      "line": 118
    },
    "digest": "69f8b0f2a9ba47e11f363d788cee9d6d",
    "lang": "console",
    "found": [],
    "source": "GET /logstash-*/_migration/deprecations",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/logstash-*/_migration/deprecations",
        "query": null,
        "body": null,
        "params": {
          "index": "logstash-*"
        },
        "api": "migration.deprecations"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/reload-analyzers.asciidoc",
      "line": 12
    },
    "digest": "b0015e63323171f38995b8e4aa2b52d5",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_reload_search_analyzers",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_reload_search_analyzers",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.reload_search_analyzers"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/reload-analyzers.asciidoc",
      "line": 98
    },
    "digest": "db8cbfa2afece5d21b3ca69ffee8f5c0",
    "lang": "console",
    "found": [],
    "source": "PUT /my_index\n{\n    \"settings\": {\n        \"index\" : {\n            \"analysis\" : {\n                \"analyzer\" : {\n                    \"my_synonyms\" : {\n                        \"tokenizer\" : \"whitespace\",\n                        \"filter\" : [\"synonym\"]\n                    }\n                },\n                \"filter\" : {\n                    \"synonym\" : {\n                        \"type\" : \"synonym_graph\",\n                        \"synonyms_path\" : \"analysis/synonym.txt\", <1>\n                        \"updateable\" : true <2>\n                    }\n                }\n            }\n        }\n    },\n    \"mappings\": {\n        \"properties\": {\n            \"text\": {\n                \"type\": \"text\",\n                \"analyzer\" : \"standard\",\n                \"search_analyzer\": \"my_synonyms\" <3>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "analysis": {
                "analyzer": {
                  "my_synonyms": {
                    "tokenizer": "whitespace",
                    "filter": [
                      "synonym"
                    ]
                  }
                },
                "filter": {
                  "synonym": {
                    "type": "synonym_graph",
                    "synonyms_path": "analysis/synonym.txt",
                    "updateable": true
                  }
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "text": {
                "type": "text",
                "analyzer": "standard",
                "search_analyzer": "my_synonyms"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/reload-analyzers.asciidoc",
      "line": 142
    },
    "digest": "7554da505cc27f6bd0d028b66e85f4a5",
    "lang": "console",
    "found": [],
    "source": "POST /my_index/_reload_search_analyzers",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/my_index/_reload_search_analyzers",
        "query": null,
        "body": null,
        "params": {
          "index": "my_index"
        },
        "api": "indices.reload_search_analyzers"
      }
    ]
  },
  {
    "source_location": {
      "file": "indices/apis/reload-analyzers.asciidoc",
      "line": 150
    },
    "digest": "02c4e2e6c6793d50a38aa77a3daaab67",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\" : {\n        \"total\" : 2,\n        \"successful\" : 2,\n        \"failed\" : 0\n    },\n    \"reload_details\" : [\n        {\n            \"index\" : \"my_index\",\n            \"reloaded_analyzers\" : [\n                \"my_synonyms\"\n            ],\n            \"reloaded_node_ids\" : [\n                \"mfdqTXn_T7SGr2Ho2KT8uw\"\n            ]\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/put-job.asciidoc",
      "line": 247
    },
    "digest": "2025834fab7efbb0542275c30d9d0bfe",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : { <1>\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"1h\",\n        \"delay\": \"7d\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [ <2>\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor"
        },
        "api": "rollup.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/put-job.asciidoc",
      "line": 286
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/delete-job.asciidoc",
      "line": 80
    },
    "digest": "94246f45025ed394cd6415ed8d7a0588",
    "lang": "console",
    "found": [],
    "source": "DELETE _rollup/job/sensor",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor"
        },
        "api": "rollup.delete_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/delete-job.asciidoc",
      "line": 88
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/get-job.asciidoc",
      "line": 89
    },
    "digest": "d095b422d9803c02b62c01adffc85376",
    "lang": "console",
    "found": [],
    "source": "GET _rollup/job/sensor",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor"
        },
        "api": "rollup.get_jobs"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/get-job.asciidoc",
      "line": 97
    },
    "digest": "ab98ea7ccb077daef197ae0e9e2e2588",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"jobs\" : [\n        {\n          \"config\" : {\n            \"id\" : \"sensor\",\n            \"index_pattern\" : \"sensor-*\",\n            \"rollup_index\" : \"sensor_rollup\",\n            \"cron\" : \"*/30 * * * * ?\",\n            \"groups\" : {\n              \"date_histogram\" : {\n                \"fixed_interval\" : \"1h\",\n                \"delay\": \"7d\",\n                \"field\": \"timestamp\",\n                \"time_zone\": \"UTC\"\n              },\n              \"terms\" : {\n                \"fields\" : [\n                  \"node\"\n                ]\n              }\n            },\n            \"metrics\" : [\n              {\n                \"field\" : \"temperature\",\n                \"metrics\" : [\n                  \"min\",\n                  \"max\",\n                  \"sum\"\n                ]\n              },\n              {\n                \"field\" : \"voltage\",\n                \"metrics\" : [\n                  \"avg\"\n                ]\n              }\n            ],\n            \"timeout\" : \"20s\",\n            \"page_size\" : 1000\n          },\n          \"status\" : {\n            \"job_state\" : \"stopped\"\n          },\n          \"stats\" : {\n            \"pages_processed\" : 0,\n            \"documents_processed\" : 0,\n            \"rollups_indexed\" : 0,\n            \"trigger_count\" : 0,\n            \"index_failures\": 0,\n            \"index_time_in_ms\": 0,\n            \"index_total\": 0,\n            \"search_failures\": 0,\n            \"search_time_in_ms\": 0,\n            \"search_total\": 0,\n            \"processing_time_in_ms\": 0,\n            \"processing_total\": 0\n          }\n        }\n    ]\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/get-job.asciidoc",
      "line": 164
    },
    "digest": "6d13e0721a7aac00adcdc5fe77198300",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor2 <1>\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"1h\",\n        \"delay\": \"7d\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}\n\nGET _rollup/job/_all <2>",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor2",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor2"
        },
        "api": "rollup.put_job"
      },
      {
        "method": "GET",
        "url": "/_rollup/job/_all",
        "query": null,
        "body": null,
        "params": {
          "id": "_all"
        },
        "api": "rollup.get_jobs"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 57
    },
    "digest": "2d20c42e9664febeccaff61581605cbe",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"1h\",\n        \"delay\": \"7d\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor"
        },
        "api": "rollup.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 92
    },
    "digest": "a00311843b5f8f3e9f7d511334a828b1",
    "lang": "console",
    "found": [],
    "source": "GET _rollup/data/sensor-*",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_rollup/data/sensor-*",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor-*"
        },
        "api": "rollup.get_rollup_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 100
    },
    "digest": "daffdcda9042b8ac26bc109a3b38173a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"sensor-*\" : {\n    \"rollup_jobs\" : [\n      {\n        \"job_id\" : \"sensor\",\n        \"rollup_index\" : \"sensor_rollup\",\n        \"index_pattern\" : \"sensor-*\",\n        \"fields\" : {\n          \"node\" : [\n            {\n              \"agg\" : \"terms\"\n            }\n          ],\n          \"temperature\" : [\n            {\n              \"agg\" : \"min\"\n            },\n            {\n              \"agg\" : \"max\"\n            },\n            {\n              \"agg\" : \"sum\"\n            }\n          ],\n          \"timestamp\" : [\n            {\n              \"agg\" : \"date_histogram\",\n              \"time_zone\" : \"UTC\",\n              \"fixed_interval\" : \"1h\",\n              \"delay\": \"7d\"\n            }\n          ],\n          \"voltage\" : [\n            {\n              \"agg\" : \"avg\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 164
    },
    "digest": "944806221eb89f5af2298ccdf2902277",
    "lang": "console",
    "found": [],
    "source": "GET _rollup/data/_all",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_rollup/data/_all",
        "query": null,
        "body": null,
        "params": {
          "id": "_all"
        },
        "api": "rollup.get_rollup_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 173
    },
    "digest": "f8cb1a04c2e487ff006b5ae0e1a7afbd",
    "lang": "console",
    "found": [],
    "source": "GET _rollup/data/sensor-1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_rollup/data/sensor-1",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor-1"
        },
        "api": "rollup.get_rollup_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-caps.asciidoc",
      "line": 179
    },
    "digest": "ecde3c2fa2f4b771baec679a4cdf348f",
    "lang": "console-result",
    "found": [],
    "source": "{\n\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-index-caps.asciidoc",
      "line": 53
    },
    "digest": "2d20c42e9664febeccaff61581605cbe",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"1h\",\n        \"delay\": \"7d\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor"
        },
        "api": "rollup.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-index-caps.asciidoc",
      "line": 88
    },
    "digest": "73d1a6c5ef90b7e35d43a0bfdc1e158d",
    "lang": "console",
    "found": [],
    "source": "GET /sensor_rollup/_rollup/data",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup/data",
        "query": null,
        "body": null,
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.get_rollup_index_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-index-caps.asciidoc",
      "line": 97
    },
    "digest": "b656c91a173b5aaaf21efb9ff882c0b6",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"sensor_rollup\" : {\n    \"rollup_jobs\" : [\n      {\n        \"job_id\" : \"sensor\",\n        \"rollup_index\" : \"sensor_rollup\",\n        \"index_pattern\" : \"sensor-*\",\n        \"fields\" : {\n          \"node\" : [\n            {\n              \"agg\" : \"terms\"\n            }\n          ],\n          \"temperature\" : [\n            {\n              \"agg\" : \"min\"\n            },\n            {\n              \"agg\" : \"max\"\n            },\n            {\n              \"agg\" : \"sum\"\n            }\n          ],\n          \"timestamp\" : [\n            {\n              \"agg\" : \"date_histogram\",\n              \"time_zone\" : \"UTC\",\n              \"fixed_interval\" : \"1h\",\n              \"delay\": \"7d\"\n            }\n          ],\n          \"voltage\" : [\n            {\n              \"agg\" : \"avg\"\n            }\n          ]\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-index-caps.asciidoc",
      "line": 163
    },
    "digest": "642161d70dacf7d153767d37d3726838",
    "lang": "console",
    "found": [],
    "source": "GET /*_rollup/_rollup/data",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/*_rollup/_rollup/data",
        "query": null,
        "body": null,
        "params": {
          "index": "*_rollup"
        },
        "api": "rollup.get_rollup_index_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 71
    },
    "digest": "2d20c42e9664febeccaff61581605cbe",
    "lang": "console",
    "found": [],
    "source": "PUT _rollup/job/sensor\n{\n    \"index_pattern\": \"sensor-*\",\n    \"rollup_index\": \"sensor_rollup\",\n    \"cron\": \"*/30 * * * * ?\",\n    \"page_size\" :1000,\n    \"groups\" : {\n      \"date_histogram\": {\n        \"field\": \"timestamp\",\n        \"fixed_interval\": \"1h\",\n        \"delay\": \"7d\"\n      },\n      \"terms\": {\n        \"fields\": [\"node\"]\n      }\n    },\n    \"metrics\": [\n        {\n            \"field\": \"temperature\",\n            \"metrics\": [\"min\", \"max\", \"sum\"]\n        },\n        {\n            \"field\": \"voltage\",\n            \"metrics\": [\"avg\"]\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_rollup/job/sensor",
        "query": null,
        "body": {
          "index_pattern": "sensor-*",
          "rollup_index": "sensor_rollup",
          "cron": "*/30 * * * * ?",
          "page_size": 1000,
          "groups": {
            "date_histogram": {
              "field": "timestamp",
              "fixed_interval": "1h",
              "delay": "7d"
            },
            "terms": {
              "fields": [
                "node"
              ]
            }
          },
          "metrics": [
            {
              "field": "temperature",
              "metrics": [
                "min",
                "max",
                "sum"
              ]
            },
            {
              "field": "voltage",
              "metrics": [
                "avg"
              ]
            }
          ]
        },
        "params": {
          "id": "sensor"
        },
        "api": "rollup.put_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 108
    },
    "digest": "4e63a0fd56cc5d59595baa0b0721f971",
    "lang": "console",
    "found": [],
    "source": "GET /sensor_rollup/_rollup_search\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"max_temperature\": {\n            \"max\": {\n                \"field\": \"temperature\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "max_temperature": {
              "max": {
                "field": "temperature"
              }
            }
          }
        },
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 129
    },
    "digest": "82742a24e16fbaffa950867499a39b97",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 163
    },
    "digest": "3d1cea1ad861d1ee62e5f34b84371943",
    "lang": "console",
    "found": [],
    "source": "GET sensor_rollup/_rollup_search\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"avg_temperature\": {\n            \"avg\": {\n                \"field\": \"temperature\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "avg_temperature": {
              "avg": {
                "field": "temperature"
              }
            }
          }
        },
        "params": {
          "index": "sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 180
    },
    "digest": "b010489cc7d519a628dcbc1ce81adb3c",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"error\" : {\n        \"root_cause\" : [\n            {\n                \"type\" : \"illegal_argument_exception\",\n                \"reason\" : \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n                \"stack_trace\": ...\n            }\n        ],\n        \"type\" : \"illegal_argument_exception\",\n        \"reason\" : \"There is not a rollup job that has a [avg] agg with name [avg_temperature] which also satisfies all requirements of query.\",\n        \"stack_trace\": ...\n    },\n    \"status\": 400\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 206
    },
    "digest": "adcd760ef029f744ab59460818d2342e",
    "lang": "console",
    "found": [],
    "source": "GET sensor-1,sensor_rollup/_rollup_search <1>\n{\n    \"size\": 0,\n    \"aggregations\": {\n        \"max_temperature\": {\n            \"max\": {\n                \"field\": \"temperature\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/sensor-1,sensor_rollup/_rollup_search",
        "query": null,
        "body": {
          "size": 0,
          "aggregations": {
            "max_temperature": {
              "max": {
                "field": "temperature"
              }
            }
          }
        },
        "params": {
          "index": "sensor-1,sensor_rollup"
        },
        "api": "rollup.rollup_search"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/rollup-search.asciidoc",
      "line": 237
    },
    "digest": "82742a24e16fbaffa950867499a39b97",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 102,\n  \"timed_out\" : false,\n  \"terminated_early\" : false,\n  \"_shards\" : ... ,\n  \"hits\" : {\n    \"total\" : {\n        \"value\": 0,\n        \"relation\": \"eq\"\n    },\n    \"max_score\" : 0.0,\n    \"hits\" : [ ]\n  },\n  \"aggregations\" : {\n    \"max_temperature\" : {\n      \"value\" : 202.0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/start-job.asciidoc",
      "line": 51
    },
    "digest": "618c9d42284c067891fb57034a4fd834",
    "lang": "console",
    "found": [],
    "source": "POST _rollup/job/sensor/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_rollup/job/sensor/_start",
        "query": null,
        "body": null,
        "params": {
          "id": "sensor"
        },
        "api": "rollup.start_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "rollup/apis/start-job.asciidoc",
      "line": 59
    },
    "digest": "1851f163178ac4046c8fc88b0293644f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"started\": true\n}"
  },
  {
    "source_location": {
      "file": "rollup/apis/stop-job.asciidoc",
      "line": 76
    },
    "digest": "07a5fdeb7805cec1d28ba288b28f5ff5",
    "lang": "console",
    "found": [],
    "source": "POST _rollup/job/sensor/_stop?wait_for_completion=true&timeout=10s",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_rollup/job/sensor/_stop",
        "query": {
          "wait_for_completion": "true",
          "timeout": "10s"
        },
        "body": null,
        "params": {
          "id": "sensor"
        },
        "api": "rollup.stop_job"
      }
    ]
  },
  {
    "source_location": {
      "file": "search.asciidoc",
      "line": 18
    },
    "digest": "5d32279dcd52b22d9e1178a02a3ad957",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST /twitter/_doc?routing=kimchy\n{\n    \"user\" : \"kimchy\",\n    \"post_date\" : \"2009-11-15T14:12:12\",\n    \"message\" : \"trying out Elasticsearch\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_doc",
        "query": {
          "routing": "kimchy"
        },
        "body": {
          "user": "kimchy",
          "post_date": "2009-11-15T14:12:12",
          "message": "trying out Elasticsearch"
        },
        "params": {
          "index": "twitter"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search.asciidoc",
      "line": 32
    },
    "digest": "8acc1d67b152e7027e0f0e1a8b4b2431",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST /twitter/_search?routing=kimchy\n{\n    \"query\": {\n        \"bool\" : {\n            \"must\" : {\n                \"query_string\" : {\n                    \"query\" : \"some query string here\"\n                }\n            },\n            \"filter\" : {\n                \"term\" : { \"user\" : \"kimchy\" }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "routing": "kimchy"
        },
        "body": {
          "query": {
            "bool": {
              "must": {
                "query_string": {
                  "query": "some query string here"
                }
              },
              "filter": {
                "term": {
                  "user": "kimchy"
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search.asciidoc",
      "line": 72
    },
    "digest": "014b788c879e4aaa1020672e45e25473",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "PUT /_cluster/settings\n{\n    \"transient\": {\n        \"cluster.routing.use_adaptive_replica_selection\": false\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_cluster/settings",
        "query": null,
        "body": {
          "transient": {
            "cluster.routing.use_adaptive_replica_selection": false
          }
        },
        "params": null,
        "api": "cluster.put_settings"
      }
    ]
  },
  {
    "source_location": {
      "file": "search.asciidoc",
      "line": 96
    },
    "digest": "189a921df2f5b1fe580937210ce9c1c2",
    "lang": "console",
    "found": [
      "csharp"
    ],
    "source": "POST /_search\n{\n    \"query\" : {\n        \"match_all\" : {}\n    },\n    \"stats\" : [\"group1\", \"group2\"]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "stats": [
            "group1",
            "group2"
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 7
    },
    "digest": "9bdd3c0d47e60c8cfafc8109f9369922",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /twitter/_search?q=tag:wow",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "q": "tag:wow"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 346
    },
    "digest": "be49260e1b3496c4feac38c56ebb0669",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /twitter/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 354
    },
    "digest": "47a23d3d61f1a76fc1695411d6375a5b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\" : 5,\n  \"timed_out\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\" : {\n    \"total\" : {\n      \"value\" : 1,\n      \"relation\" : \"eq\"\n    },\n    \"max_score\" : 1.3862942,\n    \"hits\" : [\n      {\n        \"_index\" : \"twitter\",\n        \"_id\" : \"0\",\n        \"_score\" : 1.3862942,\n        \"_source\" : {\n          \"date\" : \"2009-11-15T14:12:12\",\n          \"likes\" : 0,\n          \"message\" : \"trying out Elasticsearch\",\n          \"user\" : \"kimchy\"\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 392
    },
    "digest": "f5569945024b9d664828693705c27c1a",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /kimchy,elasticsearch/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/kimchy,elasticsearch/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "kimchy,elasticsearch"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 404
    },
    "digest": "168bfdde773570cfc6dd3ab3574e413b",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 413
    },
    "digest": "8022e6a690344035b6472a43a9d122e0",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_all/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_all/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "_all"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search.asciidoc",
      "line": 419
    },
    "digest": "43682666e1abcb14770c99f02eb26a0d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /*/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/*/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "*"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/async-search.asciidoc",
      "line": 17
    },
    "digest": "e50f9492af9e0174c7ecbe5ad7f09d74",
    "lang": "console",
    "found": [],
    "source": "POST /sales*/_async_search?size=0\n{\n    \"sort\" : [\n      { \"date\" : {\"order\" : \"asc\"} }\n    ],\n    \"aggs\" : {\n        \"sale_date\" : {\n             \"date_histogram\" : {\n                 \"field\" : \"date\",\n                 \"calendar_interval\": \"1d\"\n             }\n         }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/sales*/_async_search",
        "query": {
          "size": "0"
        },
        "body": {
          "sort": [
            {
              "date": {
                "order": "asc"
              }
            }
          ],
          "aggs": {
            "sale_date": {
              "date_histogram": {
                "field": "date",
                "calendar_interval": "1d"
              }
            }
          }
        },
        "params": {
          "index": "sales*"
        },
        "api": "async_search.submit"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/async-search.asciidoc",
      "line": 42
    },
    "digest": "3849c2b7e9d0242f272293aa42010b34",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\", <1>\n  \"is_partial\" : true, <2>\n  \"is_running\" : true, <3>\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986,\n  \"response\" : {\n    \"took\" : 1122,\n    \"timed_out\" : false,\n    \"num_reduce_phases\" : 0,\n    \"_shards\" : {\n      \"total\" : 562, <4>\n      \"successful\" : 3, <5>\n      \"skipped\" : 0,\n      \"failed\" : 0\n    },\n    \"hits\" : {\n      \"total\" : {\n        \"value\" : 157483, <6>\n        \"relation\" : \"gte\"\n      },\n      \"max_score\" : null,\n      \"hits\" : [ ]\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/async-search.asciidoc",
      "line": 133
    },
    "digest": "14b81f96297952970b78a3216e059596",
    "lang": "console",
    "found": [],
    "source": "GET /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=",
        "query": null,
        "body": null,
        "params": {
          "id": "FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc="
        },
        "api": "async_search.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/async-search.asciidoc",
      "line": 139
    },
    "digest": "0f1fcb83af235bb9409e34d19deb637b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\" : \"FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=\",\n  \"is_partial\" : true, <1>\n  \"is_running\" : true, <2>\n  \"start_time_in_millis\" : 1583945890986,\n  \"expiration_time_in_millis\" : 1584377890986, <3>\n  \"response\" : {\n    \"took\" : 12144,\n    \"timed_out\" : false,\n    \"num_reduce_phases\" : 46, <4>\n    \"_shards\" : {\n      \"total\" : 562, <5>\n      \"successful\" : 188,\n      \"skipped\" : 0,\n      \"failed\" : 0\n    },\n    \"hits\" : {\n      \"total\" : {\n        \"value\" : 456433,\n        \"relation\" : \"eq\"\n      },\n      \"max_score\" : null,\n      \"hits\" : [ ]\n    },\n    \"aggregations\" : { <6>\n      \"sale_date\" :  {\n        \"buckets\" : []\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/async-search.asciidoc",
      "line": 218
    },
    "digest": "7a3a7fbd81e5050b42e8c1eca26c7c1d",
    "lang": "console",
    "found": [],
    "source": "DELETE /_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_async_search/FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc=",
        "query": null,
        "body": null,
        "params": {
          "id": "FmRldE8zREVEUzA2ZVpUeGs2ejJFUFEaMkZ5QTVrSTZSaVN3WlNFVmtlWHJsdzoxMDc="
        },
        "api": "async_search.delete"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/uri-request.asciidoc",
      "line": 7
    },
    "digest": "68188db64fc50a9b35e5646493b00d2c",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/uri-request.asciidoc",
      "line": 113
    },
    "digest": "68188db64fc50a9b35e5646493b00d2c",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/uri-request.asciidoc",
      "line": 122
    },
    "digest": "a2655597bf8ab8acac2c5ed715316433",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"timed_out\": false,\n    \"took\": 62,\n    \"_shards\":{\n        \"total\" : 1,\n        \"successful\" : 1,\n        \"skipped\" : 0,\n        \"failed\" : 0\n    },\n    \"hits\":{\n        \"total\" : {\n            \"value\": 1,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.3862942,\n        \"hits\" : [\n            {\n                \"_index\" : \"twitter\",\n                \"_id\" : \"0\",\n                \"_score\": 1.3862942,\n                \"_source\" : {\n                    \"user\" : \"kimchy\",\n                    \"date\" : \"2009-11-15T14:12:12\",\n                    \"message\" : \"trying out Elasticsearch\",\n                    \"likes\": 0\n                }\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request-body.asciidoc",
      "line": 7
    },
    "digest": "0ce3606f1dba490eef83c4317b315b62",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /twitter/_search\n{\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request-body.asciidoc",
      "line": 92
    },
    "digest": "0ce3606f1dba490eef83c4317b315b62",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /twitter/_search\n{\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request-body.asciidoc",
      "line": 106
    },
    "digest": "9eda8df365d4c2e32e22d453e5f8a05a",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"took\": 1,\n    \"timed_out\": false,\n    \"_shards\":{\n        \"total\" : 1,\n        \"successful\" : 1,\n        \"skipped\" : 0,\n        \"failed\" : 0\n    },\n    \"hits\":{\n        \"total\" : {\n            \"value\": 1,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.3862942,\n        \"hits\" : [\n            {\n                \"_index\" : \"twitter\",\n                \"_id\" : \"0\",\n                \"_score\": 1.3862942,\n                \"_source\" : {\n                    \"user\" : \"kimchy\",\n                    \"message\": \"trying out Elasticsearch\",\n                    \"date\" : \"2009-11-15T14:12:12\",\n                    \"likes\" : 0\n                }\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request-body.asciidoc",
      "line": 156
    },
    "digest": "bfcd65ab85d684d36a8550080032958d",
    "lang": "console",
    "found": [
      "php",
      "csharp",
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search?q=message:number&size=0&terminate_after=1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "q": "message:number",
          "size": "0",
          "terminate_after": "1"
        },
        "body": null,
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request-body.asciidoc",
      "line": 170
    },
    "digest": "31fa804420aad7728f9ba9f20dc1a9c5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"took\": 3,\n  \"timed_out\": false,\n  \"terminated_early\": true,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"skipped\" : 0,\n    \"failed\": 0\n  },\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": null,\n    \"hits\": []\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/request/docvalue-fields.asciidoc",
      "line": 8
    },
    "digest": "097a6bc1d76c3fc92fb299001d27896e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match_all\": {}\n    },\n    \"docvalue_fields\" : [\n        \"my_ip_field\", <1>\n        {\n            \"field\": \"my_keyword_field\" <2>\n        },\n        {\n            \"field\": \"my_date_field\",\n            \"format\": \"epoch_millis\" <3>\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "docvalue_fields": [
            "my_ip_field",
            {
              "field": "my_keyword_field"
            },
            {
              "field": "my_date_field",
              "format": "epoch_millis"
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/docvalue-fields.asciidoc",
      "line": 36
    },
    "digest": "1518ad2c540fd55f9df84bbe75c81606",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match_all\": {}\n    },\n    \"docvalue_fields\" : [\n        {\n            \"field\": \"*_date_field\", <1>\n            \"format\": \"epoch_millis\" <2>\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "docvalue_fields": [
            {
              "field": "*_date_field",
              "format": "epoch_millis"
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/explain.asciidoc",
      "line": 7
    },
    "digest": "e405e90fe3207157d3c0f9c76c6778e8",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"explain\": true,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "explain": true,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/collapse.asciidoc",
      "line": 9
    },
    "digest": "032f67ced3e7d106f8722432ebbd94d3",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"elasticsearch\"\n        }\n    },\n    \"collapse\" : {\n        \"field\" : \"user\" <1>\n    },\n    \"sort\": [\"likes\"], <2>\n    \"from\": 10 <3>\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "elasticsearch"
            }
          },
          "collapse": {
            "field": "user"
          },
          "sort": [
            "likes"
          ],
          "from": 10
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/collapse.asciidoc",
      "line": 43
    },
    "digest": "63d36a10d9475be2e2fa73d2415e20e6",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"elasticsearch\"\n        }\n    },\n    \"collapse\" : {\n        \"field\" : \"user\", <1>\n        \"inner_hits\": {\n            \"name\": \"last_tweets\", <2>\n            \"size\": 5, <3>\n            \"sort\": [{ \"date\": \"asc\" }] <4>\n        },\n        \"max_concurrent_group_searches\": 4 <5>\n    },\n    \"sort\": [\"likes\"]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "elasticsearch"
            }
          },
          "collapse": {
            "field": "user",
            "inner_hits": {
              "name": "last_tweets",
              "size": 5,
              "sort": [
                {
                  "date": "asc"
                }
              ]
            },
            "max_concurrent_group_searches": 4
          },
          "sort": [
            "likes"
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/collapse.asciidoc",
      "line": 77
    },
    "digest": "4f20ca49fbaac83620d4cb23fd355f3b",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"elasticsearch\"\n        }\n    },\n    \"collapse\" : {\n        \"field\" : \"user\", <1>\n        \"inner_hits\": [\n            {\n                \"name\": \"most_liked\",  <2>\n                \"size\": 3,\n                \"sort\": [\"likes\"]\n            },\n            {\n                \"name\": \"most_recent\", <3>\n                \"size\": 3,\n                \"sort\": [{ \"date\": \"asc\" }]\n            }\n        ]\n    },\n    \"sort\": [\"likes\"]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "elasticsearch"
            }
          },
          "collapse": {
            "field": "user",
            "inner_hits": [
              {
                "name": "most_liked",
                "size": 3,
                "sort": [
                  "likes"
                ]
              },
              {
                "name": "most_recent",
                "size": 3,
                "sort": [
                  {
                    "date": "asc"
                  }
                ]
              }
            ]
          },
          "sort": [
            "likes"
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/from-size.asciidoc",
      "line": 14
    },
    "digest": "9a26759ccbd338224ecaacf7c49ab08e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"from\" : 0, \"size\" : 10,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "from": 0,
          "size": 10,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 24
    },
    "digest": "05e1088d2c04391203cc8eb3ab287b71",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"content\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"content\" : {}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "content": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "content": {}
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 279
    },
    "digest": "3cc4e8b1e2aecac644ba52d34ca29422",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"number_of_fragments\" : 3,\n        \"fragment_size\" : 150,\n        \"fields\" : {\n            \"body\" : { \"pre_tags\" : [\"<em>\"], \"post_tags\" : [\"</em>\"] },\n            \"blog.title\" : { \"number_of_fragments\" : 0 },\n            \"blog.author\" : { \"number_of_fragments\" : 0 },\n            \"blog.comment\" : { \"number_of_fragments\" : 5, \"order\" : \"score\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "number_of_fragments": 3,
            "fragment_size": 150,
            "fields": {
              "body": {
                "pre_tags": [
                  "<em>"
                ],
                "post_tags": [
                  "</em>"
                ]
              },
              "blog.title": {
                "number_of_fragments": 0
              },
              "blog.author": {
                "number_of_fragments": 0
              },
              "blog.comment": {
                "number_of_fragments": 5,
                "order": "score"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 309
    },
    "digest": "129cddb56fafef5cc454917a374eae1a",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"stored_fields\": [ \"_id\" ],\n    \"query\" : {\n        \"match\": {\n            \"comment\": {\n                \"query\": \"foo bar\"\n            }\n        }\n    },\n    \"rescore\": {\n        \"window_size\": 50,\n        \"query\": {\n            \"rescore_query\" : {\n                \"match_phrase\": {\n                    \"comment\": {\n                        \"query\": \"foo bar\",\n                        \"slop\": 1\n                    }\n                }\n            },\n            \"rescore_query_weight\" : 10\n        }\n    },\n    \"highlight\" : {\n        \"order\" : \"score\",\n        \"fields\" : {\n            \"comment\" : {\n                \"fragment_size\" : 150,\n                \"number_of_fragments\" : 3,\n                \"highlight_query\": {\n                    \"bool\": {\n                        \"must\": {\n                            \"match\": {\n                                \"comment\": {\n                                    \"query\": \"foo bar\"\n                                }\n                            }\n                        },\n                        \"should\": {\n                            \"match_phrase\": {\n                                \"comment\": {\n                                    \"query\": \"foo bar\",\n                                    \"slop\": 1,\n                                    \"boost\": 10.0\n                                }\n                            }\n                        },\n                        \"minimum_should_match\": 0\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "stored_fields": [
            "_id"
          ],
          "query": {
            "match": {
              "comment": {
                "query": "foo bar"
              }
            }
          },
          "rescore": {
            "window_size": 50,
            "query": {
              "rescore_query": {
                "match_phrase": {
                  "comment": {
                    "query": "foo bar",
                    "slop": 1
                  }
                }
              },
              "rescore_query_weight": 10
            }
          },
          "highlight": {
            "order": "score",
            "fields": {
              "comment": {
                "fragment_size": 150,
                "number_of_fragments": 3,
                "highlight_query": {
                  "bool": {
                    "must": {
                      "match": {
                        "comment": {
                          "query": "foo bar"
                        }
                      }
                    },
                    "should": {
                      "match_phrase": {
                        "comment": {
                          "query": "foo bar",
                          "slop": 1,
                          "boost": 10
                        }
                      }
                    },
                    "minimum_should_match": 0
                  }
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 377
    },
    "digest": "9e502038aa4ebb9cb4df230c0c4a854e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"comment\" : {\"type\" : \"plain\"}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "comment": {
                "type": "plain"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 401
    },
    "digest": "ee079a3f9eb529aac33f09be16747aa9",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"pre_tags\" : [\"<tag1>\"],\n        \"post_tags\" : [\"</tag1>\"],\n        \"fields\" : {\n            \"body\" : {}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "pre_tags": [
              "<tag1>"
            ],
            "post_tags": [
              "</tag1>"
            ],
            "fields": {
              "body": {}
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 422
    },
    "digest": "a225bb439c204b20ed52a28e1dcd663b",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"pre_tags\" : [\"<tag1>\", \"<tag2>\"],\n        \"post_tags\" : [\"</tag1>\", \"</tag2>\"],\n        \"fields\" : {\n            \"body\" : {}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "pre_tags": [
              "<tag1>",
              "<tag2>"
            ],
            "post_tags": [
              "</tag1>",
              "</tag2>"
            ],
            "fields": {
              "body": {}
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 442
    },
    "digest": "05ce63b83a89fddb63fd60c923811582",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"tags_schema\" : \"styled\",\n        \"fields\" : {\n            \"comment\" : {}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "tags_schema": "styled",
            "fields": {
              "comment": {}
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 466
    },
    "digest": "87b697eb7340e9e52ca790922eca0066",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"comment\" : {\"force_source\" : true}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "comment": {
                "force_source": true
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 490
    },
    "digest": "1e8b687c757981af3a9f005cfd2b4946",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"require_field_match\": false,\n        \"fields\": {\n                \"body\" : { \"pre_tags\" : [\"<em>\"], \"post_tags\" : [\"</em>\"] }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "require_field_match": false,
            "fields": {
              "body": {
                "pre_tags": [
                  "<em>"
                ],
                "post_tags": [
                  "</em>"
                ]
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 523
    },
    "digest": "a182c91923ad1e47cf502ea890c53015",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"comment.plain:running scissors\",\n            \"fields\": [\"comment\"]\n        }\n    },\n    \"highlight\": {\n        \"order\": \"score\",\n        \"fields\": {\n            \"comment\": {\n                \"matched_fields\": [\"comment\", \"comment.plain\"],\n                \"type\" : \"fvh\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "comment.plain:running scissors",
              "fields": [
                "comment"
              ]
            }
          },
          "highlight": {
            "order": "score",
            "fields": {
              "comment": {
                "matched_fields": [
                  "comment",
                  "comment.plain"
                ],
                "type": "fvh"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 552
    },
    "digest": "974bb1452f614f9a378a695fa9addd4e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"running scissors\",\n            \"fields\": [\"comment\", \"comment.plain^10\"]\n        }\n    },\n    \"highlight\": {\n        \"order\": \"score\",\n        \"fields\": {\n            \"comment\": {\n                \"matched_fields\": [\"comment\", \"comment.plain\"],\n                \"type\" : \"fvh\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "running scissors",
              "fields": [
                "comment",
                "comment.plain^10"
              ]
            }
          },
          "highlight": {
            "order": "score",
            "fields": {
              "comment": {
                "matched_fields": [
                  "comment",
                  "comment.plain"
                ],
                "type": "fvh"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 579
    },
    "digest": "4971d093f19f85e3c622f1e0257ff60f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"query_string\": {\n            \"query\": \"running scissors\",\n            \"fields\": [\"comment\", \"comment.plain^10\"]\n        }\n    },\n    \"highlight\": {\n        \"order\": \"score\",\n        \"fields\": {\n            \"comment\": {\n                \"matched_fields\": [\"comment.plain\"],\n                \"type\" : \"fvh\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "running scissors",
              "fields": [
                "comment",
                "comment.plain^10"
              ]
            }
          },
          "highlight": {
            "order": "score",
            "fields": {
              "comment": {
                "matched_fields": [
                  "comment.plain"
                ],
                "type": "fvh"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 648
    },
    "digest": "2859fb1a8139777dca087862a5b1c205",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"highlight\": {\n        \"fields\": [\n            { \"title\": {} },\n            { \"text\": {} }\n        ]\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "highlight": {
            "fields": [
              {
                "title": {}
              },
              {
                "text": {}
              }
            ]
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 677
    },
    "digest": "e8446172481fb6298c04b4bdc3340f3f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"comment\" : {\"fragment_size\" : 150, \"number_of_fragments\" : 3}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "comment": {
                "fragment_size": 150,
                "number_of_fragments": 3
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 696
    },
    "digest": "4ae1e4f88af2f9be50696e5a59466bb6",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"order\" : \"score\",\n        \"fields\" : {\n            \"comment\" : {\"fragment_size\" : 150, \"number_of_fragments\" : 3}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "order": "score",
            "fields": {
              "comment": {
                "fragment_size": 150,
                "number_of_fragments": 3
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 719
    },
    "digest": "62b15eac8c6d294da9114541fdfc527f",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"body\" : {},\n            \"blog.title\" : {\"number_of_fragments\" : 0}\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "body": {},
              "blog.title": {
                "number_of_fragments": 0
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 745
    },
    "digest": "3d10eba5cac0069486bc3c2854d15689",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match\": { \"user\": \"kimchy\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"comment\" : {\n                \"fragment_size\" : 150,\n                \"number_of_fragments\" : 3,\n                \"no_match_size\": 150\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "user": "kimchy"
            }
          },
          "highlight": {
            "fields": {
              "comment": {
                "fragment_size": 150,
                "number_of_fragments": 3,
                "no_match_size": 150
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 772
    },
    "digest": "5ea9da129ca70a5fe534f27a82d80b29",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"comment\" : {\n        \"type\": \"text\",\n        \"index_options\" : \"offsets\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "comment": {
                "type": "text",
                "index_options": "offsets"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 790
    },
    "digest": "17a1e308761afd3282f13d44d7be008a",
    "lang": "console",
    "found": [],
    "source": "PUT /example\n{\n  \"mappings\": {\n    \"properties\": {\n      \"comment\" : {\n        \"type\": \"text\",\n        \"term_vector\" : \"with_positions_offsets\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/example",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "comment": {
                "type": "text",
                "term_vector": "with_positions_offsets"
              }
            }
          }
        },
        "params": {
          "index": "example"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 812
    },
    "digest": "146bfeeaa2ac4fc1352bf8d41097baa0",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"query\" : {\n        \"match_phrase\": { \"message\": \"number 1\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"message\" : {\n                \"type\": \"plain\",\n                \"fragment_size\" : 15,\n                \"number_of_fragments\" : 3,\n                \"fragmenter\": \"simple\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "message": "number 1"
            }
          },
          "highlight": {
            "fields": {
              "message": {
                "type": "plain",
                "fragment_size": 15,
                "number_of_fragments": 3,
                "fragmenter": "simple"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 835
    },
    "digest": "37d38d963a009dc9a40d2deb7cac58d5",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"hits\": {\n        \"total\" : {\n            \"value\": 1,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.6011951,\n        \"hits\": [\n            {\n                \"_index\": \"twitter\",\n                \"_id\": \"1\",\n                \"_score\": 1.6011951,\n                \"_source\": {\n                    \"user\": \"test\",\n                    \"message\": \"some message with the number 1\",\n                    \"date\": \"2009-11-15T14:12:12\",\n                    \"likes\": 1\n                },\n                \"highlight\": {\n                    \"message\": [\n                        \" with the <em>number</em>\",\n                        \" <em>1</em>\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 869
    },
    "digest": "bc9bd39420f810edae72b9fb33a154fd",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"query\" : {\n        \"match_phrase\": { \"message\": \"number 1\" }\n    },\n    \"highlight\" : {\n        \"fields\" : {\n            \"message\" : {\n                \"type\": \"plain\",\n                \"fragment_size\" : 15,\n                \"number_of_fragments\" : 3,\n                \"fragmenter\": \"span\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match_phrase": {
              "message": "number 1"
            }
          },
          "highlight": {
            "fields": {
              "message": {
                "type": "plain",
                "fragment_size": 15,
                "number_of_fragments": 3,
                "fragmenter": "span"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/highlighting.asciidoc",
      "line": 892
    },
    "digest": "b21b88a3a25231b37aca12d2e84ab698",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...\n    \"hits\": {\n        \"total\" : {\n            \"value\": 1,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.6011951,\n        \"hits\": [\n            {\n                \"_index\": \"twitter\",\n                \"_id\": \"1\",\n                \"_score\": 1.6011951,\n                \"_source\": {\n                    \"user\": \"test\",\n                    \"message\": \"some message with the number 1\",\n                    \"date\": \"2009-11-15T14:12:12\",\n                    \"likes\": 1\n                },\n                \"highlight\": {\n                    \"message\": [\n                        \" with the <em>number</em> <em>1</em>\"\n                    ]\n                }\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/index-boost.asciidoc",
      "line": 11
    },
    "digest": "69dce2801f824f61e4f3ea9ee9371e31",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"indices_boost\" : [\n        { \"index1\" : 1.4 },\n        { \"index2\" : 1.3 }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "indices_boost": [
            {
              "index1": 1.4
            },
            {
              "index2": 1.3
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/index-boost.asciidoc",
      "line": 25
    },
    "digest": "fb8a4322825d26c4e7b41bd763b3d392",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"indices_boost\" : [\n        { \"alias1\" : 1.4 },\n        { \"index*\" : 1.3 }\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "indices_boost": [
            {
              "alias1": 1.4
            },
            {
              "index*": 1.3
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 86
    },
    "digest": "2a91e1fb8ad93a188fa9d77ec01bc431",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"comments\": {\n        \"type\": \"nested\"\n      }\n    }\n  }\n}\n\nPUT test/_doc/1?refresh\n{\n  \"title\": \"Test title\",\n  \"comments\": [\n    {\n      \"author\": \"kimchy\",\n      \"number\": 1\n    },\n    {\n      \"author\": \"nik9000\",\n      \"number\": 2\n    }\n  ]\n}\n\nPOST test/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"comments\",\n      \"query\": {\n        \"match\": {\"comments.number\" : 2}\n      },\n      \"inner_hits\": {} <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "comments": {
                "type": "nested"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Test title",
          "comments": [
            {
              "author": "kimchy",
              "number": 1
            },
            {
              "author": "nik9000",
              "number": 2
            }
          ]
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "comments",
              "query": {
                "match": {
                  "comments.number": 2
                }
              },
              "inner_hits": {}
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 132
    },
    "digest": "cb58a734d14c0a1e2743f7449d42e9c9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...,\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 1.0,\n    \"hits\": [\n      {\n        \"_index\": \"test\",\n        \"_id\": \"1\",\n        \"_score\": 1.0,\n        \"_source\": ...,\n        \"inner_hits\": {\n          \"comments\": { <1>\n            \"hits\": {\n              \"total\" : {\n                  \"value\": 1,\n                  \"relation\": \"eq\"\n              },\n              \"max_score\": 1.0,\n              \"hits\": [\n                {\n                  \"_index\": \"test\",\n                  \"_id\": \"1\",\n                  \"_nested\": {\n                    \"field\": \"comments\",\n                    \"offset\": 1\n                  },\n                  \"_score\": 1.0,\n                  \"_source\": {\n                    \"author\": \"nik9000\",\n                    \"number\": 2\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 207
    },
    "digest": "983fbb78e57e8fe98db38cf2d217e943",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"comments\": {\n        \"type\": \"nested\"\n      }\n    }\n  }\n}\n\nPUT test/_doc/1?refresh\n{\n  \"title\": \"Test title\",\n  \"comments\": [\n    {\n      \"author\": \"kimchy\",\n      \"text\": \"comment text\"\n    },\n    {\n      \"author\": \"nik9000\",\n      \"text\": \"words words words\"\n    }\n  ]\n}\n\nPOST test/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"comments\",\n      \"query\": {\n        \"match\": {\"comments.text\" : \"words\"}\n      },\n      \"inner_hits\": {\n        \"_source\" : false,\n        \"docvalue_fields\" : [\n          \"comments.text.keyword\"\n        ]\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "comments": {
                "type": "nested"
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Test title",
          "comments": [
            {
              "author": "kimchy",
              "text": "comment text"
            },
            {
              "author": "nik9000",
              "text": "words words words"
            }
          ]
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "comments",
              "query": {
                "match": {
                  "comments.text": "words"
                }
              },
              "inner_hits": {
                "_source": false,
                "docvalue_fields": [
                  "comments.text.keyword"
                ]
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 318
    },
    "digest": "79feb4a0c0a21b7015a52f9736cd4683",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"comments\": {\n        \"type\": \"nested\",\n        \"properties\": {\n          \"votes\": {\n            \"type\": \"nested\"\n          }\n        }\n      }\n    }\n  }\n}\n\nPUT test/_doc/1?refresh\n{\n  \"title\": \"Test title\",\n  \"comments\": [\n    {\n      \"author\": \"kimchy\",\n      \"text\": \"comment text\",\n      \"votes\": []\n    },\n    {\n      \"author\": \"nik9000\",\n      \"text\": \"words words words\",\n      \"votes\": [\n        {\"value\": 1 , \"voter\": \"kimchy\"},\n        {\"value\": -1, \"voter\": \"other\"}\n      ]\n    }\n  ]\n}\n\nPOST test/_search\n{\n  \"query\": {\n    \"nested\": {\n      \"path\": \"comments.votes\",\n        \"query\": {\n          \"match\": {\n            \"comments.votes.voter\": \"kimchy\"\n          }\n        },\n        \"inner_hits\" : {}\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "comments": {
                "type": "nested",
                "properties": {
                  "votes": {
                    "type": "nested"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "title": "Test title",
          "comments": [
            {
              "author": "kimchy",
              "text": "comment text",
              "votes": []
            },
            {
              "author": "nik9000",
              "text": "words words words",
              "votes": [
                {
                  "value": 1,
                  "voter": "kimchy"
                },
                {
                  "value": -1,
                  "voter": "other"
                }
              ]
            }
          ]
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "comments.votes",
              "query": {
                "match": {
                  "comments.votes.voter": "kimchy"
                }
              },
              "inner_hits": {}
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 374
    },
    "digest": "bb924187bb9a4f4f07e55042f1f4b639",
    "lang": "console-result",
    "found": [],
    "source": "{\n  ...,\n  \"hits\": {\n    \"total\" : {\n        \"value\": 1,\n        \"relation\": \"eq\"\n    },\n    \"max_score\": 0.6931471,\n    \"hits\": [\n      {\n        \"_index\": \"test\",\n        \"_id\": \"1\",\n        \"_score\": 0.6931471,\n        \"_source\": ...,\n        \"inner_hits\": {\n          \"comments.votes\": { <1>\n            \"hits\": {\n              \"total\" : {\n                  \"value\": 1,\n                  \"relation\": \"eq\"\n              },\n              \"max_score\": 0.6931471,\n              \"hits\": [\n                {\n                  \"_index\": \"test\",\n                  \"_id\": \"1\",\n                  \"_nested\": {\n                    \"field\": \"comments\",\n                    \"offset\": 1,\n                    \"_nested\": {\n                      \"field\": \"votes\",\n                      \"offset\": 0\n                    }\n                  },\n                  \"_score\": 0.6931471,\n                  \"_source\": {\n                    \"value\": 1,\n                    \"voter\": \"kimchy\"\n                  }\n                }\n              ]\n            }\n          }\n        }\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 435
    },
    "digest": "3f5b5bee692e7d4b0992dc0a64e95a60",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n  \"mappings\": {\n    \"properties\": {\n      \"my_join_field\": {\n        \"type\": \"join\",\n        \"relations\": {\n          \"my_parent\": \"my_child\"\n        }\n      }\n    }\n  }\n}\n\nPUT test/_doc/1?refresh\n{\n  \"number\": 1,\n  \"my_join_field\": \"my_parent\"\n}\n\nPUT test/_doc/2?routing=1&refresh\n{\n  \"number\": 1,\n  \"my_join_field\": {\n    \"name\": \"my_child\",\n    \"parent\": \"1\"\n  }\n}\n\nPOST test/_search\n{\n  \"query\": {\n    \"has_child\": {\n      \"type\": \"my_child\",\n      \"query\": {\n        \"match\": {\n          \"number\": 1\n        }\n      },\n      \"inner_hits\": {}    <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "my_join_field": {
                "type": "join",
                "relations": {
                  "my_parent": "my_child"
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "number": 1,
          "my_join_field": "my_parent"
        },
        "params": {
          "index": "test",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "PUT",
        "url": "/test/_doc/2",
        "query": {
          "routing": "1",
          "refresh": true
        },
        "body": {
          "number": 1,
          "my_join_field": {
            "name": "my_child",
            "parent": "1"
          }
        },
        "params": {
          "index": "test",
          "id": "2"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "query": {
            "has_child": {
              "type": "my_child",
              "query": {
                "match": {
                  "number": 1
                }
              },
              "inner_hits": {}
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/inner-hits.asciidoc",
      "line": 486
    },
    "digest": "fb62e4e434f60048bdc77373e674834a",
    "lang": "console-result",
    "found": [],
    "source": "{\n    ...,\n    \"hits\": {\n        \"total\" : {\n            \"value\": 1,\n            \"relation\": \"eq\"\n        },\n        \"max_score\": 1.0,\n        \"hits\": [\n            {\n                \"_index\": \"test\",\n                \"_id\": \"1\",\n                \"_score\": 1.0,\n                \"_source\": {\n                    \"number\": 1,\n                    \"my_join_field\": \"my_parent\"\n                },\n                \"inner_hits\": {\n                    \"my_child\": {\n                        \"hits\": {\n                            \"total\" : {\n                                \"value\": 1,\n                                \"relation\": \"eq\"\n                            },\n                            \"max_score\": 1.0,\n                            \"hits\": [\n                                {\n                                    \"_index\": \"test\",\n                                    \"_id\": \"2\",\n                                    \"_score\": 1.0,\n                                    \"_routing\": \"1\",\n                                    \"_source\": {\n                                        \"number\": 1,\n                                        \"my_join_field\": {\n                                            \"name\": \"my_child\",\n                                            \"parent\": \"1\"\n                                        }\n                                    }\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/min-score.asciidoc",
      "line": 8
    },
    "digest": "8e8ceac8fc99348f885f85ff714557fd",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"min_score\": 0.5,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "min_score": 0.5,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/named-queries-and-filters.asciidoc",
      "line": 7
    },
    "digest": "0aad4321e968effc6e6ef2b98c6c71a5",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\": {\n        \"bool\" : {\n            \"should\" : [\n                {\"match\" : { \"name.first\" : {\"query\" : \"shay\", \"_name\" : \"first\"} }},\n                {\"match\" : { \"name.last\" : {\"query\" : \"banon\", \"_name\" : \"last\"} }}\n            ],\n            \"filter\" : {\n                \"terms\" : {\n                    \"name.last\" : [\"banon\", \"kimchy\"],\n                    \"_name\" : \"test\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "should": [
                {
                  "match": {
                    "name.first": {
                      "query": "shay",
                      "_name": "first"
                    }
                  }
                },
                {
                  "match": {
                    "name.last": {
                      "query": "banon",
                      "_name": "last"
                    }
                  }
                }
              ],
              "filter": {
                "terms": {
                  "name.last": [
                    "banon",
                    "kimchy"
                  ],
                  "_name": "test"
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/post-filter.asciidoc",
      "line": 11
    },
    "digest": "35390274db3acad03eb77b2376c57e40",
    "lang": "console",
    "found": [],
    "source": "PUT /shirts\n{\n    \"mappings\": {\n        \"properties\": {\n            \"brand\": { \"type\": \"keyword\"},\n            \"color\": { \"type\": \"keyword\"},\n            \"model\": { \"type\": \"keyword\"}\n        }\n    }\n}\n\nPUT /shirts/_doc/1?refresh\n{\n    \"brand\": \"gucci\",\n    \"color\": \"red\",\n    \"model\": \"slim\"\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/shirts",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "brand": {
                "type": "keyword"
              },
              "color": {
                "type": "keyword"
              },
              "model": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "shirts"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/shirts/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "brand": "gucci",
          "color": "red",
          "model": "slim"
        },
        "params": {
          "index": "shirts",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/post-filter.asciidoc",
      "line": 40
    },
    "digest": "f83eb6605c7c56e297a494b318400ef0",
    "lang": "console",
    "found": [],
    "source": "GET /shirts/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        { \"term\": { \"color\": \"red\"   }},\n        { \"term\": { \"brand\": \"gucci\" }}\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/shirts/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": [
                {
                  "term": {
                    "color": "red"
                  }
                },
                {
                  "term": {
                    "brand": "gucci"
                  }
                }
              ]
            }
          }
        },
        "params": {
          "index": "shirts"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/post-filter.asciidoc",
      "line": 63
    },
    "digest": "81f1b1e1d5c81683b6bf471c469e6046",
    "lang": "console",
    "found": [],
    "source": "GET /shirts/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        { \"term\": { \"color\": \"red\"   }},\n        { \"term\": { \"brand\": \"gucci\" }}\n      ]\n    }\n  },\n  \"aggs\": {\n    \"models\": {\n      \"terms\": { \"field\": \"model\" } <1>\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/shirts/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": [
                {
                  "term": {
                    "color": "red"
                  }
                },
                {
                  "term": {
                    "brand": "gucci"
                  }
                }
              ]
            }
          },
          "aggs": {
            "models": {
              "terms": {
                "field": "model"
              }
            }
          }
        },
        "params": {
          "index": "shirts"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/post-filter.asciidoc",
      "line": 94
    },
    "digest": "48313f620c2871b6f4019b66be730109",
    "lang": "console",
    "found": [],
    "source": "GET /shirts/_search\n{\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"term\": { \"brand\": \"gucci\" } <1>\n      }\n    }\n  },\n  \"aggs\": {\n    \"colors\": {\n      \"terms\": { \"field\": \"color\" } <2>\n    },\n    \"color_red\": {\n      \"filter\": {\n        \"term\": { \"color\": \"red\" } <3>\n      },\n      \"aggs\": {\n        \"models\": {\n          \"terms\": { \"field\": \"model\" } <3>\n        }\n      }\n    }\n  },\n  \"post_filter\": { <4>\n    \"term\": { \"color\": \"red\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/shirts/_search",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "filter": {
                "term": {
                  "brand": "gucci"
                }
              }
            }
          },
          "aggs": {
            "colors": {
              "terms": {
                "field": "color"
              }
            },
            "color_red": {
              "filter": {
                "term": {
                  "color": "red"
                }
              },
              "aggs": {
                "models": {
                  "terms": {
                    "field": "model"
                  }
                }
              }
            }
          },
          "post_filter": {
            "term": {
              "color": "red"
            }
          }
        },
        "params": {
          "index": "shirts"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/preference.asciidoc",
      "line": 59
    },
    "digest": "9405de6fd841c32ac510eb0a7eeed989",
    "lang": "console",
    "found": [],
    "source": "GET /_search?preference=xyzabc123\n{\n    \"query\": {\n        \"match\": {\n            \"title\": \"elasticsearch\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "preference": "xyzabc123"
        },
        "body": {
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/query.asciidoc",
      "line": 8
    },
    "digest": "a8e19886f6b4792def0381c3f8cf2b5c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/rescore.asciidoc",
      "line": 43
    },
    "digest": "829a40d484c778a8c58340c7bf09e1d8",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n   \"query\" : {\n      \"match\" : {\n         \"message\" : {\n            \"operator\" : \"or\",\n            \"query\" : \"the quick brown\"\n         }\n      }\n   },\n   \"rescore\" : {\n      \"window_size\" : 50,\n      \"query\" : {\n         \"rescore_query\" : {\n            \"match_phrase\" : {\n               \"message\" : {\n                  \"query\" : \"the quick brown\",\n                  \"slop\" : 2\n               }\n            }\n         },\n         \"query_weight\" : 0.7,\n         \"rescore_query_weight\" : 1.2\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "operator": "or",
                "query": "the quick brown"
              }
            }
          },
          "rescore": {
            "window_size": 50,
            "query": {
              "rescore_query": {
                "match_phrase": {
                  "message": {
                    "query": "the quick brown",
                    "slop": 2
                  }
                }
              },
              "query_weight": 0.7,
              "rescore_query_weight": 1.2
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/rescore.asciidoc",
      "line": 90
    },
    "digest": "7d7855afd9882a665bbabda810f94f61",
    "lang": "console",
    "found": [],
    "source": "POST /_search\n{\n   \"query\" : {\n      \"match\" : {\n         \"message\" : {\n            \"operator\" : \"or\",\n            \"query\" : \"the quick brown\"\n         }\n      }\n   },\n   \"rescore\" : [ {\n      \"window_size\" : 100,\n      \"query\" : {\n         \"rescore_query\" : {\n            \"match_phrase\" : {\n               \"message\" : {\n                  \"query\" : \"the quick brown\",\n                  \"slop\" : 2\n               }\n            }\n         },\n         \"query_weight\" : 0.7,\n         \"rescore_query_weight\" : 1.2\n      }\n   }, {\n      \"window_size\" : 10,\n      \"query\" : {\n         \"score_mode\": \"multiply\",\n         \"rescore_query\" : {\n            \"function_score\" : {\n               \"script_score\": {\n                  \"script\": {\n                    \"source\": \"Math.log10(doc.likes.value + 2)\"\n                  }\n               }\n            }\n         }\n      }\n   } ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": {
                "operator": "or",
                "query": "the quick brown"
              }
            }
          },
          "rescore": [
            {
              "window_size": 100,
              "query": {
                "rescore_query": {
                  "match_phrase": {
                    "message": {
                      "query": "the quick brown",
                      "slop": 2
                    }
                  }
                },
                "query_weight": 0.7,
                "rescore_query_weight": 1.2
              }
            },
            {
              "window_size": 10,
              "query": {
                "score_mode": "multiply",
                "rescore_query": {
                  "function_score": {
                    "script_score": {
                      "script": {
                        "source": "Math.log10(doc.likes.value + 2)"
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/script-fields.asciidoc",
      "line": 8
    },
    "digest": "68358f94e77b5dce7eb01679516bae69",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"match_all\": {}\n    },\n    \"script_fields\" : {\n        \"test1\" : {\n            \"script\" : {\n                \"lang\": \"painless\",\n                \"source\": \"doc['price'].value * 2\"\n            }\n        },\n        \"test2\" : {\n            \"script\" : {\n                \"lang\": \"painless\",\n                \"source\": \"doc['price'].value * params.factor\",\n                \"params\" : {\n                    \"factor\"  : 2.0\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "script_fields": {
            "test1": {
              "script": {
                "lang": "painless",
                "source": "doc['price'].value * 2"
              }
            },
            "test2": {
              "script": {
                "lang": "painless",
                "source": "doc['price'].value * params.factor",
                "params": {
                  "factor": 2
                }
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/script-fields.asciidoc",
      "line": 44
    },
    "digest": "34dd16c077e81b3744963b19a3dc9e49",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n    {\n        \"query\" : {\n            \"match_all\": {}\n        },\n        \"script_fields\" : {\n            \"test1\" : {\n                \"script\" : \"params['_source']['message']\"\n            }\n        }\n    }",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "match_all": {}
          },
          "script_fields": {
            "test1": {
              "script": "params['_source']['message']"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 40
    },
    "digest": "7e52bec09624cf6c0de5d13f2bfad5a5",
    "lang": "console",
    "found": [],
    "source": "POST /twitter/_search?scroll=1m\n{\n    \"size\": 100,\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": {
          "scroll": "1m"
        },
        "body": {
          "size": 100,
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 58
    },
    "digest": "b41dce56b0e640d32b1cf452f87cec17",
    "lang": "console",
    "found": [],
    "source": "POST /_search/scroll <1>\n{\n    \"scroll\" : \"1m\", <2>\n    \"scroll_id\" : \"DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==\" <3>\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search/scroll",
        "query": null,
        "body": {
          "scroll": "1m",
          "scroll_id": "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ=="
        },
        "params": null,
        "api": "scroll"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 90
    },
    "digest": "d5dcddc6398b473b6ad9bce5c6adf986",
    "lang": "console",
    "found": [],
    "source": "GET /_search?scroll=1m\n{\n  \"sort\": [\n    \"_doc\"\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": {
          "scroll": "1m"
        },
        "body": {
          "sort": [
            "_doc"
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 143
    },
    "digest": "72beebe779a258c225dee7b023e60c52",
    "lang": "console",
    "found": [],
    "source": "GET /_nodes/stats/indices/search",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_nodes/stats/indices/search",
        "query": null,
        "body": null,
        "params": {
          "metric": "indices",
          "index_metric": "search"
        },
        "api": "nodes.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 156
    },
    "digest": "b0d64d0a554549e5b2808002a0725493",
    "lang": "console",
    "found": [],
    "source": "DELETE /_search/scroll\n{\n    \"scroll_id\" : \"DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_search/scroll",
        "query": null,
        "body": {
          "scroll_id": "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ=="
        },
        "params": null,
        "api": "clear_scroll"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 167
    },
    "digest": "3a700f836d8d5da1b656a876554028aa",
    "lang": "console",
    "found": [],
    "source": "DELETE /_search/scroll\n{\n    \"scroll_id\" : [\n      \"DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==\",\n      \"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB\"\n    ]\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_search/scroll",
        "query": null,
        "body": {
          "scroll_id": [
            "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==",
            "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB"
          ]
        },
        "params": null,
        "api": "clear_scroll"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 181
    },
    "digest": "c2c21e2824fbf6b7198ede30419da82b",
    "lang": "console",
    "found": [],
    "source": "DELETE /_search/scroll/_all",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_search/scroll/_all",
        "query": null,
        "body": null,
        "params": {
          "scroll_id": "_all"
        },
        "api": "clear_scroll"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 189
    },
    "digest": "b94cee0f74f57742b3948f9b784dfdd4",
    "lang": "console",
    "found": [],
    "source": "DELETE /_search/scroll/DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==,DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_search/scroll/DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==,DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB",
        "query": null,
        "body": null,
        "params": {
          "scroll_id": "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAAD4WYm9laVYtZndUQlNsdDcwakFMNjU1QQ==,DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAABFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAAAxZrUllkUVlCa1NqNmRMaUhiQlZkMWFBAAAAAAAAAAIWa1JZZFFZQmtTajZkTGlIYkJWZDFhQQAAAAAAAAAFFmtSWWRRWUJrU2o2ZExpSGJCVmQxYUEAAAAAAAAABBZrUllkUVlCa1NqNmRMaUhiQlZkMWFB"
        },
        "api": "clear_scroll"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 201
    },
    "digest": "1027ab1ca767ac1428176ef4f84bfbcf",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search?scroll=1m\n{\n    \"slice\": {\n        \"id\": 0, <1>\n        \"max\": 2 <2>\n    },\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    }\n}\nGET /twitter/_search?scroll=1m\n{\n    \"slice\": {\n        \"id\": 1,\n        \"max\": 2\n    },\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "scroll": "1m"
        },
        "body": {
          "slice": {
            "id": 0,
            "max": 2
          },
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      },
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "scroll": "1m"
        },
        "body": {
          "slice": {
            "id": 1,
            "max": 2
          },
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/scroll.asciidoc",
      "line": 263
    },
    "digest": "fdcaba9547180439ff4b6275034a5170",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search?scroll=1m\n{\n    \"slice\": {\n        \"field\": \"date\",\n        \"id\": 0,\n        \"max\": 10\n    },\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "scroll": "1m"
        },
        "body": {
          "slice": {
            "field": "date",
            "id": 0,
            "max": 10
          },
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/search-after.asciidoc",
      "line": 14
    },
    "digest": "402ee4bf8e2e386d5f9100fdaf13a6d6",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"size\": 10,\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    },\n    \"sort\": [\n        {\"date\": \"asc\"},\n        {\"tie_breaker_id\": \"asc\"}      <1>\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "size": 10,
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          },
          "sort": [
            {
              "date": "asc"
            },
            {
              "tie_breaker_id": "asc"
            }
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/search-after.asciidoc",
      "line": 57
    },
    "digest": "525ec32997125d401f9c128ca450cefa",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"size\": 10,\n    \"query\": {\n        \"match\" : {\n            \"title\" : \"elasticsearch\"\n        }\n    },\n    \"search_after\": [1463538857, \"654323\"],\n    \"sort\": [\n        {\"date\": \"asc\"},\n        {\"tie_breaker_id\": \"asc\"}\n    ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "size": 10,
          "query": {
            "match": {
              "title": "elasticsearch"
            }
          },
          "search_after": [
            1463538857,
            "654323"
          ],
          "sort": [
            {
              "date": "asc"
            },
            {
              "tie_breaker_id": "asc"
            }
          ]
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/search-type.asciidoc",
      "line": 54
    },
    "digest": "de3c9fe00efc5647ad4b695524cbe8a0",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search?search_type=query_then_fetch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "search_type": "query_then_fetch"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/search-type.asciidoc",
      "line": 72
    },
    "digest": "be0d2fbf861842eef2c98d5e5bf6e406",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search?search_type=dfs_query_then_fetch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": {
          "search_type": "dfs_query_then_fetch"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/seq-no.asciidoc",
      "line": 8
    },
    "digest": "63965d439716ed6d18d30baef09001a5",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"seq_no_primary_term\": true,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "seq_no_primary_term": true,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 11
    },
    "digest": "d1b3b7d2bb2ab90d15fd10318abd24db",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index\n{\n    \"mappings\": {\n        \"properties\": {\n            \"post_date\": { \"type\": \"date\" },\n            \"user\": {\n                \"type\": \"keyword\"\n            },\n            \"name\": {\n                \"type\": \"keyword\"\n            },\n            \"age\": { \"type\": \"integer\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "post_date": {
                "type": "date"
              },
              "user": {
                "type": "keyword"
              },
              "name": {
                "type": "keyword"
              },
              "age": {
                "type": "integer"
              }
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 30
    },
    "digest": "ae9b5fbd42af2386ffbf56ad4a697e51",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /my_index/_search\n{\n    \"sort\" : [\n        { \"post_date\" : {\"order\" : \"asc\"}},\n        \"user\",\n        { \"name\" : \"desc\" },\n        { \"age\" : \"desc\" },\n        \"_score\"\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/my_index/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "post_date": {
                "order": "asc"
              }
            },
            "user",
            {
              "name": "desc"
            },
            {
              "age": "desc"
            },
            "_score"
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "my_index"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 94
    },
    "digest": "b997885974522ef439d5e345924cc5ba",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /my_index/_doc/1?refresh\n{\n   \"product\": \"chocolate\",\n   \"price\": [20, 4]\n}\n\nPOST /_search\n{\n   \"query\" : {\n      \"term\" : { \"product\" : \"chocolate\" }\n   },\n   \"sort\" : [\n      {\"price\" : {\"order\" : \"asc\", \"mode\" : \"avg\"}}\n   ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/my_index/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "product": "chocolate",
          "price": [
            20,
            4
          ]
        },
        "params": {
          "index": "my_index",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "product": "chocolate"
            }
          },
          "sort": [
            {
              "price": {
                "order": "asc",
                "mode": "avg"
              }
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 123
    },
    "digest": "abf329ebefaf58acd4ee30e685731499",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /index_double\n{\n    \"mappings\": {\n        \"properties\": {\n            \"field\": { \"type\": \"double\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_double",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "field": {
                "type": "double"
              }
            }
          }
        },
        "params": {
          "index": "index_double"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 135
    },
    "digest": "f6b5032bf27c2445d28845be0d413970",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /index_long\n{\n    \"mappings\": {\n        \"properties\": {\n            \"field\": { \"type\": \"long\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_long",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "field": {
                "type": "long"
              }
            }
          }
        },
        "params": {
          "index": "index_long"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 154
    },
    "digest": "2891aa10ee9d474780adf94d5607f2db",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "POST /index_long,index_double/_search\n{\n   \"sort\" : [\n      {\n        \"field\" : {\n            \"numeric_type\" : \"double\"\n        }\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/index_long,index_double/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "field": {
                "numeric_type": "double"
              }
            }
          ]
        },
        "params": {
          "index": "index_long,index_double"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 181
    },
    "digest": "f4a1008b3f9baa67bb03ce9ef5ab4cb4",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /index_double\n{\n    \"mappings\": {\n        \"properties\": {\n            \"field\": { \"type\": \"date\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_double",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "field": {
                "type": "date"
              }
            }
          }
        },
        "params": {
          "index": "index_double"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 193
    },
    "digest": "7477671958734843dd67cf0b8e6c7515",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "PUT /index_long\n{\n    \"mappings\": {\n        \"properties\": {\n            \"field\": { \"type\": \"date_nanos\" }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/index_long",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "field": {
                "type": "date_nanos"
              }
            }
          }
        },
        "params": {
          "index": "index_long"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 212
    },
    "digest": "5f3549ac7fee94682ca0d7439eebdd2a",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "POST /index_long,index_double/_search\n{\n   \"sort\" : [\n      {\n        \"field\" : {\n            \"numeric_type\" : \"date_nanos\"\n        }\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/index_long,index_double/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "field": {
                "numeric_type": "date_nanos"
              }
            }
          ]
        },
        "params": {
          "index": "index_long,index_double"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 263
    },
    "digest": "de139866a220124360e5e27d1a736ea4",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "POST /_search\n{\n   \"query\" : {\n      \"term\" : { \"product\" : \"chocolate\" }\n   },\n   \"sort\" : [\n       {\n          \"offer.price\" : {\n             \"mode\" :  \"avg\",\n             \"order\" : \"asc\",\n             \"nested\": {\n                \"path\": \"offer\",\n                \"filter\": {\n                   \"term\" : { \"offer.color\" : \"blue\" }\n                }\n             }\n          }\n       }\n    ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "product": "chocolate"
            }
          },
          "sort": [
            {
              "offer.price": {
                "mode": "avg",
                "order": "asc",
                "nested": {
                  "path": "offer",
                  "filter": {
                    "term": {
                      "offer.color": "blue"
                    }
                  }
                }
              }
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 290
    },
    "digest": "22334f4b24bb8977d3e1bf2ffdc29d3f",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "POST /_search\n{\n   \"query\": {\n      \"nested\": {\n         \"path\": \"parent\",\n         \"query\": {\n            \"bool\": {\n                \"must\": {\"range\": {\"parent.age\": {\"gte\": 21}}},\n                \"filter\": {\n                    \"nested\": {\n                        \"path\": \"parent.child\",\n                        \"query\": {\"match\": {\"parent.child.name\": \"matt\"}}\n                    }\n                }\n            }\n         }\n      }\n   },\n   \"sort\" : [\n      {\n         \"parent.child.age\" : {\n            \"mode\" :  \"min\",\n            \"order\" : \"asc\",\n            \"nested\": {\n               \"path\": \"parent\",\n               \"filter\": {\n                  \"range\": {\"parent.age\": {\"gte\": 21}}\n               },\n               \"nested\": {\n                  \"path\": \"parent.child\",\n                  \"filter\": {\n                     \"match\": {\"parent.child.name\": \"matt\"}\n                  }\n               }\n            }\n         }\n      }\n   ]\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "nested": {
              "path": "parent",
              "query": {
                "bool": {
                  "must": {
                    "range": {
                      "parent.age": {
                        "gte": 21
                      }
                    }
                  },
                  "filter": {
                    "nested": {
                      "path": "parent.child",
                      "query": {
                        "match": {
                          "parent.child.name": "matt"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "sort": [
            {
              "parent.child.age": {
                "mode": "min",
                "order": "asc",
                "nested": {
                  "path": "parent",
                  "filter": {
                    "range": {
                      "parent.age": {
                        "gte": 21
                      }
                    }
                  },
                  "nested": {
                    "path": "parent.child",
                    "filter": {
                      "match": {
                        "parent.child.name": "matt"
                      }
                    }
                  }
                }
              }
            }
          ]
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 346
    },
    "digest": "ef0f4fa4272c47ff62fb7b422cf975e7",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        { \"price\" : {\"missing\" : \"_last\"} }\n    ],\n    \"query\" : {\n        \"term\" : { \"product\" : \"chocolate\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "price": {
                "missing": "_last"
              }
            }
          ],
          "query": {
            "term": {
              "product": "chocolate"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 370
    },
    "digest": "899eef71a67a1b2aa11a2166ec7f48f1",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        { \"price\" : {\"unmapped_type\" : \"long\"} }\n    ],\n    \"query\" : {\n        \"term\" : { \"product\" : \"chocolate\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "price": {
                "unmapped_type": "long"
              }
            }
          ],
          "query": {
            "term": {
              "product": "chocolate"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 392
    },
    "digest": "d17269bb80fb63ec0bf37d219e003dcb",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : [-70, 40],\n                \"order\" : \"asc\",\n                \"unit\" : \"km\",\n                \"mode\" : \"min\",\n                \"distance_type\" : \"arc\",\n                \"ignore_unmapped\": true\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": [
                  -70,
                  40
                ],
                "order": "asc",
                "unit": "km",
                "mode": "min",
                "distance_type": "arc",
                "ignore_unmapped": true
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 445
    },
    "digest": "979d25dff2d8987119410291ad47b0d1",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : {\n                    \"lat\" : 40,\n                    \"lon\" : -70\n                },\n                \"order\" : \"asc\",\n                \"unit\" : \"km\"\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": {
                  "lat": 40,
                  "lon": -70
                },
                "order": "asc",
                "unit": "km"
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 471
    },
    "digest": "d50a3c64890f88af32c6d4ef4899d82a",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : \"40,-70\",\n                \"order\" : \"asc\",\n                \"unit\" : \"km\"\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": "40,-70",
                "order": "asc",
                "unit": "km"
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 492
    },
    "digest": "a1db5c822745fe167e9ef854dca3d129",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : \"drm3btev3e86\",\n                \"order\" : \"asc\",\n                \"unit\" : \"km\"\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": "drm3btev3e86",
                "order": "asc",
                "unit": "km"
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 516
    },
    "digest": "15dad5338065baaaa7d475abe85f4c22",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : [-70, 40],\n                \"order\" : \"asc\",\n                \"unit\" : \"km\"\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": [
                  -70,
                  40
                ],
                "order": "asc",
                "unit": "km"
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 540
    },
    "digest": "77243bbf92f2a55e0fca6c2a349a1c15",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"sort\" : [\n        {\n            \"_geo_distance\" : {\n                \"pin.location\" : [[-70, 40], [-71, 42]],\n                \"order\" : \"asc\",\n                \"unit\" : \"km\"\n            }\n        }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "sort": [
            {
              "_geo_distance": {
                "pin.location": [
                  [
                    -70,
                    40
                  ],
                  [
                    -71,
                    42
                  ]
                ],
                "order": "asc",
                "unit": "km"
              }
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 569
    },
    "digest": "04fe1e3a0047b0cdb10987b79fc3f3f3",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    },\n    \"sort\" : {\n        \"_script\" : {\n            \"type\" : \"number\",\n            \"script\" : {\n                \"lang\": \"painless\",\n                \"source\": \"doc['field_name'].value * params.factor\",\n                \"params\" : {\n                    \"factor\" : 1.1\n                }\n            },\n            \"order\" : \"asc\"\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          },
          "sort": {
            "_script": {
              "type": "number",
              "script": {
                "lang": "painless",
                "source": "doc['field_name'].value * params.factor",
                "params": {
                  "factor": 1.1
                }
              },
              "order": "asc"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/sort.asciidoc",
      "line": 598
    },
    "digest": "e8e451bc8c45bcf16df43804c4fc8329",
    "lang": "console",
    "found": [
      "python",
      "go",
      "js"
    ],
    "source": "GET /_search\n{\n    \"track_scores\": true,\n    \"sort\" : [\n        { \"post_date\" : {\"order\" : \"desc\"} },\n        { \"name\" : \"desc\" },\n        { \"age\" : \"desc\" }\n    ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "track_scores": true,
          "sort": [
            {
              "post_date": {
                "order": "desc"
              }
            },
            {
              "name": "desc"
            },
            {
              "age": "desc"
            }
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/source-filtering.asciidoc",
      "line": 15
    },
    "digest": "08c5b266f5e5534dc094346974cf7386",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"_source\": false,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "_source": false,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/source-filtering.asciidoc",
      "line": 30
    },
    "digest": "5c10e00c99b338353b3e486e94be253e",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"_source\": \"obj.*\",\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "_source": "obj.*",
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/source-filtering.asciidoc",
      "line": 43
    },
    "digest": "160ae4ff9c53b8a98700caed0e82d7fe",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"_source\": [ \"obj1.*\", \"obj2.*\" ],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "_source": [
            "obj1.*",
            "obj2.*"
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/source-filtering.asciidoc",
      "line": 60
    },
    "digest": "1e86a78433a0748970d6c3922a34898c",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"_source\": {\n        \"includes\": [ \"obj1.*\", \"obj2.*\" ],\n        \"excludes\": [ \"*.description\" ]\n    },\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "_source": {
            "includes": [
              "obj1.*",
              "obj2.*"
            ],
            "excludes": [
              "*.description"
            ]
          },
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/stored-fields.asciidoc",
      "line": 13
    },
    "digest": "2eeb3e55a7d3955e084bb369f1539009",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"stored_fields\" : [\"user\", \"postDate\"],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "stored_fields": [
            "user",
            "postDate"
          ],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/stored-fields.asciidoc",
      "line": 29
    },
    "digest": "2af86a6ebbb834fbcf6fa7268f87a3a5",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"stored_fields\" : [],\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "stored_fields": [],
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/stored-fields.asciidoc",
      "line": 55
    },
    "digest": "ccec437aed7a10d9111724ffd929fe00",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"stored_fields\": \"_none_\",\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "stored_fields": "_none_",
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 23
    },
    "digest": "32789ba30a73d8813b61c39619ad7d71",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"track_total_hits\": true,\n     \"query\": {\n        \"match\" : {\n            \"message\" : \"Elasticsearch\"\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "track_total_hits": true,
          "query": {
            "match": {
              "message": "Elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 39
    },
    "digest": "2d4cfa49f19c4bece01b3ddfba0da723",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\": ...\n    \"timed_out\": false,\n    \"took\": 100,\n    \"hits\": {\n        \"max_score\": 1.0,\n        \"total\" : {\n            \"value\": 2048,    <1>\n            \"relation\": \"eq\"  <2>\n        },\n        \"hits\": ...\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 68
    },
    "digest": "e45cb729ed4a694b2d6cabaa55c9b5be",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"track_total_hits\": 100,\n     \"query\": {\n        \"match\" : {\n            \"message\" : \"Elasticsearch\"\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "track_total_hits": 100,
          "query": {
            "match": {
              "message": "Elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 88
    },
    "digest": "2f9249492404ae95838b393e86c4cf88",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\": ...\n    \"timed_out\": false,\n    \"took\": 30,\n    \"hits\" : {\n        \"max_score\": 1.0,\n        \"total\" : {\n            \"value\": 42,         <1>\n            \"relation\": \"eq\"     <2>\n        },\n        \"hits\": ...\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 120
    },
    "digest": "66e97dfb31795ce3066106b3303a9bc2",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\": ...\n    \"hits\" : {\n        \"max_score\": 1.0,\n        \"total\" : {\n            \"value\": 100,         <1>\n            \"relation\": \"gte\"     <2>\n        },\n        \"hits\": ...\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 142
    },
    "digest": "d9e08bca979c7ba3a9581f69470bf914",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_search\n{\n    \"track_total_hits\": false,\n     \"query\": {\n        \"match\" : {\n            \"message\" : \"Elasticsearch\"\n        }\n     }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "track_total_hits": false,
          "query": {
            "match": {
              "message": "Elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/request/track-total-hits.asciidoc",
      "line": 158
    },
    "digest": "05857ba6b0db5d68df139c82f6a3be80",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"_shards\": ...\n    \"timed_out\": false,\n    \"took\": 10,\n    \"hits\" : { <1>\n        \"max_score\": 1.0,\n        \"hits\": ...\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/request/version.asciidoc",
      "line": 7
    },
    "digest": "9535be36eac8a589bd6bf7b7228eefd7",
    "lang": "console",
    "found": [],
    "source": "GET /_search\n{\n    \"version\": true,\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search",
        "query": null,
        "body": {
          "version": true,
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 7
    },
    "digest": "e068d93555351b9afbdb9dd2aff6368d",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n    \"source\" : {\n      \"query\": { \"match\" : { \"{{my_field}}\" : \"{{my_value}}\" } },\n      \"size\" : \"{{my_size}}\"\n    },\n    \"params\" : {\n        \"my_field\" : \"message\",\n        \"my_value\" : \"some message\",\n        \"my_size\" : 5\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": {
            "query": {
              "match": {
                "{{my_field}}": "{{my_value}}"
              }
            },
            "size": "{{my_size}}"
          },
          "params": {
            "my_field": "message",
            "my_value": "some message",
            "my_size": 5
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 112
    },
    "digest": "b19dc078255bfa1237206913ae94012f",
    "lang": "console",
    "found": [],
    "source": "POST _scripts/<templateid>\n{\n    \"script\": {\n        \"lang\": \"mustache\",\n        \"source\": {\n            \"query\": {\n                \"match\": {\n                    \"title\": \"{{query_string}}\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 147
    },
    "digest": "e51c88800679913981757542bc639816",
    "lang": "console",
    "found": [],
    "source": "GET _scripts/<templateid>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 155
    },
    "digest": "f3f8f542b19e2e32b38274df21e74c43",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"script\" : {\n        \"lang\" : \"mustache\",\n        \"source\" : \"{\\\"query\\\":{\\\"match\\\":{\\\"title\\\":\\\"{{query_string}}\\\"}}}\",\n        \"options\": {\n          \"content_type\" : \"application/json; charset=UTF-8\"\n        }\n    },\n    \"_id\": \"<templateid>\",\n    \"found\": true\n}"
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 173
    },
    "digest": "ed639528456671b302ecc887f5a60987",
    "lang": "console",
    "found": [],
    "source": "DELETE _scripts/<templateid>",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 185
    },
    "digest": "de5b9f1211876f6ba7a4c93e87c27d3a",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n    \"id\": \"<templateid>\", <1>\n    \"params\": {\n        \"query_string\": \"search for these words\"\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "id": "<templateid>",
          "params": {
            "query_string": "search for these words"
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 205
    },
    "digest": "4b13f649aa2eca6f7ee4221f708430c1",
    "lang": "console",
    "found": [],
    "source": "GET _render/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"terms\\\": {{#toJson}}statuses{{/toJson}} }}\",\n  \"params\": {\n    \"statuses\" : {\n        \"status\": [ \"pending\", \"published\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_render/template",
        "query": null,
        "body": {
          "source": "{ \"query\": { \"terms\": {{#toJson}}statuses{{/toJson}} }}",
          "params": {
            "statuses": {
              "status": [
                "pending",
                "published"
              ]
            }
          }
        },
        "params": null,
        "api": "render_search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 221
    },
    "digest": "f4b44a1758edafc2e3ea3db7ed7cd9e2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"template_output\": {\n    \"query\": {\n      \"terms\": {\n        \"status\": [ <1>\n          \"pending\",\n          \"published\"\n        ]\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 258
    },
    "digest": "99e29a569f37ea83b02687e6e2793529",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n  \"id\": \"my_template\",\n  \"params\": {\n    \"status\": [ \"pending\", \"published\" ]\n  },\n  \"explain\": true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "id": "my_template",
          "params": {
            "status": [
              "pending",
              "published"
            ]
          },
          "explain": true
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 277
    },
    "digest": "3462452c6fdba8dc1efe2cca101246e8",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n  \"id\": \"my_template\",\n  \"params\": {\n    \"status\": [ \"pending\", \"published\" ]\n  },\n  \"profile\": true\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "id": "my_template",
          "params": {
            "status": [
              "pending",
              "published"
            ]
          },
          "profile": true
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 294
    },
    "digest": "4697b9aa952ac1613ee1a6ec7b3223c1",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n    \"source\": {\n        \"query\": {\n            \"term\": {\n                \"message\": \"{{query_string}}\"\n            }\n        }\n    },\n    \"params\": {\n        \"query_string\": \"search for these words\"\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": {
            "query": {
              "term": {
                "message": "{{query_string}}"
              }
            }
          },
          "params": {
            "query_string": "search for these words"
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 318
    },
    "digest": "eb1f3134f28a9ba8406b0f10199cf5be",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n  \"source\": \"{ \\\"query\\\": { \\\"terms\\\": {{#toJson}}statuses{{/toJson}} }}\",\n  \"params\": {\n    \"statuses\" : {\n        \"status\": [ \"pending\", \"published\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": "{ \"query\": { \"terms\": {{#toJson}}statuses{{/toJson}} }}",
          "params": {
            "statuses": {
              "status": [
                "pending",
                "published"
              ]
            }
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 350
    },
    "digest": "6be45fa02e779a727ddf48f871610aa8",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n    \"source\": \"{\\\"query\\\":{\\\"bool\\\":{\\\"must\\\": {{#toJson}}clauses{{/toJson}} }}}\",\n    \"params\": {\n        \"clauses\": [\n            { \"term\": { \"user\" : \"foo\" } },\n            { \"term\": { \"user\" : \"bar\" } }\n        ]\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": "{\"query\":{\"bool\":{\"must\": {{#toJson}}clauses{{/toJson}} }}}",
          "params": {
            "clauses": [
              {
                "term": {
                  "user": "foo"
                }
              },
              {
                "term": {
                  "user": "bar"
                }
              }
            ]
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 395
    },
    "digest": "33bb4a6ec63a709a14dfa15a5e2cca88",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n  \"source\": {\n    \"query\": {\n      \"match\": {\n        \"emails\": \"{{#join}}emails{{/join}}\"\n      }\n    }\n  },\n  \"params\": {\n    \"emails\": [ \"username@email.com\", \"lastname@email.com\" ]\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": {
            "query": {
              "match": {
                "emails": "{{#join}}emails{{/join}}"
              }
            }
          },
          "params": {
            "emails": [
              "username@email.com",
              "lastname@email.com"
            ]
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 428
    },
    "digest": "02f0012ca77fdc409592e524e5647fb8",
    "lang": "console",
    "found": [],
    "source": "GET _search/template\n{\n  \"source\": {\n    \"query\": {\n      \"range\": {\n        \"born\": {\n            \"gte\"   : \"{{date.min}}\",\n            \"lte\"   : \"{{date.max}}\",\n            \"format\": \"{{#join delimiter='||'}}date.formats{{/join delimiter='||'}}\"\n\t    }\n      }\n    }\n  },\n  \"params\": {\n    \"date\": {\n        \"min\": \"2016\",\n        \"max\": \"31/12/2017\",\n        \"formats\": [\"dd/MM/yyyy\", \"yyyy\"]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_search/template",
        "query": null,
        "body": {
          "source": {
            "query": {
              "range": {
                "born": {
                  "gte": "{{date.min}}",
                  "lte": "{{date.max}}",
                  "format": "{{#join delimiter='||'}}date.formats{{/join delimiter='||'}}"
                }
              }
            }
          },
          "params": {
            "date": {
              "min": "2016",
              "max": "31/12/2017",
              "formats": [
                "dd/MM/yyyy",
                "yyyy"
              ]
            }
          }
        },
        "params": null,
        "api": "search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 612
    },
    "digest": "a5cc9a86f0f9525cd86564421c721d2f",
    "lang": "console",
    "found": [],
    "source": "GET _render/template\n{\n    \"source\" : {\n        \"query\" : {\n            \"term\": {\n                \"http_access_log\": \"{{#url}}{{host}}/{{page}}{{/url}}\"\n            }\n        }\n    },\n    \"params\": {\n        \"host\": \"https://www.elastic.co/\",\n        \"page\": \"learn\"\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_render/template",
        "query": null,
        "body": {
          "source": {
            "query": {
              "term": {
                "http_access_log": "{{#url}}{{host}}/{{page}}{{/url}}"
              }
            }
          },
          "params": {
            "host": "https://www.elastic.co/",
            "page": "learn"
          }
        },
        "params": null,
        "api": "render_search_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-template.asciidoc",
      "line": 633
    },
    "digest": "619e96682251070000a25d9c2416456e",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"template_output\" : {\n        \"query\" : {\n            \"term\" : {\n                \"http_access_log\" : \"https%3A%2F%2Fwww.elastic.co%2F%2Flearn\"\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/search-shards.asciidoc",
      "line": 7
    },
    "digest": "49b137a1c0016face219bac3faf41996",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search_shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search_shards",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search_shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-shards.asciidoc",
      "line": 60
    },
    "digest": "49b137a1c0016face219bac3faf41996",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search_shards",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search_shards",
        "query": null,
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search_shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-shards.asciidoc",
      "line": 68
    },
    "digest": "76b0a597cf67a4a269f0d58f2a48f062",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\": ...,\n  \"indices\" : {\n    \"twitter\": { }\n  },\n  \"shards\": [\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 0,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"0TvkCyF7TAmM1wHP4a42-A\"},\n        \"relocating_node\": null\n      }\n    ],\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 1,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"fMju3hd1QHWmWrIgFnI4Ww\"},\n        \"relocating_node\": null\n      }\n    ],\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 2,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"Nwl0wbMBTHCWjEEbGYGapg\"},\n        \"relocating_node\": null\n      }\n    ],\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 3,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"bU_KLGJISbW0RejwnwDPKw\"},\n        \"relocating_node\": null\n      }\n    ],\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 4,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"DMs7_giNSwmdqVukF7UydA\"},\n        \"relocating_node\": null\n      }\n    ]\n  ]\n}"
  },
  {
    "source_location": {
      "file": "search/search-shards.asciidoc",
      "line": 144
    },
    "digest": "a44b7da0091ac75e5571475a4e99bb16",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search_shards?routing=foo,bar",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search_shards",
        "query": {
          "routing": "foo,bar"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "search_shards"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/search-shards.asciidoc",
      "line": 152
    },
    "digest": "15386d464faca2db38376ae46da0d967",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"nodes\": ...,\n  \"indices\" : {\n      \"twitter\": { }\n  },\n  \"shards\": [\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 2,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"fMju3hd1QHWmWrIgFnI4Ww\"},\n        \"relocating_node\": null\n      }\n    ],\n    [\n      {\n        \"index\": \"twitter\",\n        \"node\": \"JklnKbD7Tyqi9TP3_Q_tBg\",\n        \"primary\": true,\n        \"shard\": 3,\n        \"state\": \"STARTED\",\n        \"allocation_id\": {\"id\":\"0TvkCyF7TAmM1wHP4a42-A\"},\n        \"relocating_node\": null\n      }\n    ]\n  ]\n}"
  },
  {
    "source_location": {
      "file": "search/suggesters.asciidoc",
      "line": 8
    },
    "digest": "626f8c4b3e2cd3d9beaa63a7f5799d7a",
    "lang": "console",
    "found": [],
    "source": "POST twitter/_search\n{\n  \"query\" : {\n    \"match\": {\n      \"message\": \"tring out Elasticsearch\"\n    }\n  },\n  \"suggest\" : {\n    \"my-suggestion\" : {\n      \"text\" : \"tring out Elasticsearch\",\n      \"term\" : {\n        \"field\" : \"message\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "tring out Elasticsearch"
            }
          },
          "suggest": {
            "my-suggestion": {
              "text": "tring out Elasticsearch",
              "term": {
                "field": "message"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters.asciidoc",
      "line": 51
    },
    "digest": "2533e4b36ae837eaecda08407ecb6383",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"suggest\": {\n    \"my-suggest-1\" : {\n      \"text\" : \"tring out Elasticsearch\",\n      \"term\" : {\n        \"field\" : \"message\"\n      }\n    },\n    \"my-suggest-2\" : {\n      \"text\" : \"kmichy\",\n      \"term\" : {\n        \"field\" : \"user\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "suggest": {
            "my-suggest-1": {
              "text": "tring out Elasticsearch",
              "term": {
                "field": "message"
              }
            },
            "my-suggest-2": {
              "text": "kmichy",
              "term": {
                "field": "user"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters.asciidoc",
      "line": 80
    },
    "digest": "b53648eccf39f999e69495a1ef4b8a43",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\": ...\n  \"hits\": ...\n  \"took\": 2,\n  \"timed_out\": false,\n  \"suggest\": {\n    \"my-suggest-1\": [ {\n      \"text\": \"tring\",\n      \"offset\": 0,\n      \"length\": 5,\n      \"options\": [ {\"text\": \"trying\", \"score\": 0.8, \"freq\": 1 } ]\n    }, {\n      \"text\": \"out\",\n      \"offset\": 6,\n      \"length\": 3,\n      \"options\": []\n    }, {\n      \"text\": \"elasticsearch\",\n      \"offset\": 10,\n      \"length\": 13,\n      \"options\": []\n    } ],\n    \"my-suggest-2\": ...\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/suggesters.asciidoc",
      "line": 127
    },
    "digest": "5275842787967b6db876025f4a1c6942",
    "lang": "console",
    "found": [],
    "source": "POST _search\n{\n  \"suggest\": {\n    \"text\" : \"tring out Elasticsearch\",\n    \"my-suggest-1\" : {\n      \"term\" : {\n        \"field\" : \"message\"\n      }\n    },\n    \"my-suggest-2\" : {\n       \"term\" : {\n        \"field\" : \"user\"\n       }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": null,
        "body": {
          "suggest": {
            "text": "tring out Elasticsearch",
            "my-suggest-1": {
              "term": {
                "field": "message"
              }
            },
            "my-suggest-2": {
              "term": {
                "field": "user"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 25
    },
    "digest": "5566cff431570f522e1fc5475b2ed875",
    "lang": "console",
    "found": [],
    "source": "PUT test\n{\n  \"settings\": {\n    \"index\": {\n      \"number_of_shards\": 1,\n      \"analysis\": {\n        \"analyzer\": {\n          \"trigram\": {\n            \"type\": \"custom\",\n            \"tokenizer\": \"standard\",\n            \"filter\": [\"lowercase\",\"shingle\"]\n          },\n          \"reverse\": {\n            \"type\": \"custom\",\n            \"tokenizer\": \"standard\",\n            \"filter\": [\"lowercase\",\"reverse\"]\n          }\n        },\n        \"filter\": {\n          \"shingle\": {\n            \"type\": \"shingle\",\n            \"min_shingle_size\": 2,\n            \"max_shingle_size\": 3\n          }\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"properties\": {\n      \"title\": {\n        \"type\": \"text\",\n        \"fields\": {\n          \"trigram\": {\n            \"type\": \"text\",\n            \"analyzer\": \"trigram\"\n          },\n          \"reverse\": {\n            \"type\": \"text\",\n            \"analyzer\": \"reverse\"\n          }\n        }\n      }\n    }\n  }\n}\nPOST test/_doc?refresh=true\n{\"title\": \"noble warriors\"}\nPOST test/_doc?refresh=true\n{\"title\": \"nobel prize\"}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/test",
        "query": null,
        "body": {
          "settings": {
            "index": {
              "number_of_shards": 1,
              "analysis": {
                "analyzer": {
                  "trigram": {
                    "type": "custom",
                    "tokenizer": "standard",
                    "filter": [
                      "lowercase",
                      "shingle"
                    ]
                  },
                  "reverse": {
                    "type": "custom",
                    "tokenizer": "standard",
                    "filter": [
                      "lowercase",
                      "reverse"
                    ]
                  }
                },
                "filter": {
                  "shingle": {
                    "type": "shingle",
                    "min_shingle_size": 2,
                    "max_shingle_size": 3
                  }
                }
              }
            }
          },
          "mappings": {
            "properties": {
              "title": {
                "type": "text",
                "fields": {
                  "trigram": {
                    "type": "text",
                    "analyzer": "trigram"
                  },
                  "reverse": {
                    "type": "text",
                    "analyzer": "reverse"
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "indices.create"
      },
      {
        "method": "POST",
        "url": "/test/_doc",
        "query": {
          "refresh": "true"
        },
        "body": {
          "title": "noble warriors"
        },
        "params": {
          "index": "test"
        },
        "api": "index"
      },
      {
        "method": "POST",
        "url": "/test/_doc",
        "query": {
          "refresh": "true"
        },
        "body": {
          "title": "nobel prize"
        },
        "params": {
          "index": "test"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 83
    },
    "digest": "3b162509ed14eda44a9681cd1108fa39",
    "lang": "console",
    "found": [],
    "source": "POST test/_search\n{\n  \"suggest\": {\n    \"text\": \"noble prize\",\n    \"simple_phrase\": {\n      \"phrase\": {\n        \"field\": \"title.trigram\",\n        \"size\": 1,\n        \"gram_size\": 3,\n        \"direct_generator\": [ {\n          \"field\": \"title.trigram\",\n          \"suggest_mode\": \"always\"\n        } ],\n        \"highlight\": {\n          \"pre_tag\": \"<em>\",\n          \"post_tag\": \"</em>\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "suggest": {
            "text": "noble prize",
            "simple_phrase": {
              "phrase": {
                "field": "title.trigram",
                "size": 1,
                "gram_size": 3,
                "direct_generator": [
                  {
                    "field": "title.trigram",
                    "suggest_mode": "always"
                  }
                ],
                "highlight": {
                  "pre_tag": "<em>",
                  "post_tag": "</em>"
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 110
    },
    "digest": "3af632e3611008f1290293e8cb653e4f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\": ...\n  \"hits\": ...\n  \"timed_out\": false,\n  \"took\": 3,\n  \"suggest\": {\n    \"simple_phrase\" : [\n      {\n        \"text\" : \"noble prize\",\n        \"offset\" : 0,\n        \"length\" : 11,\n        \"options\" : [ {\n          \"text\" : \"nobel prize\",\n          \"highlighted\": \"<em>nobel</em> prize\",\n          \"score\" : 0.48614594\n        }]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 224
    },
    "digest": "89a6b24618cafd60de1702a5b9f28a8d",
    "lang": "console",
    "found": [],
    "source": "POST test/_search\n{\n  \"suggest\": {\n    \"text\" : \"noble prize\",\n    \"simple_phrase\" : {\n      \"phrase\" : {\n        \"field\" :  \"title.trigram\",\n        \"size\" :   1,\n        \"direct_generator\" : [ {\n          \"field\" :            \"title.trigram\",\n          \"suggest_mode\" :     \"always\",\n          \"min_word_length\" :  1\n        } ],\n        \"collate\": {\n          \"query\": { <1>\n            \"source\" : {\n              \"match\": {\n                \"{{field_name}}\" : \"{{suggestion}}\" <2>\n              }\n            }\n          },\n          \"params\": {\"field_name\" : \"title\"}, <3>\n          \"prune\": true <4>\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "suggest": {
            "text": "noble prize",
            "simple_phrase": {
              "phrase": {
                "field": "title.trigram",
                "size": 1,
                "direct_generator": [
                  {
                    "field": "title.trigram",
                    "suggest_mode": "always",
                    "min_word_length": 1
                  }
                ],
                "collate": {
                  "query": {
                    "source": {
                      "match": {
                        "{{field_name}}": "{{suggestion}}"
                      }
                    }
                  },
                  "params": {
                    "field_name": "title"
                  },
                  "prune": true
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 293
    },
    "digest": "203c3bb334384bdfb11ff1101ccfba25",
    "lang": "console",
    "found": [],
    "source": "POST test/_search\n{\n  \"suggest\": {\n    \"text\" : \"obel prize\",\n    \"simple_phrase\" : {\n      \"phrase\" : {\n        \"field\" : \"title.trigram\",\n        \"size\" : 1,\n        \"smoothing\" : {\n          \"laplace\" : {\n            \"alpha\" : 0.7\n          }\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "suggest": {
            "text": "obel prize",
            "simple_phrase": {
              "phrase": {
                "field": "title.trigram",
                "size": 1,
                "smoothing": {
                  "laplace": {
                    "alpha": 0.7
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/phrase-suggest.asciidoc",
      "line": 413
    },
    "digest": "eb6d62f1d855a8e8fe9eab2656d47504",
    "lang": "console",
    "found": [],
    "source": "POST test/_search\n{\n  \"suggest\": {\n    \"text\" : \"obel prize\",\n    \"simple_phrase\" : {\n      \"phrase\" : {\n        \"field\" : \"title.trigram\",\n        \"size\" : 1,\n        \"direct_generator\" : [ {\n          \"field\" : \"title.trigram\",\n          \"suggest_mode\" : \"always\"\n        }, {\n          \"field\" : \"title.reverse\",\n          \"suggest_mode\" : \"always\",\n          \"pre_filter\" : \"reverse\",\n          \"post_filter\" : \"reverse\"\n        } ]\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/test/_search",
        "query": null,
        "body": {
          "suggest": {
            "text": "obel prize",
            "simple_phrase": {
              "phrase": {
                "field": "title.trigram",
                "size": 1,
                "direct_generator": [
                  {
                    "field": "title.trigram",
                    "suggest_mode": "always"
                  },
                  {
                    "field": "title.reverse",
                    "suggest_mode": "always",
                    "pre_filter": "reverse",
                    "post_filter": "reverse"
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "test"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 28
    },
    "digest": "b8718ca915bbb848925a5fb593a03e70",
    "lang": "console",
    "found": [],
    "source": "PUT music\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"suggest\" : {\n                \"type\" : \"completion\"\n            },\n            \"title\" : {\n                \"type\": \"keyword\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/music",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "suggest": {
                "type": "completion"
              },
              "title": {
                "type": "keyword"
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 84
    },
    "digest": "223787a2b80e132a22548768ccf7052d",
    "lang": "console",
    "found": [],
    "source": "PUT music/_doc/1?refresh\n{\n    \"suggest\" : {\n        \"input\": [ \"Nevermind\", \"Nirvana\" ],\n        \"weight\" : 34\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/music/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "suggest": {
            "input": [
              "Nevermind",
              "Nirvana"
            ],
            "weight": 34
          }
        },
        "params": {
          "index": "music",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 120
    },
    "digest": "5e9f3b7246f4549624fa5b9dd3719d75",
    "lang": "console",
    "found": [],
    "source": "PUT music/_doc/1?refresh\n{\n    \"suggest\" : [\n        {\n            \"input\": \"Nevermind\",\n            \"weight\" : 10\n        },\n        {\n            \"input\": \"Nirvana\",\n            \"weight\" : 3\n        }\n    ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/music/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "suggest": [
            {
              "input": "Nevermind",
              "weight": 10
            },
            {
              "input": "Nirvana",
              "weight": 3
            }
          ]
        },
        "params": {
          "index": "music",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 141
    },
    "digest": "7c3414279d47e9c29105d061ed316ef8",
    "lang": "console",
    "found": [],
    "source": "PUT music/_doc/1?refresh\n{\n  \"suggest\" : [ \"Nevermind\", \"Nirvana\" ]\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/music/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "suggest": [
            "Nevermind",
            "Nirvana"
          ]
        },
        "params": {
          "index": "music",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 158
    },
    "digest": "7f951981bd8ed09e56aebeb13adb96ce",
    "lang": "console",
    "found": [],
    "source": "POST music/_search?pretty\n{\n    \"suggest\": {\n        \"song-suggest\" : {\n            \"prefix\" : \"nir\", <1>\n            \"completion\" : { <2>\n                \"field\" : \"suggest\" <3>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/music/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "song-suggest": {
              "prefix": "nir",
              "completion": {
                "field": "suggest"
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 180
    },
    "digest": "92c5e36c94d3f183766862498044ec16",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"skipped\" : 0,\n    \"failed\" : 0\n  },\n  \"hits\": ...\n  \"took\": 2,\n  \"timed_out\": false,\n  \"suggest\": {\n    \"song-suggest\" : [ {\n      \"text\" : \"nir\",\n      \"offset\" : 0,\n      \"length\" : 3,\n      \"options\" : [ {\n        \"text\" : \"Nirvana\",\n        \"_index\": \"music\",\n        \"_id\": \"1\",\n        \"_score\": 1.0,\n        \"_source\": {\n          \"suggest\": [\"Nevermind\", \"Nirvana\"]\n        }\n      } ]\n    } ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 226
    },
    "digest": "565ef4aad0c7765879325cc5d2e3c530",
    "lang": "console",
    "found": [],
    "source": "POST music/_search\n{\n    \"_source\": \"suggest\", <1>\n    \"suggest\": {\n        \"song-suggest\" : {\n            \"prefix\" : \"nir\",\n            \"completion\" : {\n                \"field\" : \"suggest\", <2>\n                \"size\" : 5 <3>\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/music/_search",
        "query": null,
        "body": {
          "_source": "suggest",
          "suggest": {
            "song-suggest": {
              "prefix": "nir",
              "completion": {
                "field": "suggest",
                "size": 5
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 250
    },
    "digest": "af0f6a4645a4b938f4fa892935cb1f26",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"took\": 6,\n    \"timed_out\": false,\n    \"_shards\" : {\n        \"total\" : 1,\n        \"successful\" : 1,\n        \"skipped\" : 0,\n        \"failed\" : 0\n    },\n    \"hits\": {\n        \"total\" : {\n            \"value\": 0,\n            \"relation\": \"eq\"\n        },\n        \"max_score\" : null,\n        \"hits\" : []\n    },\n    \"suggest\": {\n        \"song-suggest\" : [ {\n            \"text\" : \"nir\",\n            \"offset\" : 0,\n            \"length\" : 3,\n            \"options\" : [ {\n                \"text\" : \"Nirvana\",\n                \"_index\": \"music\",\n                \"_id\": \"1\",\n                \"_score\": 1.0,\n                \"_source\": {\n                    \"suggest\": [\"Nevermind\", \"Nirvana\"]\n                }\n            } ]\n        } ]\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 316
    },
    "digest": "b2a6fb1a94dd10bf594dafe727647e1d",
    "lang": "console",
    "found": [],
    "source": "POST music/_search?pretty\n{\n    \"suggest\": {\n        \"song-suggest\" : {\n            \"prefix\" : \"nor\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"skip_duplicates\": true\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/music/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "song-suggest": {
              "prefix": "nor",
              "completion": {
                "field": "suggest",
                "skip_duplicates": true
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 341
    },
    "digest": "a4eac3c0bac550247e8c7d3f9bcaac1c",
    "lang": "console",
    "found": [],
    "source": "POST music/_search?pretty\n{\n    \"suggest\": {\n        \"song-suggest\" : {\n            \"prefix\" : \"nor\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"fuzzy\" : {\n                    \"fuzziness\" : 2\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/music/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "song-suggest": {
              "prefix": "nor",
              "completion": {
                "field": "suggest",
                "fuzzy": {
                  "fuzziness": 2
                }
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/completion-suggest.asciidoc",
      "line": 399
    },
    "digest": "62280b8a1ec0c214b3110a2c42a55fce",
    "lang": "console",
    "found": [],
    "source": "POST music/_search?pretty\n{\n    \"suggest\": {\n        \"song-suggest\" : {\n            \"regex\" : \"n[ever|i]r\",\n            \"completion\" : {\n                \"field\" : \"suggest\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/music/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "song-suggest": {
              "regex": "n[ever|i]r",
              "completion": {
                "field": "suggest"
              }
            }
          }
        },
        "params": {
          "index": "music"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 25
    },
    "digest": "46b3154afd9a05f1aadd726efdd9cf98",
    "lang": "console",
    "found": [],
    "source": "PUT place\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"suggest\" : {\n                \"type\" : \"completion\",\n                \"contexts\": [\n                    { <1>\n                        \"name\": \"place_type\",\n                        \"type\": \"category\"\n                    },\n                    { <2>\n                        \"name\": \"location\",\n                        \"type\": \"geo\",\n                        \"precision\": 4\n                    }\n                ]\n            }\n        }\n    }\n}\nPUT place_path_category\n{\n    \"mappings\": {\n        \"properties\" : {\n            \"suggest\" : {\n                \"type\" : \"completion\",\n                \"contexts\": [\n                    { <3>\n                        \"name\": \"place_type\",\n                        \"type\": \"category\",\n                        \"path\": \"cat\"\n                    },\n                    { <4>\n                        \"name\": \"location\",\n                        \"type\": \"geo\",\n                        \"precision\": 4,\n                        \"path\": \"loc\"\n                    }\n                ]\n            },\n            \"loc\": {\n                \"type\": \"geo_point\"\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/place",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "suggest": {
                "type": "completion",
                "contexts": [
                  {
                    "name": "place_type",
                    "type": "category"
                  },
                  {
                    "name": "location",
                    "type": "geo",
                    "precision": 4
                  }
                ]
              }
            }
          }
        },
        "params": {
          "index": "place"
        },
        "api": "indices.create"
      },
      {
        "method": "PUT",
        "url": "/place_path_category",
        "query": null,
        "body": {
          "mappings": {
            "properties": {
              "suggest": {
                "type": "completion",
                "contexts": [
                  {
                    "name": "place_type",
                    "type": "category",
                    "path": "cat"
                  },
                  {
                    "name": "location",
                    "type": "geo",
                    "precision": 4,
                    "path": "loc"
                  }
                ]
              },
              "loc": {
                "type": "geo_point"
              }
            }
          }
        },
        "params": {
          "index": "place_path_category"
        },
        "api": "indices.create"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 100
    },
    "digest": "2e59a0f8721e27dd537566f4af7a568f",
    "lang": "console",
    "found": [],
    "source": "PUT place/_doc/1\n{\n    \"suggest\": {\n        \"input\": [\"timmy's\", \"starbucks\", \"dunkin donuts\"],\n        \"contexts\": {\n            \"place_type\": [\"cafe\", \"food\"] <1>\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/place/_doc/1",
        "query": null,
        "body": {
          "suggest": {
            "input": [
              "timmy's",
              "starbucks",
              "dunkin donuts"
            ],
            "contexts": {
              "place_type": [
                "cafe",
                "food"
              ]
            }
          }
        },
        "params": {
          "index": "place",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 118
    },
    "digest": "d2a53c6c16ff2305830f64a3efd5f61d",
    "lang": "console",
    "found": [],
    "source": "PUT place_path_category/_doc/1\n{\n    \"suggest\": [\"timmy's\", \"starbucks\", \"dunkin donuts\"],\n    \"cat\": [\"cafe\", \"food\"] <1>\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/place_path_category/_doc/1",
        "query": null,
        "body": {
          "suggest": [
            "timmy's",
            "starbucks",
            "dunkin donuts"
          ],
          "cat": [
            "cafe",
            "food"
          ]
        },
        "params": {
          "index": "place_path_category",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 140
    },
    "digest": "8c3e9da5f412261477c032b33f36a3e9",
    "lang": "console",
    "found": [],
    "source": "POST place/_search?pretty\n{\n    \"suggest\": {\n        \"place_suggestion\" : {\n            \"prefix\" : \"tim\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"size\": 10,\n                \"contexts\": {\n                    \"place_type\": [ \"cafe\", \"restaurants\" ]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/place/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "place_suggestion": {
              "prefix": "tim",
              "completion": {
                "field": "suggest",
                "size": 10,
                "contexts": {
                  "place_type": [
                    "cafe",
                    "restaurants"
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "place"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 168
    },
    "digest": "8ac73762800c9db1ae418bfc0bcfa65a",
    "lang": "console",
    "found": [],
    "source": "POST place/_search?pretty\n{\n    \"suggest\": {\n        \"place_suggestion\" : {\n            \"prefix\" : \"tim\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"size\": 10,\n                \"contexts\": {\n                    \"place_type\": [ <1>\n                        { \"context\" : \"cafe\" },\n                        { \"context\" : \"restaurants\", \"boost\": 2 }\n                     ]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/place/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "place_suggestion": {
              "prefix": "tim",
              "completion": {
                "field": "suggest",
                "size": 10,
                "contexts": {
                  "place_type": [
                    {
                      "context": "cafe"
                    },
                    {
                      "context": "restaurants",
                      "boost": 2
                    }
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "place"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 253
    },
    "digest": "182162241e42f16f5860ea26fdc52c7e",
    "lang": "console",
    "found": [],
    "source": "PUT place/_doc/1\n{\n    \"suggest\": {\n        \"input\": \"timmy's\",\n        \"contexts\": {\n            \"location\": [\n                {\n                    \"lat\": 43.6624803,\n                    \"lon\": -79.3863353\n                },\n                {\n                    \"lat\": 43.6624718,\n                    \"lon\": -79.3873227\n                }\n            ]\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/place/_doc/1",
        "query": null,
        "body": {
          "suggest": {
            "input": "timmy's",
            "contexts": {
              "location": [
                {
                  "lat": 43.6624803,
                  "lon": -79.3863353
                },
                {
                  "lat": 43.6624718,
                  "lon": -79.3873227
                }
              ]
            }
          }
        },
        "params": {
          "index": "place",
          "id": "1"
        },
        "api": "index"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 282
    },
    "digest": "bc79a8936474faf7de6d3c9872678176",
    "lang": "console",
    "found": [],
    "source": "POST place/_search\n{\n    \"suggest\": {\n        \"place_suggestion\" : {\n            \"prefix\" : \"tim\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"size\": 10,\n                \"contexts\": {\n                    \"location\": {\n                        \"lat\": 43.662,\n                        \"lon\": -79.380\n                    }\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/place/_search",
        "query": null,
        "body": {
          "suggest": {
            "place_suggestion": {
              "prefix": "tim",
              "completion": {
                "field": "suggest",
                "size": 10,
                "contexts": {
                  "location": {
                    "lat": 43.662,
                    "lon": -79.38
                  }
                }
              }
            }
          }
        },
        "params": {
          "index": "place"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/context-suggest.asciidoc",
      "line": 315
    },
    "digest": "837c765a38fa0fd5f01b1559138469be",
    "lang": "console",
    "found": [],
    "source": "POST place/_search?pretty\n{\n    \"suggest\": {\n        \"place_suggestion\" : {\n            \"prefix\" : \"tim\",\n            \"completion\" : {\n                \"field\" : \"suggest\",\n                \"size\": 10,\n                \"contexts\": {\n                    \"location\": [ <1>\n                        {\n                            \"lat\": 43.6624803,\n                            \"lon\": -79.3863353,\n                            \"precision\": 2\n                        },\n                        {\n                            \"context\": {\n                                \"lat\": 43.6624803,\n                                \"lon\": -79.3863353\n                            },\n                            \"boost\": 2\n                        }\n                     ]\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/place/_search",
        "query": {
          "pretty": true
        },
        "body": {
          "suggest": {
            "place_suggestion": {
              "prefix": "tim",
              "completion": {
                "field": "suggest",
                "size": 10,
                "contexts": {
                  "location": [
                    {
                      "lat": 43.6624803,
                      "lon": -79.3863353,
                      "precision": 2
                    },
                    {
                      "context": {
                        "lat": 43.6624803,
                        "lon": -79.3863353
                      },
                      "boost": 2
                    }
                  ]
                }
              }
            }
          }
        },
        "params": {
          "index": "place"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/misc.asciidoc",
      "line": 10
    },
    "digest": "e194e9cbe3eb2305f4f7cdda0cf529bd",
    "lang": "console",
    "found": [],
    "source": "POST _search?typed_keys\n{\n  \"suggest\": {\n    \"text\" : \"some test mssage\",\n    \"my-first-suggester\" : {\n      \"term\" : {\n        \"field\" : \"message\"\n      }\n    },\n    \"my-second-suggester\" : {\n      \"phrase\" : {\n        \"field\" : \"message\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_search",
        "query": {
          "typed_keys": true
        },
        "body": {
          "suggest": {
            "text": "some test mssage",
            "my-first-suggester": {
              "term": {
                "field": "message"
              }
            },
            "my-second-suggester": {
              "phrase": {
                "field": "message"
              }
            }
          }
        },
        "params": null,
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/suggesters/misc.asciidoc",
      "line": 34
    },
    "digest": "e271c47fe54d36c6e09791d1a50ce314",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"suggest\": {\n    \"term#my-first-suggester\": [ <1>\n      {\n        \"text\": \"some\",\n        \"offset\": 0,\n        \"length\": 4,\n        \"options\": []\n      },\n      {\n        \"text\": \"test\",\n        \"offset\": 5,\n        \"length\": 4,\n        \"options\": []\n      },\n      {\n        \"text\": \"mssage\",\n        \"offset\": 10,\n        \"length\": 6,\n        \"options\": [\n          {\n            \"text\": \"message\",\n            \"score\": 0.8333333,\n            \"freq\": 4\n          }\n        ]\n      }\n    ],\n    \"phrase#my-second-suggester\": [ <2>\n      {\n        \"text\": \"some test mssage\",\n        \"offset\": 0,\n        \"length\": 16,\n        \"options\": [\n          {\n            \"text\": \"some test message\",\n            \"score\": 0.030227963\n          }\n        ]\n      }\n    ]\n  },\n  ...\n}"
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 7
    },
    "digest": "58a2a71be35e770b50914753740ec91e",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_msearch\n{ }\n{\"query\" : {\"match\" : { \"message\": \"this is a test\"}}}\n{\"index\": \"twitter2\"}\n{\"query\" : {\"match_all\" : {}}}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_msearch",
        "query": null,
        "body": [
          {},
          {
            "query": {
              "match": {
                "message": "this is a test"
              }
            }
          },
          {
            "index": "twitter2"
          },
          {
            "query": {
              "match_all": {}
            }
          }
        ],
        "params": {
          "index": "twitter"
        },
        "api": "msearch"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 288
    },
    "digest": "05af5eab63bf98d0078dfe661cd81124",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_msearch\n{}\n{\"query\" : {\"match_all\" : {}}, \"from\" : 0, \"size\" : 10}\n{}\n{\"query\" : {\"match_all\" : {}}}\n{\"index\" : \"twitter2\"}\n{\"query\" : {\"match_all\" : {}}}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_msearch",
        "query": null,
        "body": [
          {},
          {
            "query": {
              "match_all": {}
            },
            "from": 0,
            "size": 10
          },
          {},
          {
            "query": {
              "match_all": {}
            }
          },
          {
            "index": "twitter2"
          },
          {
            "query": {
              "match_all": {}
            }
          }
        ],
        "params": {
          "index": "twitter"
        },
        "api": "msearch"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 321
    },
    "digest": "a914be2ff7dd0cbdec0257f0ad50b625",
    "lang": "console",
    "found": [],
    "source": "GET _msearch/template\n{\"index\" : \"twitter\"}\n{ \"source\" : \"{ \\\"query\\\": { \\\"match\\\": { \\\"message\\\" : \\\"{{keywords}}\\\" } } } }\", \"params\": { \"query_type\": \"match\", \"keywords\": \"some message\" } }\n{\"index\" : \"twitter\"}\n{ \"source\" : \"{ \\\"query\\\": { \\\"match_{{template}}\\\": {} } }\", \"params\": { \"template\": \"all\" } }",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_msearch/template",
        "query": null,
        "body": [
          {
            "index": "twitter"
          },
          {
            "source": "{ \"query\": { \"match\": { \"message\" : \"{{keywords}}\" } } } }",
            "params": {
              "query_type": "match",
              "keywords": "some message"
            }
          },
          {
            "index": "twitter"
          },
          {
            "source": "{ \"query\": { \"match_{{template}}\": {} } }",
            "params": {
              "template": "all"
            }
          }
        ],
        "params": null,
        "api": "msearch_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 334
    },
    "digest": "28e66ff0ecdd71cb1426880115eab5dd",
    "lang": "console",
    "found": [],
    "source": "POST /_scripts/my_template_1\n{\n    \"script\": {\n        \"lang\": \"mustache\",\n        \"source\": {\n            \"query\": {\n                \"match\": {\n                    \"message\": \"{{query_string}}\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_scripts/my_template_1",
        "query": null,
        "body": {
          "script": {
            "lang": "mustache",
            "source": {
              "query": {
                "match": {
                  "message": "{{query_string}}"
                }
              }
            }
          }
        },
        "params": {
          "id": "my_template_1"
        },
        "api": "put_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 353
    },
    "digest": "72e72cb3aa1b10b903d8cadcaddf7d10",
    "lang": "console",
    "found": [],
    "source": "POST /_scripts/my_template_2\n{\n    \"script\": {\n        \"lang\": \"mustache\",\n        \"source\": {\n            \"query\": {\n                \"term\": {\n                    \"{{field}}\": \"{{value}}\"\n                }\n            }\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_scripts/my_template_2",
        "query": null,
        "body": {
          "script": {
            "lang": "mustache",
            "source": {
              "query": {
                "term": {
                  "{{field}}": "{{value}}"
                }
              }
            }
          }
        },
        "params": {
          "id": "my_template_2"
        },
        "api": "put_script"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/multi-search.asciidoc",
      "line": 373
    },
    "digest": "8b4c8f395c0a6f952a42051a0d357154",
    "lang": "console",
    "found": [],
    "source": "GET _msearch/template\n{\"index\" : \"main\"}\n{ \"id\": \"my_template_1\", \"params\": { \"query_string\": \"some message\" } }\n{\"index\" : \"main\"}\n{ \"id\": \"my_template_2\", \"params\": { \"field\": \"user\", \"value\": \"test\" } }",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_msearch/template",
        "query": null,
        "body": [
          {
            "index": "main"
          },
          {
            "id": "my_template_1",
            "params": {
              "query_string": "some message"
            }
          },
          {
            "index": "main"
          },
          {
            "id": "my_template_2",
            "params": {
              "field": "user",
              "value": "test"
            }
          }
        ],
        "params": null,
        "api": "msearch_template"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/count.asciidoc",
      "line": 7
    },
    "digest": "1b542e3ea87a742f95641d64dcfb1bdb",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_count?q=user:kimchy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_count",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "count"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/count.asciidoc",
      "line": 92
    },
    "digest": "8f0511f8a5cb176ff2afdd4311799a33",
    "lang": "console",
    "found": [],
    "source": "PUT /twitter/_doc/1?refresh\n{\n    \"user\": \"kimchy\"\n}\n\nGET /twitter/_count?q=user:kimchy\n\nGET /twitter/_count\n{\n    \"query\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_doc/1",
        "query": {
          "refresh": true
        },
        "body": {
          "user": "kimchy"
        },
        "params": {
          "index": "twitter",
          "id": "1"
        },
        "api": "index"
      },
      {
        "method": "GET",
        "url": "/twitter/_count",
        "query": {
          "q": "user:kimchy"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "count"
      },
      {
        "method": "GET",
        "url": "/twitter/_count",
        "query": null,
        "body": {
          "query": {
            "term": {
              "user": "kimchy"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "count"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/count.asciidoc",
      "line": 112
    },
    "digest": "ff7c62cdac9ce9ba27890ff93c28e805",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"count\" : 1,\n    \"_shards\" : {\n        \"total\" : 1,\n        \"successful\" : 1,\n        \"skipped\" : 0,\n        \"failed\" : 0\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 7
    },
    "digest": "6bdf94c025faf346013a70e3473d5f87",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query?q=user:foo",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": {
          "q": "user:foo"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 75
    },
    "digest": "a0a6e4abbf0a5d064d06d06ddc585f4c",
    "lang": "console",
    "found": [],
    "source": "PUT twitter/_bulk?refresh\n{\"index\":{\"_id\":1}}\n{\"user\" : \"kimchy\", \"post_date\" : \"2009-11-15T14:12:12\", \"message\" : \"trying out Elasticsearch\"}\n{\"index\":{\"_id\":2}}\n{\"user\" : \"kimchi\", \"post_date\" : \"2009-11-15T14:12:13\", \"message\" : \"My username is similar to @kimchy!\"}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/twitter/_bulk",
        "query": {
          "refresh": true
        },
        "body": [
          {
            "index": {
              "_id": 1
            }
          },
          {
            "user": "kimchy",
            "post_date": "2009-11-15T14:12:12",
            "message": "trying out Elasticsearch"
          },
          {
            "index": {
              "_id": 2
            }
          },
          {
            "user": "kimchi",
            "post_date": "2009-11-15T14:12:13",
            "message": "My username is similar to @kimchy!"
          }
        ],
        "params": {
          "index": "twitter"
        },
        "api": "bulk"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 87
    },
    "digest": "6bdf94c025faf346013a70e3473d5f87",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query?q=user:foo",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": {
          "q": "user:foo"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 96
    },
    "digest": "dde3105cdd6190eb8c8c392f5fcfcce5",
    "lang": "console-result",
    "found": [],
    "source": "{\"valid\":true,\"_shards\":{\"total\":1,\"successful\":1,\"failed\":0}}"
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 104
    },
    "digest": "1a0ce57a5e6d73765601de98a5d60d80",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query\n{\n  \"query\" : {\n    \"bool\" : {\n      \"must\" : {\n        \"query_string\" : {\n          \"query\" : \"*:*\"\n        }\n      },\n      \"filter\" : {\n        \"term\" : { \"user\" : \"kimchy\" }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": null,
        "body": {
          "query": {
            "bool": {
              "must": {
                "query_string": {
                  "query": "*:*"
                }
              },
              "filter": {
                "term": {
                  "user": "kimchy"
                }
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 131
    },
    "digest": "9989c7860423519c7357936a73c2a5ce",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"post_date:foo\",\n      \"lenient\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": null,
        "body": {
          "query": {
            "query_string": {
              "query": "post_date:foo",
              "lenient": false
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 145
    },
    "digest": "bda06f3e3031f6ef16990d18c6e261d7",
    "lang": "console-result",
    "found": [],
    "source": "{\"valid\":false,\"_shards\":{\"total\":1,\"successful\":1,\"failed\":0}}"
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 155
    },
    "digest": "b5cd0cc45db5f2fba30ac310630ad172",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query?explain=true\n{\n  \"query\": {\n    \"query_string\": {\n      \"query\": \"post_date:foo\",\n      \"lenient\": false\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": {
          "explain": "true"
        },
        "body": {
          "query": {
            "query_string": {
              "query": "post_date:foo",
              "lenient": false
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 172
    },
    "digest": "98f290a4192fd07d63b1d072fbe56cb9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"valid\" : false,\n  \"_shards\" : {\n    \"total\" : 1,\n    \"successful\" : 1,\n    \"failed\" : 0\n  },\n  \"explanations\" : [ {\n    \"index\" : \"twitter\",\n    \"valid\" : false,\n    \"error\" : \"twitter/IAEc2nIXSSunQA_suI0MLw] QueryShardException[failed to create query:...failed to parse date field [foo]\"\n  } ]\n}"
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 196
    },
    "digest": "fd74d7518bab5f1dbc1fed588b9bc2a6",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query?rewrite=true\n{\n  \"query\": {\n    \"more_like_this\": {\n      \"like\": {\n        \"_id\": \"2\"\n      },\n      \"boost_terms\": 1\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": {
          "rewrite": "true"
        },
        "body": {
          "query": {
            "more_like_this": {
              "like": {
                "_id": "2"
              },
              "boost_terms": 1
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 215
    },
    "digest": "d62feb691bcd5e6a52c5e3a845b6d613",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"valid\": true,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"failed\": 0\n   },\n   \"explanations\": [\n      {\n         \"index\": \"twitter\",\n         \"valid\": true,\n         \"explanation\": \"((user:terminator^3.71334 plot:future^2.763601 plot:human^2.8415773 plot:sarah^3.4193945 plot:kyle^3.8244398 plot:cyborg^3.9177752 plot:connor^4.040236 plot:reese^4.7133346 ... )~6) -ConstantScore(_id:2)) #(ConstantScore(_type:_doc))^0.0\"\n      }\n   ]\n}"
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 254
    },
    "digest": "d253135ac0a4b3b04531b1a5d2a19279",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_validate/query?rewrite=true&all_shards=true\n{\n  \"query\": {\n    \"match\": {\n      \"user\": {\n        \"query\": \"kimchy\",\n        \"fuzziness\": \"auto\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_validate/query",
        "query": {
          "rewrite": "true",
          "all_shards": "true"
        },
        "body": {
          "query": {
            "match": {
              "user": {
                "query": "kimchy",
                "fuzziness": "auto"
              }
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "indices.validate_query"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/validate.asciidoc",
      "line": 272
    },
    "digest": "76f99d22c1a295f11ade1d073ef25da7",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"valid\": true,\n  \"_shards\": {\n    \"total\": 1,\n    \"successful\": 1,\n    \"failed\": 0\n  },\n  \"explanations\": [\n    {\n      \"index\": \"twitter\",\n      \"shard\": 0,\n      \"valid\": true,\n      \"explanation\": \"(user:kimchi)^0.8333333 user:kimchy\"\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "search/explain.asciidoc",
      "line": 8
    },
    "digest": "abfec22fbe7d571711cc65661ca887ee",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_explain/0\n{\n      \"query\" : {\n        \"match\" : { \"message\" : \"elasticsearch\" }\n      }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_explain/0",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/explain.asciidoc",
      "line": 89
    },
    "digest": "abfec22fbe7d571711cc65661ca887ee",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_explain/0\n{\n      \"query\" : {\n        \"match\" : { \"message\" : \"elasticsearch\" }\n      }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_explain/0",
        "query": null,
        "body": {
          "query": {
            "match": {
              "message": "elasticsearch"
            }
          }
        },
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/explain.asciidoc",
      "line": 103
    },
    "digest": "d7b94ea9b12e159f417deba419272791",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"_index\":\"twitter\",\n   \"_id\":\"0\",\n   \"matched\":true,\n   \"explanation\":{\n      \"value\":1.6943598,\n      \"description\":\"weight(message:elasticsearch in 0) [PerFieldSimilarity], result of:\",\n      \"details\":[\n         {\n            \"value\":1.6943598,\n            \"description\":\"score(freq=1.0), computed as boost * idf * tf from:\",\n            \"details\":[\n               {\n                  \"value\":2.2,\n                  \"description\":\"boost\",\n                  \"details\":[]\n               },\n               {\n                  \"value\":1.3862944,\n                  \"description\":\"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\",\n                  \"details\":[\n                     {\n                        \"value\":1,\n                        \"description\":\"n, number of documents containing term\",\n                        \"details\":[]\n                     },\n                     {\n                        \"value\":5,\n                        \"description\":\"N, total number of documents with field\",\n                        \"details\":[]\n                     }\n                  ]\n               },\n               {\n                  \"value\":0.5555556,\n                  \"description\":\"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\",\n                  \"details\":[\n                     {\n                        \"value\":1.0,\n                        \"description\":\"freq, occurrences of term within document\",\n                        \"details\":[]\n                     },\n                     {\n                        \"value\":1.2,\n                        \"description\":\"k1, term saturation parameter\",\n                        \"details\":[]\n                     },\n                     {\n                        \"value\":0.75,\n                        \"description\":\"b, length normalization parameter\",\n                        \"details\":[]\n                     },\n                     {\n                        \"value\":3.0,\n                        \"description\":\"dl, length of field\",\n                        \"details\":[]\n                     },\n                     {\n                        \"value\":5.4,\n                        \"description\":\"avgdl, average length of field\",\n                        \"details\":[]\n                     }\n                  ]\n               }\n            ]\n         }\n      ]\n   }\n}"
  },
  {
    "source_location": {
      "file": "search/explain.asciidoc",
      "line": 182
    },
    "digest": "5032518611d928d1f802e215cf79c550",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_explain/0?q=message:search",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_explain/0",
        "query": {
          "q": "message:search"
        },
        "body": null,
        "params": {
          "index": "twitter",
          "id": "0"
        },
        "api": "explain"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 32
    },
    "digest": "f6e300010478e5cbbeb2e589bc16fce7",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"profile\": true,<1>\n  \"query\" : {\n    \"match\" : { \"message\" : \"some number\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "profile": true,
          "query": {
            "match": {
              "message": "some number"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 50
    },
    "digest": "8ef02d4ca4e1c06fcd7d81ed52c8848d",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"took\": 25,\n   \"timed_out\": false,\n   \"_shards\": {\n      \"total\": 1,\n      \"successful\": 1,\n      \"skipped\" : 0,\n      \"failed\": 0\n   },\n   \"hits\": {\n      \"total\" : {\n          \"value\": 4,\n          \"relation\": \"eq\"\n      },\n      \"max_score\": 0.5093388,\n      \"hits\": [...] <1>\n   },\n   \"profile\": {\n     \"shards\": [\n        {\n           \"id\": \"[2aE02wS1R8q_QFnYu6vDVQ][twitter][0]\",\n           \"searches\": [\n              {\n                 \"query\": [\n                    {\n                       \"type\": \"BooleanQuery\",\n                       \"description\": \"message:some message:number\",\n                       \"time_in_nanos\": \"1873811\",\n                       \"breakdown\": {\n                          \"score\": 51306,\n                          \"score_count\": 4,\n                          \"build_scorer\": 2935582,\n                          \"build_scorer_count\": 1,\n                          \"match\": 0,\n                          \"match_count\": 0,\n                          \"create_weight\": 919297,\n                          \"create_weight_count\": 1,\n                          \"next_doc\": 53876,\n                          \"next_doc_count\": 5,\n                          \"advance\": 0,\n                          \"advance_count\": 0,\n                          \"compute_max_score\": 0,\n                          \"compute_max_score_count\": 0,\n                          \"shallow_advance\": 0,\n                          \"shallow_advance_count\": 0,\n                          \"set_min_competitive_score\": 0,\n                          \"set_min_competitive_score_count\": 0\n                       },\n                       \"children\": [\n                          {\n                             \"type\": \"TermQuery\",\n                             \"description\": \"message:some\",\n                             \"time_in_nanos\": \"391943\",\n                             \"breakdown\": {\n                                \"score\": 28776,\n                                \"score_count\": 4,\n                                \"build_scorer\": 784451,\n                                \"build_scorer_count\": 1,\n                                \"match\": 0,\n                                \"match_count\": 0,\n                                \"create_weight\": 1669564,\n                                \"create_weight_count\": 1,\n                                \"next_doc\": 10111,\n                                \"next_doc_count\": 5,\n                                \"advance\": 0,\n                                \"advance_count\": 0,\n                                \"compute_max_score\": 0,\n                                \"compute_max_score_count\": 0,\n                                \"shallow_advance\": 0,\n                                \"shallow_advance_count\": 0,\n                                \"set_min_competitive_score\": 0,\n                                \"set_min_competitive_score_count\": 0\n                             }\n                          },\n                          {\n                             \"type\": \"TermQuery\",\n                             \"description\": \"message:number\",\n                             \"time_in_nanos\": \"210682\",\n                             \"breakdown\": {\n                                \"score\": 4552,\n                                \"score_count\": 4,\n                                \"build_scorer\": 42602,\n                                \"build_scorer_count\": 1,\n                                \"match\": 0,\n                                \"match_count\": 0,\n                                \"create_weight\": 89323,\n                                \"create_weight_count\": 1,\n                                \"next_doc\": 2852,\n                                \"next_doc_count\": 5,\n                                \"advance\": 0,\n                                \"advance_count\": 0,\n                                \"compute_max_score\": 0,\n                                \"compute_max_score_count\": 0,\n                                \"shallow_advance\": 0,\n                                \"shallow_advance_count\": 0,\n                                \"set_min_competitive_score\": 0,\n                                \"set_min_competitive_score_count\": 0\n                             }\n                          }\n                       ]\n                    }\n                 ],\n                 \"rewrite_time\": 51443,\n                 \"collector\": [\n                    {\n                       \"name\": \"SimpleTopScoreDocCollector\",\n                       \"reason\": \"search_top_hits\",\n                       \"time_in_nanos\": \"32273\"\n                    }\n                 ]\n              }\n           ],\n           \"aggregations\": []\n        }\n     ]\n   }\n}"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 183
    },
    "digest": "0bc2dcf8d456b6f751f87ea2ac991bdb",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"profile\": {\n        \"shards\": [\n           {\n              \"id\": \"[2aE02wS1R8q_QFnYu6vDVQ][twitter][0]\",  <1>\n              \"searches\": [\n                 {\n                    \"query\": [...],             <2>\n                    \"rewrite_time\": 51443,      <3>\n                    \"collector\": [...]          <4>\n                 }\n              ],\n              \"aggregations\": [...]             <5>\n           }\n        ]\n     }\n}"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 270
    },
    "digest": "b32f9ae3eabdac3c080746da78b17c07",
    "lang": "console-result",
    "found": [],
    "source": "\"query\": [\n    {\n       \"type\": \"BooleanQuery\",\n       \"description\": \"message:some message:number\",\n       \"time_in_nanos\": \"1873811\",\n       \"breakdown\": {...},               <1>\n       \"children\": [\n          {\n             \"type\": \"TermQuery\",\n             \"description\": \"message:some\",\n             \"time_in_nanos\": \"391943\",\n             \"breakdown\": {...}\n          },\n          {\n             \"type\": \"TermQuery\",\n             \"description\": \"message:number\",\n             \"time_in_nanos\": \"210682\",\n             \"breakdown\": {...}\n          }\n       ]\n    }\n]"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 324
    },
    "digest": "d6e15d48186be56cbf86a10b7e5b606e",
    "lang": "console-result",
    "found": [],
    "source": "\"breakdown\": {\n   \"score\": 51306,\n   \"score_count\": 4,\n   \"build_scorer\": 2935582,\n   \"build_scorer_count\": 1,\n   \"match\": 0,\n   \"match_count\": 0,\n   \"create_weight\": 919297,\n   \"create_weight_count\": 1,\n   \"next_doc\": 53876,\n   \"next_doc_count\": 5,\n   \"advance\": 0,\n   \"advance_count\": 0,\n   \"compute_max_score\": 0,\n   \"compute_max_score_count\": 0,\n   \"shallow_advance\": 0,\n   \"shallow_advance_count\": 0,\n   \"set_min_competitive_score\": 0,\n   \"set_min_competitive_score_count\": 0\n}"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 438
    },
    "digest": "0d40216bed29737d0bf4bed3d211e14a",
    "lang": "console-result",
    "found": [],
    "source": "\"collector\": [\n   {\n      \"name\": \"SimpleTopScoreDocCollector\",\n      \"reason\": \"search_top_hits\",\n      \"time_in_nanos\": \"32273\"\n   }\n]"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 533
    },
    "digest": "d8621790a416f05557c8df037a3722ac",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"profile\": true,\n  \"query\": {\n    \"term\": {\n      \"user\": {\n        \"value\": \"test\"\n      }\n    }\n  },\n  \"aggs\": {\n    \"my_scoped_agg\": {\n      \"terms\": {\n        \"field\": \"likes\"\n      }\n    },\n    \"my_global_agg\": {\n      \"global\": {},\n      \"aggs\": {\n        \"my_level_agg\": {\n          \"terms\": {\n            \"field\": \"likes\"\n          }\n        }\n      }\n    }\n  },\n  \"post_filter\": {\n    \"match\": {\n      \"message\": \"some\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "profile": true,
          "query": {
            "term": {
              "user": {
                "value": "test"
              }
            }
          },
          "aggs": {
            "my_scoped_agg": {
              "terms": {
                "field": "likes"
              }
            },
            "my_global_agg": {
              "global": {},
              "aggs": {
                "my_level_agg": {
                  "terms": {
                    "field": "likes"
                  }
                }
              }
            }
          },
          "post_filter": {
            "match": {
              "message": "some"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 582
    },
    "digest": "7eaffb4a19c19aa24533f76be06327b0",
    "lang": "console-result",
    "found": [],
    "source": "{\n   ...\n   \"profile\": {\n         \"shards\": [\n            {\n               \"id\": \"[P6-vulHtQRWuD4YnubWb7A][test][0]\",\n               \"searches\": [\n                  {\n                     \"query\": [\n                        {\n                           \"type\": \"TermQuery\",\n                           \"description\": \"message:some\",\n                           \"time_in_nanos\": \"409456\",\n                           \"breakdown\": {\n                              \"score\": 0,\n                              \"build_scorer_count\": 1,\n                              \"match_count\": 0,\n                              \"create_weight\": 31584,\n                              \"next_doc\": 0,\n                              \"match\": 0,\n                              \"create_weight_count\": 1,\n                              \"next_doc_count\": 2,\n                              \"score_count\": 1,\n                              \"build_scorer\": 377872,\n                              \"advance\": 0,\n                              \"advance_count\": 0,\n                              \"compute_max_score\": 0,\n                              \"compute_max_score_count\": 0,\n                              \"shallow_advance\": 0,\n                              \"shallow_advance_count\": 0,\n                              \"set_min_competitive_score\": 0,\n                              \"set_min_competitive_score_count\": 0\n                           }\n                        },\n                        {\n                           \"type\": \"TermQuery\",\n                           \"description\": \"user:test\",\n                           \"time_in_nanos\": \"303702\",\n                           \"breakdown\": {\n                              \"score\": 0,\n                              \"build_scorer_count\": 1,\n                              \"match_count\": 0,\n                              \"create_weight\": 185215,\n                              \"next_doc\": 5936,\n                              \"match\": 0,\n                              \"create_weight_count\": 1,\n                              \"next_doc_count\": 2,\n                              \"score_count\": 1,\n                              \"build_scorer\": 112551,\n                              \"advance\": 0,\n                              \"advance_count\": 0,\n                              \"compute_max_score\": 0,\n                              \"compute_max_score_count\": 0,\n                              \"shallow_advance\": 0,\n                              \"shallow_advance_count\": 0,\n                              \"set_min_competitive_score\": 0,\n                              \"set_min_competitive_score_count\": 0\n                           }\n                        }\n                     ],\n                     \"rewrite_time\": 7208,\n                     \"collector\": [\n                        {\n                          \"name\": \"MultiCollector\",\n                          \"reason\": \"search_multi\",\n                          \"time_in_nanos\": 1820,\n                          \"children\": [\n                            {\n                              \"name\": \"FilteredCollector\",\n                              \"reason\": \"search_post_filter\",\n                              \"time_in_nanos\": 7735,\n                              \"children\": [\n                                {\n                                  \"name\": \"SimpleTopScoreDocCollector\",\n                                  \"reason\": \"search_top_hits\",\n                                  \"time_in_nanos\": 1328\n                                }\n                              ]\n                            },\n                            {\n                              \"name\": \"MultiBucketCollector: [[my_scoped_agg, my_global_agg]]\",\n                              \"reason\": \"aggregation\",\n                              \"time_in_nanos\": 8273\n                            }\n                          ]\n                        }\n                     ]\n                  }\n               ],\n               \"aggregations\": [...] <1>\n            }\n         ]\n      }\n}"
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 736
    },
    "digest": "d8621790a416f05557c8df037a3722ac",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_search\n{\n  \"profile\": true,\n  \"query\": {\n    \"term\": {\n      \"user\": {\n        \"value\": \"test\"\n      }\n    }\n  },\n  \"aggs\": {\n    \"my_scoped_agg\": {\n      \"terms\": {\n        \"field\": \"likes\"\n      }\n    },\n    \"my_global_agg\": {\n      \"global\": {},\n      \"aggs\": {\n        \"my_level_agg\": {\n          \"terms\": {\n            \"field\": \"likes\"\n          }\n        }\n      }\n    }\n  },\n  \"post_filter\": {\n    \"match\": {\n      \"message\": \"some\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_search",
        "query": null,
        "body": {
          "profile": true,
          "query": {
            "term": {
              "user": {
                "value": "test"
              }
            }
          },
          "aggs": {
            "my_scoped_agg": {
              "terms": {
                "field": "likes"
              }
            },
            "my_global_agg": {
              "global": {},
              "aggs": {
                "my_level_agg": {
                  "terms": {
                    "field": "likes"
                  }
                }
              }
            }
          },
          "post_filter": {
            "match": {
              "message": "some"
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "search"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/profile.asciidoc",
      "line": 778
    },
    "digest": "7d93d12c40644381df1c9a19839f6ff2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"profile\" : {\n    \"shards\" : [\n      {\n        \"aggregations\" : [\n          {\n            \"type\" : \"LongTermsAggregator\",\n            \"description\" : \"my_scoped_agg\",\n            \"time_in_nanos\" : 195386,\n            \"breakdown\" : {\n              \"reduce\" : 0,\n              \"build_aggregation\" : 81171,\n              \"build_aggregation_count\" : 1,\n              \"initialize\" : 22753,\n              \"initialize_count\" : 1,\n              \"reduce_count\" : 0,\n              \"collect\" : 91456,\n              \"collect_count\" : 4\n            }\n          },\n          {\n            \"type\" : \"GlobalAggregator\",\n            \"description\" : \"my_global_agg\",\n            \"time_in_nanos\" : 190430,\n            \"breakdown\" : {\n              \"reduce\" : 0,\n              \"build_aggregation\" : 59990,\n              \"build_aggregation_count\" : 1,\n              \"initialize\" : 29619,\n              \"initialize_count\" : 1,\n              \"reduce_count\" : 0,\n              \"collect\" : 100815,\n              \"collect_count\" : 4\n            },\n            \"children\" : [\n              {\n                \"type\" : \"LongTermsAggregator\",\n                \"description\" : \"my_level_agg\",\n                \"time_in_nanos\" : 160329,\n                \"breakdown\" : {\n                  \"reduce\" : 0,\n                  \"build_aggregation\" : 55712,\n                  \"build_aggregation_count\" : 1,\n                  \"initialize\" : 10559,\n                  \"initialize_count\" : 1,\n                  \"reduce_count\" : 0,\n                  \"collect\" : 94052,\n                  \"collect_count\" : 4\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}"
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 7
    },
    "digest": "38f7739f750f1411bccf511a0abaaea3",
    "lang": "console",
    "found": [],
    "source": "GET /_field_caps?fields=rating",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_field_caps",
        "query": {
          "fields": "rating"
        },
        "body": null,
        "params": null,
        "api": "field_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 97
    },
    "digest": "614bd49400b6ebf47c5b12839dd1ecb8",
    "lang": "console",
    "found": [],
    "source": "GET twitter/_field_caps?fields=rating",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_field_caps",
        "query": {
          "fields": "rating"
        },
        "body": null,
        "params": {
          "index": "twitter"
        },
        "api": "field_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 107
    },
    "digest": "a985e6b7b2ead9c3f30a9bc97d8b598e",
    "lang": "console",
    "found": [],
    "source": "GET _field_caps?fields=rating,title",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_field_caps",
        "query": {
          "fields": "rating,title"
        },
        "body": null,
        "params": null,
        "api": "field_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 114
    },
    "digest": "54f2c3b8888f8924a7ecb1f55e2d480a",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"indices\": [\"index1\", \"index2\", \"index3\", \"index4\", \"index5\"],\n    \"fields\": {\n        \"rating\": { <1>\n            \"long\": {\n                \"searchable\": true,\n                \"aggregatable\": false,\n                \"indices\": [\"index1\", \"index2\"],\n                \"non_aggregatable_indices\": [\"index1\"] <2>\n            },\n            \"keyword\": {\n                \"searchable\": false,\n                \"aggregatable\": true,\n                \"indices\": [\"index3\", \"index4\"],\n                \"non_searchable_indices\": [\"index4\"] <3>\n            }\n        },\n        \"title\": { <4>\n            \"text\": {\n                \"searchable\": true,\n                \"aggregatable\": false\n\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 155
    },
    "digest": "4e931cfac74e46e221cf4a9ab88a182d",
    "lang": "console",
    "found": [],
    "source": "GET _field_caps?fields=rating,title&include_unmapped",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_field_caps",
        "query": {
          "fields": "rating,title",
          "include_unmapped": true
        },
        "body": null,
        "params": null,
        "api": "field_caps"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/field-caps.asciidoc",
      "line": 163
    },
    "digest": "21a1680f14093b44b20a674c3f4991a8",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"indices\": [\"index1\", \"index2\", \"index3\"],\n    \"fields\": {\n        \"rating\": {\n            \"long\": {\n                \"searchable\": true,\n                \"aggregatable\": false,\n                \"indices\": [\"index1\", \"index2\"],\n                \"non_aggregatable_indices\": [\"index1\"]\n            },\n            \"keyword\": {\n                \"searchable\": false,\n                \"aggregatable\": true,\n                \"indices\": [\"index3\", \"index4\"],\n                \"non_searchable_indices\": [\"index4\"]\n            },\n            \"unmapped\": { <1>\n                \"indices\": [\"index5\"],\n                \"searchable\": false,\n                \"aggregatable\": false\n            }\n        },\n        \"title\": {\n            \"text\": {\n                \"indices\": [\"index1\", \"index2\", \"index3\", \"index4\"],\n                \"searchable\": true,\n                \"aggregatable\": false\n            },\n            \"unmapped\": { <2>\n                \"indices\": [\"index5\"]\n                \"searchable\": false,\n                \"aggregatable\": false\n            }\n        }\n    }\n}"
  },
  {
    "source_location": {
      "file": "search/rank-eval.asciidoc",
      "line": 223
    },
    "digest": "2a989679e4b71569e17e02db8865b685",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_rank_eval\n{\n    \"requests\": [\n    {\n        \"id\": \"JFK query\",\n        \"request\": { \"query\": { \"match_all\": {}}},\n        \"ratings\": []\n    }],\n    \"metric\": {\n      \"precision\": {\n        \"k\" : 20,\n        \"relevant_rating_threshold\": 1,\n        \"ignore_unlabeled\": false\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_rank_eval",
        "query": null,
        "body": {
          "requests": [
            {
              "id": "JFK query",
              "request": {
                "query": {
                  "match_all": {}
                }
              },
              "ratings": []
            }
          ],
          "metric": {
            "precision": {
              "k": 20,
              "relevant_rating_threshold": 1,
              "ignore_unlabeled": false
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "rank_eval"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/rank-eval.asciidoc",
      "line": 278
    },
    "digest": "b0b86fd5ac0d4814fc70cb0642cee258",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_rank_eval\n{\n    \"requests\": [\n    {\n        \"id\": \"JFK query\",\n        \"request\": { \"query\": { \"match_all\": {}}},\n        \"ratings\": []\n    }],\n    \"metric\": {\n      \"recall\": {\n        \"k\" : 20,\n        \"relevant_rating_threshold\": 1\n      }\n   }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_rank_eval",
        "query": null,
        "body": {
          "requests": [
            {
              "id": "JFK query",
              "request": {
                "query": {
                  "match_all": {}
                }
              },
              "ratings": []
            }
          ],
          "metric": {
            "recall": {
              "k": 20,
              "relevant_rating_threshold": 1
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "rank_eval"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/rank-eval.asciidoc",
      "line": 319
    },
    "digest": "351775a1f73e47025463bd937948f7b4",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_rank_eval\n{\n    \"requests\": [\n    {\n        \"id\": \"JFK query\",\n        \"request\": { \"query\": { \"match_all\": {}}},\n        \"ratings\": []\n    }],\n    \"metric\": {\n        \"mean_reciprocal_rank\": {\n            \"k\" : 20,\n            \"relevant_rating_threshold\" : 1\n        }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_rank_eval",
        "query": null,
        "body": {
          "requests": [
            {
              "id": "JFK query",
              "request": {
                "query": {
                  "match_all": {}
                }
              },
              "ratings": []
            }
          ],
          "metric": {
            "mean_reciprocal_rank": {
              "k": 20,
              "relevant_rating_threshold": 1
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "rank_eval"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/rank-eval.asciidoc",
      "line": 363
    },
    "digest": "c4f013ff1a8b80c87c0265a91ed12648",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_rank_eval\n{\n    \"requests\": [\n    {\n        \"id\": \"JFK query\",\n        \"request\": { \"query\": { \"match_all\": {}}},\n        \"ratings\": []\n    }],\n    \"metric\": {\n       \"dcg\": {\n            \"k\" : 20,\n            \"normalize\": false\n       }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_rank_eval",
        "query": null,
        "body": {
          "requests": [
            {
              "id": "JFK query",
              "request": {
                "query": {
                  "match_all": {}
                }
              },
              "ratings": []
            }
          ],
          "metric": {
            "dcg": {
              "k": 20,
              "normalize": false
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "rank_eval"
      }
    ]
  },
  {
    "source_location": {
      "file": "search/rank-eval.asciidoc",
      "line": 419
    },
    "digest": "12c4a9be9ffc26cdc0e9343d53c1fd5d",
    "lang": "console",
    "found": [],
    "source": "GET /twitter/_rank_eval\n{\n    \"requests\": [\n    {\n        \"id\": \"JFK query\",\n        \"request\": { \"query\": { \"match_all\": {}}},\n        \"ratings\": []\n    }],\n    \"metric\": {\n       \"expected_reciprocal_rank\": {\n            \"maximum_relevance\" : 3,\n            \"k\" : 20\n       }\n    }\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/twitter/_rank_eval",
        "query": null,
        "body": {
          "requests": [
            {
              "id": "JFK query",
              "request": {
                "query": {
                  "match_all": {}
                }
              },
              "ratings": []
            }
          ],
          "metric": {
            "expected_reciprocal_rank": {
              "maximum_relevance": 3,
              "k": 20
            }
          }
        },
        "params": {
          "index": "twitter"
        },
        "api": "rank_eval"
      }
    ]
  },
  {
    "source_location": {
      "file": "searchable-snapshots/apis/mount-snapshot.asciidoc",
      "line": 110
    },
    "digest": "098820242e25a05d6a4d962ad4132d1b",
    "lang": "console",
    "found": [],
    "source": "POST /_snapshot/my_repository/my_snapshot/_mount?wait_for_completion=true\n{\n  \"index\": \"my_docs\", <1>\n  \"renamed_index\": \"docs\", <2>\n  \"index_settings\": { <3>\n    \"index.number_of_replicas\": 0\n  },\n  \"ignored_index_settings\": [ \"index.refresh_interval\" ] <4>\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_snapshot/my_repository/my_snapshot/_mount",
        "query": {
          "wait_for_completion": "true"
        },
        "body": {
          "index": "my_docs",
          "renamed_index": "docs",
          "index_settings": {
            "index.number_of_replicas": 0
          },
          "ignored_index_settings": [
            "index.refresh_interval"
          ]
        },
        "params": {
          "repository": "my_repository",
          "snapshot": "my_snapshot"
        },
        "api": "searchable_snapshots.mount"
      }
    ]
  },
  {
    "source_location": {
      "file": "searchable-snapshots/apis/clear-cache.asciidoc",
      "line": 73
    },
    "digest": "69487bde55a1fc688a8cc5acf40b1555",
    "lang": "console",
    "found": [],
    "source": "POST /docs/_searchable_snapshots/cache/clear",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/docs/_searchable_snapshots/cache/clear",
        "query": null,
        "body": null,
        "params": {
          "index": "docs"
        },
        "api": "searchable_snapshots.clear_cache"
      }
    ]
  },
  {
    "source_location": {
      "file": "searchable-snapshots/apis/get-stats.asciidoc",
      "line": 73
    },
    "digest": "806b19ef04f9b5acc99a59da73aff282",
    "lang": "console",
    "found": [],
    "source": "GET /docs/_searchable_snapshots/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/docs/_searchable_snapshots/stats",
        "query": null,
        "body": null,
        "params": {
          "index": "docs"
        },
        "api": "searchable_snapshots.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "searchable-snapshots/apis/repository-stats.asciidoc",
      "line": 70
    },
    "digest": "ad607e070bd3191558e3e2cf2b5bc2ea",
    "lang": "console",
    "found": [],
    "source": "GET /_snapshot/my_repository/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/my_repository/_stats",
        "query": null,
        "body": null,
        "params": {
          "repository": "my_repository"
        },
        "api": "searchable_snapshots.repository_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/authenticate.asciidoc",
      "line": 35
    },
    "digest": "55f4a15b84b724b9fbf2efd29a4da120",
    "lang": "console",
    "found": [],
    "source": "GET /_security/_authenticate",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/_authenticate",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.authenticate"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/authenticate.asciidoc",
      "line": 42
    },
    "digest": "693ee6047801b0a7dce3f2560baa1a13",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"username\": \"rdeniro\",\n  \"roles\": [\n    \"admin\"\n  ],\n  \"full_name\": null,\n  \"email\":  null,\n  \"metadata\": { },\n  \"enabled\": true,\n  \"authentication_realm\": {\n    \"name\" : \"file\",\n    \"type\" : \"file\"\n  },\n  \"lookup_realm\": {\n    \"name\" : \"file\",\n    \"type\" : \"file\"\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/change-password.asciidoc",
      "line": 55
    },
    "digest": "a2d14f8f1ea3efe970887f7892fdb268",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/jacknich/_password\n{\n  \"password\" : \"s3cr3t\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/jacknich/_password",
        "query": null,
        "body": {
          "password": "s3cr3t"
        },
        "params": {
          "username": "jacknich"
        },
        "api": "security.change_password"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/change-password.asciidoc",
      "line": 66
    },
    "digest": "782a8820be17669905206e46d2c25178",
    "lang": "console-result",
    "found": [],
    "source": "{}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/clear-cache.asciidoc",
      "line": 48
    },
    "digest": "a5e2b3588258430f2e595abda98e3943",
    "lang": "console",
    "found": [],
    "source": "POST /_security/realm/default_file/_clear_cache",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/realm/default_file/_clear_cache",
        "query": null,
        "body": null,
        "params": {
          "realms": "default_file"
        },
        "api": "security.clear_cached_realms"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/clear-cache.asciidoc",
      "line": 55
    },
    "digest": "c1409f591a01589638d9b00436ce42c0",
    "lang": "console",
    "found": [],
    "source": "POST /_security/realm/default_file/_clear_cache?usernames=rdeniro,alpacino",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/realm/default_file/_clear_cache",
        "query": {
          "usernames": "rdeniro,alpacino"
        },
        "body": null,
        "params": {
          "realms": "default_file"
        },
        "api": "security.clear_cached_realms"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/clear-cache.asciidoc",
      "line": 63
    },
    "digest": "00272f75a6afea91f8554ef7cda0c1f2",
    "lang": "console",
    "found": [],
    "source": "POST /_security/realm/default_file,ldap1/_clear_cache",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/realm/default_file,ldap1/_clear_cache",
        "query": null,
        "body": null,
        "params": {
          "realms": "default_file,ldap1"
        },
        "api": "security.clear_cached_realms"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/clear-roles-cache.asciidoc",
      "line": 40
    },
    "digest": "ee577c4c7cc723e99569ea2d1137adba",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/my_admin_role/_clear_cache",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/my_admin_role/_clear_cache",
        "query": null,
        "body": null,
        "params": {
          "name": "my_admin_role"
        },
        "api": "security.clear_cached_roles"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-api-keys.asciidoc",
      "line": 70
    },
    "digest": "0c8f24166d0ce7b8792781b268b544a9",
    "lang": "console",
    "found": [],
    "source": "POST /_security/api_key\n{\n  \"name\": \"my-api-key\",\n  \"expiration\": \"1d\", <1>\n  \"role_descriptors\": { <2>\n    \"role-a\": {\n      \"cluster\": [\"all\"],\n      \"index\": [\n        {\n          \"names\": [\"index-a*\"],\n          \"privileges\": [\"read\"]\n        }\n      ]\n    },\n    \"role-b\": {\n      \"cluster\": [\"all\"],\n      \"index\": [\n        {\n          \"names\": [\"index-b*\"],\n          \"privileges\": [\"all\"]\n        }\n      ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "name": "my-api-key",
          "expiration": "1d",
          "role_descriptors": {
            "role-a": {
              "cluster": [
                "all"
              ],
              "index": [
                {
                  "names": [
                    "index-a*"
                  ],
                  "privileges": [
                    "read"
                  ]
                }
              ]
            },
            "role-b": {
              "cluster": [
                "all"
              ],
              "index": [
                {
                  "names": [
                    "index-b*"
                  ],
                  "privileges": [
                    "all"
                  ]
                }
              ]
            }
          }
        },
        "params": null,
        "api": "security.create_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-api-keys.asciidoc",
      "line": 106
    },
    "digest": "761e883344dbbbd26bdb50d1b7de257c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\":\"VuaCfGcBCdbkQm-e5aOx\", <1>\n  \"name\":\"my-api-key\",\n  \"expiration\":1544068612110, <2>\n  \"api_key\":\"ui2lp2axTNmsyakw9tvNnw\" <3>\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/put-app-privileges.asciidoc",
      "line": 88
    },
    "digest": "4ee31fd4ea6d18f32ec28b7fa433441d",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/privilege\n{\n  \"myapp\": {\n    \"read\": {\n      \"actions\": [ <1>\n        \"data:read/*\" , <2>\n        \"action:login\" ],\n        \"metadata\": { <3>\n          \"description\": \"Read access to myapp\"\n        }\n      }\n    }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/privilege",
        "query": null,
        "body": {
          "myapp": {
            "read": {
              "actions": [
                "data:read/*",
                "action:login"
              ],
              "metadata": {
                "description": "Read access to myapp"
              }
            }
          }
        },
        "params": null,
        "api": "security.put_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/put-app-privileges.asciidoc",
      "line": 114
    },
    "digest": "81a9dd74f26c4b89341cac7ebeb4c0e6",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"myapp\": {\n    \"read\": {\n      \"created\": true <1>\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/put-app-privileges.asciidoc",
      "line": 130
    },
    "digest": "ee90d1fb22b59d30da339d825303b912",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/privilege\n{\n  \"app01\": {\n    \"read\": {\n      \"actions\": [ \"action:login\", \"data:read/*\" ]\n    },\n    \"write\": {\n      \"actions\": [ \"action:login\", \"data:write/*\" ]\n    }\n  },\n  \"app02\": {\n    \"all\": {\n      \"actions\": [ \"*\" ]\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/privilege",
        "query": null,
        "body": {
          "app01": {
            "read": {
              "actions": [
                "action:login",
                "data:read/*"
              ]
            },
            "write": {
              "actions": [
                "action:login",
                "data:write/*"
              ]
            }
          },
          "app02": {
            "all": {
              "actions": [
                "*"
              ]
            }
          }
        },
        "params": null,
        "api": "security.put_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/put-app-privileges.asciidoc",
      "line": 153
    },
    "digest": "7269308683a9eb4ef6420e918391b791",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"app02\": {\n    \"all\": {\n      \"created\": true\n    }\n  },\n  \"app01\": {\n    \"read\": {\n      \"created\": true\n    },\n    \"write\": {\n      \"created\": true\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 113
    },
    "digest": "23b062c157235246d7c347b9047b2435",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping1\n{\n  \"roles\": [ \"user\"],\n  \"enabled\": true, <1>\n  \"rules\": {\n    \"field\" : { \"username\" : \"*\" }\n  },\n  \"metadata\" : { <2>\n    \"version\" : 1\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping1",
        "query": null,
        "body": {
          "roles": [
            "user"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "username": "*"
            }
          },
          "metadata": {
            "version": 1
          }
        },
        "params": {
          "name": "mapping1"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 134
    },
    "digest": "cf8cff0fb254f0e1009a01651b1526e9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"role_mapping\" : {\n    \"created\" : true <1>\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 147
    },
    "digest": "b176e0d428726705298184ef39ad5cb2",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping2\n{\n  \"roles\": [ \"user\", \"admin\" ],\n  \"enabled\": true,\n  \"rules\": {\n     \"field\" : { \"username\" : [ \"esadmin01\", \"esadmin02\" ] }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping2",
        "query": null,
        "body": {
          "roles": [
            "user",
            "admin"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "username": [
                "esadmin01",
                "esadmin02"
              ]
            }
          }
        },
        "params": {
          "name": "mapping2"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 160
    },
    "digest": "e60b7f75ca806f2c74927c3d9409a986",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping3\n{\n  \"roles\": [ \"ldap-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"field\" : { \"realm.name\" : \"ldap1\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping3",
        "query": null,
        "body": {
          "roles": [
            "ldap-user"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "realm.name": "ldap1"
            }
          }
        },
        "params": {
          "name": "mapping3"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 175
    },
    "digest": "7a23a385a63c87cab58fd494870450fd",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping4\n{\n  \"roles\": [ \"superuser\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"any\": [\n      {\n        \"field\": {\n          \"username\": \"esadmin\"\n        }\n      },\n      {\n        \"field\": {\n          \"groups\": \"cn=admins,dc=example,dc=com\"\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping4",
        "query": null,
        "body": {
          "roles": [
            "superuser"
          ],
          "enabled": true,
          "rules": {
            "any": [
              {
                "field": {
                  "username": "esadmin"
                }
              },
              {
                "field": {
                  "groups": "cn=admins,dc=example,dc=com"
                }
              }
            ]
          }
        },
        "params": {
          "name": "mapping4"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 217
    },
    "digest": "5ad365ed9e1a3c26093a0f09666c133a",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping5\n{\n  \"role_templates\": [\n    {\n      \"template\": { \"source\": \"{{#tojson}}groups{{/tojson}}\" }, <1>\n      \"format\" : \"json\" <2>\n    }\n  ],\n  \"rules\": {\n    \"field\" : { \"realm.name\" : \"saml1\" }\n  },\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping5",
        "query": null,
        "body": {
          "role_templates": [
            {
              "template": {
                "source": "{{#tojson}}groups{{/tojson}}"
              },
              "format": "json"
            }
          ],
          "rules": {
            "field": {
              "realm.name": "saml1"
            }
          },
          "enabled": true
        },
        "params": {
          "name": "mapping5"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 240
    },
    "digest": "7e5faa551f2c95ffd627da352563d450",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping6\n{\n  \"roles\": [ \"example-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"field\" : { \"dn\" : \"*,ou=subtree,dc=example,dc=com\" }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping6",
        "query": null,
        "body": {
          "roles": [
            "example-user"
          ],
          "enabled": true,
          "rules": {
            "field": {
              "dn": "*,ou=subtree,dc=example,dc=com"
            }
          }
        },
        "params": {
          "name": "mapping6"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 255
    },
    "digest": "b80e1f5b26bae4f3c2f8a604b7caaf17",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping7\n{\n  \"roles\": [ \"ldap-example-user\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"all\": [\n      { \"field\" : { \"dn\" : \"*,ou=subtree,dc=example,dc=com\" } },\n      { \"field\" : { \"realm.name\" : \"ldap1\" } }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping7",
        "query": null,
        "body": {
          "roles": [
            "ldap-example-user"
          ],
          "enabled": true,
          "rules": {
            "all": [
              {
                "field": {
                  "dn": "*,ou=subtree,dc=example,dc=com"
                }
              },
              {
                "field": {
                  "realm.name": "ldap1"
                }
              }
            ]
          }
        },
        "params": {
          "name": "mapping7"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 279
    },
    "digest": "0d94d76b7f00d0459d1f8c962c144dcd",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping8\n{\n  \"roles\": [ \"superuser\" ],\n  \"enabled\": true,\n  \"rules\": {\n    \"all\": [\n      {\n        \"any\": [\n          {\n            \"field\": {\n              \"dn\": \"*,ou=admin,dc=example,dc=com\"\n            }\n          },\n          {\n            \"field\": {\n              \"username\": [ \"es-admin\", \"es-system\" ]\n            }\n          }\n        ]\n      },\n      {\n        \"field\": {\n          \"groups\": \"cn=people,dc=example,dc=com\"\n        }\n      },\n      {\n        \"except\": {\n          \"field\": {\n            \"metadata.terminated_date\": null\n          }\n        }\n      }\n    ]\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping8",
        "query": null,
        "body": {
          "roles": [
            "superuser"
          ],
          "enabled": true,
          "rules": {
            "all": [
              {
                "any": [
                  {
                    "field": {
                      "dn": "*,ou=admin,dc=example,dc=com"
                    }
                  },
                  {
                    "field": {
                      "username": [
                        "es-admin",
                        "es-system"
                      ]
                    }
                  }
                ]
              },
              {
                "field": {
                  "groups": "cn=people,dc=example,dc=com"
                }
              },
              {
                "except": {
                  "field": {
                    "metadata.terminated_date": null
                  }
                }
              }
            ]
          }
        },
        "params": {
          "name": "mapping8"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-role-mappings.asciidoc",
      "line": 329
    },
    "digest": "50dc35d3d8705bd62aed20a15209476c",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role_mapping/mapping9\n{\n  \"rules\": { \"field\": { \"realm.name\": \"cloud-saml\" } },\n  \"role_templates\": [\n    { \"template\": { \"source\" : \"saml_user\" } }, <1>\n    { \"template\": { \"source\" : \"_user_{{username}}\" } }\n  ],\n  \"enabled\": true\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role_mapping/mapping9",
        "query": null,
        "body": {
          "rules": {
            "field": {
              "realm.name": "cloud-saml"
            }
          },
          "role_templates": [
            {
              "template": {
                "source": "saml_user"
              }
            },
            {
              "template": {
                "source": "_user_{{username}}"
              }
            }
          ],
          "enabled": true
        },
        "params": {
          "name": "mapping9"
        },
        "api": "security.put_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-roles.asciidoc",
      "line": 85
    },
    "digest": "850a6d4aaf112ec1279260a2b7400a89",
    "lang": "console",
    "found": [],
    "source": "POST /_security/role/my_admin_role\n{\n  \"cluster\": [\"all\"],\n  \"indices\": [\n    {\n      \"names\": [ \"index1\", \"index2\" ],\n      \"privileges\": [\"all\"],\n      \"field_security\" : { // optional\n        \"grant\" : [ \"title\", \"body\" ]\n      },\n      \"query\": \"{\\\"match\\\": {\\\"title\\\": \\\"foo\\\"}}\" // optional\n    }\n  ],\n  \"applications\": [\n    {\n      \"application\": \"myapp\",\n      \"privileges\": [ \"admin\", \"read\" ],\n      \"resources\": [ \"*\" ]\n    }\n  ],\n  \"run_as\": [ \"other_user\" ], // optional\n  \"metadata\" : { // optional\n    \"version\" : 1\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/role/my_admin_role",
        "query": null,
        "body": {
          "cluster": [
            "all"
          ],
          "indices": [
            {
              "names": [
                "index1",
                "index2"
              ],
              "privileges": [
                "all"
              ],
              "field_security": {
                "grant": [
                  "title",
                  "body"
                ]
              },
              "query": "{\"match\": {\"title\": \"foo\"}}"
            }
          ],
          "applications": [
            {
              "application": "myapp",
              "privileges": [
                "admin",
                "read"
              ],
              "resources": [
                "*"
              ]
            }
          ],
          "run_as": [
            "other_user"
          ],
          "metadata": {
            "version": 1
          }
        },
        "params": {
          "name": "my_admin_role"
        },
        "api": "security.put_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-roles.asciidoc",
      "line": 117
    },
    "digest": "99fbe9dc648835eb750e963f3b5ea9ab",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"role\": {\n    \"created\": true <1>\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-users.asciidoc",
      "line": 108
    },
    "digest": "4c514b787945952a223cde8a4a09e826",
    "lang": "console",
    "found": [],
    "source": "POST /_security/user/jacknich\n{\n  \"password\" : \"j@rV1s\",\n  \"roles\" : [ \"admin\", \"other_role1\" ],\n  \"full_name\" : \"Jack Nicholson\",\n  \"email\" : \"jacknich@example.com\",\n  \"metadata\" : {\n    \"intelligence\" : 7\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/user/jacknich",
        "query": null,
        "body": {
          "password": "j@rV1s",
          "roles": [
            "admin",
            "other_role1"
          ],
          "full_name": "Jack Nicholson",
          "email": "jacknich@example.com",
          "metadata": {
            "intelligence": 7
          }
        },
        "params": {
          "username": "jacknich"
        },
        "api": "security.put_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/create-users.asciidoc",
      "line": 125
    },
    "digest": "2f6cf7203c981928aa739a504f3589b1",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"created\": true <1>\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delegate-pki-authentication.asciidoc",
      "line": 77
    },
    "digest": "964f522091306634794ff544c867f002",
    "lang": "console",
    "found": [],
    "source": "POST /_security/delegate_pki\n{\n  \"x509_certificate_chain\": [\"MIIDbTCCAlWgAwIBAgIJAIxTS7Qdho9jMA0GCSqGSIb3DQEBCwUAMFMxKzApBgNVBAMTIkVsYXN0aWNzZWFyY2ggVGVzdCBJbnRlcm1lZGlhdGUgQ0ExFjAUBgNVBAsTDUVsYXN0aWNzZWFyY2gxDDAKBgNVBAoTA29yZzAeFw0xOTA3MTkxMzMzNDFaFw0yMzA3MTgxMzMzNDFaMEoxIjAgBgNVBAMTGUVsYXN0aWNzZWFyY2ggVGVzdCBDbGllbnQxFjAUBgNVBAsTDUVsYXN0aWNzZWFyY2gxDDAKBgNVBAoTA29yZzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANHgMX2aX8t0nj4sGLNuKISmmXIYCj9RwRqS7L03l9Nng7kOKnhHu/nXDt7zMRJyHj+q6FAt5khlavYSVCQyrDybRuA5z31gOdqXerrjs2OXS5HSHNvoDAnHFsaYX/5geMewVTtc/vqpd7Ph/QtaKfmG2FK0JNQo0k24tcgCIcyMtBh6BA70yGBM0OT8GdOgd/d/mA7mRhaxIUMNYQzRYRsp4hMnnWoOTkR5Q8KSO3MKw9dPSpPe8EnwtJE10S3s5aXmgytru/xQqrFycPBNj4KbKVmqMP0G60CzXik5pr2LNvOFz3Qb6sYJtqeZF+JKgGWdaTC89m63+TEnUHqk0lcCAwEAAaNNMEswCQYDVR0TBAIwADAdBgNVHQ4EFgQU/+aAD6Q4mFq1vpHorC25/OY5zjcwHwYDVR0jBBgwFoAU8siFCiMiYZZm/95qFC75AG/LRE0wDQYJKoZIhvcNAQELBQADggEBAIRpCgDLpvXcgDHUk10uhxev21mlIbU+VP46ANnCuj0UELhTrdTuWvO1PAI4z+WbDUxryQfOOXO9R6D0dE5yR56L/J7d+KayW34zU7yRDZM7+rXpocdQ1Ex8mjP9HJ/Bf56YZTBQJpXeDrKow4FvtkI3bcIMkqmbG16LHQXeG3RS4ds4S4wCnE2nA6vIn9y+4R999q6y1VSBORrYULcDWxS54plHLEdiMr1vVallg82AGobS9GMcTL2U4Nx5IYZG7sbTk3LrDxVpVg/S2wLofEdOEwqCeHug/iOihNLJBabEW6z4TDLJAVW5KCY1DfhkYlBfHn7vxKkfKoCUK/yLWWI=\"] <1>\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delegate-pki-authentication.asciidoc",
      "line": 88
    },
    "digest": "da2bb6894d95489812b653be2feeeb5b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-app-privileges.asciidoc",
      "line": 41
    },
    "digest": "ebd76a45e153c4656c5871e23b7b5508",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/privilege/myapp/read",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/privilege/myapp/read",
        "query": null,
        "body": null,
        "params": {
          "application": "myapp",
          "name": "read"
        },
        "api": "security.delete_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-app-privileges.asciidoc",
      "line": 50
    },
    "digest": "b8ac8a2f22ee5934b077a82245fa3398",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"myapp\": {\n    \"read\": {\n      \"found\" : true\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-role-mappings.asciidoc",
      "line": 46
    },
    "digest": "261480571394632db40e88fbb6c59c2f",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/role_mapping/mapping1",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/role_mapping/mapping1",
        "query": null,
        "body": null,
        "params": {
          "name": "mapping1"
        },
        "api": "security.delete_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-role-mappings.asciidoc",
      "line": 55
    },
    "digest": "5b5daa97b53b478943b50082703a323a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\" : true\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-roles.asciidoc",
      "line": 40
    },
    "digest": "cffce059425d3d21e7f9571500d63524",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/role/my_admin_role",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/role/my_admin_role",
        "query": null,
        "body": null,
        "params": {
          "name": "my_admin_role"
        },
        "api": "security.delete_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-roles.asciidoc",
      "line": 49
    },
    "digest": "5b5daa97b53b478943b50082703a323a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\" : true\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-users.asciidoc",
      "line": 39
    },
    "digest": "ffd63dd186ab81b893faec3b3358fa09",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/user/jacknich",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/user/jacknich",
        "query": null,
        "body": null,
        "params": {
          "username": "jacknich"
        },
        "api": "security.delete_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/delete-users.asciidoc",
      "line": 48
    },
    "digest": "5b5daa97b53b478943b50082703a323a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\" : true\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/disable-users.asciidoc",
      "line": 45
    },
    "digest": "bb293e1bdf0c6f6d9069eeb7edc9d399",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/user/jacknich/_disable",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/user/jacknich/_disable",
        "query": null,
        "body": null,
        "params": {
          "username": "jacknich"
        },
        "api": "security.disable_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/enable-users.asciidoc",
      "line": 44
    },
    "digest": "adf36e2d8fc05c3719c91912481c4e19",
    "lang": "console",
    "found": [],
    "source": "PUT /_security/user/jacknich/_enable",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_security/user/jacknich/_enable",
        "query": null,
        "body": null,
        "params": {
          "username": "jacknich"
        },
        "api": "security.enable_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 65
    },
    "digest": "8d3be5482270921111754772479f8676",
    "lang": "console",
    "found": [],
    "source": "POST /_security/api_key\n{\n  \"name\": \"my-api-key\",\n  \"role_descriptors\": {}\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "name": "my-api-key",
          "role_descriptors": {}
        },
        "params": null,
        "api": "security.create_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 77
    },
    "digest": "30c7faeb8f339772d309800170df9f92",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\":\"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\":\"my-api-key\",\n  \"api_key\":\"ui2lp2axTNmsyakw9tvNnw\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 90
    },
    "digest": "701f1fffc65e9e51c96aa60261e2eae3",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?id=VuaCfGcBCdbkQm-e5aOx",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "id": "VuaCfGcBCdbkQm-e5aOx"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 99
    },
    "digest": "7b864d61767ab283cfd5f9b9ba784b1f",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?name=my-api-key",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "name": "my-api-key"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 107
    },
    "digest": "10d9da8a3b7061479be908c8c5c76cfb",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?realm_name=native1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "realm_name": "native1"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 115
    },
    "digest": "62eafc5b3ab75cc67314d5a8567d6077",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?username=myuser",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "username": "myuser"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 123
    },
    "digest": "9608820dbeac261ba53fb89bb9400560",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?owner=true",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "owner": "true"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 130
    },
    "digest": "ca5ae0eb7709f3807bc6239cd4bd9141",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 138
    },
    "digest": "fffaa7ecef94e1404ebec2f9069448e3",
    "lang": "console",
    "found": [],
    "source": "POST /_security/api_key\n{\n  \"name\": \"my-api-key-1\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "name": "my-api-key-1"
        },
        "params": null,
        "api": "security.create_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 149
    },
    "digest": "dffbbdc4025e5777c647d8818847b960",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?id=VuaCfGcBCdbkQm-e5aOx&owner=true",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "id": "VuaCfGcBCdbkQm-e5aOx",
          "owner": "true"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-api-keys.asciidoc",
      "line": 159
    },
    "digest": "30abc76a39e551f4b52c65002bb6405d",
    "lang": "console",
    "found": [],
    "source": "GET /_security/api_key?username=myuser&realm_name=native1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/api_key",
        "query": {
          "username": "myuser",
          "realm_name": "native1"
        },
        "body": null,
        "params": null,
        "api": "security.get_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-app-privileges.asciidoc",
      "line": 58
    },
    "digest": "cd8006165ac64f1ef99af48e5a35a25b",
    "lang": "console",
    "found": [],
    "source": "GET /_security/privilege/myapp/read",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/privilege/myapp/read",
        "query": null,
        "body": null,
        "params": {
          "application": "myapp",
          "name": "read"
        },
        "api": "security.get_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-app-privileges.asciidoc",
      "line": 67
    },
    "digest": "86e449e6a7c3d64f0965b316b9780fad",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"myapp\": {\n    \"read\": {\n      \"application\": \"myapp\",\n      \"name\": \"read\",\n      \"actions\": [\n        \"data:read/*\",\n        \"action:login\"\n      ],\n      \"metadata\": {\n        \"description\": \"Read access to myapp\"\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-app-privileges.asciidoc",
      "line": 88
    },
    "digest": "3b18e9de638ff0b1c7a1f1f6bf1c24f3",
    "lang": "console",
    "found": [],
    "source": "GET /_security/privilege/myapp/",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/privilege/myapp/",
        "query": null,
        "body": null,
        "params": {
          "application": "myapp"
        },
        "api": "security.get_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-app-privileges.asciidoc",
      "line": 95
    },
    "digest": "0ddf705317d9c5095b4a1419a2e3bace",
    "lang": "console",
    "found": [],
    "source": "GET /_security/privilege/",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/privilege/",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.get_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-builtin-privileges.asciidoc",
      "line": 54
    },
    "digest": "2623eb122cc0299b42fc9eca6e7f5e56",
    "lang": "console",
    "found": [],
    "source": "GET /_security/privilege/_builtin",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/privilege/_builtin",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.get_builtin_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-builtin-privileges.asciidoc",
      "line": 61
    },
    "digest": "87bed05a299c96c4ebf96d159ad7d937",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"cluster\" : [\n    \"all\",\n    \"create_snapshot\",\n    \"delegate_pki\",\n    \"grant_api_key\",\n    \"manage\",\n    \"manage_api_key\",\n    \"manage_autoscaling\",\n    \"manage_ccr\",\n    \"manage_data_frame_transforms\",\n    \"manage_enrich\",\n    \"manage_ilm\",\n    \"manage_index_templates\",\n    \"manage_ingest_pipelines\",\n    \"manage_ml\",\n    \"manage_oidc\",\n    \"manage_own_api_key\",\n    \"manage_pipeline\",\n    \"manage_rollup\",\n    \"manage_saml\",\n    \"manage_security\",\n    \"manage_slm\",\n    \"manage_token\",\n    \"manage_transform\",\n    \"manage_watcher\",\n    \"monitor\",\n    \"monitor_data_frame_transforms\",\n    \"monitor_ml\",\n    \"monitor_rollup\",\n    \"monitor_snapshot\",\n    \"monitor_transform\",\n    \"monitor_watcher\",\n    \"none\",\n    \"read_ccr\",\n    \"read_ilm\",\n    \"read_slm\",\n    \"transport_client\"\n  ],\n  \"index\" : [\n    \"all\",\n    \"create\",\n    \"create_doc\",\n    \"create_index\",\n    \"delete\",\n    \"delete_index\",\n    \"index\",\n    \"maintenance\",\n    \"manage\",\n    \"manage_follow_index\",\n    \"manage_ilm\",\n    \"manage_leader_index\",\n    \"monitor\",\n    \"none\",\n    \"read\",\n    \"read_cross_cluster\",\n    \"view_index_metadata\",\n    \"write\"\n  ]\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-role-mappings.asciidoc",
      "line": 64
    },
    "digest": "8b3a94495127efd9d56b2cd7f3eecdca",
    "lang": "console",
    "found": [],
    "source": "GET /_security/role_mapping/mapping1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/role_mapping/mapping1",
        "query": null,
        "body": null,
        "params": {
          "name": "mapping1"
        },
        "api": "security.get_role_mapping"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-role-mappings.asciidoc",
      "line": 71
    },
    "digest": "5658fa03086f1969f2e1fbc0215eed77",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"mapping1\": {\n    \"enabled\": true,\n    \"roles\": [\n      \"user\"\n    ],\n    \"rules\": {\n      \"field\": {\n        \"username\": \"*\"\n      }\n    },\n    \"metadata\": {}\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-roles.asciidoc",
      "line": 56
    },
    "digest": "115529722ba30b0b0d51a7ff87e59198",
    "lang": "console",
    "found": [],
    "source": "GET /_security/role/my_admin_role",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/role/my_admin_role",
        "query": null,
        "body": null,
        "params": {
          "name": "my_admin_role"
        },
        "api": "security.get_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-roles.asciidoc",
      "line": 62
    },
    "digest": "ee90e8a3645501f252777737b7466061",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"my_admin_role\": {\n    \"cluster\" : [ \"all\" ],\n    \"indices\" : [\n      {\n        \"names\" : [ \"index1\", \"index2\" ],\n        \"privileges\" : [ \"all\" ],\n        \"allow_restricted_indices\" : false,\n        \"field_security\" : {\n          \"grant\" : [ \"title\", \"body\" ]}\n      }\n    ],\n    \"applications\" : [ ],\n    \"run_as\" : [ \"other_user\" ],\n    \"metadata\" : {\n      \"version\" : 1\n    },\n    \"transient_metadata\": {\n      \"enabled\": true\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-roles.asciidoc",
      "line": 90
    },
    "digest": "128283698535116931dca9d16a16dca2",
    "lang": "console",
    "found": [],
    "source": "GET /_security/role",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/role",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.get_role"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 111
    },
    "digest": "cee591c1fc70d4f180c623a3a6d07755",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oauth2/token\n{\n  \"grant_type\" : \"client_credentials\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "grant_type": "client_credentials"
        },
        "params": null,
        "api": "security.get_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 122
    },
    "digest": "da2bb6894d95489812b653be2feeeb5b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 146
    },
    "digest": "e1337c6b76defd5a46d05220f9d9c9fc",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oauth2/token\n{\n  \"grant_type\" : \"password\",\n  \"username\" : \"test_admin\",\n  \"password\" : \"x-pack-test-password\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "grant_type": "password",
          "username": "test_admin",
          "password": "x-pack-test-password"
        },
        "params": null,
        "api": "security.get_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 159
    },
    "digest": "774740abbecda50b03d75dbff8cbe60f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200,\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 176
    },
    "digest": "1873f8a8a291e6fcd6c1c83ea6928759",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oauth2/token\n{\n    \"grant_type\": \"refresh_token\",\n    \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "grant_type": "refresh_token",
          "refresh_token": "vLBPvmAB6KvwvJZr27cS"
        },
        "params": null,
        "api": "security.get_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-tokens.asciidoc",
      "line": 190
    },
    "digest": "774740abbecda50b03d75dbff8cbe60f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200,\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-users.asciidoc",
      "line": 56
    },
    "digest": "3924ee252581ebb96ac0e60046125ae8",
    "lang": "console",
    "found": [],
    "source": "GET /_security/user/jacknich",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/user/jacknich",
        "query": null,
        "body": null,
        "params": {
          "username": "jacknich"
        },
        "api": "security.get_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-users.asciidoc",
      "line": 62
    },
    "digest": "bac6203259754d2f09c1ebeecc9ded5d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"jacknich\": {\n    \"username\": \"jacknich\",\n    \"roles\": [\n      \"admin\", \"other_role1\"\n    ],\n    \"full_name\": \"Jack Nicholson\",\n    \"email\": \"jacknich@example.com\",\n    \"metadata\": { \"intelligence\" : 7 },\n    \"enabled\": true\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/get-users.asciidoc",
      "line": 80
    },
    "digest": "abdbc81e799e28c833556b1c29f03ba6",
    "lang": "console",
    "found": [],
    "source": "GET /_security/user",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/user",
        "query": null,
        "body": null,
        "params": null,
        "api": "security.get_user"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/has-privileges.asciidoc",
      "line": 68
    },
    "digest": "9684e5fa8c22a07a372feb6fc1f5f7c0",
    "lang": "console",
    "found": [],
    "source": "GET /_security/user/_has_privileges\n{\n  \"cluster\": [ \"monitor\", \"manage\" ],\n  \"index\" : [\n    {\n      \"names\": [ \"suppliers\", \"products\" ],\n      \"privileges\": [ \"read\" ]\n    },\n    {\n      \"names\": [ \"inventory\" ],\n      \"privileges\" : [ \"read\", \"write\" ]\n    }\n  ],\n  \"application\": [\n    {\n      \"application\": \"inventory_manager\",\n      \"privileges\" : [ \"read\", \"data:write/inventory\" ],\n      \"resources\" : [ \"product/1852563\" ]\n    }\n  ]\n}",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_security/user/_has_privileges",
        "query": null,
        "body": {
          "cluster": [
            "monitor",
            "manage"
          ],
          "index": [
            {
              "names": [
                "suppliers",
                "products"
              ],
              "privileges": [
                "read"
              ]
            },
            {
              "names": [
                "inventory"
              ],
              "privileges": [
                "read",
                "write"
              ]
            }
          ],
          "application": [
            {
              "application": "inventory_manager",
              "privileges": [
                "read",
                "data:write/inventory"
              ],
              "resources": [
                "product/1852563"
              ]
            }
          ]
        },
        "params": null,
        "api": "security.has_privileges"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/has-privileges.asciidoc",
      "line": 95
    },
    "digest": "099336bd3e681efc691078a0300781a5",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"username\": \"rdeniro\",\n  \"has_all_requested\" : false,\n  \"cluster\" : {\n    \"monitor\" : true,\n    \"manage\" : false\n  },\n  \"index\" : {\n    \"suppliers\" : {\n      \"read\" : true\n    },\n    \"products\" : {\n      \"read\" : true\n    },\n    \"inventory\" : {\n      \"read\" : true,\n      \"write\" : false\n    }\n  },\n  \"application\" : {\n    \"inventory_manager\" : {\n      \"product/1852563\" : {\n        \"read\": false,\n        \"data:write/inventory\": false\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 72
    },
    "digest": "0aff04881be21eea45375ec4f4f50e66",
    "lang": "console",
    "found": [],
    "source": "POST /_security/api_key\n{\n  \"name\": \"my-api-key\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "name": "my-api-key"
        },
        "params": null,
        "api": "security.create_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 83
    },
    "digest": "30c7faeb8f339772d309800170df9f92",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\":\"VuaCfGcBCdbkQm-e5aOx\",\n  \"name\":\"my-api-key\",\n  \"api_key\":\"ui2lp2axTNmsyakw9tvNnw\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 97
    },
    "digest": "01cc9dac719f2612a48cc1b23db7cd54",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"id\" : \"VuaCfGcBCdbkQm-e5aOx\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "id": "VuaCfGcBCdbkQm-e5aOx"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 110
    },
    "digest": "f388e571224dd6850f8c9f9f08fca3da",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"name\" : \"my-api-key\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "name": "my-api-key"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 121
    },
    "digest": "dde283eab92608e7bfbfa09c6482a12e",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"realm_name\" : \"native1\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "realm_name": "native1"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 132
    },
    "digest": "e7d819634d765cde269e2669e2dc677f",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"username\" : \"myuser\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "username": "myuser"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 143
    },
    "digest": "0ad8aa0d684b09500aa30b4c4d6f29c8",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"id\" : \"VuaCfGcBCdbkQm-e5aOx\",\n  \"owner\" : \"true\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "id": "VuaCfGcBCdbkQm-e5aOx",
          "owner": "true"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 155
    },
    "digest": "cfad3631be0634ee49c424f9ccec62d9",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"owner\" : \"true\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "owner": "true"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-api-keys.asciidoc",
      "line": 166
    },
    "digest": "6c927313867647e0ef3cd3a37cb410cc",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/api_key\n{\n  \"username\" : \"myuser\",\n  \"realm_name\" : \"native1\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/api_key",
        "query": null,
        "body": {
          "username": "myuser",
          "realm_name": "native1"
        },
        "params": null,
        "api": "security.invalidate_api_key"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 72
    },
    "digest": "cee591c1fc70d4f180c623a3a6d07755",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oauth2/token\n{\n  \"grant_type\" : \"client_credentials\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "grant_type": "client_credentials"
        },
        "params": null,
        "api": "security.get_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 82
    },
    "digest": "da2bb6894d95489812b653be2feeeb5b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 95
    },
    "digest": "dbf9abc37899352751dab0ede62af2fd",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/oauth2/token\n{\n  \"token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "token": "dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ=="
        },
        "params": null,
        "api": "security.invalidate_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 108
    },
    "digest": "e1337c6b76defd5a46d05220f9d9c9fc",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oauth2/token\n{\n  \"grant_type\" : \"password\",\n  \"username\" : \"test_admin\",\n  \"password\" : \"x-pack-test-password\"\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "grant_type": "password",
          "username": "test_admin",
          "password": "x-pack-test-password"
        },
        "params": null,
        "api": "security.get_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 120
    },
    "digest": "774740abbecda50b03d75dbff8cbe60f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"access_token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"type\" : \"Bearer\",\n  \"expires_in\" : 1200,\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 135
    },
    "digest": "0c6f9c9da75293fae69659ac1d6329de",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/oauth2/token\n{\n  \"refresh_token\" : \"vLBPvmAB6KvwvJZr27cS\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "refresh_token": "vLBPvmAB6KvwvJZr27cS"
        },
        "params": null,
        "api": "security.invalidate_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 148
    },
    "digest": "4bc4db44b8c74610b73f21a421099a13",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/oauth2/token\n{\n  \"realm_name\" : \"saml1\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "realm_name": "saml1"
        },
        "params": null,
        "api": "security.invalidate_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 159
    },
    "digest": "0280247e0cf2e561c548f22c9fb31163",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/oauth2/token\n{\n  \"username\" : \"myuser\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "username": "myuser"
        },
        "params": null,
        "api": "security.invalidate_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/invalidate-tokens.asciidoc",
      "line": 170
    },
    "digest": "6dd2a107bc64fd6f058fb17c21640649",
    "lang": "console",
    "found": [],
    "source": "DELETE /_security/oauth2/token\n{\n  \"username\" : \"myuser\",\n  \"realm_name\" : \"saml1\"\n}",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_security/oauth2/token",
        "query": null,
        "body": {
          "username": "myuser",
          "realm_name": "saml1"
        },
        "params": null,
        "api": "security.invalidate_token"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 69
    },
    "digest": "e3019fd5f23458ae49ad9854c97d321c",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/prepare\n{\n  \"realm\" : \"oidc1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 80
    },
    "digest": "7177f0f96dc5fbcf6c707a964707327f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"redirect\" : \"http://127.0.0.1:8080/c2id-login?scope=openid&response_type=id_token&redirect_uri=https%3A%2F%2Fmy.fantastic.rp%2Fcb&state=4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I&nonce=WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM&client_id=elasticsearch-rp\",\n  \"state\" : \"4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"nonce\" : \"WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 95
    },
    "digest": "57dc15e5ad663c342fd5c1d86fcd1b29",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/prepare\n{\n  \"realm\" : \"oidc1\",\n  \"state\" : \"lGYK0EcSLjqH6pkT5EVZjC6eIW5YCGgywj2sxROO\",\n  \"nonce\" : \"zOBXLJGUooRrbLbQk5YCcyC8AXw3iloynvluYhZ5\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 108
    },
    "digest": "99f7cf54f4e1ea0929678f876202bacc",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"redirect\" : \"http://127.0.0.1:8080/c2id-login?scope=openid&response_type=id_token&redirect_uri=https%3A%2F%2Fmy.fantastic.rp%2Fcb&state=lGYK0EcSLjqH6pkT5EVZjC6eIW5YCGgywj2sxROO&nonce=zOBXLJGUooRrbLbQk5YCcyC8AXw3iloynvluYhZ5&client_id=elasticsearch-rp\",\n  \"state\" : \"lGYK0EcSLjqH6pkT5EVZjC6eIW5YCGgywj2sxROO\",\n  \"nonce\" : \"zOBXLJGUooRrbLbQk5YCcyC8AXw3iloynvluYhZ5\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 121
    },
    "digest": "d35c8cf7a98b3f112e1de8797ec6689d",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/prepare\n{\n  \"iss\" : \"http://127.0.0.1:8080\",\n  \"login_hint\": \"this_is_an_opaque_string\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-prepare-authentication-api.asciidoc",
      "line": 133
    },
    "digest": "50153ed0f17ea3c4d2392d1ae80a438a",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"redirect\" : \"http://127.0.0.1:8080/c2id-login?login_hint=this_is_an_opaque_string&scope=openid&response_type=id_token&redirect_uri=https%3A%2F%2Fmy.fantastic.rp%2Fcb&state=4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I&nonce=WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM&client_id=elasticsearch-rp\",\n  \"state\" : \"4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"nonce\" : \"WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM\"\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-authenticate-api.asciidoc",
      "line": 65
    },
    "digest": "9c01db07c9ac395b6370e3b33965c21f",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/authenticate\n{\n  \"redirect_uri\" : \"https://oidc-kibana.elastic.co:5603/api/security/oidc/callback?code=jtI3Ntt8v3_XvcLzCFGq&state=4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"state\" : \"4dbrihtIAt3wBTwo6DxK-vdk-sSyDBV8Yf0AjdkdT5I\",\n  \"nonce\" : \"WaBPH0KqPVdG5HHdSxPRjfoZbXMCicm5v1OiAj0DUFM\",\n  \"realm\" : \"oidc1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/oidc-logout-api.asciidoc",
      "line": 44
    },
    "digest": "2a1eece9a59ac1773edcf0a932c26de0",
    "lang": "console",
    "found": [],
    "source": "POST /_security/oidc/logout\n{\n  \"token\" : \"dGhpcyBpcyBub3QgYSByZWFsIHRva2VuIGJ1dCBpdCBpcyBvbmx5IHRlc3QgZGF0YS4gZG8gbm90IHRyeSB0byByZWFkIHRva2VuIQ==\",\n  \"refresh_token\": \"vLBPvmAB6KvwvJZr27cS\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/saml-prepare-authentication-api.asciidoc",
      "line": 70
    },
    "digest": "a5dfcfd1cfb3558e7912456669c92eee",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/prepare\n{\n  \"realm\" : \"saml1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/saml-prepare-authentication-api.asciidoc",
      "line": 81
    },
    "digest": "da3f280bc65b581fb3097be768061bee",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/prepare\n{\n  \"acs\" : \"https://kibana.org/api/security/saml/callback\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/saml-authenticate-api.asciidoc",
      "line": 79
    },
    "digest": "8e208098a0156c4c92afe0a06960b230",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/authenticate\n{\n  \"content\" : \"PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMD.....\",\n  \"ids\" : [\"4fee3b046395c4e751011e97f8900b5273d56685\"]\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/saml-logout-api.asciidoc",
      "line": 62
    },
    "digest": "8d4dda5d988d568f4f4210a6387e026f",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/logout\n{\n  \"token\" : \"46ToAxZVaXVVZTVKOVF5YU04ZFJVUDVSZlV3\",\n  \"refresh_token\" : \"mJdXLtmvTUSpoLwMvdBt_w\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/saml-invalidate-api.asciidoc",
      "line": 74
    },
    "digest": "49718ad4ff0ae0468c44a7aa35aeee69",
    "lang": "console",
    "found": [],
    "source": "POST /_security/saml/invalidate\n{\n  \"queryString\" : \"SAMLRequest=nZFda4MwFIb%2FiuS%2BmviRpqFaClKQdbvo2g12M2KMraCJ9cRR9utnW4Wyi13sMie873MeznJ1aWrnS3VQGR0j4mLkKC1NUeljjA77zYyhVbIE0dR%2By7fmaHq7U%2BdegXWGpAZ%2B%2F4pR32luBFTAtWgUcCv56%2Fp5y30X87Yz1khTIycdgpUW9kY7WdsC9zxoXTvMvWuVV98YyMnSGH2SYE5pwALBIr9QKiwDGpW0oGVUznGeMyJZKFkQ4jBf5HnhUymjIhzCAL3KNFihbYx8TBYzzGaY7EnIyZwHzCWMfiDnbRIftkSjJr%2BFu0e9v%2B0EgOquRiiZjKpiVFp6j50T4WXoyNJ%2FEWC9fdqc1t%2F1%2B2F3aUpjzhPiXpqMz1%2FHSn4A&SigAlg=http%3A%2F%2Fwww.w3.org%2F2001%2F04%2Fxmldsig-more%23rsa-sha256&Signature=MsAYz2NFdovMG2mXf6TSpu5vlQQyEJAg%2B4KCwBqJTmrb3yGXKUtIgvjqf88eCAK32v3eN8vupjPC8LglYmke1ZnjK0%2FKxzkvSjTVA7mMQe2AQdKbkyC038zzRq%2FYHcjFDE%2Bz0qISwSHZY2NyLePmwU7SexEXnIz37jKC6NMEhus%3D\",\n  \"realm\" : \"saml1\"\n}",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/security/ssl.asciidoc",
      "line": 84
    },
    "digest": "05f6049c677a156bdf9b83e71a3b87ed",
    "lang": "console",
    "found": [],
    "source": "GET /_ssl/certificates",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_ssl/certificates",
        "query": null,
        "body": null,
        "params": null,
        "api": "ssl.certificates"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-put.asciidoc",
      "line": 120
    },
    "digest": "aa7cf5df36b867aee5e3314ac4b4fa68",
    "lang": "console",
    "found": [],
    "source": "PUT /_slm/policy/daily-snapshots\n{\n  \"schedule\": \"0 30 1 * * ?\", <1>\n  \"name\": \"<daily-snap-{now/d}>\", <2>\n  \"repository\": \"my_repository\", <3>\n  \"config\": { <4>\n    \"indices\": [\"data-*\", \"important\"], <5>\n    \"ignore_unavailable\": false,\n    \"include_global_state\": false\n  },\n  \"retention\": { <6>\n    \"expire_after\": \"30d\", <7>\n    \"min_count\": 5, <8>\n    \"max_count\": 50 <9>\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_slm/policy/daily-snapshots",
        "query": null,
        "body": {
          "schedule": "0 30 1 * * ?",
          "name": "<daily-snap-{now/d}>",
          "repository": "my_repository",
          "config": {
            "indices": [
              "data-*",
              "important"
            ],
            "ignore_unavailable": false,
            "include_global_state": false
          },
          "retention": {
            "expire_after": "30d",
            "min_count": 5,
            "max_count": 50
          }
        },
        "params": {
          "policy_id": "daily-snapshots"
        },
        "api": "slm.put_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-get.asciidoc",
      "line": 72
    },
    "digest": "b4f9fe8808cb27a210b162e7aaba261d",
    "lang": "console",
    "found": [],
    "source": "GET /_slm/policy/daily-snapshots?human",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/policy/daily-snapshots",
        "query": {
          "human": true
        },
        "body": null,
        "params": {
          "policy_id": "daily-snapshots"
        },
        "api": "slm.get_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-get.asciidoc",
      "line": 80
    },
    "digest": "42757e819c51fc2fb12932b05a18fd98",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"daily-snapshots\" : {\n    \"version\": 1, <1>\n    \"modified_date\": \"2019-04-23T01:30:00.000Z\", <2>\n    \"modified_date_millis\": 1556048137314,\n    \"policy\" : {\n      \"schedule\": \"0 30 1 * * ?\",\n      \"name\": \"<daily-snap-{now/d}>\",\n      \"repository\": \"my_repository\",\n      \"config\": {\n        \"indices\": [\"data-*\", \"important\"],\n        \"ignore_unavailable\": false,\n        \"include_global_state\": false\n      },\n      \"retention\": {\n        \"expire_after\": \"30d\",\n        \"min_count\": 5,\n        \"max_count\": 50\n      }\n    },\n    \"stats\": {\n      \"policy\": \"daily-snapshots\",\n      \"snapshots_taken\": 0,\n      \"snapshots_failed\": 0,\n      \"snapshots_deleted\": 0,\n      \"snapshot_deletion_failures\": 0\n    },\n    \"next_execution\": \"2019-04-24T01:30:00.000Z\", <3>\n    \"next_execution_millis\": 1556048160000\n  }\n}"
  },
  {
    "source_location": {
      "file": "slm/apis/slm-get.asciidoc",
      "line": 123
    },
    "digest": "bc2dd9e5ed37f98016ecf53f968d2211",
    "lang": "console",
    "found": [],
    "source": "GET /_slm/policy",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/policy",
        "query": null,
        "body": null,
        "params": null,
        "api": "slm.get_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-delete.asciidoc",
      "line": 66
    },
    "digest": "1a1f3421717ff744ed83232729289bb0",
    "lang": "console",
    "found": [],
    "source": "DELETE /_slm/policy/daily-snapshots",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_slm/policy/daily-snapshots",
        "query": null,
        "body": null,
        "params": {
          "policy_id": "daily-snapshots"
        },
        "api": "slm.delete_lifecycle"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-execute.asciidoc",
      "line": 45
    },
    "digest": "0ab002c6618af75e1041a23c692327ad",
    "lang": "console",
    "found": [],
    "source": "POST /_slm/policy/daily-snapshots/_execute",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "slm/apis/slm-execute.asciidoc",
      "line": 53
    },
    "digest": "80e9cf8fc73f6f5c65db578752235391",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"snapshot_name\": \"daily-snap-2019.04.24-gwrqoo2xtea3q57vvg0uea\"\n}"
  },
  {
    "source_location": {
      "file": "slm/apis/slm-execute-retention.asciidoc",
      "line": 35
    },
    "digest": "e71d300cd87f09a9527cf45395dd7eb1",
    "lang": "console",
    "found": [],
    "source": "POST /_slm/_execute_retention",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_slm/_execute_retention",
        "query": null,
        "body": null,
        "params": null,
        "api": "slm.execute_retention"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-get-status.asciidoc",
      "line": 43
    },
    "digest": "cde4104a29dfe942d55863cdd8718627",
    "lang": "console",
    "found": [],
    "source": "GET _slm/status",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/status",
        "query": null,
        "body": null,
        "params": null,
        "api": "slm.get_status"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-get-status.asciidoc",
      "line": 50
    },
    "digest": "99e0bec31e49636bc0053ac66bc29352",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"operation_mode\": \"RUNNING\"\n}"
  },
  {
    "source_location": {
      "file": "slm/apis/slm-stats.asciidoc",
      "line": 27
    },
    "digest": "55e8ddf643726dec51531ada0bec7143",
    "lang": "console",
    "found": [],
    "source": "GET /_slm/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_slm/stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "slm.get_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "slm/apis/slm-start.asciidoc",
      "line": 42
    },
    "digest": "371962cf63e65c10026177c6a1bad0b6",
    "lang": "console",
    "found": [],
    "source": "POST _slm/start",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "slm/apis/slm-start.asciidoc",
      "line": 49
    },
    "digest": "bc5fcc40c29087a0df7b5405bb70de5c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "slm/apis/slm-stop.asciidoc",
      "line": 48
    },
    "digest": "41195ef13af0465cdee1ae18f6c00fde",
    "lang": "console",
    "found": [],
    "source": "POST _slm/stop",
    "parsed_source": []
  },
  {
    "source_location": {
      "file": "transform/apis/put-transform.asciidoc",
      "line": 195
    },
    "digest": "23994a14e6b0681cd279b427324945db",
    "lang": "console",
    "found": [],
    "source": "PUT _transform/ecommerce_transform\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_ecommerce\",\n    \"query\": {\n      \"term\": {\n        \"geoip.continent_name\": {\n          \"value\": \"Asia\"\n        }\n      }\n    }\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"customer_id\": {\n        \"terms\": {\n          \"field\": \"customer_id\"\n        }\n      }\n    },\n    \"aggregations\": {\n      \"max_price\": {\n        \"max\": {\n          \"field\": \"taxful_total_price\"\n        }\n      }\n    }\n  },\n  \"description\": \"Maximum priced ecommerce data by customer_id in Asia\",\n  \"dest\": {\n    \"index\": \"kibana_sample_data_ecommerce_transform\",\n    \"pipeline\": \"add_timestamp_pipeline\"\n  },\n  \"frequency\": \"5m\",\n  \"sync\": {\n    \"time\": {\n      \"field\": \"order_date\",\n      \"delay\": \"60s\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_transform/ecommerce_transform",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_ecommerce",
            "query": {
              "term": {
                "geoip.continent_name": {
                  "value": "Asia"
                }
              }
            }
          },
          "pivot": {
            "group_by": {
              "customer_id": {
                "terms": {
                  "field": "customer_id"
                }
              }
            },
            "aggregations": {
              "max_price": {
                "max": {
                  "field": "taxful_total_price"
                }
              }
            }
          },
          "description": "Maximum priced ecommerce data by customer_id in Asia",
          "dest": {
            "index": "kibana_sample_data_ecommerce_transform",
            "pipeline": "add_timestamp_pipeline"
          },
          "frequency": "5m",
          "sync": {
            "time": {
              "field": "order_date",
              "delay": "60s"
            }
          }
        },
        "params": {
          "transform_id": "ecommerce_transform"
        },
        "api": "transform.put_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/put-transform.asciidoc",
      "line": 243
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "transform/apis/delete-transform.asciidoc",
      "line": 52
    },
    "digest": "70c736ecb3746dbe839af0e468712805",
    "lang": "console",
    "found": [],
    "source": "DELETE _transform/ecommerce_transform",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_transform/ecommerce_transform",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce_transform"
        },
        "api": "transform.delete_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/delete-transform.asciidoc",
      "line": 60
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform.asciidoc",
      "line": 96
    },
    "digest": "c65b00a285f510dcd2865aa3539b4e03",
    "lang": "console",
    "found": [],
    "source": "GET _transform?size=10",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_transform",
        "query": {
          "size": "10"
        },
        "body": null,
        "params": null,
        "api": "transform.get_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform.asciidoc",
      "line": 105
    },
    "digest": "c8ebbecc372bcfa5f4a6e7242395ab5e",
    "lang": "console",
    "found": [],
    "source": "GET _transform/ecommerce_transform",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_transform/ecommerce_transform",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce_transform"
        },
        "api": "transform.get_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform.asciidoc",
      "line": 113
    },
    "digest": "5b3a36c933194a6e9b0c43096e094ce4",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\" : 1,\n  \"transforms\" : [\n    {\n      \"id\" : \"ecommerce_transform\",\n      \"source\" : {\n        \"index\" : [\n          \"kibana_sample_data_ecommerce\"\n        ],\n        \"query\" : {\n          \"term\" : {\n            \"geoip.continent_name\" : {\n              \"value\" : \"Asia\"\n            }\n          }\n        }\n      },\n      \"dest\" : {\n        \"index\" : \"kibana_sample_data_ecommerce_transform\"\n      },\n      \"frequency\": \"1m\",\n      \"pivot\" : {\n        \"group_by\" : {\n          \"customer_id\" : {\n            \"terms\" : {\n              \"field\" : \"customer_id\"\n            }\n          }\n        },\n        \"aggregations\" : {\n          \"max_price\" : {\n            \"max\" : {\n              \"field\" : \"taxful_total_price\"\n            }\n          }\n        }\n      },\n      \"description\" : \"Maximum priced ecommerce data by customer_id in Asia\",\n      \"version\" : \"7.5.0\",\n      \"create_time\" : 1576094542936\n    }\n  ]\n}\n"
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform-stats.asciidoc",
      "line": 267
    },
    "digest": "53c6256295111524d5ff2885bdcb99a9",
    "lang": "console",
    "found": [],
    "source": "GET _transform/_stats?from=5&size=10",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_transform/_stats",
        "query": {
          "from": "5",
          "size": "10"
        },
        "body": null,
        "params": {
          "transform_id": "_stats"
        },
        "api": "transform.get_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform-stats.asciidoc",
      "line": 275
    },
    "digest": "0755471d7dce4785d2e7ed0c10182ea3",
    "lang": "console",
    "found": [],
    "source": "GET _transform/ecommerce-customer-transform/_stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_transform/ecommerce-customer-transform/_stats",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce-customer-transform"
        },
        "api": "transform.get_transform_stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/get-transform-stats.asciidoc",
      "line": 283
    },
    "digest": "fcb61e4d52d6cc295c8507307aa290b1",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"count\" : 1,\n  \"transforms\" : [\n    {\n      \"id\" : \"ecommerce-customer-transform\",\n      \"state\" : \"started\",\n      \"node\" : {\n        \"id\" : \"cpTIGMsVQ8Gqwqlxxxxxxx\",\n        \"name\" : \"my.home\",\n        \"ephemeral_id\" : \"5-L21nFsQxxxxxxxxxx-xx\",\n        \"transport_address\" : \"127.0.0.1:9300\",\n        \"attributes\" : { }\n      },\n      \"stats\" : {\n        \"pages_processed\" : 78,\n        \"documents_processed\" : 6027,\n        \"documents_indexed\" : 68,\n        \"trigger_count\" : 168,\n        \"index_time_in_ms\" : 412,\n        \"index_total\" : 20,\n        \"index_failures\" : 0,\n        \"search_time_in_ms\" : 353,\n        \"search_total\" : 78,\n        \"search_failures\" : 0,\n        \"processing_time_in_ms\" : 8,\n        \"processing_total\" : 78,\n        \"exponential_avg_checkpoint_duration_ms\" : 97.30637923893185,\n        \"exponential_avg_documents_indexed\" : 2.2064915040974062,\n        \"exponential_avg_documents_processed\" : 179.89419945785045\n      },\n      \"checkpointing\" : {\n        \"last\" : {\n          \"checkpoint\" : 20,\n          \"timestamp_millis\" : 1585344558220,\n          \"time_upper_bound_millis\" : 1585344498220\n        },\n        \"changes_last_detected_at\" : 1585344558219\n      }\n    }\n  ]\n}"
  },
  {
    "source_location": {
      "file": "transform/apis/preview-transform.asciidoc",
      "line": 183
    },
    "digest": "a5ee3f40c34bd913a12e0069b6e42611",
    "lang": "console",
    "found": [],
    "source": "POST _transform/_preview\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_ecommerce\"\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"customer_id\": {\n        \"terms\": {\n          \"field\": \"customer_id\"\n        }\n      }\n    },\n    \"aggregations\": {\n      \"max_price\": {\n        \"max\": {\n          \"field\": \"taxful_total_price\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/_preview",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_ecommerce"
          },
          "pivot": {
            "group_by": {
              "customer_id": {
                "terms": {
                  "field": "customer_id"
                }
              }
            },
            "aggregations": {
              "max_price": {
                "max": {
                  "field": "taxful_total_price"
                }
              }
            }
          }
        },
        "params": null,
        "api": "transform.preview_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/start-transform.asciidoc",
      "line": 64
    },
    "digest": "01bc0f2ed30eb3dd23511d01ce0ac6e1",
    "lang": "console",
    "found": [],
    "source": "POST _transform/ecommerce_transform/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/ecommerce_transform/_start",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce_transform"
        },
        "api": "transform.start_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/start-transform.asciidoc",
      "line": 72
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "transform/apis/stop-transform.asciidoc",
      "line": 95
    },
    "digest": "654882f545eca8d7047695f867c63072",
    "lang": "console",
    "found": [],
    "source": "POST _transform/ecommerce_transform/_stop",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/ecommerce_transform/_stop",
        "query": null,
        "body": null,
        "params": {
          "transform_id": "ecommerce_transform"
        },
        "api": "transform.stop_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/stop-transform.asciidoc",
      "line": 103
    },
    "digest": "aff76d64e6270a13c3274869f9abc3a9",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"acknowledged\" : true\n}"
  },
  {
    "source_location": {
      "file": "transform/apis/update-transform.asciidoc",
      "line": 166
    },
    "digest": "27384266370152add76471dd0332a2f1",
    "lang": "console",
    "found": [],
    "source": "POST _transform/simple-kibana-ecomm-pivot/_update\n{\n  \"source\": {\n    \"index\": \"kibana_sample_data_ecommerce\",\n    \"query\": {\n      \"term\": {\n        \"geoip.continent_name\": {\n          \"value\": \"Asia\"\n        }\n      }\n    }\n  },\n  \"description\": \"Maximum priced ecommerce data by customer_id in Asia\",\n  \"dest\": {\n    \"index\": \"kibana_sample_data_ecommerce_transform_v2\",\n    \"pipeline\": \"add_timestamp_pipeline\"\n  },\n  \"frequency\": \"15m\",\n  \"sync\": {\n    \"time\": {\n      \"field\": \"order_date\",\n      \"delay\": \"120s\"\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_transform/simple-kibana-ecomm-pivot/_update",
        "query": null,
        "body": {
          "source": {
            "index": "kibana_sample_data_ecommerce",
            "query": {
              "term": {
                "geoip.continent_name": {
                  "value": "Asia"
                }
              }
            }
          },
          "description": "Maximum priced ecommerce data by customer_id in Asia",
          "dest": {
            "index": "kibana_sample_data_ecommerce_transform_v2",
            "pipeline": "add_timestamp_pipeline"
          },
          "frequency": "15m",
          "sync": {
            "time": {
              "field": "order_date",
              "delay": "120s"
            }
          }
        },
        "params": {
          "transform_id": "simple-kibana-ecomm-pivot"
        },
        "api": "transform.update_transform"
      }
    ]
  },
  {
    "source_location": {
      "file": "transform/apis/update-transform.asciidoc",
      "line": 198
    },
    "digest": "1bc0493d9bfb39c9f2a1e46010beaf87",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"id\": \"simple-kibana-ecomm-pivot\",\n  \"source\": {\n    \"index\": [\"kibana_sample_data_ecommerce\"],\n    \"query\": {\n      \"term\": {\n        \"geoip.continent_name\": {\n          \"value\": \"Asia\"\n        }\n      }\n    }\n  },\n  \"pivot\": {\n    \"group_by\": {\n      \"customer_id\": {\n        \"terms\": {\n          \"field\": \"customer_id\"\n        }\n      }\n    },\n    \"aggregations\": {\n      \"max_price\": {\n        \"max\": {\n          \"field\": \"taxful_total_price\"\n        }\n      }\n    }\n  },\n  \"description\": \"Maximum priced ecommerce data by customer_id in Asia\",\n  \"dest\": {\n    \"index\": \"kibana_sample_data_ecommerce_transform_v2\",\n    \"pipeline\": \"add_timestamp_pipeline\"\n  },\n  \"frequency\": \"15m\",\n  \"sync\": {\n    \"time\": {\n      \"field\": \"order_date\",\n      \"delay\": \"120s\"\n    }\n  },\n  \"version\": \"7.5.0\",\n  \"create_time\": 1518808660505\n}"
  },
  {
    "source_location": {
      "file": "rest-api/usage.asciidoc",
      "line": 32
    },
    "digest": "43fe75fa9f3fca846598fdad58fd98cb",
    "lang": "console",
    "found": [],
    "source": "GET /_xpack/usage",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_xpack/usage",
        "query": null,
        "body": null,
        "params": null,
        "api": "xpack.usage"
      }
    ]
  },
  {
    "source_location": {
      "file": "rest-api/usage.asciidoc",
      "line": 37
    },
    "digest": "78dc26d3bb2769c5f668aabef8a4f060",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"security\" : {\n    \"available\" : true,\n    \"enabled\" : false,\n    \"ssl\" : {\n      \"http\" : {\n        \"enabled\" : false\n      },\n      \"transport\" : {\n        \"enabled\" : false\n      }\n    }\n  },\n  \"monitoring\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"collection_enabled\" : false,\n    \"enabled_exporters\" : {\n      \"local\" : 1\n    }\n  },\n  \"watcher\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"execution\" : {\n      \"actions\" : {\n        \"_all\" : {\n          \"total\" : 0,\n          \"total_time_in_ms\" : 0\n        }\n      }\n    },\n    \"watch\" : {\n      \"input\" : {\n        \"_all\" : {\n          \"total\" : 0,\n          \"active\" : 0\n        }\n      },\n      \"trigger\" : {\n        \"_all\" : {\n          \"total\" : 0,\n          \"active\" : 0\n        }\n      }\n    },\n    \"count\" : {\n      \"total\" : 0,\n      \"active\" : 0\n    }\n  },\n  \"graph\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"ml\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"jobs\" : {\n      \"_all\" : {\n        \"count\" : 0,\n        \"detectors\" : {\n          ...\n        },\n        \"created_by\" : { },\n        \"model_size\" : {\n          ...\n        },\n        \"forecasts\" : {\n          \"total\" : 0,\n          \"forecasted_jobs\" : 0\n        }\n      }\n    },\n    \"datafeeds\" : {\n      \"_all\" : {\n        \"count\" : 0\n      }\n    },\n    \"data_frame_analytics_jobs\" : {\n      \"_all\" : {\n        \"count\" : 0\n      }\n    },\n    \"inference\" : {\n      \"ingest_processors\" : {\n        \"_all\" : {\n          \"num_docs_processed\" : {\n            \"max\" : 0,\n            \"sum\" : 0,\n            \"min\" : 0\n          },\n          \"pipelines\" : {\n            \"count\" : 0\n          },\n          \"num_failures\" : {\n            \"max\" : 0,\n            \"sum\" : 0,\n            \"min\" : 0\n          },\n          \"time_ms\" : {\n            \"max\" : 0,\n            \"sum\" : 0,\n            \"min\" : 0\n          }\n        }\n      },\n      \"trained_models\" : {\n        \"_all\" : {\n          \"count\" : 0\n        }\n      }\n    },\n    \"node_count\" : 1\n  },\n  \"logstash\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"eql\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"sql\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"features\" : {\n      \"having\" : 0,\n      \"subselect\" : 0,\n      \"limit\" : 0,\n      \"orderby\" : 0,\n      \"where\" : 0,\n      \"join\" : 0,\n      \"groupby\" : 0,\n      \"command\" : 0,\n      \"local\" : 0\n    },\n    \"queries\" : {\n      \"rest\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"cli\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"canvas\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"odbc\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"jdbc\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"odbc32\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"odbc64\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"_all\" : {\n        \"total\" : 0,\n        \"paging\" : 0,\n        \"failed\" : 0\n      },\n      \"translate\" : {\n        \"count\" : 0\n      }\n    }\n  },\n  \"rollup\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"ilm\" : {\n    \"policy_count\" : 3,\n    \"policy_stats\" : [\n      ...\n    ]\n  },\n  \"slm\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"ccr\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"follower_indices_count\" : 0,\n    \"auto_follow_patterns_count\" : 0\n  },\n  \"transform\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"vectors\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"dense_vector_fields_count\" : 0,\n    \"dense_vector_dims_avg_count\" : 0\n  },\n  \"voting_only\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"frozen_indices\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"indices_count\" : 0\n  },\n  \"spatial\" : {\n    \"available\" : true,\n    \"enabled\" : true\n  },\n  \"analytics\" : {\n    \"available\" : true,\n    \"enabled\" : true,\n    \"stats\": {\n      \"boxplot_usage\" : 0,\n      \"top_metrics_usage\" : 0,\n      \"cumulative_cardinality_usage\" : 0,\n      \"t_test_usage\" : 0,\n      \"string_stats_usage\" : 0\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 62
    },
    "digest": "7a1b94de1cbb90b0f06ff8631a70236a",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/my_watch\n{\n  \"trigger\": {\n    \"schedule\": {\n      \"hourly\": {\n        \"minute\": [ 0, 5 ]\n      }\n    }\n  },\n  \"input\": {\n    \"simple\": {\n      \"payload\": {\n        \"send\": \"yes\"\n      }\n    }\n  },\n  \"condition\": {\n    \"always\": {}\n  },\n  \"actions\": {\n    \"test_index\": {\n      \"throttle_period\": \"15m\",\n      \"index\": {\n        \"index\": \"test\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "hourly": {
                "minute": [
                  0,
                  5
                ]
              }
            }
          },
          "input": {
            "simple": {
              "payload": {
                "send": "yes"
              }
            }
          },
          "condition": {
            "always": {}
          },
          "actions": {
            "test_index": {
              "throttle_period": "15m",
              "index": {
                "index": "test"
              }
            }
          }
        },
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 98
    },
    "digest": "e827a9040e137410d62d10bb3b3cbb71",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 105
    },
    "digest": "e2d293db79f536e0cd31d3a6871a2642",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"_version\": 1,\n  \"_id\": \"my_watch\",\n  \"status\": {\n    \"version\": 1,\n    \"actions\": {\n      \"test_index\": {\n        \"ack\": {\n          \"timestamp\": \"2015-05-26T18:04:27.723Z\",\n          \"state\": \"awaits_successful_execution\"\n        }\n      }\n    },\n    \"state\": ...\n  },\n  \"watch\": ...\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 136
    },
    "digest": "bdc1afd2181154bb78797360f9dbb1a0",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_execute\n{\n  \"record_execution\" : true\n}\n\nGET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_execute",
        "query": null,
        "body": {
          "record_execution": true
        },
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.execute_watch"
      },
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 149
    },
    "digest": "97c12a82b244e88ca1b3b3c707401b96",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"my_watch\",\n  \"_seq_no\": 1,\n  \"_primary_term\": 1,\n  \"_version\": 2,\n  \"status\": {\n    \"version\": 2,\n    \"actions\": {\n      \"test_index\": {\n        \"ack\": {\n          \"timestamp\": \"2015-05-26T18:04:27.723Z\",\n          \"state\": \"ackable\"\n        },\n        \"last_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.723Z\",\n          \"successful\": true\n        },\n        \"last_successful_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.723Z\",\n          \"successful\": true\n        }\n      }\n    },\n    \"state\": ...,\n    \"execution_state\": \"executed\",\n    \"last_checked\": ...,\n    \"last_met_condition\": ...\n  },\n  \"watch\": ...\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 192
    },
    "digest": "1b0dc9d076bbb58c6a2953ef4323d2fc",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/my_watch/_ack/test_index\nGET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/my_watch/_ack/test_index",
        "query": null,
        "body": null,
        "params": {
          "watch_id": "my_watch",
          "action_id": "test_index"
        },
        "api": "watcher.ack_watch"
      },
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 199
    },
    "digest": "1cfe00b731a1fdf0b2add0688c43a1c2",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"my_watch\",\n  \"_seq_no\": 2,\n  \"_primary_term\": 1,\n  \"_version\": 3,\n  \"status\": {\n    \"version\": 3,\n    \"actions\": {\n      \"test_index\": {\n        \"ack\": {\n          \"timestamp\": \"2015-05-26T18:04:27.723Z\",\n          \"state\": \"acked\"\n        },\n        \"last_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.723Z\",\n          \"successful\": true\n        },\n        \"last_successful_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.723Z\",\n          \"successful\": true\n        }\n      }\n    },\n    \"state\": ...,\n    \"execution_state\": \"executed\",\n    \"last_checked\": ...,\n    \"last_met_condition\": ...\n  },\n  \"watch\": ...\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 247
    },
    "digest": "8051766cadded0892290bc2cc06e145c",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_ack/action1,action2",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_ack/action1,action2",
        "query": null,
        "body": null,
        "params": {
          "watch_id": "my_watch",
          "action_id": "action1,action2"
        },
        "api": "watcher.ack_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 255
    },
    "digest": "df7dbac966b67404b8bfa9cdda5ef480",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_ack",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_ack",
        "query": null,
        "body": null,
        "params": {
          "watch_id": "my_watch"
        },
        "api": "watcher.ack_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/ack-watch.asciidoc",
      "line": 264
    },
    "digest": "545a911f3f261e048a8affc77fa29a5d",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"status\": {\n    \"state\": {\n      \"active\": true,\n      \"timestamp\": \"2015-05-26T18:04:27.723Z\"\n    },\n    \"last_checked\": \"2015-05-26T18:04:27.753Z\",\n    \"last_met_condition\": \"2015-05-26T18:04:27.763Z\",\n    \"actions\": {\n      \"test_index\": {\n        \"ack\" : {\n          \"timestamp\": \"2015-05-26T18:04:27.713Z\",\n          \"state\": \"acked\"\n        },\n        \"last_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.733Z\",\n          \"successful\": true\n        },\n        \"last_successful_execution\" : {\n          \"timestamp\": \"2015-05-25T18:04:27.773Z\",\n          \"successful\": true\n        }\n      }\n    },\n    \"execution_state\": \"executed\",\n    \"version\": 2\n  }\n}\n"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/activate-watch.asciidoc",
      "line": 50
    },
    "digest": "e827a9040e137410d62d10bb3b3cbb71",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/activate-watch.asciidoc",
      "line": 56
    },
    "digest": "6ab4f67649c21d637ec8a0ce72fd0d7c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"my_watch\",\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"_version\": 1,\n  \"status\": {\n    \"state\" : {\n      \"active\" : false,\n      \"timestamp\" : \"2015-08-20T12:21:32.734Z\"\n    },\n    \"actions\": ...,\n    \"version\": 1\n  },\n  \"watch\": ...\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/activate-watch.asciidoc",
      "line": 82
    },
    "digest": "3477a89d869b1f7f72d50c2ca86c4679",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/my_watch/_activate",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/my_watch/_activate",
        "query": null,
        "body": null,
        "params": {
          "watch_id": "my_watch"
        },
        "api": "watcher.activate_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/activate-watch.asciidoc",
      "line": 90
    },
    "digest": "67f8c67c5dce82121a87f60160071133",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"status\": {\n    \"state\" : {\n      \"active\" : true,\n      \"timestamp\" : \"2015-09-04T08:39:46.816Z\"\n    },\n    \"actions\": ...,\n    \"version\": 1\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/deactivate-watch.asciidoc",
      "line": 50
    },
    "digest": "e827a9040e137410d62d10bb3b3cbb71",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/deactivate-watch.asciidoc",
      "line": 56
    },
    "digest": "c924b17f4d746145e67e12ddcc126a6f",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"my_watch\",\n  \"_version\": 1,\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"status\": {\n    \"state\" : {\n      \"active\" : true,\n      \"timestamp\" : \"2015-08-20T12:21:32.734Z\"\n    },\n    \"actions\": ...,\n    \"version\": 1\n  },\n  \"watch\": ...\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/deactivate-watch.asciidoc",
      "line": 82
    },
    "digest": "f63f6343e74bd5c844854272e746de14",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/my_watch/_deactivate",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/my_watch/_deactivate",
        "query": null,
        "body": null,
        "params": {
          "watch_id": "my_watch"
        },
        "api": "watcher.deactivate_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/deactivate-watch.asciidoc",
      "line": 90
    },
    "digest": "6a25b3650607fe28bab83484ddf9a98c",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"status\": {\n    \"state\" : {\n      \"active\" : false,\n      \"timestamp\" : \"2015-09-04T08:39:46.816Z\"\n    },\n    \"actions\": ...,\n    \"version\": 1\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/delete-watch.asciidoc",
      "line": 60
    },
    "digest": "2aa548b692fc2fe7b6f0d90eb8b2ae29",
    "lang": "console",
    "found": [],
    "source": "DELETE _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "DELETE",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.delete_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/delete-watch.asciidoc",
      "line": 68
    },
    "digest": "83597138e92b7b938bddf80b550eeed9",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"found\": true,\n   \"_id\": \"my_watch\",\n   \"_version\": 2\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 147
    },
    "digest": "01dc7bdc223bd651574ed2d3954a5b1c",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_execute",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_execute",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 155
    },
    "digest": "f6eff830fb0fad200ebfb1e3e46f6f0e",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_execute\n{\n  \"trigger_data\" : { <1>\n     \"triggered_time\" : \"now\",\n     \"scheduled_time\" : \"now\"\n  },\n  \"alternative_input\" : { <2>\n    \"foo\" : \"bar\"\n  },\n  \"ignore_condition\" : true, <3>\n  \"action_modes\" : {\n    \"my-action\" : \"force_simulate\" <4>\n  },\n  \"record_execution\" : true <5>\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_execute",
        "query": null,
        "body": {
          "trigger_data": {
            "triggered_time": "now",
            "scheduled_time": "now"
          },
          "alternative_input": {
            "foo": "bar"
          },
          "ignore_condition": true,
          "action_modes": {
            "my-action": "force_simulate"
          },
          "record_execution": true
        },
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 188
    },
    "digest": "c017830af8d4720a5f60c0f142ed348b",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"_id\": \"my_watch_0-2015-06-02T23:17:55.124Z\", <1>\n  \"watch_record\": { <2>\n    \"watch_id\": \"my_watch\",\n    \"node\": \"my_node\",\n    \"messages\": [],\n    \"trigger_event\": {\n      \"type\": \"manual\",\n      \"triggered_time\": \"2015-06-02T23:17:55.124Z\",\n      \"manual\": {\n        \"schedule\": {\n          \"scheduled_time\": \"2015-06-02T23:17:55.124Z\"\n        }\n      }\n    },\n    \"state\": \"executed\",\n    \"status\": {\n      \"version\": 1,\n      \"execution_state\": \"executed\",\n      \"state\": {\n        \"active\": true,\n        \"timestamp\": \"2015-06-02T23:17:55.111Z\"\n      },\n      \"last_checked\": \"2015-06-02T23:17:55.124Z\",\n      \"last_met_condition\": \"2015-06-02T23:17:55.124Z\",\n      \"actions\": {\n        \"test_index\": {\n          \"ack\": {\n            \"timestamp\": \"2015-06-02T23:17:55.124Z\",\n            \"state\": \"ackable\"\n          },\n          \"last_execution\": {\n            \"timestamp\": \"2015-06-02T23:17:55.124Z\",\n            \"successful\": true\n          },\n          \"last_successful_execution\": {\n            \"timestamp\": \"2015-06-02T23:17:55.124Z\",\n            \"successful\": true\n          }\n        }\n      }\n    },\n    \"input\": {\n      \"simple\": {\n        \"payload\": {\n          \"send\": \"yes\"\n        }\n      }\n    },\n    \"condition\": {\n      \"always\": {}\n    },\n    \"result\": { <3>\n      \"execution_time\": \"2015-06-02T23:17:55.124Z\",\n      \"execution_duration\": 12608,\n      \"input\": {\n        \"type\": \"simple\",\n        \"payload\": {\n          \"foo\": \"bar\"\n        },\n        \"status\": \"success\"\n      },\n      \"condition\": {\n        \"type\": \"always\",\n        \"met\": true,\n        \"status\": \"success\"\n      },\n      \"actions\": [\n        {\n          \"id\": \"test_index\",\n          \"index\": {\n            \"response\": {\n              \"index\": \"test\",\n              \"version\": 1,\n              \"created\": true,\n              \"result\": \"created\",\n              \"id\": \"AVSHKzPa9zx62AzUzFXY\"\n            }\n          },\n          \"status\": \"success\",\n          \"type\": \"index\"\n        }\n      ]\n    },\n    \"user\": \"test_admin\" <4>\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 297
    },
    "digest": "7f37031fb40b68a61255b7c71d7eed0b",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_execute\n{\n  \"action_modes\" : {\n    \"action1\" : \"force_simulate\",\n    \"action2\" : \"skip\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_execute",
        "query": null,
        "body": {
          "action_modes": {
            "action1": "force_simulate",
            "action2": "skip"
          }
        },
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 312
    },
    "digest": "9cf6c7012a4f2bb562bc256aa28c3409",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/my_watch/_execute\n{\n  \"action_modes\" : {\n    \"_all\" : \"force_execute\"\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/my_watch/_execute",
        "query": null,
        "body": {
          "action_modes": {
            "_all": "force_execute"
          }
        },
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 325
    },
    "digest": "9cd37d0ccbc66ad47ddb626564b27cc8",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/_execute\n{\n  \"watch\" : {\n    \"trigger\" : { \"schedule\" : { \"interval\" : \"10s\" } },\n    \"input\" : {\n      \"search\" : {\n        \"request\" : {\n          \"indices\" : [ \"logs\" ],\n          \"body\" : {\n            \"query\" : {\n              \"match\" : { \"message\": \"error\" }\n            }\n          }\n        }\n      }\n    },\n    \"condition\" : {\n      \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 }}\n    },\n    \"actions\" : {\n      \"log_error\" : {\n        \"logging\" : {\n          \"text\" : \"Found {{ctx.payload.hits.total}} errors in the logs\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/_execute",
        "query": null,
        "body": {
          "watch": {
            "trigger": {
              "schedule": {
                "interval": "10s"
              }
            },
            "input": {
              "search": {
                "request": {
                  "indices": [
                    "logs"
                  ],
                  "body": {
                    "query": {
                      "match": {
                        "message": "error"
                      }
                    }
                  }
                }
              }
            },
            "condition": {
              "compare": {
                "ctx.payload.hits.total": {
                  "gt": 0
                }
              }
            },
            "actions": {
              "log_error": {
                "logging": {
                  "text": "Found {{ctx.payload.hits.total}} errors in the logs"
                }
              }
            }
          }
        },
        "params": null,
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/execute-watch.asciidoc",
      "line": 361
    },
    "digest": "10b924bf6298aa6157ed00ce12f8edc1",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/watch/_execute\n{\n  \"ignore_condition\" : true,\n  \"watch\" : {\n    \"trigger\" : { \"schedule\" : { \"interval\" : \"10s\" } },\n    \"input\" : {\n      \"search\" : {\n        \"request\" : {\n          \"indices\" : [ \"logs\" ],\n          \"body\" : {\n            \"query\" : {\n              \"match\" : { \"message\": \"error\" }\n            }\n          }\n        }\n      }\n    },\n    \"condition\" : {\n      \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 }}\n    },\n    \"actions\" : {\n      \"log_error\" : {\n        \"logging\" : {\n          \"text\" : \"Found {{ctx.payload.hits.total}} errors in the logs\"\n        }\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/watch/_execute",
        "query": null,
        "body": {
          "ignore_condition": true,
          "watch": {
            "trigger": {
              "schedule": {
                "interval": "10s"
              }
            },
            "input": {
              "search": {
                "request": {
                  "indices": [
                    "logs"
                  ],
                  "body": {
                    "query": {
                      "match": {
                        "message": "error"
                      }
                    }
                  }
                }
              }
            },
            "condition": {
              "compare": {
                "ctx.payload.hits.total": {
                  "gt": 0
                }
              }
            },
            "actions": {
              "log_error": {
                "logging": {
                  "text": "Found {{ctx.payload.hits.total}} errors in the logs"
                }
              }
            }
          }
        },
        "params": null,
        "api": "watcher.execute_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/get-watch.asciidoc",
      "line": 49
    },
    "digest": "e827a9040e137410d62d10bb3b3cbb71",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/watch/my_watch",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/watch/my_watch",
        "query": null,
        "body": null,
        "params": {
          "id": "my_watch"
        },
        "api": "watcher.get_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/get-watch.asciidoc",
      "line": 57
    },
    "digest": "b27af4671721924c2e449cf6f1e73158",
    "lang": "console-result",
    "found": [],
    "source": "{\n  \"found\": true,\n  \"_id\": \"my_watch\",\n  \"_seq_no\": 0,\n  \"_primary_term\": 1,\n  \"_version\": 1,\n  \"status\": { <1>\n    \"version\": 1,\n    \"state\": {\n      \"active\": true,\n      \"timestamp\": \"2015-05-26T18:21:08.630Z\"\n    },\n    \"actions\": {\n      \"test_index\": {\n        \"ack\": {\n          \"timestamp\": \"2015-05-26T18:21:08.630Z\",\n          \"state\": \"awaits_successful_execution\"\n        }\n      }\n    }\n  },\n  \"watch\": {\n    \"input\": {\n      \"simple\": {\n        \"payload\": {\n          \"send\": \"yes\"\n        }\n      }\n    },\n    \"condition\": {\n      \"always\": {}\n    },\n    \"trigger\": {\n      \"schedule\": {\n        \"hourly\": {\n          \"minute\": [0, 5]\n        }\n      }\n    },\n    \"actions\": {\n      \"test_index\": {\n        \"index\": {\n          \"index\": \"test\"\n        }\n      }\n    }\n  }\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stats.asciidoc",
      "line": 84
    },
    "digest": "17266cee5eaaddf08e5534bf580a1910",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/stats",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/stats",
        "query": null,
        "body": null,
        "params": null,
        "api": "watcher.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stats.asciidoc",
      "line": 112
    },
    "digest": "3ed79871d956bfb2d6d2721d7272520c",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/stats?metric=current_watches",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/stats",
        "query": {
          "metric": "current_watches"
        },
        "body": null,
        "params": null,
        "api": "watcher.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stats.asciidoc",
      "line": 119
    },
    "digest": "56b6b50b174a935d368301ebd717231d",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/stats/current_watches",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/stats/current_watches",
        "query": null,
        "body": null,
        "params": {
          "metric": "current_watches"
        },
        "api": "watcher.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stats.asciidoc",
      "line": 163
    },
    "digest": "6244204213f60edf2f23295f9059f2c9",
    "lang": "console",
    "found": [],
    "source": "GET _watcher/stats/queued_watches",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_watcher/stats/queued_watches",
        "query": null,
        "body": null,
        "params": {
          "metric": "queued_watches"
        },
        "api": "watcher.stats"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/put-watch.asciidoc",
      "line": 117
    },
    "digest": "3a12feb0de224bfaaf518d95b9f516ff",
    "lang": "console",
    "found": [],
    "source": "PUT _watcher/watch/my-watch\n{\n  \"trigger\" : {\n    \"schedule\" : { \"cron\" : \"0 0/1 * * * ?\" }\n  },\n  \"input\" : {\n    \"search\" : {\n      \"request\" : {\n        \"indices\" : [\n          \"logstash*\"\n        ],\n        \"body\" : {\n          \"query\" : {\n            \"bool\" : {\n              \"must\" : {\n                \"match\": {\n                   \"response\": 404\n                }\n              },\n              \"filter\" : {\n                \"range\": {\n                  \"@timestamp\": {\n                    \"from\": \"{{ctx.trigger.scheduled_time}}||-5m\",\n                    \"to\": \"{{ctx.trigger.triggered_time}}\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"condition\" : {\n    \"compare\" : { \"ctx.payload.hits.total\" : { \"gt\" : 0 }}\n  },\n  \"actions\" : {\n    \"email_admin\" : {\n      \"email\" : {\n        \"to\" : \"admin@domain.host.com\",\n        \"subject\" : \"404 recently encountered\"\n      }\n    }\n  }\n}",
    "parsed_source": [
      {
        "method": "PUT",
        "url": "/_watcher/watch/my-watch",
        "query": null,
        "body": {
          "trigger": {
            "schedule": {
              "cron": "0 0/1 * * * ?"
            }
          },
          "input": {
            "search": {
              "request": {
                "indices": [
                  "logstash*"
                ],
                "body": {
                  "query": {
                    "bool": {
                      "must": {
                        "match": {
                          "response": 404
                        }
                      },
                      "filter": {
                        "range": {
                          "@timestamp": {
                            "from": "{{ctx.trigger.scheduled_time}}||-5m",
                            "to": "{{ctx.trigger.triggered_time}}"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "condition": {
            "compare": {
              "ctx.payload.hits.total": {
                "gt": 0
              }
            }
          },
          "actions": {
            "email_admin": {
              "email": {
                "to": "admin@domain.host.com",
                "subject": "404 recently encountered"
              }
            }
          }
        },
        "params": {
          "id": "my-watch"
        },
        "api": "watcher.put_watch"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/start.asciidoc",
      "line": 43
    },
    "digest": "97ea5ab17213cb1faaf6f3ea13607098",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/_start",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/_start",
        "query": null,
        "body": null,
        "params": null,
        "api": "watcher.start"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/start.asciidoc",
      "line": 50
    },
    "digest": "647803854da1f06200d471a2937e105c",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stop.asciidoc",
      "line": 43
    },
    "digest": "6b1336ff477f91d4a0db0b06db546ff0",
    "lang": "console",
    "found": [],
    "source": "POST _watcher/_stop",
    "parsed_source": [
      {
        "method": "POST",
        "url": "/_watcher/_stop",
        "query": null,
        "body": null,
        "params": null,
        "api": "watcher.stop"
      }
    ]
  },
  {
    "source_location": {
      "file": "../../x-pack/docs/en/rest-api/watcher/stop.asciidoc",
      "line": 50
    },
    "digest": "647803854da1f06200d471a2937e105c",
    "lang": "console-result",
    "found": [],
    "source": "{\n   \"acknowledged\": true\n}"
  },
  {
    "source_location": {
      "file": "migration/migrate_8_0/snapshots.asciidoc",
      "line": 20
    },
    "digest": "6458a2377155ecbdd2d3ebd0e1529201",
    "lang": "console",
    "found": [],
    "source": "GET _snapshot/repo1/snap1",
    "parsed_source": [
      {
        "method": "GET",
        "url": "/_snapshot/repo1/snap1",
        "query": null,
        "body": null,
        "params": {
          "repository": "repo1",
          "snapshot": "snap1"
        },
        "api": "snapshot.get"
      }
    ]
  },
  {
    "source_location": {
      "file": "migration/migrate_8_0/snapshots.asciidoc",
      "line": 28
    },
    "digest": "97eab207747d5ad2e1f6d3b84971d74b",
    "lang": "console-result",
    "found": [],
    "source": "{\n    \"responses\": [\n        {\n            \"repository\": \"repo1\",\n            \"snapshots\": [\n                {\n                    \"snapshot\": \"snap1\",\n                    \"uuid\": \"cEzdqUKxQ5G6MyrJAcYwmA\",\n                    \"version_id\": 8000099,\n                    \"version\": \"8.0.0\",\n                    \"indices\": [],\n                    \"include_global_state\": true,\n                    \"state\": \"SUCCESS\",\n                    \"start_time\": \"2019-05-10T17:01:57.868Z\",\n                    \"start_time_in_millis\": 1557507717868,\n                    \"end_time\": \"2019-05-10T17:01:57.909Z\",\n                    \"end_time_in_millis\": 1557507717909,\n                    \"duration_in_millis\": 41,\n                    \"failures\": [],\n                    \"shards\": {\n                        \"total\": 0,\n                        \"failed\": 0,\n                        \"successful\": 0\n                    }\n                }\n            ]\n        }\n    ]\n}"
  }
]