version: '3.2'
services:
  client:
    image: docker.elastic.co/clients/elasticsearch-ruby:${RUBY_TEST_VERSION:-2.6.1}
    build:
      context: ../../
      dockerfile: .ci/Dockerfile
      args:
          RUBY_TEST_VERSION: ${RUBY_TEST_VERSION:-2.6.1}
          ELASTICSEARCH_VERSION: ${ELASTICSEARCH_VERSION:-7.0.0-beta1}
          TEST_SUITE: ${TEST_SUITE:-client}
          ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-changeme}
    environment:
      - "TEST_ES_SERVER=http://elasticsearch:9200"
    volumes:
      - esvol:/tmp
    networks:
      - esnet
    depends_on:
      - elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION:-7.0.0-beta1}
    networks:
      - esnet
    environment:
      - "node.attr.testattr=test"
      - "path.repo=/tmp"
      - "repositories.url.allowed_urls=http://snapshot.*"
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "ELASTIC_PASSWORD=changeme"
      - "xpack.security.enabled=true"
      - "xpack.license.self_generated.type=trial"
      - "xpack.security.http.ssl.enabled=true"
      # 'certificate' Verifies that the provided certificate is signed by a trusted authority (CA),
      #    but does not perform any hostname verification.
      - "xpack.security.http.ssl.verification_mode=certificate"
      - "xpack.security.http.ssl.key=certs/testnode.key"
      - "xpack.security.http.ssl.certificate=certs/testnode.crt"
      - "xpack.security.http.ssl.certificate_authorities=certs/ca.crt"
      - "xpack.security.transport.ssl.enabled=true"
      - "xpack.security.transport.ssl.key=certs/testnode.key"
      - "xpack.security.transport.ssl.certificate=certs/testnode.crt"
      - "xpack.security.transport.ssl.certificate_authorities=certs/ca.crt"
    volumes:
      - "../certs/testnode.crt:/usr/share/elasticsearch/config/certs/testnode.crt"
      - "../certs/testnode.key:/usr/share/elasticsearch/config/certs/testnode.key"
      - "../certs/ca.crt:/usr/share/elasticsearch/config/certs/ca.crt"
networks:
  # we need two networks otherwise the two ES instances will join each other
  esnet:
volumes:
  esvol:
