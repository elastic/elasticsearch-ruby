#!/usr/bin/env groovy

library identifier: 'apm@current',
retriever: modernSCM(
  [$class: 'GitSCMSource',
  credentialsId: 'f94e9298-83ae-417e-ba91-85c279771570',
  id: '37cf2c00-2cc7-482e-8c62-7bbffef475e2',
  remote: 'git@github.com:elastic/apm-pipeline-library.git'])

pipeline {
  // Telling Jenkins which kind of machine should be used to run the test.
  agent {
    label 'docker && immutable'
  }

  environment {
    REPO = 'elasticsearch-ruby'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    HOME = "${env.WORKSPACE}"
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }

  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }

  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: false)
        // Stashes the git checkout
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }

    stage('Install dependencies') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        // Acceses the stash
        unstash 'source'
        script {
          docker.image('ruby:2.6').inside(){
            dir("${BASE_DIR}"){
              sh 'git --version'
              sh '''gem update --system
                    gem uninstall bundler
                    gem install bundler'''
              sh 'bundle install'
              sh '''bundle exec rake bundle:clean
                    rake bundle:install'''
            }
          }
        }
        // Stashes dependencies
        stash allowEmpty: true, name: 'source-dependencies', useDefaultExcludes: false
      }
    }

    stage('Unit test') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source-dependencies'
        script {
          docker.image('ruby:2.6').inside(){
            dir("${BASE_DIR}"){
              sh 'bundle exec rake test:unit'
            }
          }
        }
      }
    }

    stage('OSS integration test') {
      options { skipDefaultCheckout() }
      environment {
        TEST_ES_SERVER = 'http://elasticsearch:9200'
      }
      steps {
        deleteDir()
        unstash 'source-dependencies'
        dir("${BASE_DIR}"){
          sh(label: 'Start Elasticsearch', script: './scripts/es-docker.sh --detach')
        }
         script {
          rubyImage() {
            dir("${BASE_DIR}"){
              sh(label: 'Run Rest API test rake task', script: 'bundle exec rake test:rest_api')
            }
          }
         }
        sh(label: 'Stop Elasticsearch', script: 'docker kill $(docker ps -q)')
      }
    }

   // stage('xPack integration test') {
   //  options { skipDefaultCheckout() }
   //  environment {
   //    TEST_ES_SERVER = 'elasticsearch:9200'
   //    ELASTIC_PASSWORD=changeme'
   //    ELASTIC_USER=elastic
   //    TEST_SUITE=security
   //  }
   //  steps {
   //    deleteDir()
   //    unstash 'source-dependencies'
   //    dir("${BASE_DIR}"){
   //      sh(label: 'Start Elasticsearch', script: './scripts/es-docker-platinum.sh --detach')
   //    }
   //    //script {
   //    //  rubyImage() {
   //    //    dir("${BASE_DIR}"){
   //    //      sh(label: 'Integration test', script: 'bundle exec rake test:security')
   //    //    }
   //    //  }
   //    //}
   //    sh(label: 'Stop Elasticsearch', script: 'docker kill $(docker ps -q)')
   //  }
   //}
  }
}

def rubyImage(Closure body){
  /// Building the docker image. The following path should contain a Dockerfile
  def rubyDocker = docker.build('elasticsearch-ruby', "--build-arg RUBY_TEST_VERSION=2.6 ${BASE_DIR}/.ci/docker")
  rubyDocker.inside('--network=elastic'){
    body()
  }
}

//retry: https://github.com/elastic/elasticsearch-js/commit/c9905c6d241340242b6ccf1e676e27b8f11cb8af