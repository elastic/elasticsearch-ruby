#!/usr/bin/env groovy

library identifier: 'apm@current',
retriever: modernSCM(
  [$class: 'GitSCMSource',
  credentialsId: 'f94e9298-83ae-417e-ba91-85c279771570',
  id: '37cf2c00-2cc7-482e-8c62-7bbffef475e2',
  remote: 'git@github.com:elastic/apm-pipeline-library.git'])

pipeline {
  agent {
    label 'docker && immutable'
  }

  environment {
    REPO = 'elasticsearch-ruby'
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
  }

  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }

  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }

  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: false)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }

    stage('Install dependencies') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        deleteDir()
        unstash 'source'
        script {
          docker.image('ruby:2.6').inside(){
            dir("${BASE_DIR}"){
              sh '''gem update --system
                    gem uninstall bundler
                    gem install bundler'''
              sh 'bundle install'
              sh '''bundle exec rake bundle:clean
                    rake bundle:install'''
            }
          }
        }
        stash allowEmpty: true, name: 'source-dependencies', useDefaultExcludes: false
      }
    }

    stage('Unit test') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
      }
      steps {
        deleteDir()
        unstash 'source-dependencies'
        script {
          docker.image('ruby:2.6').inside(){
            dir("${BASE_DIR}"){
              sh 'bundle exec rake test:unit'
            }
          }
        }
      }
    }

    stage('OSS integration test') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        TEST_ES_SERVER = 'http://elasticsearch:9200'
      }
      steps {
        deleteDir()
        unstash 'source-dependencies'
        dir("${BASE_DIR}"){
          sh(label: 'Start Elasticsearch', script: './scripts/es-docker.sh --detach')
        }
        // script {
        // What's this?
        //  rubyImage() {
        //    dir("${BASE_DIR}"){
        // label?
        //      sh(label: 'Integration test', script: 'bundle exec rake test:rest_api')
        //    }
        //  }
        // }
        script {
                  docker.image('ruby:2.6').inside(){
                    dir("${BASE_DIR}"){
                      curl -X GET http://elasticsearch:9200
                    }
                  }
                }
        sh(label: 'Stop Elasticsearch', script: 'docker kill $(docker ps -q)')
      }
    }

    stage('xPack integration test') {
      options { skipDefaultCheckout() }
      environment {
        HOME = "${env.WORKSPACE}"
        TEST_ES_SERVER = 'elasticsearch:9200'
        ELASTIC_PASSWORD=changeme'
        ELASTIC_USER=elastic
        TEST_SUITE=security
      }
      steps {
        deleteDir()
        unstash 'source-dependencies'
        dir("${BASE_DIR}"){
          sh(label: 'Start Elasticsearch', script: './scripts/es-docker-platinum.sh --detach')
        }
        //script {
        //  rubyImage() {
        //    dir("${BASE_DIR}"){
        //      sh(label: 'Integration test', script: 'bundle exec rake test:security')
        //    }
        //  }
        //}
        sh(label: 'Stop Elasticsearch', script: 'docker kill $(docker ps -q)')
      }
    }
  }
}

def rubyImage(Closure body){
  def rubyDocker = docker.build('elasticsearch-ruby', "--build-arg RUBY_TEST_VERSION=2.6 ${BASE_DIR}/.ci/docker")
  rubyDocker.inside('--network=elastic'){
    body()
  }
}