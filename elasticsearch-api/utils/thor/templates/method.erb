# Licensed to Elasticsearch B.V under one or more agreements.
# Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
# See the LICENSE file in the project root for more information

module Elasticsearch
<%= '  '*(@namespace_depth+1) %>module API
<%- @module_namespace.each_with_index do |name, i| -%>
  <%= '  '*i %>module <%= name == 'xpack' ? 'XPack' : name.capitalize %>
<%- end -%>
<%= '  '*(@namespace_depth+2) %>module Actions
<%- if @spec['documentation']['description']  %>
  <%= '  '*(@namespace_depth+3) %># <%= @spec['documentation']['description'].gsub("\n", "\n#{'  '*(@namespace_depth+3)}# ") %>
<%- else %>
  <%= '  '*(@namespace_depth+3) %># TODO: Description
<%- end %>
<%= '  '*(@namespace_depth+3) %>#
<%- unless @parts.nil? || @parts.empty? %><%# URL parts -%>
  <%- @parts.each do |name, info| -%>
    <%- info['type'] = 'String' if info['type'] == 'enum' # Rename 'enums' to 'strings' -%>
    <%= '  '*(@namespace_depth+3) + "# @option arguments [#{info['type'] ? info['type'].capitalize : 'String'}] :#{name} #{info['description'] ? info['description'].strip : '[TODO]'}" + ( info['required'] ? ' (*Required*)' : '' ) -%>
    <%= " (options: #{info['options'].join(', '.strip)})" if info['options'] -%>
    <%= "\n" -%>
  <%- end -%>
<%- end -%><%# Body -%>
<%= '  '*(@namespace_depth+3) + '# @option arguments [Hash] :body ' + (@spec['body']['description'] ? @spec['body']['description'].strip : 'TODO: Description') + (@spec['body']['required'] ? ' (*Required*)' : '') + "\n" if @spec['body'] -%>

<%# URL parameters -%>
<%- @params.each do |name,info| -%>
  <%- info['type'] = 'String' if info['type'] == 'enum' # Rename 'enums' to 'strings' -%>
  <%= '  '*(@namespace_depth+5) + "# @option arguments [#{info['type'] ? info['type'].capitalize : 'String'}] :#{name} #{info['description'] ? info['description'].strip : '[TODO]'}" -%>
  <%= '  '*(@namespace_depth+5) +" (options: #{info['options'].join(', ')})" if info['options'] -%>
  <%=  "\n" -%>
<%- end if @spec['url']['parts'] -%>
<%= '  '*(@namespace_depth+3) -%>#
<%# Documentation link -%>
<%= '  '*(@namespace_depth+3) %># @see <%= @spec['documentation']['url'] ? @spec['documentation']['url'] : "[TODO]" %>
<%= '  '*(@namespace_depth+3) %>#
<%# Method definition -%>
<%= '  '*(@namespace_depth+3) -%>def <%= @method_name %>(arguments={})
<%- @required_parts.each do |required| %><%# Arguments -%>
  <%= '  '*(@namespace_depth+4) + "raise ArgumentError, \"Required argument '#{required}' missing\" unless arguments[:#{required}]" + "\n" -%>
<%- end -%>
<%= '  '*(@namespace_depth+4) %>arguments = arguments.clone
<%- @parts.each do |name, info| %>
  <%= '  '*(@namespace_depth+3) + "_#{name}" %> = arguments.delete(:<%=name %>)
<%- end -%>

<%# This is where I need to check what's available %>
<%= '  '*(@namespace_depth+4) %>method = <%= @http_method %>
<%= '  '*(@namespace_depth+4) %>path   = <%= @http_path %>
<%- unless @params.empty? -%>
  <%= '  '*(@namespace_depth+4) %>params = Utils.__validate_and_extract_params arguments, ParamsRegistry.get(__method__)
<%- else -%>
  <%= '  '*(@namespace_depth+4) %>params = {}
<%- end -%>
<% @specific_params.each do |param| %>
  <%= param %>
<% end %>
<%# Perform request %>
<%= '  '*(@namespace_depth+4) %>body   = <%= @spec['body'].nil? ? 'nil' : 'arguments[:body]' %>
<% if ['bulk', 'msearch', 'msearch_template'].include? @method_name %>
  if body.is_a? Array
    payload = Utils.__bulkify(body)
  else
    payload = body
  end

  <%= '  '*(@namespace_depth+3) %>  perform_request(method, path, params, payload, {"Content-Type" => "application/x-ndjson"}).body
<% else %>
  <%= '  '*(@namespace_depth+3) %>perform_request(method, path, params, body).body
<% end %>
<%= '  '*(@namespace_depth+3) %>end
<%# Method, path, params, body  -%>

<%= '  '*(@namespace_depth+3) %># Register this action with its valid params when the module is loaded.
<%= '  '*(@namespace_depth+3) %>#
<%= '  '*(@namespace_depth+3) %># @since 6.2.0
<%- unless @params.empty? -%>
<%= '  '*(@namespace_depth+3) %>ParamsRegistry.register(:<%= @method_name %>, [
<%= '  '*(@namespace_depth+4) %><%= @params.keys.map { |k| ":#{k}" }.join(",\n#{'  '*(@namespace_depth+4)}") %>
<%= '  '*(@namespace_depth+3) %>].freeze)
<%- end -%>

<%- @namespace_depth.downto(1) do |i| -%>
<%= '  '*(i-1) %>end
<%- end if @namespace_depth > 0 -%>
    end
  end
end
